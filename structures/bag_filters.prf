(bag_filters
 (finite_l_filter 0
  (finite_l_filter-2 "" 3790088110
   ("" (skosimp*)
    (("" (expand "is_finite")
      (("" (expand "is_finite" -)
        (("" (lemma "finite_subset")
          (("" (inst - "bag_to_set(A!1)" "bag_to_set(l_filter(A!1, i!1))")
            (("" (assert)
              (("" (expand "subset?")
                (("" (skosimp*)
                  (("" (expand "member")
                    (("" (expand "bag_to_set")
                      (("" (expand "l_filter")
                        (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (finite_l_filter-1 nil 3286213830
   ("" (skosimp*)
    (("" (expand "is_finite")
      (("" (expand "is_finite" -)
        (("" (lemma "finite_subset")
          (("" (inst - "bag_to_set(A!1)" "bag_to_set(l_filter(A!1, i!1))")
            (("1" (assert)
              (("1" (expand "subset?")
                (("1" (skosimp*)
                  (("1" (expand "member")
                    (("1" (expand "bag_to_set")
                      (("1" (expand "l_filter")
                        (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "finite_set") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_bags nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     bag_filters nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (l_filter const-decl "bag" bag_filters nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nil application-judgement "finite_set[T]" bag_filters nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (finite_u_filter 0
  (finite_u_filter-2 "" 3790088110
   ("" (skosimp*)
    (("" (expand "is_finite")
      (("" (expand "is_finite" -)
        (("" (lemma "finite_subset")
          (("" (inst - "bag_to_set(A!1)" "bag_to_set(u_filter(A!1, i!1))")
            (("" (assert)
              (("" (expand "subset?")
                (("" (skosimp*)
                  (("" (expand "member")
                    (("" (expand "bag_to_set")
                      (("" (expand "u_filter")
                        (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (finite_u_filter-1 nil 3286299491
   ("" (skosimp*)
    (("" (expand "is_finite")
      (("" (expand "is_finite" -)
        (("" (lemma "finite_subset")
          (("" (inst - "bag_to_set(A!1)" "bag_to_set(u_filter(A!1, i!1))")
            (("1" (assert)
              (("1" (expand "subset?")
                (("1" (skosimp*)
                  (("1" (expand "member")
                    (("1" (expand "bag_to_set")
                      (("1" (expand "u_filter")
                        (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "finite_set") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_bags nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     bag_filters nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (u_filter const-decl "bag" bag_filters nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nil application-judgement "finite_set[T]" bag_filters nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (l_filter_TCC1 0
  (l_filter_TCC1-1 nil 3286299539
   ("" (skosimp*) (("" (use "finite_l_filter") nil nil)) nil)
   ((T formal-nonempty-type-decl nil bag_filters nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bag type-eq-decl nil bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (finite_l_filter formula-decl nil bag_filters nil))
   shostak
   (l_filter_ subtype "bag_filters.l_filter(bag_filters.A, bag_filters.i)"
    "finite_bag[T]")))
 (u_filter_TCC1 0
  (u_filter_TCC1-1 nil 3286299540
   ("" (skosimp*) (("" (use "finite_u_filter") nil nil)) nil)
   ((T formal-nonempty-type-decl nil bag_filters nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bag type-eq-decl nil bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (finite_u_filter formula-decl nil bag_filters nil))
   shostak
   (u_filter_ subtype "bag_filters.u_filter(bag_filters.A, bag_filters.i)"
    "finite_bag[T]")))
 (l_filter_extract 0
  (l_filter_extract-2 "" 3790088110
   ("" (skosimp*)
    (("" (expand "subbag?")
      (("" (skosimp*)
        (("" (expand "extract")
          (("" (expand "l_filter")
            (("" (lift-if)
              (("" (lift-if)
                (("" (grind)
                  (("" (typepred! "leq")
                    (("" (expand "total_order?")
                      (("" (expand "partial_order?")
                        (("" (expand "preorder?")
                          (("" (expand "reflexive?") (("" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (l_filter_extract-1 nil 3286208518
   ("" (skosimp*)
    (("" (expand "subbag?")
      (("" (skosimp*)
        (("" (expand "extract")
          (("" (expand "l_filter")
            (("" (lift-if)
              (("" (lift-if)
                (("" (grind)
                  (("" (typepred! "leq")
                    (("" (expand "total_order?")
                      (("" (expand "partial_order?")
                        (("" (expand "preorder?")
                          (("" (expand "reflexive?")
                            (("" (grind) nil))))))))))))))))))))))))))
    nil)
   ((subbag? const-decl "bool" bags nil) (extract const-decl "bag" bags nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (preorder? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (l_filter const-decl "bag" bag_filters nil))
   nil))
 (u_filter_extract 0
  (u_filter_extract-2 "" 3790088110
   ("" (skosimp*)
    (("" (expand "subbag?")
      (("" (skosimp*)
        (("" (expand "extract")
          (("" (lift-if)
            (("" (grind)
              (("" (typepred! "leq")
                (("" (expand "total_order?")
                  (("" (expand "partial_order?")
                    (("" (expand "preorder?")
                      (("" (expand "reflexive?") (("" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (u_filter_extract-1 nil 3286208827
   ("" (skosimp*)
    (("" (expand "subbag?")
      (("" (skosimp*)
        (("" (expand "extract")
          (("" (lift-if)
            (("" (grind)
              (("" (typepred! "leq")
                (("" (expand "total_order?")
                  (("" (expand "partial_order?")
                    (("" (expand "preorder?")
                      (("" (expand "reflexive?")
                        (("" (grind) nil))))))))))))))))))))))
    nil)
   ((subbag? const-decl "bool" bags nil) (extract const-decl "bag" bags nil)
    (u_filter const-decl "bag" bag_filters nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (preorder? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil))
   nil))
 (l_filter_singleton 0
  (l_filter_singleton-1 nil 3288828731
   ("" (skosimp*)
    (("" (expand "singleton_bag")
      (("" (expand "l_filter")
        (("" (decompose-equality +)
          (("" (grind) (("" (typepred! "leq") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton_bag const-decl "bag" bags nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (l_filter const-decl "bag" bag_filters nil))
   shostak))
 (u_filter_singleton 0
  (u_filter_singleton-1 nil 3288828789
   ("" (skosimp*)
    (("" (expand "singleton_bag")
      (("" (expand "u_filter")
        (("" (decompose-equality +)
          (("" (grind) (("" (typepred! "leq") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton_bag const-decl "bag" bags nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (u_filter const-decl "bag" bag_filters nil))
   nil))
 (l_filter_subbag 0
  (l_filter_subbag-1 nil 3286208543 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (l_filter const-decl "bag" bag_filters nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (subbag? const-decl "bool" bags nil))
   nil))
 (u_filter_subbag 0
  (u_filter_subbag-1 nil 3286208793 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (u_filter const-decl "bag" bag_filters nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (subbag? const-decl "bool" bags nil))
   nil))
 (l_filter_orders 0
  (l_filter_orders-1 nil 3286208567
   ("" (skosimp*)
    (("" (expand "subbag?")
      (("" (skosimp*)
        (("" (expand "l_filter")
          (("" (lift-if)
            (("" (lift-if)
              (("" (prop)
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (typepred! "leq")
                    (("2" (expand "total_order?")
                      (("2" (expand "partial_order?")
                        (("2" (expand "preorder?")
                          (("2" (expand "transitive?")
                            (("2" (flatten)
                              (("2" (inst - "x!1" "i!1" "v!1")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (lift-if)
                    (("3" (assert) (("3" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subbag? const-decl "bool" bags nil)
    (l_filter const-decl "bag" bag_filters nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (u_filter_orders 0
  (u_filter_orders-1 nil 3286208847
   ("" (skosimp*)
    (("" (expand "subbag?")
      (("" (skosimp*)
        (("" (expand "u_filter")
          (("" (lift-if)
            (("" (lift-if)
              (("" (prop)
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (typepred! "leq")
                    (("2" (expand "total_order?")
                      (("2" (expand "partial_order?")
                        (("2" (expand "preorder?")
                          (("2" (expand "transitive?")
                            (("2" (flatten)
                              (("2" (inst - "v!1" "i!1" "x!1")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred! "leq")
                  (("3" (expand "total_order?")
                    (("3" (expand "partial_order?")
                      (("3" (expand "preorder?")
                        (("3" (expand "transitive?")
                          (("3" (flatten)
                            (("3" (inst - "v!1" "i!1" "x!1")
                              (("3" (assert)
                                (("3" (lift-if) (("3" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subbag? const-decl "bool" bags nil)
    (u_filter const-decl "bag" bag_filters nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (l_filter_orders_2 0
  (l_filter_orders_2-2 "" 3790088111
   ("" (skosimp*)
    (("" (lemma "l_filter_orders")
      (("" (inst?)
        (("" (inst - "v!1")
          (("" (assert)
            (("" (expand "subbag?")
              (("" (skosimp*)
                (("" (inst?)
                  (("" (expand "purge")
                    (("" (lift-if)
                      (("" (split)
                        (("1" (flatten)
                          (("1" (grind)
                            (("1" (typepred! "leq")
                              (("1" (expand "total_order?")
                                (("1" (expand "partial_order?")
                                  (("1" (expand "antisymmetric?")
                                    (("1" (flatten)
                                      (("1"
                                        (inst - "x!1" "i!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (l_filter_orders_2-1 nil 3286208589
   ("" (skosimp*)
    (("" (lemma "l_filter_orders")
      (("" (inst?)
        (("" (inst - "v!1")
          (("" (assert)
            (("" (expand "subbag?")
              (("" (skosimp*)
                (("" (inst?)
                  (("" (expand "purge")
                    (("" (lift-if)
                      (("" (split)
                        (("1" (flatten)
                          (("1" (grind)
                            (("1" (typepred! "leq")
                              (("1" (expand "total_order?")
                                (("1" (expand "partial_order?")
                                  (("1" (expand "antisymmetric?")
                                    (("1" (flatten)
                                      (("1"
                                        (inst - "x!1" "i!1")
                                        (("1" (assert) nil)))))))))))))))))
                         ("2" (flatten) nil))))))))))))))))))))))
    nil)
   ((l_filter_orders formula-decl nil bag_filters nil)
    (subbag? const-decl "bool" bags nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (partial_order? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (l_filter const-decl "bag" bag_filters nil)
    (purge const-decl "bag" bags nil) (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil))
   nil))
 (u_filter_orders_2 0
  (u_filter_orders_2-2 "" 3790088111
   ("" (skosimp*)
    (("" (lemma "u_filter_orders")
      (("" (inst?)
        (("" (inst - "v!1")
          (("" (assert)
            (("" (expand "subbag?")
              (("" (skosimp*)
                (("" (inst?)
                  (("" (expand "purge")
                    (("" (lift-if)
                      (("" (split)
                        (("1" (flatten)
                          (("1" (grind)
                            (("1" (typepred! "leq")
                              (("1" (expand "total_order?")
                                (("1" (expand "partial_order?")
                                  (("1" (expand "antisymmetric?")
                                    (("1" (flatten)
                                      (("1"
                                        (inst - "x!1" "i!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (u_filter_orders_2-1 nil 3286208916
   ("" (skosimp*)
    (("" (lemma "u_filter_orders")
      (("" (inst?)
        (("" (inst - "v!1")
          (("" (assert)
            (("" (expand "subbag?")
              (("" (skosimp*)
                (("" (inst?)
                  (("" (expand "purge")
                    (("" (lift-if)
                      (("" (split)
                        (("1" (flatten)
                          (("1" (grind)
                            (("1" (typepred! "leq")
                              (("1" (expand "total_order?")
                                (("1" (expand "partial_order?")
                                  (("1" (expand "antisymmetric?")
                                    (("1" (flatten)
                                      (("1"
                                        (inst - "x!1" "i!1")
                                        (("1" (assert) nil)))))))))))))))))
                         ("2" (flatten) nil))))))))))))))))))))))
    nil)
   ((u_filter_orders formula-decl nil bag_filters nil)
    (subbag? const-decl "bool" bags nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (partial_order? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (u_filter const-decl "bag" bag_filters nil)
    (purge const-decl "bag" bags nil) (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil))
   nil))
 (l_filter_insert_assoc 0
  (l_filter_insert_assoc-1 nil 3288977504
   ("" (skosimp*)
    (("" (decompose-equality +)
      (("" (expand "insert")
        (("" (lift-if)
          (("" (prop)
            (("1" (replace*)
              (("1" (grind)
                (("1" (typepred! "leq") (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (expand "l_filter")
              (("2" (lift-if) (("2" (prop) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bag type-eq-decl nil bags nil)
    (l_filter const-decl "bag" bag_filters nil)
    (insert const-decl "bag" bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   shostak))
 (u_filter_insert_assoc 0
  (u_filter_insert_assoc-1 nil 3288977602
   ("" (skosimp*)
    (("" (decompose-equality +)
      (("" (expand "insert")
        (("" (lift-if)
          (("" (prop)
            (("1" (replace*)
              (("1" (grind)
                (("1" (typepred! "leq") (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (expand "u_filter")
              (("2" (lift-if) (("2" (prop) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bag type-eq-decl nil bags nil)
    (u_filter const-decl "bag" bag_filters nil)
    (insert const-decl "bag" bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil))
 (l_filter_insert 0
  (l_filter_insert-1 nil 3288960258
   ("" (skosimp*)
    (("" (expand "subbag?") (("" (skosimp*) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((subbag? const-decl "bool" bags nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (insert const-decl "bag" bags nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (l_filter const-decl "bag" bag_filters nil))
   shostak))
 (u_filter_insert 0
  (u_filter_insert-1 nil 3288960287
   ("" (skosimp*)
    (("" (expand "subbag?") (("" (skosimp*) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((subbag? const-decl "bool" bags nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (insert const-decl "bag" bags nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (u_filter const-decl "bag" bag_filters nil))
   shostak))
 (l_filter_purge 0
  (l_filter_purge-2 "" 3790088112
   ("" (grind)
    (("" (typepred! "leq")
      (("" (expand "total_order?")
        (("" (expand "partial_order?")
          (("" (expand "antisymmetric?")
            (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (l_filter_purge-1 nil 3286208612
   ("" (grind)
    (("" (typepred! "leq")
      (("" (expand "total_order?")
        (("" (expand "partial_order?")
          (("" (expand "antisymmetric?")
            (("" (flatten) (("" (inst?) (("" (assert) nil))))))))))))))
    nil)
   ((leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (partial_order? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subbag? const-decl "bool" bags nil) (purge const-decl "bag" bags nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (l_filter const-decl "bag" bag_filters nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (u_filter_purge 0
  (u_filter_purge-2 "" 3790088112
   ("" (grind)
    (("" (typepred! "leq")
      (("" (expand "total_order?")
        (("" (expand "partial_order?")
          (("" (expand "antisymmetric?")
            (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (u_filter_purge-1 nil 3286208954
   ("" (grind)
    (("" (typepred! "leq")
      (("" (expand "total_order?")
        (("" (expand "partial_order?")
          (("" (expand "antisymmetric?")
            (("" (flatten) (("" (inst?) (("" (assert) nil))))))))))))))
    nil)
   ((leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (partial_order? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subbag? const-decl "bool" bags nil) (purge const-decl "bag" bags nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (u_filter const-decl "bag" bag_filters nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (l_u_diff_disj 0
  (l_u_diff_disj-2 "" 3790088112
   ("" (skosimp*)
    (("" (expand "disjoint?")
      (("" (expand "empty?")
        (("" (expand "intersection")
          (("" (skosimp*)
            (("" (expand "min")
              (("" (lift-if)
                (("" (grind)
                  (("" (typepred! "leq")
                    (("" (expand "total_order?")
                      (("" (expand "partial_order?")
                        (("" (expand "antisymmetric?")
                          (("" (flatten)
                            (("" (expand "preorder?")
                              (("" (expand "transitive?")
                                (("" (flatten)
                                  (("" (inst - "i!1" "x!1" "v!1")
                                    (("" (assert)
                                      ((""
                                        (inst? -3)
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (l_u_diff_disj-1 nil 3286208641
   ("" (skosimp*)
    (("" (expand "disjoint?")
      (("" (expand "empty?")
        (("" (expand "intersection")
          (("" (skosimp*)
            (("" (expand "min")
              (("" (lift-if)
                (("" (grind)
                  (("" (typepred! "leq")
                    (("" (expand "total_order?")
                      (("" (expand "partial_order?")
                        (("" (expand "antisymmetric?")
                          (("" (flatten)
                            (("" (expand "preorder?")
                              (("" (expand "transitive?")
                                (("" (flatten)
                                  (("" (inst - "i!1" "x!1" "v!1")
                                    (("" (assert)
                                      ((""
                                        (inst? -3)
                                        ((""
                                          (assert)
                                          nil))))))))))))))))))))))))))))))))))))))
    nil)
   ((disjoint? const-decl "bool" bags nil)
    (intersection const-decl "bag" bags nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (u_filter const-decl "bag" bag_filters nil)
    (l_filter const-decl "bag" bag_filters nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (dichotomous? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (empty? const-decl "bool" bags nil))
   nil))
 (l_u_fullset 0
  (l_u_fullset-2 "" 3790088112
   ("" (skosimp*)
    (("" (decompose-equality +)
      (("" (expand "union")
        (("" (expand "max")
          (("" (lift-if)
            (("" (expand "purge")
              (("" (lift-if)
                (("" (prop)
                  (("1" (replace -2) (("1" (grind) nil nil)) nil)
                   ("2" (replace -)
                    (("2" (expand "u_filter")
                      (("2" (lift-if)
                        (("2" (typepred! "X!1(x!1)")
                          (("2" (typepred! "leq")
                            (("2" (expand "total_order?")
                              (("2" (expand "partial_order?")
                                (("2" (expand "preorder?")
                                  (("2" (expand "reflexive?")
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "l_filter")
                    (("3" (expand "u_filter") (("3" (grind) nil nil)) nil))
                    nil)
                   ("4" (grind)
                    (("4" (typepred! "leq")
                      (("4" (expand "total_order?")
                        (("4" (expand "dichotomous?")
                          (("4" (flatten)
                            (("4" (inst?)
                              (("4" (split)
                                (("1" (propax) nil nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (l_u_fullset-1 nil 3286208662
   ("" (skosimp*)
    (("" (decompose-equality +)
      (("" (expand "union")
        (("" (expand "max")
          (("" (lift-if)
            (("" (expand "purge")
              (("" (lift-if)
                (("" (prop)
                  (("1" (replace -2) (("1" (grind) nil)))
                   ("2" (replace -)
                    (("2" (expand "u_filter")
                      (("2" (lift-if)
                        (("2" (typepred! "X!1(x!1)")
                          (("2" (typepred! "leq")
                            (("2" (expand "total_order?")
                              (("2" (expand "partial_order?")
                                (("2" (expand "preorder?")
                                  (("2" (expand "reflexive?")
                                    (("2" (grind) nil)))))))))))))))))))
                   ("3" (expand "l_filter")
                    (("3" (expand "u_filter") (("3" (grind) nil)))))
                   ("4" (grind)
                    (("4" (typepred! "leq")
                      (("4" (expand "total_order?")
                        (("4" (expand "dichotomous?")
                          (("4" (flatten)
                            (("4" (inst?)
                              (("4" (split)
                                (("1" (propax) nil)
                                 ("2" (propax)
                                  nil))))))))))))))))))))))))))))))
    nil)
   ((bag type-eq-decl nil bags nil) (union const-decl "bag" bags nil)
    (purge const-decl "bag" bags nil)
    (l_filter const-decl "bag" bag_filters nil)
    (u_filter const-decl "bag" bag_filters nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (preorder? const-decl "bool" orders nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (dichotomous? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (l_u_fullset2 0
  (l_u_fullset2-1 nil 3289761172
   ("" (skosimp*)
    (("" (decompose-equality +)
      (("" (expand "union")
        (("" (expand "max")
          (("" (lift-if)
            (("" (expand "purge")
              (("" (lift-if)
                (("" (prop)
                  (("1" (replace -2) (("1" (grind) nil nil)) nil)
                   ("2" (replace -)
                    (("2" (expand "l_filter")
                      (("2" (lift-if)
                        (("2" (typepred! "X!1(x!1)")
                          (("2" (typepred! "leq")
                            (("2" (expand "total_order?")
                              (("2" (expand "partial_order?")
                                (("2" (expand "preorder?")
                                  (("2" (expand "reflexive?")
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "l_filter")
                    (("3" (expand "u_filter") (("3" (grind) nil nil)) nil))
                    nil)
                   ("4" (grind)
                    (("4" (typepred! "leq")
                      (("4" (expand "total_order?")
                        (("4" (expand "dichotomous?")
                          (("4" (flatten)
                            (("4" (inst?)
                              (("4" (split)
                                (("1" (propax) nil nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bag type-eq-decl nil bags nil) (union const-decl "bag" bags nil)
    (purge const-decl "bag" bags nil)
    (u_filter const-decl "bag" bag_filters nil)
    (l_filter const-decl "bag" bag_filters nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (preorder? const-decl "bool" orders nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (dichotomous? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (l_u_diff 0
  (l_u_diff-4 "" 3790088113
   ("" (skosimp*)
    (("" (use "l_u_fullset")
      ((""
        (case "card(union(purge(i!1, l_filter(A!1, i!1)), u_filter(A!1, i!1))) = card(A!1)")
        (("1" (hide -2)
          (("1" (lemma "card_disjoint_add")
            (("1"
              (inst - "purge(i!1, l_filter(A!1, i!1))" "u_filter(A!1, i!1)")
              (("1" (split)
                (("1" (replace - :hide? t)
                  (("1" (replace - :dir rl :hide? t)
                    (("1" (assert)
                      (("1" (use "card_purge_extract")
                        (("1" (replace - :hide? t)
                          (("1" (assert)
                            (("1" (use "card_extract_bag")
                              (("1" (replace - :hide? t)
                                (("1" (grind)
                                  (("1" (typepred! "leq")
                                    (("1" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (grind)
                    (("2" (typepred! "leq") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak)
  (l_u_diff-3 nil 3308931059
   ("" (skosimp*)
    (("" (use "l_u_fullset")
      ((""
        (case "card(union(purge(i!1, l_filter(A!1, i!1)), u_filter(A!1, i!1))) = card(A!1)")
        (("1" (hide -2)
          (("1" (lemma "card_disjoint_add")
            (("1"
              (inst - "purge(i!1, l_filter(A!1, i!1))" "u_filter(A!1, i!1)")
              (("1" (split)
                (("1" (replace - :hide? t)
                  (("1" (replace - :dir rl :hide? t)
                    (("1" (assert)
                      (("1" (use "card_purge_extract")
                        (("1" (replace - :hide? t)
                          (("1" (assert)
                            (("1" (use "card_extract_bag")
                              (("1" (replace - :hide? t)
                                (("1" (grind)
                                  (("1" (typepred! "leq")
                                    (("1" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (grind)
                    (("2" (typepred! "leq") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2) (("2" (use "finite_purge") nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil) ("3" (rewrite "finite_bag_union") nil nil))
        nil))
      nil))
    nil)
   ((l_u_fullset formula-decl nil bag_filters nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (intersection const-decl "bag" bags nil)
    (empty? const-decl "bool" bags nil) (disjoint? const-decl "bool" bags nil)
    (nil application-judgement "finite_bag" bag_filters nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (card_extract_bag formula-decl nil finite_bags nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (card_purge_extract formula-decl nil finite_bags nil)
    (card_disjoint_add formula-decl nil finite_bags nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (nil application-judgement "finite_bag" bag_filters nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (card const-decl "nat" finite_bags nil) (union const-decl "bag" bags nil)
    (purge const-decl "bag" bags nil)
    (l_filter const-decl "bag" bag_filters nil)
    (u_filter const-decl "bag" bag_filters nil))
   nil)
  (l_u_diff-2 nil 3307098333
   ("" (skosimp*)
    (("" (use "l_u_fullset")
      ((""
        (case "card(union(purge(i!1, l_filter(A!1, i!1)), u_filter(A!1, i!1))) = card(A!1)")
        (("1" (hide -2)
          (("1" (use "card_disjoint_add")
            (("1" (split)
              (("1" (replace - :hide? t)
                (("1" (replace - :dir rl :hide? t)
                  (("1" (assert)
                    (("1" (use "card_purge_extract")
                      (("1" (replace - :hide? t)
                        (("1" (assert)
                          (("1" (use "card_extract_bag")
                            (("1" (replace - :hide? t)
                              (("1" (grind)
                                (("1" (typepred! "leq")
                                  (("1" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2" (grind)
                  (("2" (typepred! "leq") (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil) ("3" (rewrite "finite_bag_union") nil nil))
        nil))
      nil))
    nil)
   ((purge const-decl "bag" bags nil) (union const-decl "bag" bags nil)
    (card const-decl "nat" finite_bags nil)
    (card_disjoint_add formula-decl nil finite_bags nil)
    (intersection const-decl "bag" bags nil)
    (empty? const-decl "bool" bags nil) (disjoint? const-decl "bool" bags nil)
    (card_extract_bag formula-decl nil finite_bags nil)
    (card_purge_extract formula-decl nil finite_bags nil)
    (finite_bag_union formula-decl nil finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil))
   nil)
  (l_u_diff-1 nil 3288828916
   ("" (skosimp*)
    (("" (use "l_u_fullset")
      ((""
        (case "card(union(purge(i!1, l_filter(A!1, i!1)), u_filter(A!1, i!1))) = card(A!1)")
        (("1" (hide -2)
          (("1" (use "card_disjoint_add")
            (("1" (split)
              (("1" (replace - :hide? t)
                (("1" (replace - :dir rl :hide? t)
                  (("1" (assert)
                    (("1" (use "card_purge_extract")
                      (("1" (replace - :hide? t)
                        (("1" (assert)
                          (("1" (use "card_extract_bag")
                            (("1" (replace - :hide? t)
                              (("1" (grind)
                                (("1" (typepred! "leq")
                                  (("1" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2" (grind)
                  (("2" (typepred! "leq") (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil) ("3" (rewrite "finite_bag_union ") nil nil))
        nil))
      nil))
    nil)
   ((purge const-decl "bag" bags nil) (union const-decl "bag" bags nil)
    (card const-decl "nat" finite_bags nil)
    (card_disjoint_add formula-decl nil finite_bags nil)
    (intersection const-decl "bag" bags nil)
    (empty? const-decl "bool" bags nil) (disjoint? const-decl "bool" bags nil)
    (card_extract_bag formula-decl nil finite_bags nil)
    (card_purge_extract formula-decl nil finite_bags nil)
    (finite_bag_union formula-decl nil finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil))
   shostak))
 (subset_diff_elements 0
  (subset_diff_elements-2 "" 3790088113
   ("" (skosimp*)
    (("" (use "l_u_fullset")
      (("" (lemma "u_filter_orders_2")
        (("" (inst?) (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   nil shostak)
  (subset_diff_elements-1 nil 3286208679
   ("" (skosimp*)
    (("" (use "l_u_fullset")
      (("" (lemma "u_filter_orders_2")
        (("" (inst - "i!1" _ "v!1")
          (("" (inst?) (("" (assert) (("" (grind) nil))))))))))))
    nil)
   ((l_u_fullset formula-decl nil bag_filters nil)
    (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (l_filter const-decl "bag" bag_filters nil)
    (u_filter const-decl "bag" bag_filters nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (union const-decl "bag" bags nil) (subbag? const-decl "bool" bags nil)
    (/= const-decl "boolean" notequal nil) (purge const-decl "bag" bags nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (u_filter_orders_2 formula-decl nil bag_filters nil))
   nil))
 (card_diff_elements 0
  (card_diff_elements-3 "" 3790088113
   ("" (skosimp*)
    (("" (use "subset_diff_elements")
      (("" (assert)
        (("" (use "card_subbag?")
          (("" (assert)
            (("" (use "card_disjoint_add")
              (("" (use "l_u_diff_disj") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (card_diff_elements-2 nil 3307098646
   ("" (skosimp*)
    (("" (use "subset_diff_elements")
      (("" (assert)
        (("" (use "card_subbag?")
          (("1" (assert)
            (("1" (use "card_disjoint_add")
              (("1" (use "l_u_diff_disj") (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (rewrite "finite_bag_union") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_diff_elements formula-decl nil bag_filters nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (card_subbag? formula-decl nil finite_bags nil)
    (union const-decl "bag" bags nil)
    (l_filter const-decl "bag" bag_filters nil)
    (u_filter const-decl "bag" bag_filters nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (card_disjoint_add formula-decl nil finite_bags nil)
    (l_u_diff_disj formula-decl nil bag_filters nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nil application-judgement "finite_bag" bag_filters nil)
    (nil application-judgement "finite_bag" bag_filters nil))
   nil)
  (card_diff_elements-1 nil 3286208696
   ("" (skosimp*)
    (("" (use "subset_diff_elements")
      (("" (assert)
        (("" (use "card_subbag?")
          (("1" (assert)
            (("1" (use "card_disjoint_add")
              (("1" (use "l_u_diff_disj") (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (rewrite "finite_bag_union ") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (card_subbag? formula-decl nil finite_bags nil)
    (union const-decl "bag" bags nil)
    (card_disjoint_add formula-decl nil finite_bags nil)
    (finite_bag_union formula-decl nil finite_bags nil))
   nil))
 (card_plus 0
  (card_plus-2 "" 3790088116
   ("" (skosimp*)
    (("" (use "finite_bag_induction")
      ((""
        (inst - "LAMBDA (AA: finite_bag[T]): card(AA) + card(B!1) =
             card(union(AA, B!1)) + card(intersection(AA, B!1))")
        (("" (split)
          (("1" (inst?) nil nil)
           ("2" (use "card_emptybag")
            (("2" (replace - :hide? t)
              (("2" (assert)
                (("2" (hide 2)
                  (("2" (grind)
                    (("2" (use "bag_intersection_lem")
                      (("2" (replace - :hide? t)
                        (("2" (use "bag_to_set_emptybag")
                          (("2" (replace - :hide? t)
                            (("2" (use "intersection_commutative")
                              (("2" (replace - :hide? t)
                                (("2" (use "intersection_empty")
                                  (("2" (replace - :hide? t)
                                    (("2" (use "sum_emptyset")
                                      (("2"
                                        (replace - :hide? t)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (use "bag_set_dist_union")
                                            (("2"
                                              (replace - :hide? t)
                                              (("2"
                                                (use "bag_to_set_emptybag")
                                                (("2"
                                                  (replace - :hide? t)
                                                  (("2"
                                                    (use "union_commutative")
                                                    (("2"
                                                      (replace - :hide? t)
                                                      (("2"
                                                        (use "union_empty")
                                                        (("2"
                                                          (replace - :hide? t)
                                                          (("2"
                                                            (use "sum_f_g")
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp*)
            (("3" (hide 2)
              (("3" (use "card_bag_insert")
                (("3" (replace -1 :hide? t)
                  (("3" (assert)
                    (("3" (move-terms 1 l 1)
                      (("3" (replace -1 :hide? t)
                        (("3" (expand "card")
                          (("3" (use "bag_intersection_lem")
                            (("3" (replace -1 :hide? t)
                              (("3" (use "bag_intersection_lem")
                                (("3" (replace -1 :hide? t)
                                  (("3" (use "bag_union_lem")
                                    (("3" (replace -1 :hide? t)
                                      (("3"
                                        (use "bag_union_lem")
                                        (("3"
                                          (replace -1 :hide? t)
                                          (("3"
                                            (case
                                             "intersection(bag_to_set(b!1), bag_to_set(B!1))(x!1)")
                                            (("1"
                                              (use "sum_x")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (lemma "sum_x")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "intersection(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))"
                                                     "LAMBDA (t: T): intersection(insert(x!1, b!1), B!1)(t)"
                                                     "x!1")
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (lemma "sum_x")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "union(bag_to_set(b!1), bag_to_set(B!1))"
                                                           "LAMBDA (t: T): union(b!1, B!1)(t)"
                                                           "x!1")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (lemma "sum_x")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "union(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))"
                                                                 "LAMBDA (t: T): union(insert(x!1, b!1), B!1)(t)"
                                                                 "x!1")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (case-replace
                                                                     "remove(x!1,
                                              union(bag_to_set(insert(x!1, b!1)),
                                                    bag_to_set(B!1))) = remove(x!1, union(bag_to_set(b!1), bag_to_set(B!1)))")
                                                                    (("1"
                                                                      (case-replace
                                                                       "remove(x!1,
                                                intersection(bag_to_set(insert(x!1, b!1)),
                                                             bag_to_set(B!1))) = remove(x!1, intersection(bag_to_set(b!1), bag_to_set(B!1)))")
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "sum_f_g")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "remove(x!1, intersection(bag_to_set(b!1), bag_to_set(B!1)))"
                                                                             "LAMBDA (t: T): intersection(insert(x!1, b!1), B!1)(t)"
                                                                             "LAMBDA (t: T): intersection(b!1, B!1)(t)")
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "sum_f_g")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "remove(x!1, union(bag_to_set(b!1), bag_to_set(B!1)))"
                                                                                     "LAMBDA (t: T): union(insert(x!1, b!1), B!1)(t)"
                                                                                     "LAMBDA (t: T): union(b!1, B!1)(t)")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (case
                                                                                           "B!1(x!1) >= insert(x!1, b!1)(x!1)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (decompose-equality
                                                                           +)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (decompose-equality
                                                                         +)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "sum_remove")
                                              (("2"
                                                (replace - :dir rl :hide? t)
                                                (("2"
                                                  (lemma "sum_remove")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "union(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))"
                                                     "LAMBDA (t: T): union(insert(x!1, b!1), B!1)(t)"
                                                     "x!1")
                                                    (("2"
                                                      (replace
                                                       -
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (lemma "sum_remove")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "intersection(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))"
                                                           "LAMBDA (t: T): intersection(insert(x!1, b!1), B!1)(t)"
                                                           "x!1")
                                                          (("2"
                                                            (replace
                                                             -
                                                             :dir
                                                             rl
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (lemma
                                                               "sum_remove")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "union(bag_to_set(b!1), bag_to_set(B!1))"
                                                                 "LAMBDA (t: T): union(b!1, B!1)(t)"
                                                                 "x!1")
                                                                (("2"
                                                                  (replace
                                                                   -
                                                                   :dir
                                                                   rl
                                                                   :hide?
                                                                   t)
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case-replace
                                                                         "remove(x!1,
                          union(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))) = remove(x!1, union(bag_to_set(b!1), bag_to_set(B!1)))")
                                                                        (("1"
                                                                          (case-replace
                                                                           "remove(x!1,
                            intersection(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))) = remove(x!1, intersection(bag_to_set(b!1), bag_to_set(B!1)))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -2)
                                                                              (("1"
                                                                                (lemma
                                                                                 "sum_f_g")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "remove(x!1, intersection(bag_to_set(b!1), bag_to_set(B!1)))"
                                                                                   "LAMBDA (t: T): intersection(b!1, B!1)(t)"
                                                                                   "LAMBDA (t: T): intersection(insert(x!1, b!1), B!1)(t)")
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "sum_f_g")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "remove(x!1, union(bag_to_set(b!1), bag_to_set(B!1)))"
                                                                                           "LAMBDA (t: T): union(b!1, B!1)(t)"
                                                                                           "LAMBDA (t: T): union(insert(x!1, b!1), B!1)(t)")
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -
                                                                                               :hide?
                                                                                               t)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2
                                                                                               3)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2
                                                                                       3)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             3
                                                                             -1)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("2"
                                                                            (decompose-equality
                                                                             +)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (card_plus-1 nil 3287746045
   ("" (skosimp*)
    (("" (use "finite_bag_induction")
      ((""
        (inst - "LAMBDA (AA: finite_bag[T]): card(AA) + card(B!1) =
             card(union(AA, B!1)) + card(intersection(AA, B!1))")
        (("1" (split)
          (("1" (inst?) nil nil)
           ("2" (use "card_emptybag")
            (("2" (replace - :hide? t)
              (("2" (assert)
                (("2" (hide 2)
                  (("2" (grind)
                    (("2" (use "bag_intersection_lem")
                      (("2" (replace - :hide? t)
                        (("2" (use "bag_to_set_emptybag")
                          (("2" (replace - :hide? t)
                            (("2" (use "intersection_commutative")
                              (("2" (replace - :hide? t)
                                (("2" (use "intersection_empty")
                                  (("2" (replace - :hide? t)
                                    (("2" (use "sum_emptyset")
                                      (("2"
                                        (replace - :hide? t)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (use "bag_set_dist_union")
                                            (("2"
                                              (replace - :hide? t)
                                              (("2"
                                                (use "bag_to_set_emptybag")
                                                (("2"
                                                  (replace - :hide? t)
                                                  (("2"
                                                    (use "union_commutative")
                                                    (("2"
                                                      (replace - :hide? t)
                                                      (("2"
                                                        (use "union_empty")
                                                        (("2"
                                                          (replace - :hide? t)
                                                          (("2"
                                                            (use "sum_f_g")
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp*)
            (("3" (hide 2)
              (("3" (use "card_bag_insert")
                (("3" (replace -1 :hide? t)
                  (("3" (assert)
                    (("3" (move-terms 1 l 1)
                      (("3" (replace -1 :hide? t)
                        (("3" (expand "card")
                          (("3" (use "bag_intersection_lem")
                            (("3" (replace -1 :hide? t)
                              (("3" (use "bag_intersection_lem")
                                (("3" (replace -1 :hide? t)
                                  (("3" (use "bag_union_lem")
                                    (("3" (replace -1 :hide? t)
                                      (("3"
                                        (use "bag_union_lem")
                                        (("3"
                                          (replace -1 :hide? t)
                                          (("3"
                                            (case
                                             "intersection(bag_to_set(b!1), bag_to_set(B!1))(x!1)")
                                            (("1"
                                              (use "sum_x")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (lemma "sum_x")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "intersection(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))"
                                                     "LAMBDA (t: T): intersection(insert(x!1, b!1), B!1)(t)"
                                                     "x!1")
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (lemma "sum_x")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "union(bag_to_set(b!1), bag_to_set(B!1))"
                                                           "LAMBDA (t: T): union(b!1, B!1)(t)"
                                                           "x!1")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (lemma "sum_x")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "union(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))"
                                                                 "LAMBDA (t: T): union(insert(x!1, b!1), B!1)(t)"
                                                                 "x!1")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (case-replace
                                                                     "remove(x!1,
                                              union(bag_to_set(insert(x!1, b!1)),
                                                    bag_to_set(B!1))) = remove(x!1, union(bag_to_set(b!1), bag_to_set(B!1)))")
                                                                    (("1"
                                                                      (case-replace
                                                                       "remove(x!1,
                                                intersection(bag_to_set(insert(x!1, b!1)),
                                                             bag_to_set(B!1))) = remove(x!1, intersection(bag_to_set(b!1), bag_to_set(B!1)))")
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "sum_f_g")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "remove(x!1, intersection(bag_to_set(b!1), bag_to_set(B!1)))"
                                                                             "LAMBDA (t: T): intersection(insert(x!1, b!1), B!1)(t)"
                                                                             "LAMBDA (t: T): intersection(b!1, B!1)(t)")
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "sum_f_g")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "remove(x!1, union(bag_to_set(b!1), bag_to_set(B!1)))"
                                                                                     "LAMBDA (t: T): union(insert(x!1, b!1), B!1)(t)"
                                                                                     "LAMBDA (t: T): union(b!1, B!1)(t)")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (case
                                                                                           "B!1(x!1) >= insert(x!1, b!1)(x!1)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (decompose-equality
                                                                           +)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (decompose-equality
                                                                         +)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "sum_remove")
                                              (("2"
                                                (replace - :dir rl :hide? t)
                                                (("2"
                                                  (lemma "sum_remove")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "union(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))"
                                                     "LAMBDA (t: T): union(insert(x!1, b!1), B!1)(t)"
                                                     "x!1")
                                                    (("2"
                                                      (replace
                                                       -
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (lemma "sum_remove")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "intersection(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))"
                                                           "LAMBDA (t: T): intersection(insert(x!1, b!1), B!1)(t)"
                                                           "x!1")
                                                          (("2"
                                                            (replace
                                                             -
                                                             :dir
                                                             rl
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (lemma
                                                               "sum_remove")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "union(bag_to_set(b!1), bag_to_set(B!1))"
                                                                 "LAMBDA (t: T): union(b!1, B!1)(t)"
                                                                 "x!1")
                                                                (("2"
                                                                  (replace
                                                                   -
                                                                   :dir
                                                                   rl
                                                                   :hide?
                                                                   t)
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case-replace
                                                                         "remove(x!1,
                          union(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))) = remove(x!1, union(bag_to_set(b!1), bag_to_set(B!1)))")
                                                                        (("1"
                                                                          (case-replace
                                                                           "remove(x!1,
                            intersection(bag_to_set(insert(x!1, b!1)), bag_to_set(B!1))) = remove(x!1, intersection(bag_to_set(b!1), bag_to_set(B!1)))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -2)
                                                                              (("1"
                                                                                (lemma
                                                                                 "sum_f_g")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "remove(x!1, intersection(bag_to_set(b!1), bag_to_set(B!1)))"
                                                                                   "LAMBDA (t: T): intersection(b!1, B!1)(t)"
                                                                                   "LAMBDA (t: T): intersection(insert(x!1, b!1), B!1)(t)")
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "sum_f_g")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "remove(x!1, union(bag_to_set(b!1), bag_to_set(B!1)))"
                                                                                           "LAMBDA (t: T): union(b!1, B!1)(t)"
                                                                                           "LAMBDA (t: T): union(insert(x!1, b!1), B!1)(t)")
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -
                                                                                               :hide?
                                                                                               t)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2
                                                                                               3)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2
                                                                                       3)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             3
                                                                             -1)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("2"
                                                                            (decompose-equality
                                                                             +)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) (("2" (rewrite "finite_bag_intersection ") nil nil))
          nil)
         ("3" (skosimp*) (("3" (rewrite "finite_bag_union ") nil nil)) nil))
        nil))
      nil))
    nil)
   ((finite_bag_induction formula-decl nil finite_bags_inductions nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (bag_intersection_lem formula-decl nil bags_to_sets nil)
    (bag_to_set_emptybag formula-decl nil bags_to_sets nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil)
    (intersection_empty formula-decl nil sets_lemmas nil)
    (restrict const-decl "R" restrict nil)
    (sum_emptyset formula-decl nil finite_sets_sum finite_sets)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (sum_f_g formula-decl nil finite_sets_sum finite_sets)
    (union_empty formula-decl nil sets_lemmas nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (bag_set_dist_union formula-decl nil bags_to_sets nil)
    (nil application-judgement "finite_set[T]" bag_filters nil)
    (nil application-judgement "nat" bag_filters nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (emptybag const-decl "bag" bags nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nil name-judgement "finite_bag[T]" bag_filters nil)
    (card_emptybag formula-decl nil finite_bags nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (insert const-decl "bag" bags nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sum_remove formula-decl nil finite_sets_sum finite_sets)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (sum_x formula-decl nil finite_sets_sum finite_sets)
    (finite_intersection2 application-judgement "finite_set[T]" bag_filters
     nil)
    (finite_union application-judgement "finite_set[T]" bag_filters nil)
    (x!1 skolem-const-decl "T" bag_filters nil)
    (B!1 skolem-const-decl "finite_bag[T]" bag_filters nil)
    (b!1 skolem-const-decl "finite_bag[T]" bag_filters nil)
    (union const-decl "set" sets nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (finite_remove application-judgement "finite_set[T]" bag_filters nil)
    (remove const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (bag_union_lem formula-decl nil bags_to_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nil application-judgement "nonempty_finite_bag[T]" bag_filters nil)
    (nil application-judgement "nonempty_finite_bag[T]" bag_filters nil)
    (card_bag_insert formula-decl nil finite_bags nil)
    (intersection const-decl "bag" bags nil) (union const-decl "bag" bags nil)
    (card const-decl "nat" finite_bags nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil))
 (pigeonhole 0
  (pigeonhole-2 "" 3790088116
   ("" (skosimp*)
    (("" (case "card(intersection(A!1, B!1)) >= 1")
      (("1" (lemma "card_nonempty_bag?")
        (("1" (inst?)
          (("1" (assert)
            (("1" (expand "nonempty_bag?")
              (("1" (hide -1 -2) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (use "card_plus") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (pigeonhole-1 nil 3287504734
   ("" (skosimp*)
    (("" (case "card(intersection(A!1, B!1)) >= 1")
      (("1" (lemma "card_nonempty_bag?")
        (("1" (inst?)
          (("1" (assert)
            (("1" (expand "nonempty_bag?")
              (("1" (hide -1 -2) (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (rewrite "finite_bag_intersection ") nil nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (use "card_plus") (("2" (assert) nil nil)) nil))
        nil)
       ("3" (rewrite "finite_bag_intersection ") nil nil))
      nil))
    nil)
   ((intersection const-decl "bag" bags nil)
    (card const-decl "nat" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (nonempty_bag? const-decl "bool" bags nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty? const-decl "bool" bags nil) (member const-decl "bool" bags nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (card_nonempty_bag? formula-decl nil finite_bags nil)
    (card_plus formula-decl nil bag_filters nil))
   shostak))
 (maj_pigeonhole 0
  (maj_pigeonhole-3 "" 3790088117
   ("" (skosimp*)
    (("" (case "card(union(A!1,B!1)) <= card(C!1)")
      (("1" (use "pigeonhole") (("1" (assert) nil nil)) nil)
       ("2" (hide 2)
        (("2" (rewrite "card_subbag?")
          (("2" (hide 2 -1 -3)
            (("2" (use "union_upper_bound") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (maj_pigeonhole-2 nil 3307098753
   ("" (skosimp*)
    (("" (case "card(union(A!1,B!1)) <= card(C!1)")
      (("1" (use "pigeonhole") (("1" (assert) nil nil)) nil)
       ("2" (hide 2)
        (("2" (rewrite "card_subbag?")
          (("2" (hide 2 -1 -3)
            (("2" (use "union_upper_bound") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (rewrite "finite_bag_union") nil nil))
      nil))
    nil)
   ((union const-decl "bag" bags nil) (card const-decl "nat" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pigeonhole formula-decl nil bag_filters nil)
    (card_subbag? formula-decl nil finite_bags nil)
    (union_upper_bound formula-decl nil bags nil))
   nil)
  (maj_pigeonhole-1 nil 3287511788
   ("" (skosimp*)
    (("" (case "card(union(A!1,B!1)) <= card(C!1)")
      (("1" (use "pigeonhole") (("1" (assert) nil nil)) nil)
       ("2" (hide 2)
        (("2" (rewrite "card_subbag?")
          (("2" (hide 2 -1 -3)
            (("2" (use "union_upper_bound") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (rewrite "finite_bag_union ") nil nil))
      nil))
    nil)
   ((finite_bag_union formula-decl nil finite_bags nil)
    (union_upper_bound formula-decl nil bags nil)
    (card_subbag? formula-decl nil finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (card const-decl "nat" finite_bags nil) (union const-decl "bag" bags nil))
   shostak))
 (l_filter_nonempty 0
  (l_filter_nonempty-1 nil 3288828815
   ("" (skosimp*)
    (("" (use "maj_pigeonhole")
      (("" (assert)
        (("" (use "l_filter_subbag")
          (("" (assert) (("" (skosimp*) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((maj_pigeonhole formula-decl nil bag_filters nil)
    (l_filter const-decl "bag" bag_filters nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (nil application-judgement "finite_bag" bag_filters nil)
    (l_filter_subbag formula-decl nil bag_filters nil)
    (nil application-judgement "finite_set[T]" bag_filters nil)
    (nil application-judgement "nat" bag_filters nil)
    (subbag? const-decl "bool" bags nil) (member const-decl "bool" bags nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (card const-decl "nat" finite_bags nil)
    (empty? const-decl "bool" bags nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (u_filter_nonempty 0
  (u_filter_nonempty-1 nil 3288828898
   ("" (skosimp*)
    (("" (use "maj_pigeonhole")
      (("" (assert)
        (("" (use "u_filter_subbag")
          (("" (assert) (("" (skosimp*) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((maj_pigeonhole formula-decl nil bag_filters nil)
    (u_filter const-decl "bag" bag_filters nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (nil application-judgement "finite_bag" bag_filters nil)
    (u_filter_subbag formula-decl nil bag_filters nil)
    (nil application-judgement "finite_set[T]" bag_filters nil)
    (nil application-judgement "nat" bag_filters nil)
    (subbag? const-decl "bool" bags nil) (member const-decl "bool" bags nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (card const-decl "nat" finite_bags nil)
    (empty? const-decl "bool" bags nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (l_filter_max 0
  (l_filter_max-1 nil 3288108193
   ("" (skosimp*)
    (("" (decompose-equality +)
      (("" (expand "l_filter" 1 1)
        (("" (expand "l_filter" 1 1)
          (("" (lift-if)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide 3)
                  (("1" (expand "max")
                    (("1" (typepred! "max(bag_to_set(l_filter(A!1, i!1)))")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (hide -1 3) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lift-if)
                  (("2" (ground)
                    (("2" (case "leq(max(l_filter(A!1, i!1)), i!1)")
                      (("1" (typepred! "leq")
                        (("1" (expand "total_order?")
                          (("1" (expand "partial_order?")
                            (("1" (expand "preorder?")
                              (("1" (expand "transitive?")
                                (("1" (flatten)
                                  (("1"
                                    (inst - "x!1" "max(l_filter(A!1, i!1))"
                                     "i!1")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1)
                        (("2" (typepred! "l_filter(A!1, i!1)")
                          (("2" (expand "l_filter")
                            (("2" (expand "max")
                              (("2" (expand "bag_to_set")
                                (("2"
                                  (typepred!
                                   "max({t: T | IF leq(t, i!1) THEN A!1(t) ELSE 0 ENDIF > 0})")
                                  (("1" (grind) nil nil)
                                   ("2" (split)
                                    (("1" (hide 2 3 4 5)
                                      (("1" (grind) nil nil)) nil)
                                     ("2" (hide -2 1 2 3)
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2" (propax) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split)
                                                      (("1" (flatten) nil nil)
                                                       ("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "finite_bag" bag_filters nil)
    (bag type-eq-decl nil bags nil)
    (l_filter const-decl "bag" bag_filters nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" bags nil)
    (nonempty_finite_bag type-eq-decl nil finite_bags nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (max const-decl "T" finite_bags_minmax nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (max const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}"
         finite_sets_minmax finite_sets)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (set type-eq-decl nil sets nil)
    (nil application-judgement "finite_set[T]" bag_filters nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (u_filter_min 0
  (u_filter_min-1 nil 3288725502
   ("" (skosimp*)
    (("" (decompose-equality +)
      (("" (expand "u_filter" 1 1)
        (("" (expand "u_filter" 1 1)
          (("" (lift-if)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide 3)
                  (("1" (expand "min")
                    (("1" (typepred! "min(bag_to_set(u_filter(A!1, i!1)))")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (hide -1 3) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lift-if)
                  (("2" (ground)
                    (("2" (case "leq(i!1, min(u_filter(A!1, i!1)))")
                      (("1" (typepred! "leq")
                        (("1" (expand "total_order?")
                          (("1" (expand "partial_order?")
                            (("1" (expand "preorder?")
                              (("1" (expand "transitive?")
                                (("1" (flatten)
                                  (("1"
                                    (inst - "i!1" "min(u_filter(A!1, i!1))"
                                     "x!1")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1)
                        (("2" (typepred! "u_filter(A!1, i!1)")
                          (("2" (expand "u_filter")
                            (("2" (expand "min")
                              (("2" (expand "bag_to_set")
                                (("2"
                                  (typepred!
                                   "min({t: T | IF leq(i!1, t) THEN A!1(t) ELSE 0 ENDIF > 0})")
                                  (("1" (grind) nil nil)
                                   ("2" (split)
                                    (("1" (hide 2 3 4 5)
                                      (("1" (grind) nil nil)) nil)
                                     ("2" (hide -2 1 2 3)
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst - "x!2")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2" (propax) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split)
                                                      (("1" (flatten) nil nil)
                                                       ("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "finite_bag" bag_filters nil)
    (bag type-eq-decl nil bags nil)
    (u_filter const-decl "bag" bag_filters nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" bags nil)
    (nonempty_finite_bag type-eq-decl nil finite_bags nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (min const-decl "T" finite_bags_minmax nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (set type-eq-decl nil sets nil)
    (nil application-judgement "finite_set[T]" bag_filters nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (l_filter_max_purge 0
  (l_filter_max_purge-2 nil 3289921521
   ("" (skosimp*)
    (("" (decompose-equality +)
      (("" (lemma "finite_bag")
        (("" (lemma "finite_pred2[T]")
          (("" (expand "purge" 1 2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (replace - :hide? t)
                    (("1" (expand "l_filter" 1 1)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1)
                              (("1" (expand "max")
                                (("1" (expand "bag_to_set")
                                  (("1"
                                    (case "leq(max({t: T | purge(x!1, l_filter(A!1, x!1))(t) > 0}), x!1)")
                                    (("1" (typepred! "leq")
                                      (("1"
                                        (expand "total_order?")
                                        (("1"
                                          (expand "partial_order?")
                                          (("1"
                                            (expand "antisymmetric?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (hide -2 -3)
                                                      (("1"
                                                        (typepred!
                                                         "max({t: T | purge(x!1, l_filter(A!1, x!1))(t) > 0})")
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (case
                                                             "purge(x!1, l_filter(A!1, x!1))(x!1) = 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide -1 -2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 -3 -4)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "purge[T](x!1, l_filter(A!1, x!1))")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 -3)
                                                      (("2"
                                                        (expand "empty?")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst - "x!2")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1)
                                      (("2"
                                        (case
                                         "FORALL (y: ({t: T | purge(x!1, l_filter(A!1, x!1))(t) > 0})): leq(y, x!1)")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (split)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split)
                                                  (("1" (propax) nil nil)
                                                   ("2"
                                                    (inst
                                                     -
                                                     "purge[T](x!1, l_filter(A!1, x!1))")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (inst - "x!2")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (typepred! "y!1")
                                              (("2"
                                                (expand "purge")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand "l_filter")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (split)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (inst
                                             -
                                             "purge[T](x!1, l_filter(A!1, x!1))")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3 -4)
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "x!2")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "l_filter" 2 (1 3))
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1"
                            (case "leq(max(purge(i!1, l_filter(A!1, i!1))), i!1)")
                            (("1" (typepred! "leq")
                              (("1" (expand "total_order?")
                                (("1" (expand "partial_order?")
                                  (("1" (expand "preorder?")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (inst - "x!1" _ "i!1")
                                          (("1"
                                            (inst
                                             -
                                             "max(purge(i!1, l_filter(A!1, i!1)))")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (case "FORALL (y: ({t: T | purge(i!1, l_filter(A!1, i!1))(t) > 0})): leq(y, i!1)")
                                (("1" (expand "max")
                                  (("1" (expand "bag_to_set")
                                    (("1" (inst?)
                                      (("1"
                                        (hide 2 3 4 5)
                                        (("1"
                                          (split)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (inst
                                                 -
                                                 "purge[T](i!1, l_filter(A!1, i!1))")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "empty?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst - "x!2")
                                                (("2"
                                                  (hide -1 -2)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (skosimp*)
                                    (("2" (typepred! "y!1")
                                      (("2"
                                        (expand "purge")
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "l_filter")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1" (flatten) nil nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lift-if)
                            (("2" (ground)
                              (("2" (expand "max")
                                (("2" (expand "bag_to_set")
                                  (("2"
                                    (typepred!
                                     "max({t: T | purge(i!1, l_filter(A!1, i!1))(t) > 0})")
                                    (("1" (hide -1)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (split)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (inst
                                               -
                                               "purge[T](i!1, l_filter(A!1, i!1))")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide -2 -3 -4 1 2)
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst - "x!2")
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "finite_bag" bag_filters nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (bag type-eq-decl nil bags nil)
    (l_filter const-decl "bag" bag_filters nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" bags nil)
    (nonempty_finite_bag type-eq-decl nil finite_bags nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (max const-decl "T" finite_bags_minmax nil)
    (purge const-decl "bag" bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (finite_pred2 formula-decl nil finite_sets nil)
    (i!1 skolem-const-decl "T" bag_filters nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (partial_order? const-decl "bool" orders nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (A!1 skolem-const-decl "finite_bag[T]" bag_filters nil)
    (x!1 skolem-const-decl "T" bag_filters nil)
    (antisymmetric? const-decl "bool" relations nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}"
         finite_sets_minmax finite_sets)
    (> const-decl "bool" reals nil)
    (finite_bag formula-decl nil finite_bags nil))
   nil)
  (l_filter_max_purge-1 nil 3289827553
   ("" (skosimp*)
    (("" (decompose-equality +)
      (("" (lemma "finite_bag")
        (("" (lemma "finite_pred2")
          (("" (expand "purge" 1 2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (replace - :hide? t)
                    (("1" (expand "l_filter" 1 1)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1)
                              (("1" (expand "max")
                                (("1" (expand "bag_to_set")
                                  (("1"
                                    (case "leq(max({t: T | purge(x!1, l_filter(A!1, x!1))(t) > 0}), x!1)")
                                    (("1" (typepred! "leq")
                                      (("1"
                                        (expand "total_order?")
                                        (("1"
                                          (expand "partial_order?")
                                          (("1"
                                            (expand "antisymmetric?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (hide -2 -3)
                                                      (("1"
                                                        (typepred!
                                                         "max({t: T | purge(x!1, l_filter(A!1, x!1))(t) > 0})")
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (case
                                                             "purge(x!1, l_filter(A!1, x!1))(x!1) = 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide -1 -2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 -3 -4)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "purge[T](x!1, l_filter(A!1, x!1))")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 -3)
                                                      (("2"
                                                        (expand "empty?")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst - "x!2")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1)
                                      (("2"
                                        (case
                                         "FORALL (y: ({t: T | purge(x!1, l_filter(A!1, x!1))(t) > 0})): leq(y, x!1)")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (split)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split)
                                                  (("1" (propax) nil nil)
                                                   ("2"
                                                    (inst
                                                     -
                                                     "purge[T](x!1, l_filter(A!1, x!1))")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (inst - "x!2")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (typepred! "y!1")
                                              (("2"
                                                (expand "purge")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand "l_filter")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (split)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (inst
                                             -
                                             "purge[T](x!1, l_filter(A!1, x!1))")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3 -4)
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "x!2")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "l_filter" 2 (1 3))
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand "max")
                            (("1" (expand "bag_to_set")
                              (("1"
                                (typepred!
                                 "max({t: T | purge(i!1, l_filter(A!1, i!1))(t) > 0})")
                                (("1" (hide -1)
                                  (("1" (inst?)
                                    (("1" (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (split)
                                    (("1" (inst?)
                                      (("1"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (inst
                                           -
                                           "purge[T](i!1, l_filter(A!1, i!1))")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -2 -3 -4 1 2)
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst - "x!2")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (case "leq(max(purge(i!1, l_filter(A!1, i!1))), i!1)")
                            (("1" (typepred! "leq")
                              (("1" (expand "total_order?")
                                (("1" (expand "partial_order?")
                                  (("1" (expand "preorder?")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (inst - "x!1" _ "i!1")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (case "FORALL (y: ({t: T | purge(i!1, l_filter(A!1, i!1))(t) > 0})): leq(y, i!1)")
                                (("1" (expand "max")
                                  (("1" (expand "bag_to_set")
                                    (("1" (inst?)
                                      (("1"
                                        (hide 2 3 4 5)
                                        (("1"
                                          (split)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (inst
                                                 -
                                                 "purge[T](i!1, l_filter(A!1, i!1))")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "empty?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst - "x!2")
                                                (("2"
                                                  (hide -1 -2)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (skosimp*)
                                    (("2" (typepred! "y!1")
                                      (("2"
                                        (expand "purge")
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "l_filter")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1" (flatten) nil nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (purge const-decl "bag" bags nil) (empty? const-decl "bool" bags nil)
    (bag type-eq-decl nil bags nil)
    (nonempty_finite_bag type-eq-decl nil finite_bags nil)
    (max const-decl "T" finite_bags_minmax nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (max const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}"
         finite_sets_minmax finite_sets)
    (finite_bag formula-decl nil finite_bags nil))
   nil))
 (u_filter_min_purge 0
  (u_filter_min_purge-2 nil 3289921500
   ("" (skosimp*)
    (("" (decompose-equality +)
      (("" (lemma "finite_bag")
        (("" (lemma "finite_pred2[T]")
          (("" (expand "purge" 1 2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (replace - :hide? t)
                    (("1" (expand "u_filter" 1 1)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1)
                              (("1" (expand "min")
                                (("1" (expand "bag_to_set")
                                  (("1"
                                    (case "leq(x!1, min({t: T | purge(x!1, u_filter(A!1, x!1))(t) > 0}))")
                                    (("1" (typepred! "leq")
                                      (("1"
                                        (expand "total_order?")
                                        (("1"
                                          (expand "partial_order?")
                                          (("1"
                                            (expand "antisymmetric?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (hide -2 -3)
                                                      (("1"
                                                        (typepred!
                                                         "min({t: T | purge(x!1, u_filter(A!1, x!1))(t) > 0})")
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (case
                                                             "purge(x!1, u_filter(A!1, x!1))(x!1) = 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide -1 -2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 -3 -4)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "purge[T](x!1, u_filter(A!1, x!1))")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 -3)
                                                      (("2"
                                                        (expand "empty?")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst - "x!2")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1)
                                      (("2"
                                        (case
                                         "FORALL (y: ({t: T | purge(x!1, u_filter(A!1, x!1))(t) > 0})): leq(x!1, y)")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (split)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split)
                                                  (("1" (propax) nil nil)
                                                   ("2"
                                                    (inst
                                                     -
                                                     "purge[T](x!1, u_filter(A!1, x!1))")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (inst - "x!2")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (typepred! "y!1")
                                              (("2"
                                                (expand "purge")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand "u_filter")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (split)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (inst
                                             -
                                             "purge[T](x!1, u_filter(A!1, x!1))")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3 -4)
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "x!2")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "u_filter" 2 (1 3))
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1"
                            (case "leq(i!1, min(purge(i!1, u_filter(A!1, i!1))))")
                            (("1" (typepred! "leq")
                              (("1" (expand "total_order?")
                                (("1" (expand "partial_order?")
                                  (("1" (expand "preorder?")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (inst - "i!1" _ "x!1")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (case "FORALL (y: ({t: T | purge(i!1, u_filter(A!1, i!1))(t) > 0})): leq(i!1, y)")
                                (("1" (expand "min")
                                  (("1" (expand "bag_to_set")
                                    (("1" (inst?)
                                      (("1"
                                        (hide 2 3 4 5)
                                        (("1"
                                          (split)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (inst
                                                 -
                                                 "purge[T](i!1, u_filter(A!1, i!1))")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "empty?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst - "x!2")
                                                (("2"
                                                  (hide -1 -2)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (skosimp*)
                                    (("2" (typepred! "y!1")
                                      (("2"
                                        (expand "purge")
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "u_filter")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1" (flatten) nil nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lift-if)
                            (("2" (ground)
                              (("2" (expand "min")
                                (("2" (expand "bag_to_set")
                                  (("2"
                                    (typepred!
                                     "min({t: T | purge(i!1, u_filter(A!1, i!1))(t) > 0})")
                                    (("1" (hide -1)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (split)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (inst
                                               -
                                               "purge[T](i!1, u_filter(A!1, i!1))")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide -2 -3 -4 1 2)
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst - "x!2")
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "finite_bag" bag_filters nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (bag type-eq-decl nil bags nil)
    (u_filter const-decl "bag" bag_filters nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" bags nil)
    (nonempty_finite_bag type-eq-decl nil finite_bags nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (min const-decl "T" finite_bags_minmax nil)
    (purge const-decl "bag" bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (finite_pred2 formula-decl nil finite_sets nil)
    (i!1 skolem-const-decl "T" bag_filters nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (partial_order? const-decl "bool" orders nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (A!1 skolem-const-decl "finite_bag[T]" bag_filters nil)
    (x!1 skolem-const-decl "T" bag_filters nil)
    (antisymmetric? const-decl "bool" relations nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (> const-decl "bool" reals nil)
    (finite_bag formula-decl nil finite_bags nil))
   nil)
  (u_filter_min_purge-1 nil 3289670484
   ("" (skosimp*)
    (("" (decompose-equality +)
      (("" (lemma "finite_bag")
        (("" (lemma "finite_pred2")
          (("" (expand "purge" 1 2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (replace - :hide? t)
                    (("1" (expand "u_filter" 1 1)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1)
                              (("1" (expand "min")
                                (("1" (expand "bag_to_set")
                                  (("1"
                                    (case "leq(x!1, min({t: T | purge(x!1, u_filter(A!1, x!1))(t) > 0}))")
                                    (("1" (typepred! "leq")
                                      (("1"
                                        (expand "total_order?")
                                        (("1"
                                          (expand "partial_order?")
                                          (("1"
                                            (expand "antisymmetric?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (hide -2 -3)
                                                      (("1"
                                                        (typepred!
                                                         "min({t: T | purge(x!1, u_filter(A!1, x!1))(t) > 0})")
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (case
                                                             "purge(x!1, u_filter(A!1, x!1))(x!1) = 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide -1 -2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 -3 -4)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "purge[T](x!1, u_filter(A!1, x!1))")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 -3)
                                                      (("2"
                                                        (expand "empty?")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst - "x!2")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1)
                                      (("2"
                                        (case
                                         "FORALL (y: ({t: T | purge(x!1, u_filter(A!1, x!1))(t) > 0})): leq(x!1, y)")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (split)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split)
                                                  (("1" (propax) nil nil)
                                                   ("2"
                                                    (inst
                                                     -
                                                     "purge[T](x!1, u_filter(A!1, x!1))")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (inst - "x!2")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (typepred! "y!1")
                                              (("2"
                                                (expand "purge")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand "u_filter")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (split)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (inst
                                             -
                                             "purge[T](x!1, u_filter(A!1, x!1))")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3 -4)
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "x!2")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "u_filter" 2 (1 3))
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand "min")
                            (("1" (expand "bag_to_set")
                              (("1"
                                (typepred!
                                 "min({t: T | purge(i!1, u_filter(A!1, i!1))(t) > 0})")
                                (("1" (hide -1)
                                  (("1" (inst?)
                                    (("1" (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (split)
                                    (("1" (inst?)
                                      (("1"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (inst
                                           -
                                           "purge[T](i!1, u_filter(A!1, i!1))")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -2 -3 -4 1 2)
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst - "x!2")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (case "leq(i!1, min(purge(i!1, u_filter(A!1, i!1))))")
                            (("1" (typepred! "leq")
                              (("1" (expand "total_order?")
                                (("1" (expand "partial_order?")
                                  (("1" (expand "preorder?")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (inst - "i!1" _ "x!1")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (case "FORALL (y: ({t: T | purge(i!1, u_filter(A!1, i!1))(t) > 0})): leq(i!1, y)")
                                (("1" (expand "min")
                                  (("1" (expand "bag_to_set")
                                    (("1" (inst?)
                                      (("1"
                                        (hide 2 3 4 5)
                                        (("1"
                                          (split)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (inst
                                                 -
                                                 "purge[T](i!1, u_filter(A!1, i!1))")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "empty?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst - "x!2")
                                                (("2"
                                                  (hide -1 -2)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (skosimp*)
                                    (("2" (typepred! "y!1")
                                      (("2"
                                        (expand "purge")
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "u_filter")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1" (flatten) nil nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (purge const-decl "bag" bags nil) (empty? const-decl "bool" bags nil)
    (bag type-eq-decl nil bags nil)
    (nonempty_finite_bag type-eq-decl nil finite_bags nil)
    (min const-decl "T" finite_bags_minmax nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (finite_bag formula-decl nil finite_bags nil))
   shostak))
 (filter_exists 0
  (filter_exists-7 "" 3308931163
   ("" (use "finite_bag_induction")
    (("" (split)
      (("1" (propax) nil nil)
       ("2" (flatten) (("2" (hide 1 3) (("2" (grind) nil nil)) nil)) nil)
       ("3" (skosimp*)
        (("3" (hide 3)
          (("3" (split)
            (("1" (skosimp*)
              (("1" (use "card_bag_insert")
                (("1" (replace - :hide? t)
                  (("1"
                    (case "EXISTS (k:T): member(k, insert(x!1,b!1)) AND leq(i!1,k) AND i!1 /=k AND 2 * card(u_filter(insert(x!1, b!1), k)) >= card(b!1) + 1")
                    (("1" (skosimp*)
                      (("1" (inst + "k!1")
                        (("1" (split)
                          (("1"
                            (case "card(l_filter(insert(x!1, b!1), k!1)) > card(l_filter(b!1, i!1))")
                            (("1" (assert) nil nil)
                             ("2" (hide -3 -5 2)
                              (("2" (lemma "l_filter_orders")
                                (("2" (inst - "insert(x!1, b!1)" "i!1" "k!1")
                                  (("2" (assert)
                                    (("2" (use "l_filter_insert")
                                      (("2"
                                        (lemma "subbag_trans")
                                        (("2"
                                          (inst
                                           -
                                           "l_filter(b!1, i!1)"
                                           "l_filter(insert(x!1, b!1), i!1)"
                                           "l_filter(insert(x!1, b!1), k!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (lemma "card_subbag_strict")
                                                (("2"
                                                  (inst
                                                   -
                                                   "l_filter(b!1, i!1)"
                                                   "l_filter(insert(x!1, b!1), k!1)"
                                                   "k!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but (1 -2))
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (typepred! "leq")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred! "leq")
                                                            (("2"
                                                              (expand
                                                               "total_order?")
                                                              (("2"
                                                                (expand
                                                                 "partial_order?")
                                                                (("2"
                                                                  (expand
                                                                   "preorder?")
                                                                  (("2"
                                                                    (expand
                                                                     "reflexive?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 -4 2))
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (typepred! "leq")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "EXISTS (k:T): member(k, insert(x!1, b!1)) AND leq(k, i!1) AND i!1 /=k AND 2 * card(l_filter(insert(x!1, b!1), k)) > card(b!1) + 1")
                      (("1" (skosimp*)
                        (("1" (hide 2)
                          (("1" (inst + "k!1")
                            (("1" (split)
                              (("1" (propax) nil nil)
                               ("2" (hide -3 -4)
                                (("2" (lemma "u_filter_orders")
                                  (("2"
                                    (inst - "insert(x!1, b!1)" "i!1" "k!1")
                                    (("2" (assert)
                                      (("2"
                                        (use "u_filter_insert")
                                        (("2"
                                          (lemma "subbag_trans")
                                          (("2"
                                            (inst
                                             -
                                             "u_filter(b!1, i!1)"
                                             "u_filter(insert(x!1, b!1), i!1)"
                                             "u_filter(insert(x!1, b!1), k!1)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -2 -3)
                                                (("2"
                                                  (lemma "card_subbag_strict")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "u_filter(b!1, i!1)"
                                                     "u_filter(insert(x!1, b!1), k!1)"
                                                     "k!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (hide-all-but
                                                           (1 -2))
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (typepred!
                                                               "leq")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "reflexive?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 -4 2))
                                                          (("2"
                                                            (grind)
                                                            (("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "antisymmetric?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "finite_bag")
                        (("2" (lemma "finite_pred2[T]")
                          (("2" (inst 3 "i!1")
                            (("2" (case "x!1 = i!1")
                              (("1" (replace - :hide? t)
                                (("1" (split)
                                  (("1" (use "l_filter_insert_assoc")
                                    (("1" (replace - :hide? t)
                                      (("1"
                                        (use "card_bag_insert")
                                        (("1"
                                          (replace - :hide? t)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (use "u_filter_insert_assoc")
                                    (("2" (replace - :hide? t)
                                      (("2"
                                        (use "card_bag_insert")
                                        (("2"
                                          (replace - :hide? t)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (split)
                                (("1" (case "leq(i!1, x!1)")
                                  (("1" (hide 3)
                                    (("1"
                                      (case
                                       "2 * card(l_filter(insert(x!1, b!1), i!1)) <= card(b!1) + 1")
                                      (("1"
                                        (hide -5 -6)
                                        (("1"
                                          (case
                                           "card(l_filter(insert(x!1, b!1), i!1)) + card(u_filter(insert(x!1, b!1), min(purge(i!1, u_filter(insert(x!1, b!1), i!1))))) = card(b!1) + 1")
                                          (("1"
                                            (inst
                                             +
                                             "min(purge(i!1, u_filter(insert(x!1, b!1), i!1)))")
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "min")
                                                      (("1"
                                                        (expand "bag_to_set")
                                                        (("1"
                                                          (typepred!
                                                           "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand "purge")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide 1)
                                                                      (("2"
                                                                        (use
                                                                         "u_filter_subbag")
                                                                        (("2"
                                                                          (expand
                                                                           "subbag?")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -
                                                                                       "purge(i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "purge")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (use
                                                                                             "finite_purge")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -2
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (use
                                                                             "finite_purge")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -3 -4 1)
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (expand "bag_to_set")
                                                    (("2"
                                                      (typepred!
                                                       "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -1 -2)
                                                        (("1"
                                                          (case
                                                           "FORALL (j: ({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})): leq(i!1, j)")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (hide 2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "finite_purge")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred!
                                                               "j!1")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (split)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "finite_purge")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "empty?")
                                                          (("2"
                                                            (inst - "x!1")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (1 -3 -4 -5))
                                                (("3"
                                                  (expand "min")
                                                  (("3"
                                                    (expand "bag_to_set")
                                                    (("3"
                                                      (typepred!
                                                       "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand "purge")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "finite_purge")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (inst - "x!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "purge")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (reveal
                                                                       3)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -3 -4 -2 3))
                                            (("2"
                                              (use "u_filter_min_purge")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (replace - :hide? t)
                                                  (("1"
                                                    (use "l_u_fullset2")
                                                    (("1"
                                                      (use
                                                       "card_disjoint_add")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace -1 :dir rl)
                                                          (("1"
                                                            (reveal -9)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (hide -2 -3)
                                                            (("2"
                                                              (grind)
                                                              (("1"
                                                                (typepred!
                                                                 "leq")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred!
                                                                 "leq")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (hide -3 -4)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -2 1 3 4 5)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (hide 4 5)
                                    (("2" (lemma "card_subbag_strict2")
                                      (("2"
                                        (inst
                                         -
                                         "l_filter(b!1, i!1)"
                                         "l_filter(insert(x!1, b!1), i!1)"
                                         "x!1")
                                        (("2"
                                          (split)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (use "l_filter_insert")
                                            nil
                                            nil)
                                           ("3"
                                            (hide-all-but (1 2))
                                            (("3"
                                              (grind)
                                              (("3"
                                                (typepred! "leq")
                                                (("3"
                                                  (expand "total_order?")
                                                  (("3"
                                                    (expand "dichotomous?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (case "leq(x!1, i!1)")
                                  (("1" (hide 4)
                                    (("1"
                                      (case
                                       "2 * card(u_filter(insert(x!1, b!1), i!1)) < card(b!1) + 1")
                                      (("1"
                                        (hide -5 -6)
                                        (("1"
                                          (case
                                           "card(u_filter(insert(x!1, b!1), i!1)) + card(l_filter(insert(x!1, b!1), max(purge(i!1, l_filter(insert(x!1, b!1), i!1))))) = card(b!1) + 1")
                                          (("1"
                                            (inst
                                             +
                                             "max(purge(i!1, l_filter(insert(x!1, b!1), i!1)))")
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "max")
                                                      (("1"
                                                        (expand "bag_to_set")
                                                        (("1"
                                                          (typepred!
                                                           "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand "purge")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide 1)
                                                                      (("2"
                                                                        (use
                                                                         "l_filter_subbag")
                                                                        (("2"
                                                                          (expand
                                                                           "subbag?")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -
                                                                                       "purge(i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "purge")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (use
                                                                                             "finite_purge")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -2
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (use
                                                                             "finite_purge")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -3 -4 1)
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (expand "max")
                                                  (("2"
                                                    (expand "bag_to_set")
                                                    (("2"
                                                      (typepred!
                                                       "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -1 -2)
                                                        (("1"
                                                          (case
                                                           "FORALL (j: ({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})): leq(j, i!1)")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (hide 2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                        (("2"
                                                                          (use
                                                                           "finite_purge")
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred!
                                                               "j!1")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (split)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "finite_purge")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "empty?")
                                                          (("2"
                                                            (inst - "x!1")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (1 -3 -4 -5))
                                                (("3"
                                                  (expand "max")
                                                  (("3"
                                                    (expand "bag_to_set")
                                                    (("3"
                                                      (typepred!
                                                       "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand "purge")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "finite_purge")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (inst - "x!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "purge")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (reveal
                                                                       3)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -3 -4 -2 3))
                                            (("2"
                                              (use "l_filter_max_purge")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (replace - :hide? t)
                                                  (("1"
                                                    (use "l_u_fullset")
                                                    (("1"
                                                      (use
                                                       "card_disjoint_add")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace -1 :dir rl)
                                                          (("1"
                                                            (reveal -9)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (hide -2 -3)
                                                            (("2"
                                                              (grind)
                                                              (("1"
                                                                (typepred!
                                                                 "leq")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred!
                                                                 "leq")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (hide -3 -4)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -2 1 3 4 5)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (hide 4 5)
                                    (("2" (lemma "card_subbag_strict2")
                                      (("2"
                                        (inst
                                         -
                                         "u_filter(b!1, i!1)"
                                         "u_filter(insert(x!1, b!1), i!1)"
                                         "x!1")
                                        (("2"
                                          (split)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (use "u_filter_insert")
                                            nil
                                            nil)
                                           ("3"
                                            (hide-all-but (1 2))
                                            (("3"
                                              (grind)
                                              (("3"
                                                (typepred! "leq")
                                                (("3"
                                                  (expand "total_order?")
                                                  (("3"
                                                    (expand "dichotomous?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "x!1")
              (("2" (case "insert(x!1, b!1) = singleton_bag(x!1)")
                (("1" (replace - :hide? t)
                  (("1" (use "card_singleton_bag")
                    (("1" (split)
                      (("1" (use "l_filter_singleton")
                        (("1" (replace -) (("1" (assert) nil nil)) nil)) nil)
                       ("2" (use "u_filter_singleton")
                        (("2" (replace -) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "insert")
                    (("2" (expand "singleton_bag")
                      (("2" (decompose-equality +) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil name-judgement "finite_bag[T]" bag_filters nil)
    (emptybag const-decl "bag" bags nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (l_filter_singleton formula-decl nil bag_filters nil)
    (u_filter_singleton formula-decl nil bag_filters nil)
    (card_singleton_bag formula-decl nil finite_bags nil)
    (singleton_bag const-decl "bag" bags nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (u_filter_orders formula-decl nil bag_filters nil)
    (u_filter_insert formula-decl nil bag_filters nil)
    (finite_pred2 formula-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (l_filter_insert_assoc formula-decl nil bag_filters nil)
    (u_filter_insert_assoc formula-decl nil bag_filters nil)
    (< const-decl "bool" reals nil)
    (max const-decl "T" finite_bags_minmax nil)
    (max const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}"
         finite_sets_minmax finite_sets)
    (l_filter_subbag formula-decl nil bag_filters nil)
    (nil application-judgement "finite_set[T]" bag_filters nil)
    (nil application-judgement "nat" bag_filters nil)
    (l_filter_max_purge formula-decl nil bag_filters nil)
    (l_u_fullset formula-decl nil bag_filters nil)
    (<= const-decl "bool" reals nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nonempty_finite_bag type-eq-decl nil finite_bags nil)
    (min const-decl "T" finite_bags_minmax nil)
    (purge const-decl "bag" bags nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (subbag? const-decl "bool" bags nil)
    (finite_purge formula-decl nil finite_bags nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (b!1 skolem-const-decl "finite_bag[T]" bag_filters nil)
    (x!1 skolem-const-decl "T" bag_filters nil)
    (i!1 skolem-const-decl "T" bag_filters nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (u_filter_subbag formula-decl nil bag_filters nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (u_filter_min_purge formula-decl nil bag_filters nil)
    (card_disjoint_add formula-decl nil finite_bags nil)
    (disjoint? const-decl "bool" bags nil)
    (intersection const-decl "bag" bags nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (nil application-judgement "finite_bag[T]" bag_filters nil)
    (l_u_fullset2 formula-decl nil bag_filters nil)
    (card_subbag_strict2 formula-decl nil finite_bags_lems nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_bag formula-decl nil finite_bags nil)
    (l_filter_insert formula-decl nil bag_filters nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (card_subbag_strict formula-decl nil finite_bags_lems nil)
    (subbag_trans formula-decl nil bags nil)
    (l_filter_orders formula-decl nil bag_filters nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (leq formal-const-decl "(total_order?[T])" bag_filters nil)
    (total_order? const-decl "bool" orders nil)
    (insert const-decl "bag" bags nil) (member const-decl "bool" bags nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nil application-judgement "nonempty_finite_bag[T]" bag_filters nil)
    (card_bag_insert formula-decl nil finite_bags nil)
    (nil application-judgement "finite_bag" bag_filters nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nil application-judgement "finite_bag" bag_filters nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bag type-eq-decl nil bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (pred type-eq-decl nil defined_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (card const-decl "nat" finite_bags nil)
    (l_filter const-decl "bag" bag_filters nil)
    (u_filter const-decl "bag" bag_filters nil)
    (empty? const-decl "bool" bags nil)
    (T formal-nonempty-type-decl nil bag_filters nil)
    (finite_bag_induction formula-decl nil finite_bags_inductions nil))
   shostak)
  (filter_exists-6 "branching on leq" 3308931116
   ("" (use "finite_bag_induction")
    (("" (split)
      (("1" (propax) nil)
       ("2" (flatten) (("2" (hide 1 3) (("2" (grind) nil)))))
       ("3" (skosimp*)
        (("3" (hide 3)
          (("3" (split)
            (("1" (skosimp*)
              (("1" (use "card_bag_insert")
                (("1" (replace - :hide? t)
                  (("1"
                    (case "EXISTS (k:T): member(k, insert(x!1,b!1)) AND leq(i!1,k) AND i!1 /=k AND 2 * card(u_filter(insert(x!1, b!1), k)) >= card(b!1) + 1")
                    (("1" (skosimp*)
                      (("1" (inst + "k!1")
                        (("1" (split)
                          (("1"
                            (case "card(l_filter(insert(x!1, b!1), k!1)) > card(l_filter(b!1, i!1))")
                            (("1" (assert) nil)
                             ("2" (hide -3 -5 2)
                              (("2" (lemma "l_filter_orders")
                                (("2" (inst - "insert(x!1, b!1)" "i!1" "k!1")
                                  (("2" (assert)
                                    (("2" (use "l_filter_insert")
                                      (("2"
                                        (lemma "subbag_trans")
                                        (("2"
                                          (inst
                                           -
                                           "l_filter(b!1, i!1)"
                                           "l_filter(insert(x!1, b!1), i!1)"
                                           "l_filter(insert(x!1, b!1), k!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (lemma "card_subbag_strict")
                                                (("2"
                                                  (inst
                                                   -
                                                   "l_filter(b!1, i!1)"
                                                   "l_filter(insert(x!1, b!1), k!1)"
                                                   "k!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but (1 -2))
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (typepred! "leq")
                                                            (("1"
                                                              (grind)
                                                              nil)))
                                                           ("2"
                                                            (typepred! "leq")
                                                            (("2"
                                                              (expand
                                                               "total_order?")
                                                              (("2"
                                                                (expand
                                                                 "partial_order?")
                                                                (("2"
                                                                  (expand
                                                                   "preorder?")
                                                                  (("2"
                                                                    (expand
                                                                     "reflexive?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst?)
                                                                        nil)))))))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 -4 2))
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (typepred! "leq")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))))))))))))))))))
                           ("2" (propax) nil)))))))
                     ("2"
                      (case "EXISTS (k:T): member(k, insert(x!1, b!1)) AND leq(k, i!1) AND i!1 /=k AND 2 * card(l_filter(insert(x!1, b!1), k)) > card(b!1) + 1")
                      (("1" (skosimp*)
                        (("1" (hide 2)
                          (("1" (inst + "k!1")
                            (("1" (split)
                              (("1" (propax) nil)
                               ("2" (hide -3 -4)
                                (("2" (lemma "u_filter_orders")
                                  (("2"
                                    (inst - "insert(x!1, b!1)" "i!1" "k!1")
                                    (("2" (assert)
                                      (("2"
                                        (use "u_filter_insert")
                                        (("2"
                                          (lemma "subbag_trans")
                                          (("2"
                                            (inst
                                             -
                                             "u_filter(b!1, i!1)"
                                             "u_filter(insert(x!1, b!1), i!1)"
                                             "u_filter(insert(x!1, b!1), k!1)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -2 -3)
                                                (("2"
                                                  (lemma "card_subbag_strict")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "u_filter(b!1, i!1)"
                                                     "u_filter(insert(x!1, b!1), k!1)"
                                                     "k!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (hide-all-but
                                                           (1 -2))
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (typepred!
                                                               "leq")
                                                              (("1"
                                                                (grind)
                                                                nil)))
                                                             ("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "reflexive?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          nil)))))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 -4 2))
                                                          (("2"
                                                            (grind)
                                                            (("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "antisymmetric?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))
                       ("2" (lemma "finite_bag")
                        (("2" (lemma "finite_pred2[T]")
                          (("2" (inst 3 "i!1")
                            (("2" (case "x!1 = i!1")
                              (("1" (replace - :hide? t)
                                (("1" (split)
                                  (("1" (use "l_filter_insert_assoc")
                                    (("1" (replace - :hide? t)
                                      (("1"
                                        (use "card_bag_insert")
                                        (("1"
                                          (replace - :hide? t)
                                          (("1" (assert) nil)))))))))
                                   ("2" (use "u_filter_insert_assoc")
                                    (("2" (replace - :hide? t)
                                      (("2"
                                        (use "card_bag_insert")
                                        (("2"
                                          (replace - :hide? t)
                                          (("2" (assert) nil)))))))))))))
                               ("2" (split)
                                (("1" (case "leq(i!1, x!1)")
                                  (("1" (hide 3)
                                    (("1"
                                      (case
                                       "2 * card(l_filter(insert(x!1, b!1), i!1)) <= card(b!1) + 1")
                                      (("1"
                                        (hide -5 -6)
                                        (("1"
                                          (case
                                           "card(l_filter(insert(x!1, b!1), i!1)) + card(u_filter(insert(x!1, b!1), min(purge(i!1, u_filter(insert(x!1, b!1), i!1))))) = card(b!1) + 1")
                                          (("1"
                                            (inst
                                             +
                                             "min(purge(i!1, u_filter(insert(x!1, b!1), i!1)))")
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "min")
                                                      (("1"
                                                        (expand "bag_to_set")
                                                        (("1"
                                                          (typepred!
                                                           "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand "purge")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide 1)
                                                                      (("2"
                                                                        (use
                                                                         "u_filter_subbag")
                                                                        (("2"
                                                                          (expand
                                                                           "subbag?")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -
                                                                                       "purge(i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "purge")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil)))))
                                                                                         ("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (use
                                                                                             "finite_purge")
                                                                                            (("2"
                                                                                              (use
                                                                                               "finite_u_filter")
                                                                                              (("2"
                                                                                                (use
                                                                                                 "finite_insert")
                                                                                                nil)))))))))
                                                                                       ("2"
                                                                                        (hide
                                                                                         2
                                                                                         3)
                                                                                        (("2"
                                                                                          (use
                                                                                           "finite_purge")
                                                                                          (("2"
                                                                                            (use
                                                                                             "finite_u_filter")
                                                                                            (("2"
                                                                                              (use
                                                                                               "finite_insert")
                                                                                              nil)))))))))))))))
                                                                               ("2"
                                                                                (hide
                                                                                 -2
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil)))))))))))))))))))))))))))))
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (use
                                                                             "finite_purge")
                                                                            (("2"
                                                                              (use
                                                                               "finite_u_filter")
                                                                              (("2"
                                                                                (use
                                                                                 "finite_insert")
                                                                                nil)))))))))
                                                                       ("2"
                                                                        (use
                                                                         "finite_purge")
                                                                        (("2"
                                                                          (use
                                                                           "finite_u_filter")
                                                                          (("2"
                                                                            (use
                                                                             "finite_insert")
                                                                            nil)))))))))))))))
                                                             ("2"
                                                              (hide -3 -4 1)
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))))))))))
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (expand "bag_to_set")
                                                    (("2"
                                                      (typepred!
                                                       "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -1 -2)
                                                        (("1"
                                                          (case
                                                           "FORALL (j: ({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})): leq(i!1, j)")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (hide 2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (propax)
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "finite_purge")
                                                                            (("2"
                                                                              (use
                                                                               "finite_u_filter")
                                                                              (("2"
                                                                                (use
                                                                                 "finite_insert")
                                                                                nil)))))))
                                                                         ("2"
                                                                          (use
                                                                           "finite_purge")
                                                                          (("2"
                                                                            (use
                                                                             "finite_u_filter")
                                                                            (("2"
                                                                              (use
                                                                               "finite_insert")
                                                                              nil)))))))))))))))
                                                               ("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred!
                                                               "j!1")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))
                                                       ("2"
                                                        (split)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "finite_purge")
                                                                    (("2"
                                                                      (use
                                                                       "finite_u_filter")
                                                                      (("2"
                                                                        (use
                                                                         "finite_insert")
                                                                        nil)))))))
                                                                 ("2"
                                                                  (use
                                                                   "finite_purge")
                                                                  (("2"
                                                                    (use
                                                                     "finite_u_filter")
                                                                    (("2"
                                                                      (use
                                                                       "finite_insert")
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (expand "empty?")
                                                          (("2"
                                                            (inst - "x!1")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))
                                               ("3"
                                                (hide-all-but (1 -3 -4 -5))
                                                (("3"
                                                  (expand "min")
                                                  (("3"
                                                    (expand "bag_to_set")
                                                    (("3"
                                                      (typepred!
                                                       "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand "purge")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                nil)))))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "finite_purge")
                                                                    (("2"
                                                                      (use
                                                                       "finite_u_filter")
                                                                      (("2"
                                                                        (use
                                                                         "finite_insert")
                                                                        nil)))))))
                                                                 ("2"
                                                                  (use
                                                                   "finite_purge")
                                                                  (("2"
                                                                    (use
                                                                     "finite_u_filter")
                                                                    (("2"
                                                                      (use
                                                                       "finite_insert")
                                                                      nil)))))))))))
                                                           ("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (inst - "x!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "purge")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (reveal
                                                                       3)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))
                                               ("4" (assert) nil)))))
                                           ("2"
                                            (hide-all-but (1 -3 -4 -2 3))
                                            (("2"
                                              (use "u_filter_min_purge")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (replace - :hide? t)
                                                  (("1"
                                                    (use "l_u_fullset2")
                                                    (("1"
                                                      (use
                                                       "card_disjoint_add")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace -1 :dir rl)
                                                          (("1"
                                                            (reveal -9)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil)))))))
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (hide -2 -3)
                                                            (("2"
                                                              (grind)
                                                              (("1"
                                                                (typepred!
                                                                 "leq")
                                                                (("1"
                                                                  (grind)
                                                                  nil)))
                                                               ("2"
                                                                (typepred!
                                                                 "leq")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (hide -3 -4)
                                                    (("2" (grind) nil)))))))
                                               ("2"
                                                (use "finite_insert")
                                                nil)))))
                                           ("3"
                                            (use "finite_u_filter")
                                            (("3" (use "finite_insert") nil)))
                                           ("4"
                                            (split)
                                            (("1"
                                              (use "finite_purge")
                                              (("1"
                                                (use "finite_u_filter")
                                                (("1"
                                                  (use "finite_insert")
                                                  nil)))))
                                             ("2"
                                              (hide -2 1 3 4 5)
                                              (("2" (grind) nil)))))))))
                                       ("2" (assert) nil)))))
                                   ("2" (hide 4 5)
                                    (("2" (lemma "card_subbag_strict2")
                                      (("2"
                                        (inst
                                         -
                                         "l_filter(b!1, i!1)"
                                         "l_filter(insert(x!1, b!1), i!1)"
                                         "x!1")
                                        (("2"
                                          (split)
                                          (("1" (assert) nil)
                                           ("2" (use "l_filter_insert") nil)
                                           ("3"
                                            (hide-all-but (1 2))
                                            (("3"
                                              (grind)
                                              (("3"
                                                (typepred! "leq")
                                                (("3"
                                                  (expand "total_order?")
                                                  (("3"
                                                    (expand "dichotomous?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil)))))))))))))))))))))))))
                                 ("2" (case "leq(x!1, i!1)")
                                  (("1" (hide 4)
                                    (("1"
                                      (case
                                       "2 * card(u_filter(insert(x!1, b!1), i!1)) < card(b!1) + 1")
                                      (("1"
                                        (hide -5 -6)
                                        (("1"
                                          (case
                                           "card(u_filter(insert(x!1, b!1), i!1)) + card(l_filter(insert(x!1, b!1), max(purge(i!1, l_filter(insert(x!1, b!1), i!1))))) = card(b!1) + 1")
                                          (("1"
                                            (inst
                                             +
                                             "max(purge(i!1, l_filter(insert(x!1, b!1), i!1)))")
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "max")
                                                      (("1"
                                                        (expand "bag_to_set")
                                                        (("1"
                                                          (typepred!
                                                           "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand "purge")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide 1)
                                                                      (("2"
                                                                        (use
                                                                         "l_filter_subbag")
                                                                        (("2"
                                                                          (expand
                                                                           "subbag?")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -
                                                                                       "purge(i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "purge")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil)))))
                                                                                         ("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (use
                                                                                             "finite_purge")
                                                                                            (("2"
                                                                                              (use
                                                                                               "finite_l_filter")
                                                                                              (("2"
                                                                                                (use
                                                                                                 "finite_insert")
                                                                                                nil)))))))))
                                                                                       ("2"
                                                                                        (use
                                                                                         "finite_purge")
                                                                                        (("2"
                                                                                          (use
                                                                                           "finite_l_filter")
                                                                                          (("2"
                                                                                            (use
                                                                                             "finite_insert")
                                                                                            nil)))))))))))))
                                                                               ("2"
                                                                                (hide
                                                                                 -2
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil)))))))))))))))))))))))))))))
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (use
                                                                             "finite_purge")
                                                                            (("2"
                                                                              (use
                                                                               "finite_l_filter")
                                                                              (("2"
                                                                                (use
                                                                                 "finite_insert")
                                                                                nil)))))))))
                                                                       ("2"
                                                                        (use
                                                                         "finite_purge")
                                                                        (("2"
                                                                          (use
                                                                           "finite_l_filter")
                                                                          (("2"
                                                                            (use
                                                                             "finite_insert")
                                                                            nil)))))))))))))))
                                                             ("2"
                                                              (hide -3 -4 1)
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))))))))))
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (expand "max")
                                                  (("2"
                                                    (expand "bag_to_set")
                                                    (("2"
                                                      (typepred!
                                                       "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -1 -2)
                                                        (("1"
                                                          (case
                                                           "FORALL (j: ({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})): leq(j, i!1)")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (hide 2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                        (("1"
                                                                          (use
                                                                           "finite_purge")
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil)))
                                                                           ("2"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)
                                                                             ("2"
                                                                              (use
                                                                               "finite_purge")
                                                                              (("2"
                                                                                (use
                                                                                 "finite_l_filter")
                                                                                (("2"
                                                                                  (use
                                                                                   "finite_insert")
                                                                                  nil)))))))))
                                                                         ("2"
                                                                          (use
                                                                           "finite_purge")
                                                                          (("2"
                                                                            (use
                                                                             "finite_l_filter")
                                                                            (("2"
                                                                              (use
                                                                               "finite_insert")
                                                                              nil)))))))))))))))
                                                               ("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred!
                                                               "j!1")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))
                                                       ("2"
                                                        (split)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "finite_purge")
                                                                    (("2"
                                                                      (use
                                                                       "finite_l_filter")
                                                                      (("2"
                                                                        (use
                                                                         "finite_insert")
                                                                        nil)))))))
                                                                 ("2"
                                                                  (use
                                                                   "finite_purge")
                                                                  (("2"
                                                                    (use
                                                                     "finite_l_filter")
                                                                    (("2"
                                                                      (use
                                                                       "finite_insert")
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (expand "empty?")
                                                          (("2"
                                                            (inst - "x!1")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))
                                               ("3"
                                                (hide-all-but (1 -3 -4 -5))
                                                (("3"
                                                  (expand "max")
                                                  (("3"
                                                    (expand "bag_to_set")
                                                    (("3"
                                                      (typepred!
                                                       "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand "purge")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                nil)))))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "finite_purge")
                                                                    (("2"
                                                                      (use
                                                                       "finite_l_filter")
                                                                      (("2"
                                                                        (use
                                                                         "finite_insert")
                                                                        nil)))))))
                                                                 ("2"
                                                                  (use
                                                                   "finite_purge")
                                                                  (("2"
                                                                    (use
                                                                     "finite_l_filter")
                                                                    (("2"
                                                                      (use
                                                                       "finite_insert")
                                                                      nil)))))))))))
                                                           ("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (inst - "x!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "purge")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (reveal
                                                                       3)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))))))))
                                               ("4" (grind) nil)))))
                                           ("2"
                                            (hide-all-but (1 -3 -4 -2 3))
                                            (("2"
                                              (use "l_filter_max_purge")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (replace - :hide? t)
                                                  (("1"
                                                    (use "l_u_fullset")
                                                    (("1"
                                                      (use
                                                       "card_disjoint_add")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace -1 :dir rl)
                                                          (("1"
                                                            (reveal -9)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil)))))))
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (hide -2 -3)
                                                            (("2"
                                                              (grind)
                                                              (("1"
                                                                (typepred!
                                                                 "leq")
                                                                (("1"
                                                                  (grind)
                                                                  nil)))
                                                               ("2"
                                                                (typepred!
                                                                 "leq")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (hide -3 -4)
                                                    (("2" (grind) nil)))))))
                                               ("2"
                                                (use "finite_insert")
                                                nil)))))
                                           ("3"
                                            (use "finite_l_filter")
                                            (("3" (use "finite_insert") nil)))
                                           ("4"
                                            (split)
                                            (("1"
                                              (use "finite_purge")
                                              (("1"
                                                (use "finite_l_filter")
                                                (("1"
                                                  (use "finite_insert")
                                                  nil)))))
                                             ("2"
                                              (expand "empty?")
                                              (("2"
                                                (inst - "x!1")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "purge")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (reveal 3)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))))))))
                                       ("2" (assert) nil)))))
                                   ("2" (hide 4 5)
                                    (("2" (lemma "card_subbag_strict2")
                                      (("2"
                                        (inst
                                         -
                                         "u_filter(b!1, i!1)"
                                         "u_filter(insert(x!1, b!1), i!1)"
                                         "x!1")
                                        (("2"
                                          (split)
                                          (("1" (assert) nil)
                                           ("2" (use "u_filter_insert") nil)
                                           ("3"
                                            (hide-all-but (1 2))
                                            (("3"
                                              (grind)
                                              (("3"
                                                (typepred! "leq")
                                                (("3"
                                                  (expand "total_order?")
                                                  (("3"
                                                    (expand "dichotomous?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil)))))))))))))))))))))))))))))))))))
                       ("3" (inst + "x!1")
                        (("3"
                          (case "EXISTS (k:T): member(k, insert(x!1, b!1)) AND leq(k, i!1) AND i!1 /=k AND 2 * card(l_filter(insert(x!1, b!1), k)) > card(b!1) + 1")
                          (("1" (skosimp*)
                            (("1" (lemma "finite_l_filter")
                              (("1" (inst - "insert[T](x!1, b!1)" "k!2")
                                (("1" (assert)
                                  (("1" (use "finite_insert") nil)))
                                 ("2" (use "finite_insert") nil)))))))
                           ("2" (skosimp*)
                            (("2" (lemma "finite_l_filter")
                              (("2" (inst - "insert[T](x!1, b!1)" "k!1")
                                (("1" (assert)
                                  (("1" (use "finite_insert") nil)))
                                 ("2" (use "finite_insert") nil)))))))
                           ("3" (skosimp*)
                            (("3" (lemma "finite_l_filter")
                              (("3" (inst - "insert[T](x!1, b!1)" "k!1")
                                (("1" (assert)
                                  (("1" (use "finite_insert") nil)))
                                 ("2" (use "finite_insert") nil)))))))))))))
                     ("3" (skosimp*)
                      (("3" (lemma "finite_u_filter")
                        (("3" (inst - "insert[T](x!1, b!1)" "k!1")
                          (("1" (assert) (("1" (use "finite_insert") nil)))
                           ("2" (use "finite_insert") nil)))))))))))))))
             ("2" (inst + "x!1")
              (("2" (case "insert(x!1, b!1) = singleton_bag(x!1)")
                (("1" (replace - :hide? t)
                  (("1" (use "card_singleton_bag")
                    (("1" (split)
                      (("1" (use "l_filter_singleton")
                        (("1" (replace -) (("1" (assert) nil)))))
                       ("2" (use "u_filter_singleton")
                        (("2" (replace -) (("2" (assert) nil)))))))))))
                 ("2" (hide 2)
                  (("2" (expand "insert")
                    (("2" (expand "singleton_bag")
                      (("2" (decompose-equality +)
                        (("2" (grind) nil))))))))))))))))))))))
    nil)
   ((finite_bag_induction formula-decl nil finite_bags_inductions nil)
    (empty? const-decl "bool" bags nil)
    (card const-decl "nat" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (card_bag_insert formula-decl nil finite_bags nil)
    (insert const-decl "bag" bags nil) (member const-decl "bool" bags nil)
    (subbag_trans formula-decl nil bags nil)
    (card_subbag_strict formula-decl nil finite_bags_lems nil)
    (finite_bag formula-decl nil finite_bags nil)
    (card_subbag_strict2 formula-decl nil finite_bags_lems nil)
    (intersection const-decl "bag" bags nil)
    (disjoint? const-decl "bool" bags nil)
    (card_disjoint_add formula-decl nil finite_bags nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (finite_purge formula-decl nil finite_bags nil)
    (finite_insert formula-decl nil finite_bags nil)
    (subbag? const-decl "bool" bags nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (purge const-decl "bag" bags nil)
    (min const-decl "T" finite_bags_minmax nil)
    (nonempty_finite_bag type-eq-decl nil finite_bags nil)
    (max const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}"
         finite_sets_minmax finite_sets)
    (max const-decl "T" finite_bags_minmax nil)
    (singleton_bag const-decl "bag" bags nil)
    (card_singleton_bag formula-decl nil finite_bags nil)
    (emptybag const-decl "bag" bags nil))
   nil)
  (filter_exists-5 "branching on leq" 3308655639
   ("" (auto-rewrite "finite_filter")
    (("" (auto-rewrite "finite_purge")
      (("" (auto-rewrite "finite_insert")
        (("" (use "finite_bag_induction")
          (("" (split)
            (("1" (propax) nil)
             ("2" (flatten) (("2" (hide 1 3) (("2" (grind) nil)))))
             ("3" (skosimp*)
              (("3" (hide 3)
                (("3" (split)
                  (("1" (skosimp*)
                    (("1" (use "card_bag_insert")
                      (("1" (replace - :hide? t)
                        (("1"
                          (case "EXISTS (k:T): member(k, insert(x!1,b!1)) AND leq(i!1,k) AND i!1 /=k AND 2 * card(u_filter(insert(x!1, b!1), k)) >= card(b!1) + 1")
                          (("1" (skosimp*)
                            (("1" (inst + "k!1")
                              (("1" (split)
                                (("1"
                                  (case "card(l_filter(insert(x!1, b!1), k!1)) > card(l_filter(b!1, i!1))")
                                  (("1" (assert) nil)
                                   ("2" (hide -3 -5 2)
                                    (("2" (lemma "l_filter_orders")
                                      (("2"
                                        (inst
                                         -
                                         "insert(x!1, b!1)"
                                         "i!1"
                                         "k!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (use "l_filter_insert")
                                            (("2"
                                              (lemma "subbag_trans")
                                              (("2"
                                                (inst
                                                 -
                                                 "l_filter(b!1, i!1)"
                                                 "l_filter(insert(x!1, b!1), i!1)"
                                                 "l_filter(insert(x!1, b!1), k!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -2 -3)
                                                    (("2"
                                                      (lemma
                                                       "card_subbag_strict")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "l_filter(b!1, i!1)"
                                                         "l_filter(insert(x!1, b!1), k!1)"
                                                         "k!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (hide-all-but
                                                               (1 -2))
                                                              (("1"
                                                                (grind)
                                                                (("1"
                                                                  (typepred!
                                                                   "leq")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)))
                                                                 ("2"
                                                                  (typepred!
                                                                   "leq")
                                                                  (("2"
                                                                    (expand
                                                                     "total_order?")
                                                                    (("2"
                                                                      (expand
                                                                       "partial_order?")
                                                                      (("2"
                                                                        (expand
                                                                         "preorder?")
                                                                        (("2"
                                                                          (expand
                                                                           "reflexive?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst?)
                                                                              nil)))))))))))))))))
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 -4 2))
                                                              (("2"
                                                                (grind)
                                                                (("2"
                                                                  (typepred!
                                                                   "leq")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))))))))))))))))))))))))
                                 ("2" (propax) nil)))))))
                           ("2"
                            (case "EXISTS (k:T): member(k, insert(x!1, b!1)) AND leq(k, i!1) AND i!1 /=k AND 2 * card(l_filter(insert(x!1, b!1), k)) > card(b!1) + 1")
                            (("1" (skosimp*)
                              (("1" (hide 2)
                                (("1" (inst + "k!1")
                                  (("1" (split)
                                    (("1" (propax) nil)
                                     ("2" (hide -3 -4)
                                      (("2"
                                        (lemma "u_filter_orders")
                                        (("2"
                                          (inst
                                           -
                                           "insert(x!1, b!1)"
                                           "i!1"
                                           "k!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use "u_filter_insert")
                                              (("2"
                                                (lemma "subbag_trans")
                                                (("2"
                                                  (inst
                                                   -
                                                   "u_filter(b!1, i!1)"
                                                   "u_filter(insert(x!1, b!1), i!1)"
                                                   "u_filter(insert(x!1, b!1), k!1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -2 -3)
                                                      (("2"
                                                        (lemma
                                                         "card_subbag_strict")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "u_filter(b!1, i!1)"
                                                           "u_filter(insert(x!1, b!1), k!1)"
                                                           "k!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (hide-all-but
                                                                 (1 -2))
                                                                (("1"
                                                                  (grind)
                                                                  (("1"
                                                                    (typepred!
                                                                     "leq")
                                                                    (("1"
                                                                      (grind)
                                                                      nil)))
                                                                   ("2"
                                                                    (typepred!
                                                                     "leq")
                                                                    (("2"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("2"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("2"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("2"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst?)
                                                                                nil)))))))))))))))))
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1 -4 2))
                                                                (("2"
                                                                  (grind)
                                                                  (("2"
                                                                    (typepred!
                                                                     "leq")
                                                                    (("2"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("2"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("2"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("2"
                                                                            (expand
                                                                             "antisymmetric?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))))
                             ("2" (lemma "finite_bag")
                              (("2" (lemma "finite_pred2[T]")
                                (("2" (inst 3 "i!1")
                                  (("2" (case "x!1 = i!1")
                                    (("1" (replace - :hide? t)
                                      (("1"
                                        (split)
                                        (("1"
                                          (use "l_filter_insert_assoc")
                                          (("1"
                                            (replace - :hide? t)
                                            (("1"
                                              (use "card_bag_insert")
                                              (("1"
                                                (replace - :hide? t)
                                                (("1" (assert) nil)))))))))
                                         ("2"
                                          (use "u_filter_insert_assoc")
                                          (("2"
                                            (replace - :hide? t)
                                            (("2"
                                              (use "card_bag_insert")
                                              (("2"
                                                (replace - :hide? t)
                                                (("2"
                                                  (assert)
                                                  nil)))))))))))))
                                     ("2" (split)
                                      (("1"
                                        (case "leq(i!1, x!1)")
                                        (("1"
                                          (hide 3)
                                          (("1"
                                            (case
                                             "2 * card(l_filter(insert(x!1, b!1), i!1)) <= card(b!1) + 1")
                                            (("1"
                                              (hide -5 -6)
                                              (("1"
                                                (case
                                                 "card(l_filter(insert(x!1, b!1), i!1)) + card(u_filter(insert(x!1, b!1), min(purge(i!1, u_filter(insert(x!1, b!1), i!1))))) = card(b!1) + 1")
                                                (("1"
                                                  (inst
                                                   +
                                                   "min(purge(i!1, u_filter(insert(x!1, b!1), i!1)))")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (hide -1 -2)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand "member")
                                                          (("1"
                                                            (expand "min")
                                                            (("1"
                                                              (expand
                                                               "bag_to_set")
                                                              (("1"
                                                                (typepred!
                                                                 "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (expand
                                                                     "purge")
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (assert)
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             1)
                                                                            (("2"
                                                                              (use
                                                                               "u_filter_subbag")
                                                                              (("2"
                                                                                (expand
                                                                                 "subbag?")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1
                                                                                       2)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -
                                                                                             "purge(i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "purge")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil)))))
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))
                                                                                     ("2"
                                                                                      (hide
                                                                                       -2
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil)))))))))))))))))))))))))))))
                                                                 ("2"
                                                                  (split)
                                                                  (("1"
                                                                    (hide 2)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))))))))))))
                                                                   ("2"
                                                                    (hide
                                                                     -3
                                                                     -4
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "empty?")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 -2 2)
                                                      (("2"
                                                        (expand "min")
                                                        (("2"
                                                          (expand
                                                           "bag_to_set")
                                                          (("2"
                                                            (typepred!
                                                             "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                            (("1"
                                                              (hide -1 -2)
                                                              (("1"
                                                                (case
                                                                 "FORALL (j: ({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})): leq(i!1, j)")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (hide 2)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (propax)
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                              (("2"
                                                                                (assert)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (expand
                                                                       "empty?")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (typepred!
                                                                     "j!1")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))
                                                             ("2"
                                                              (split)
                                                              (("1"
                                                                (hide 2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))
                                                               ("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("3"
                                                      (hide-all-but
                                                       (1 -3 -4 -5))
                                                      (("3"
                                                        (expand "min")
                                                        (("3"
                                                          (expand
                                                           "bag_to_set")
                                                          (("3"
                                                            (typepred!
                                                             "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (expand
                                                                 "purge")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      nil)))))))))
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (expand
                                                                   "empty?")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!1")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (expand
                                                                         "purge")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (reveal
                                                                             3)
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))))))))))))
                                                     ("4" (assert) nil)))
                                                   ("2"
                                                    (hide -2 -3)
                                                    (("2"
                                                      (hide 1 3 4)
                                                      (("2" (grind) nil)))))))
                                                 ("2"
                                                  (hide-all-but
                                                   (1 -3 -4 -2 3))
                                                  (("2"
                                                    (use "u_filter_min_purge")
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (replace - :hide? t)
                                                        (("1"
                                                          (use "l_u_fullset2")
                                                          (("1"
                                                            (use
                                                             "card_disjoint_add")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (reveal -9)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))))
                                                               ("2"
                                                                (hide -1 2)
                                                                (("2"
                                                                  (hide -2 -3)
                                                                  (("2"
                                                                    (grind)
                                                                    (("1"
                                                                      (typepred!
                                                                       "leq")
                                                                      (("1"
                                                                        (grind)
                                                                        nil)))
                                                                     ("2"
                                                                      (typepred!
                                                                       "leq")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))
                                                       ("2"
                                                        (hide 1)
                                                        (("2"
                                                          (hide -3 -4)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))
                                                 ("3"
                                                  (hide -2 1 3 4 5)
                                                  (("3" (grind) nil)))))))
                                             ("2" (assert) nil)))))
                                         ("2"
                                          (hide 4 5)
                                          (("2"
                                            (lemma "card_subbag_strict2")
                                            (("2"
                                              (inst
                                               -
                                               "l_filter(b!1, i!1)"
                                               "l_filter(insert(x!1, b!1), i!1)"
                                               "x!1")
                                              (("2"
                                                (split)
                                                (("1" (assert) nil)
                                                 ("2"
                                                  (use "l_filter_insert")
                                                  nil)
                                                 ("3"
                                                  (hide-all-but (1 2))
                                                  (("3"
                                                    (grind)
                                                    (("3"
                                                      (typepred! "leq")
                                                      (("3"
                                                        (expand
                                                         "total_order?")
                                                        (("3"
                                                          (expand
                                                           "dichotomous?")
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                nil)))))))))))))))))))))))))
                                       ("2"
                                        (case "leq(x!1, i!1)")
                                        (("1"
                                          (hide 4)
                                          (("1"
                                            (case
                                             "2 * card(u_filter(insert(x!1, b!1), i!1)) < card(b!1) + 1")
                                            (("1"
                                              (hide -5 -6)
                                              (("1"
                                                (case
                                                 "card(u_filter(insert(x!1, b!1), i!1)) + card(l_filter(insert(x!1, b!1), max(purge(i!1, l_filter(insert(x!1, b!1), i!1))))) = card(b!1) + 1")
                                                (("1"
                                                  (inst
                                                   +
                                                   "max(purge(i!1, l_filter(insert(x!1, b!1), i!1)))")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (hide -1 -2)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand "member")
                                                          (("1"
                                                            (expand "max")
                                                            (("1"
                                                              (expand
                                                               "bag_to_set")
                                                              (("1"
                                                                (typepred!
                                                                 "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (expand
                                                                     "purge")
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (assert)
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             1)
                                                                            (("2"
                                                                              (use
                                                                               "l_filter_subbag")
                                                                              (("2"
                                                                                (expand
                                                                                 "subbag?")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1
                                                                                       2)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -
                                                                                             "purge(i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "purge")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil)))))
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))
                                                                                     ("2"
                                                                                      (hide
                                                                                       -2
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil)))))))))))))))))))))))))))))
                                                                 ("2"
                                                                  (split)
                                                                  (("1"
                                                                    (hide 2)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))))))))))))
                                                                   ("2"
                                                                    (hide
                                                                     -3
                                                                     -4
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "empty?")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 -2 2)
                                                      (("2"
                                                        (expand "max")
                                                        (("2"
                                                          (expand
                                                           "bag_to_set")
                                                          (("2"
                                                            (typepred!
                                                             "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                            (("1"
                                                              (hide -1 -2)
                                                              (("1"
                                                                (case
                                                                 "FORALL (j: ({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})): leq(j, i!1)")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (hide 2)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (propax)
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                              (("2"
                                                                                (assert)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (expand
                                                                       "empty?")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (typepred!
                                                                     "j!1")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))
                                                             ("2"
                                                              (split)
                                                              (("1"
                                                                (hide 2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))
                                                               ("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("3"
                                                      (hide-all-but
                                                       (1 -3 -4 -5))
                                                      (("3"
                                                        (expand "max")
                                                        (("3"
                                                          (expand
                                                           "bag_to_set")
                                                          (("3"
                                                            (typepred!
                                                             "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (expand
                                                                 "purge")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      nil)))))))))
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (expand
                                                                   "empty?")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!1")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (expand
                                                                         "purge")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (reveal
                                                                             3)
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))))))))))))
                                                     ("4" (assert) nil)))
                                                   ("2"
                                                    (hide -2 -3)
                                                    (("2"
                                                      (hide 1 3 4)
                                                      (("2" (grind) nil)))))))
                                                 ("2"
                                                  (hide-all-but
                                                   (1 -3 -4 -2 3))
                                                  (("2"
                                                    (use "l_filter_max_purge")
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (replace - :hide? t)
                                                        (("1"
                                                          (use "l_u_fullset")
                                                          (("1"
                                                            (use
                                                             "card_disjoint_add")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (reveal -9)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))))
                                                               ("2"
                                                                (hide -1 2)
                                                                (("2"
                                                                  (hide -2 -3)
                                                                  (("2"
                                                                    (grind)
                                                                    (("1"
                                                                      (typepred!
                                                                       "leq")
                                                                      (("1"
                                                                        (grind)
                                                                        nil)))
                                                                     ("2"
                                                                      (typepred!
                                                                       "leq")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))
                                                       ("2"
                                                        (hide 1)
                                                        (("2"
                                                          (hide -3 -4)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))
                                                 ("3"
                                                  (hide -2 1 3 4 5)
                                                  (("3" (grind) nil)))))))
                                             ("2" (assert) nil)))))
                                         ("2"
                                          (hide 4 5)
                                          (("2"
                                            (lemma "card_subbag_strict2")
                                            (("2"
                                              (inst
                                               -
                                               "u_filter(b!1, i!1)"
                                               "u_filter(insert(x!1, b!1), i!1)"
                                               "x!1")
                                              (("2"
                                                (split)
                                                (("1" (assert) nil)
                                                 ("2"
                                                  (use "u_filter_insert")
                                                  nil)
                                                 ("3"
                                                  (hide-all-but (1 2))
                                                  (("3"
                                                    (grind)
                                                    (("3"
                                                      (typepred! "leq")
                                                      (("3"
                                                        (expand
                                                         "total_order?")
                                                        (("3"
                                                          (expand
                                                           "dichotomous?")
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                nil)))))))))))))))))))))))))))))))))))))))))))))
                   ("2" (inst + "x!1")
                    (("2" (case "insert(x!1, b!1) = singleton_bag(x!1)")
                      (("1" (replace - :hide? t)
                        (("1" (use "card_singleton_bag")
                          (("1" (split)
                            (("1" (use "l_filter_singleton")
                              (("1" (replace -) (("1" (assert) nil)))))
                             ("2" (use "u_filter_singleton")
                              (("2" (replace -) (("2" (assert) nil)))))))))))
                       ("2" (hide 2)
                        (("2" (expand "insert")
                          (("2" (expand "singleton_bag")
                            (("2" (decompose-equality +)
                              (("2" (grind) nil))))))))))))))))))))))))))))
    nil)
   nil nil)
  (filter_exists-4 "branching on leq" 3289921456
   ("" (use "finite_bag_induction")
    (("" (split)
      (("1" (propax) nil nil)
       ("2" (flatten) (("2" (hide 1 3) (("2" (grind) nil nil)) nil)) nil)
       ("3" (skosimp*)
        (("3" (hide 3)
          (("3" (split)
            (("1" (skosimp*)
              (("1" (use "card_bag_insert")
                (("1" (replace - :hide? t)
                  (("1"
                    (case "EXISTS (k:T): member(k, insert(x!1,b!1)) AND leq(i!1,k) AND i!1 /=k AND 2 * card(u_filter(insert(x!1, b!1), k)) >= card(b!1) + 1")
                    (("1" (skosimp*)
                      (("1" (inst + "k!1")
                        (("1" (split)
                          (("1"
                            (case "card(l_filter(insert(x!1, b!1), k!1)) > card(l_filter(b!1, i!1))")
                            (("1" (assert) nil nil)
                             ("2" (hide -3 -5 2)
                              (("2" (lemma "l_filter_orders")
                                (("2" (inst - "insert(x!1, b!1)" "i!1" "k!1")
                                  (("2" (assert)
                                    (("2" (use "l_filter_insert")
                                      (("2"
                                        (lemma "subbag_trans")
                                        (("2"
                                          (inst
                                           -
                                           "l_filter(b!1, i!1)"
                                           "l_filter(insert(x!1, b!1), i!1)"
                                           "l_filter(insert(x!1, b!1), k!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (lemma "card_subbag_strict")
                                                (("2"
                                                  (inst
                                                   -
                                                   "l_filter(b!1, i!1)"
                                                   "l_filter(insert(x!1, b!1), k!1)"
                                                   "k!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but (1 -2))
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (typepred! "leq")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred! "leq")
                                                            (("2"
                                                              (expand
                                                               "total_order?")
                                                              (("2"
                                                                (expand
                                                                 "partial_order?")
                                                                (("2"
                                                                  (expand
                                                                   "preorder?")
                                                                  (("2"
                                                                    (expand
                                                                     "reflexive?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 -4 2))
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (typepred! "leq")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "EXISTS (k:T): member(k, insert(x!1, b!1)) AND leq(k, i!1) AND i!1 /=k AND 2 * card(l_filter(insert(x!1, b!1), k)) > card(b!1) + 1")
                      (("1" (skosimp*)
                        (("1" (hide 2)
                          (("1" (inst + "k!1")
                            (("1" (split)
                              (("1" (propax) nil nil)
                               ("2" (hide -3 -4)
                                (("2" (lemma "u_filter_orders")
                                  (("2"
                                    (inst - "insert(x!1, b!1)" "i!1" "k!1")
                                    (("2" (assert)
                                      (("2"
                                        (use "u_filter_insert")
                                        (("2"
                                          (lemma "subbag_trans")
                                          (("2"
                                            (inst
                                             -
                                             "u_filter(b!1, i!1)"
                                             "u_filter(insert(x!1, b!1), i!1)"
                                             "u_filter(insert(x!1, b!1), k!1)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -2 -3)
                                                (("2"
                                                  (lemma "card_subbag_strict")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "u_filter(b!1, i!1)"
                                                     "u_filter(insert(x!1, b!1), k!1)"
                                                     "k!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (hide-all-but
                                                           (1 -2))
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (typepred!
                                                               "leq")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "reflexive?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 -4 2))
                                                          (("2"
                                                            (grind)
                                                            (("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "antisymmetric?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "finite_bag")
                        (("2" (lemma "finite_pred2[T]")
                          (("2" (inst 3 "i!1")
                            (("2" (case "x!1 = i!1")
                              (("1" (replace - :hide? t)
                                (("1" (split)
                                  (("1" (use "l_filter_insert_assoc")
                                    (("1" (replace - :hide? t)
                                      (("1"
                                        (use "card_bag_insert")
                                        (("1"
                                          (replace - :hide? t)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (use "u_filter_insert_assoc")
                                    (("2" (replace - :hide? t)
                                      (("2"
                                        (use "card_bag_insert")
                                        (("2"
                                          (replace - :hide? t)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (split)
                                (("1" (case "leq(i!1, x!1)")
                                  (("1" (hide 3)
                                    (("1"
                                      (case
                                       "2 * card(l_filter(insert(x!1, b!1), i!1)) <= card(b!1) + 1")
                                      (("1"
                                        (hide -5 -6)
                                        (("1"
                                          (case
                                           "card(l_filter(insert(x!1, b!1), i!1)) + card(u_filter(insert(x!1, b!1), min(purge(i!1, u_filter(insert(x!1, b!1), i!1))))) = card(b!1) + 1")
                                          (("1"
                                            (inst
                                             +
                                             "min(purge(i!1, u_filter(insert(x!1, b!1), i!1)))")
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "min")
                                                      (("1"
                                                        (expand "bag_to_set")
                                                        (("1"
                                                          (typepred!
                                                           "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand "purge")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide 1)
                                                                      (("2"
                                                                        (use
                                                                         "u_filter_subbag")
                                                                        (("2"
                                                                          (expand
                                                                           "subbag?")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -
                                                                                       "purge(i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "purge")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -2
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -3 -4 1)
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (expand "bag_to_set")
                                                    (("2"
                                                      (typepred!
                                                       "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -1 -2)
                                                        (("1"
                                                          (case
                                                           "FORALL (j: ({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})): leq(i!1, j)")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (hide 2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred!
                                                               "j!1")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (split)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "empty?")
                                                          (("2"
                                                            (inst - "x!1")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (1 -3 -4 -5))
                                                (("3"
                                                  (expand "min")
                                                  (("3"
                                                    (expand "bag_to_set")
                                                    (("3"
                                                      (typepred!
                                                       "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand "purge")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (inst - "x!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "purge")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (reveal
                                                                       3)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (hide 1 3 4)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -3 -4 -2 3))
                                            (("2"
                                              (use "u_filter_min_purge")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (replace - :hide? t)
                                                  (("1"
                                                    (use "l_u_fullset2")
                                                    (("1"
                                                      (use
                                                       "card_disjoint_add")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace -1 :dir rl)
                                                          (("1"
                                                            (reveal -9)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (hide -2 -3)
                                                            (("2"
                                                              (grind)
                                                              (("1"
                                                                (typepred!
                                                                 "leq")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred!
                                                                 "leq")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (hide -3 -4)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -2 1 3 4 5)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (hide 4 5)
                                    (("2" (lemma "card_subbag_strict2")
                                      (("2"
                                        (inst
                                         -
                                         "l_filter(b!1, i!1)"
                                         "l_filter(insert(x!1, b!1), i!1)"
                                         "x!1")
                                        (("2"
                                          (split)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (use "l_filter_insert")
                                            nil
                                            nil)
                                           ("3"
                                            (hide-all-but (1 2))
                                            (("3"
                                              (grind)
                                              (("3"
                                                (typepred! "leq")
                                                (("3"
                                                  (expand "total_order?")
                                                  (("3"
                                                    (expand "dichotomous?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (case "leq(x!1, i!1)")
                                  (("1" (hide 4)
                                    (("1"
                                      (case
                                       "2 * card(u_filter(insert(x!1, b!1), i!1)) < card(b!1) + 1")
                                      (("1"
                                        (hide -5 -6)
                                        (("1"
                                          (case
                                           "card(u_filter(insert(x!1, b!1), i!1)) + card(l_filter(insert(x!1, b!1), max(purge(i!1, l_filter(insert(x!1, b!1), i!1))))) = card(b!1) + 1")
                                          (("1"
                                            (inst
                                             +
                                             "max(purge(i!1, l_filter(insert(x!1, b!1), i!1)))")
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "max")
                                                      (("1"
                                                        (expand "bag_to_set")
                                                        (("1"
                                                          (typepred!
                                                           "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand "purge")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide 1)
                                                                      (("2"
                                                                        (use
                                                                         "l_filter_subbag")
                                                                        (("2"
                                                                          (expand
                                                                           "subbag?")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -
                                                                                       "purge(i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "purge")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -2
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -3 -4 1)
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (expand "max")
                                                  (("2"
                                                    (expand "bag_to_set")
                                                    (("2"
                                                      (typepred!
                                                       "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -1 -2)
                                                        (("1"
                                                          (case
                                                           "FORALL (j: ({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})): leq(j, i!1)")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (hide 2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred!
                                                               "j!1")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (split)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "empty?")
                                                          (("2"
                                                            (inst - "x!1")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (1 -3 -4 -5))
                                                (("3"
                                                  (expand "max")
                                                  (("3"
                                                    (expand "bag_to_set")
                                                    (("3"
                                                      (typepred!
                                                       "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand "purge")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (inst - "x!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "purge")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (reveal
                                                                       3)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (hide 1 3 4)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -3 -4 -2 3))
                                            (("2"
                                              (use "l_filter_max_purge")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (replace - :hide? t)
                                                  (("1"
                                                    (use "l_u_fullset")
                                                    (("1"
                                                      (use
                                                       "card_disjoint_add")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace -1 :dir rl)
                                                          (("1"
                                                            (reveal -9)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (hide -2 -3)
                                                            (("2"
                                                              (grind)
                                                              (("1"
                                                                (typepred!
                                                                 "leq")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred!
                                                                 "leq")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (hide -3 -4)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -2 1 3 4 5)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (hide 4 5)
                                    (("2" (lemma "card_subbag_strict2")
                                      (("2"
                                        (inst
                                         -
                                         "u_filter(b!1, i!1)"
                                         "u_filter(insert(x!1, b!1), i!1)"
                                         "x!1")
                                        (("2"
                                          (split)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (use "u_filter_insert")
                                            nil
                                            nil)
                                           ("3"
                                            (hide-all-but (1 2))
                                            (("3"
                                              (grind)
                                              (("3"
                                                (typepred! "leq")
                                                (("3"
                                                  (expand "total_order?")
                                                  (("3"
                                                    (expand "dichotomous?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "x!1")
              (("2" (case "insert(x!1, b!1) = singleton_bag(x!1)")
                (("1" (replace - :hide? t)
                  (("1" (use "card_singleton_bag")
                    (("1" (split)
                      (("1" (use "l_filter_singleton")
                        (("1" (replace -) (("1" (assert) nil nil)) nil)) nil)
                       ("2" (use "u_filter_singleton")
                        (("2" (replace -) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "insert")
                    (("2" (expand "singleton_bag")
                      (("2" (decompose-equality +) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((emptybag const-decl "bag" bags nil)
    (card_singleton_bag formula-decl nil finite_bags nil)
    (singleton_bag const-decl "bag" bags nil)
    (max const-decl "T" finite_bags_minmax nil)
    (max const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}"
         finite_sets_minmax finite_sets)
    (nonempty_finite_bag type-eq-decl nil finite_bags nil)
    (min const-decl "T" finite_bags_minmax nil)
    (purge const-decl "bag" bags nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (subbag? const-decl "bool" bags nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (card_disjoint_add formula-decl nil finite_bags nil)
    (disjoint? const-decl "bool" bags nil)
    (intersection const-decl "bag" bags nil)
    (card_subbag_strict2 formula-decl nil finite_bags_lems nil)
    (finite_bag formula-decl nil finite_bags nil)
    (card_subbag_strict formula-decl nil finite_bags_lems nil)
    (subbag_trans formula-decl nil bags nil)
    (member const-decl "bool" bags nil) (insert const-decl "bag" bags nil)
    (card_bag_insert formula-decl nil finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (card const-decl "nat" finite_bags nil)
    (empty? const-decl "bool" bags nil)
    (finite_bag_induction formula-decl nil finite_bags_inductions nil))
   nil)
  (filter_exists-3 "branching on leq" 3289748851
   ("" (use "finite_bag_induction")
    (("" (split)
      (("1" (propax) nil nil)
       ("2" (flatten) (("2" (hide 1 3) (("2" (grind) nil nil)) nil)) nil)
       ("3" (skosimp*)
        (("3" (hide 3)
          (("3" (split)
            (("1" (skosimp*)
              (("1" (use "card_bag_insert")
                (("1" (replace - :hide? t)
                  (("1"
                    (case "EXISTS (k:T): member(k, insert(x!1,b!1)) AND leq(i!1,k) AND i!1 /=k AND 2 * card(u_filter(insert(x!1, b!1), k)) >= card(b!1) + 1")
                    (("1" (skosimp*)
                      (("1" (inst + "k!1")
                        (("1" (split)
                          (("1"
                            (case "card(l_filter(insert(x!1, b!1), k!1)) > card(l_filter(b!1, i!1))")
                            (("1" (assert) nil nil)
                             ("2" (hide -3 -5 2)
                              (("2" (lemma "l_filter_orders")
                                (("2" (inst - "insert(x!1, b!1)" "i!1" "k!1")
                                  (("2" (assert)
                                    (("2" (use "l_filter_insert")
                                      (("2"
                                        (lemma "subbag_trans")
                                        (("2"
                                          (inst
                                           -
                                           "l_filter(b!1, i!1)"
                                           "l_filter(insert(x!1, b!1), i!1)"
                                           "l_filter(insert(x!1, b!1), k!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (lemma "card_subbag_strict")
                                                (("2"
                                                  (inst
                                                   -
                                                   "l_filter(b!1, i!1)"
                                                   "l_filter(insert(x!1, b!1), k!1)"
                                                   "k!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but (1 -2))
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (typepred! "leq")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred! "leq")
                                                            (("2"
                                                              (expand
                                                               "total_order?")
                                                              (("2"
                                                                (expand
                                                                 "partial_order?")
                                                                (("2"
                                                                  (expand
                                                                   "preorder?")
                                                                  (("2"
                                                                    (expand
                                                                     "reflexive?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 -4 2))
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (typepred! "leq")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "EXISTS (k:T): member(k, insert(x!1, b!1)) AND leq(k, i!1) AND i!1 /=k AND 2 * card(l_filter(insert(x!1, b!1), k)) > card(b!1) + 1")
                      (("1" (skosimp*)
                        (("1" (hide 2)
                          (("1" (inst + "k!1")
                            (("1" (split)
                              (("1" (propax) nil nil)
                               ("2" (hide -3 -4)
                                (("2" (lemma "u_filter_orders")
                                  (("2"
                                    (inst - "insert(x!1, b!1)" "i!1" "k!1")
                                    (("2" (assert)
                                      (("2"
                                        (use "u_filter_insert")
                                        (("2"
                                          (lemma "subbag_trans")
                                          (("2"
                                            (inst
                                             -
                                             "u_filter(b!1, i!1)"
                                             "u_filter(insert(x!1, b!1), i!1)"
                                             "u_filter(insert(x!1, b!1), k!1)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -2 -3)
                                                (("2"
                                                  (lemma "card_subbag_strict")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "u_filter(b!1, i!1)"
                                                     "u_filter(insert(x!1, b!1), k!1)"
                                                     "k!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (hide-all-but
                                                           (1 -2))
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (typepred!
                                                               "leq")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "reflexive?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 -4 2))
                                                          (("2"
                                                            (grind)
                                                            (("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "antisymmetric?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "finite_bag")
                        (("2" (lemma "finite_pred2")
                          (("2" (inst 3 "i!1")
                            (("2" (case "x!1 = i!1")
                              (("1" (replace - :hide? t)
                                (("1" (split)
                                  (("1" (use "l_filter_insert_assoc")
                                    (("1" (replace - :hide? t)
                                      (("1"
                                        (use "card_bag_insert")
                                        (("1"
                                          (replace - :hide? t)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (use "u_filter_insert_assoc")
                                    (("2" (replace - :hide? t)
                                      (("2"
                                        (use "card_bag_insert")
                                        (("2"
                                          (replace - :hide? t)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (split)
                                (("1" (case "leq(i!1, x!1)")
                                  (("1" (hide 3)
                                    (("1"
                                      (case
                                       "2 * card(l_filter(insert(x!1, b!1), i!1)) <= card(b!1) + 1")
                                      (("1"
                                        (hide -5 -6)
                                        (("1"
                                          (case
                                           "card(l_filter(insert(x!1, b!1), i!1)) + card(u_filter(insert(x!1, b!1), min(purge(i!1, u_filter(insert(x!1, b!1), i!1))))) = card(b!1) + 1")
                                          (("1"
                                            (inst
                                             +
                                             "min(purge(i!1, u_filter(insert(x!1, b!1), i!1)))")
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "min")
                                                      (("1"
                                                        (expand "bag_to_set")
                                                        (("1"
                                                          (typepred!
                                                           "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand "purge")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide 1)
                                                                      (("2"
                                                                        (use
                                                                         "u_filter_subbag")
                                                                        (("2"
                                                                          (expand
                                                                           "subbag?")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -
                                                                                       "purge(i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "purge")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -2
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -3 -4 1)
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (expand "bag_to_set")
                                                    (("2"
                                                      (typepred!
                                                       "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -1 -2)
                                                        (("1"
                                                          (case
                                                           "FORALL (j: ({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})): leq(i!1, j)")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (hide 2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred!
                                                               "j!1")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (split)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "empty?")
                                                          (("2"
                                                            (inst - "x!1")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (1 -3 -4 -5))
                                                (("3"
                                                  (expand "min")
                                                  (("3"
                                                    (expand "bag_to_set")
                                                    (("3"
                                                      (typepred!
                                                       "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand "purge")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, u_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (inst - "x!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "purge")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (reveal
                                                                       3)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (hide 1 3 4)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -3 -4 -2 3))
                                            (("2"
                                              (use "u_filter_min_purge")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (replace - :hide? t)
                                                  (("1"
                                                    (use "l_u_fullset2")
                                                    (("1"
                                                      (use
                                                       "card_disjoint_add")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace -1 :dir rl)
                                                          (("1"
                                                            (reveal -9)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (hide -2 -3)
                                                            (("2"
                                                              (grind)
                                                              (("1"
                                                                (typepred!
                                                                 "leq")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred!
                                                                 "leq")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (hide -3 -4)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -2 1 3 4 5)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (hide 4 5)
                                    (("2" (lemma "card_subbag_strict2")
                                      (("2"
                                        (inst
                                         -
                                         "l_filter(b!1, i!1)"
                                         "l_filter(insert(x!1, b!1), i!1)"
                                         "x!1")
                                        (("2"
                                          (split)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (use "l_filter_insert")
                                            nil
                                            nil)
                                           ("3"
                                            (hide-all-but (1 2))
                                            (("3"
                                              (grind)
                                              (("3"
                                                (typepred! "leq")
                                                (("3"
                                                  (expand "total_order?")
                                                  (("3"
                                                    (expand "dichotomous?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (case "leq(x!1, i!1)")
                                  (("1" (hide 4)
                                    (("1"
                                      (case
                                       "2 * card(u_filter(insert(x!1, b!1), i!1)) < card(b!1) + 1")
                                      (("1"
                                        (hide -5 -6)
                                        (("1"
                                          (case
                                           "card(u_filter(insert(x!1, b!1), i!1)) + card(l_filter(insert(x!1, b!1), max(purge(i!1, l_filter(insert(x!1, b!1), i!1))))) = card(b!1) + 1")
                                          (("1"
                                            (inst
                                             +
                                             "max(purge(i!1, l_filter(insert(x!1, b!1), i!1)))")
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "max")
                                                      (("1"
                                                        (expand "bag_to_set")
                                                        (("1"
                                                          (typepred!
                                                           "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand "purge")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide 1)
                                                                      (("2"
                                                                        (use
                                                                         "l_filter_subbag")
                                                                        (("2"
                                                                          (expand
                                                                           "subbag?")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -
                                                                                       "purge(i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "purge")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -2
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -3 -4 1)
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (expand "max")
                                                  (("2"
                                                    (expand "bag_to_set")
                                                    (("2"
                                                      (typepred!
                                                       "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -1 -2)
                                                        (("1"
                                                          (case
                                                           "FORALL (j: ({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})): leq(j, i!1)")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (hide 2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred!
                                                               "j!1")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (split)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "empty?")
                                                          (("2"
                                                            (inst - "x!1")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (1 -3 -4 -5))
                                                (("3"
                                                  (expand "max")
                                                  (("3"
                                                    (expand "bag_to_set")
                                                    (("3"
                                                      (typepred!
                                                       "max({t: T | purge(i!1, l_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand "purge")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "purge[T](i!1, l_filter(insert[T](x!1, b!1), i!1))")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (inst - "x!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "purge")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (reveal
                                                                       3)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (hide 1 3 4)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -3 -4 -2 3))
                                            (("2"
                                              (use "l_filter_max_purge")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (replace - :hide? t)
                                                  (("1"
                                                    (use "l_u_fullset")
                                                    (("1"
                                                      (use
                                                       "card_disjoint_add")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace -1 :dir rl)
                                                          (("1"
                                                            (reveal -9)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (hide -2 -3)
                                                            (("2"
                                                              (grind)
                                                              (("1"
                                                                (typepred!
                                                                 "leq")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred!
                                                                 "leq")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (hide -3 -4)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -2 1 3 4 5)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (hide 4 5)
                                    (("2" (lemma "card_subbag_strict2")
                                      (("2"
                                        (inst
                                         -
                                         "u_filter(b!1, i!1)"
                                         "u_filter(insert(x!1, b!1), i!1)"
                                         "x!1")
                                        (("2"
                                          (split)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (use "u_filter_insert")
                                            nil
                                            nil)
                                           ("3"
                                            (hide-all-but (1 2))
                                            (("3"
                                              (grind)
                                              (("3"
                                                (typepred! "leq")
                                                (("3"
                                                  (expand "total_order?")
                                                  (("3"
                                                    (expand "dichotomous?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "x!1")
              (("2" (case "insert(x!1, b!1) = singleton_bag(x!1)")
                (("1" (replace - :hide? t)
                  (("1" (use "card_singleton_bag")
                    (("1" (split)
                      (("1" (use "l_filter_singleton")
                        (("1" (replace -) (("1" (assert) nil nil)) nil)) nil)
                       ("2" (use "u_filter_singleton")
                        (("2" (replace -) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "insert")
                    (("2" (expand "singleton_bag")
                      (("2" (decompose-equality +) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_bag_induction formula-decl nil finite_bags_inductions nil)
    (empty? const-decl "bool" bags nil)
    (card const-decl "nat" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (card_bag_insert formula-decl nil finite_bags nil)
    (insert const-decl "bag" bags nil) (member const-decl "bool" bags nil)
    (subbag_trans formula-decl nil bags nil)
    (card_subbag_strict formula-decl nil finite_bags_lems nil)
    (finite_bag formula-decl nil finite_bags nil)
    (card_subbag_strict2 formula-decl nil finite_bags_lems nil)
    (intersection const-decl "bag" bags nil)
    (disjoint? const-decl "bool" bags nil)
    (card_disjoint_add formula-decl nil finite_bags nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (subbag? const-decl "bool" bags nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (purge const-decl "bag" bags nil)
    (min const-decl "T" finite_bags_minmax nil)
    (nonempty_finite_bag type-eq-decl nil finite_bags nil)
    (max const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}"
         finite_sets_minmax finite_sets)
    (max const-decl "T" finite_bags_minmax nil)
    (singleton_bag const-decl "bag" bags nil)
    (card_singleton_bag formula-decl nil finite_bags nil)
    (emptybag const-decl "bag" bags nil))
   shostak)
  (filter_exists-2 nil 3288103469
   ("" (use "finite_bag_induction")
    (("" (split)
      (("1" (propax) nil nil)
       ("2" (flatten) (("2" (hide 1 3) (("2" (grind) nil nil)) nil)) nil)
       ("3" (skosimp*)
        (("3" (hide 3)
          (("3" (split)
            (("1" (skosimp*)
              (("1" (use "card_bag_insert")
                (("1" (replace - :hide? t)
                  (("1"
                    (case "EXISTS (k:T): member(k, b!1) AND leq(i!1,k) AND i!1 /=k AND 2 * card(u_filter(insert(x!1, b!1), k)) >= card(b!1) + 1")
                    (("1" (skosimp*)
                      (("1" (inst + "k!1")
                        (("1" (split)
                          (("1"
                            (case "card(l_filter(insert(x!1, b!1), k!1)) > card(l_filter(b!1, i!1))")
                            (("1" (assert) nil nil)
                             ("2" (hide -3 -5 2)
                              (("2" (lemma "l_filter_orders")
                                (("2" (inst - "insert(x!1, b!1)" "i!1" "k!1")
                                  (("2" (assert)
                                    (("2" (use "l_filter_insert")
                                      (("2"
                                        (lemma "subbag_trans")
                                        (("2"
                                          (inst
                                           -
                                           "l_filter(b!1, i!1)"
                                           "l_filter(insert(x!1, b!1), i!1)"
                                           "l_filter(insert(x!1, b!1), k!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (lemma "card_subbag_strict")
                                                (("2"
                                                  (inst
                                                   -
                                                   "l_filter(b!1, i!1)"
                                                   "l_filter(insert(x!1, b!1), k!1)"
                                                   "k!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but (1 -2))
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (typepred! "leq")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 -4 2))
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (typepred! "leq")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "EXISTS (k:T): member(k, b!1) AND leq(k, i!1) AND i!1 /=k AND 2 * card(l_filter(insert(x!1, b!1), k)) > card(b!1) + 1")
                      (("1" (skosimp*)
                        (("1" (hide 2)
                          (("1" (inst + "k!1")
                            (("1" (split)
                              (("1" (propax) nil nil)
                               ("2" (hide -3 -4)
                                (("2" (lemma "u_filter_orders")
                                  (("2"
                                    (inst - "insert(x!1, b!1)" "i!1" "k!1")
                                    (("2" (assert)
                                      (("2"
                                        (use "u_filter_insert")
                                        (("2"
                                          (lemma "subbag_trans")
                                          (("2"
                                            (inst
                                             -
                                             "u_filter(b!1, i!1)"
                                             "u_filter(insert(x!1, b!1), i!1)"
                                             "u_filter(insert(x!1, b!1), k!1)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -2 -3)
                                                (("2"
                                                  (lemma "card_subbag_strict")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "u_filter(b!1, i!1)"
                                                     "u_filter(insert(x!1, b!1), k!1)"
                                                     "k!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (hide-all-but
                                                           (1 -2))
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (typepred!
                                                               "leq")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 -4 2))
                                                          (("2"
                                                            (grind)
                                                            (("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "antisymmetric?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 3 "i!1")
                        (("2" (case "x!1 = i!1")
                          (("1" (replace - :hide? t)
                            (("1" (split)
                              (("1" (use "l_filter_insert_assoc")
                                (("1" (replace - :hide? t)
                                  (("1" (use "card_bag_insert")
                                    (("1" (replace - :hide? t)
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (use "u_filter_insert_assoc")
                                (("2" (replace - :hide? t)
                                  (("2" (use "card_bag_insert")
                                    (("2" (replace - :hide? t)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split)
                            (("1" (hide 3)
                              (("1"
                                (case "2 * card(l_filter(insert(x!1, b!1), i!1)) <= card(b!1) + 1")
                                (("1" (hide -2 -3)
                                  (("1"
                                    (case "card(l_filter(insert(x!1, b!1), i!1)) + card(u_filter(insert(x!1, b!1), min(purge(i!1, u_filter(insert(x!1, b!1), i!1))))) = card(b!1) + 1")
                                    (("1"
                                      (inst
                                       +
                                       "min(purge(i!1, u_filter(insert(x!1, b!1), i!1)))")
                                      (("1"
                                        (split)
                                        (("1"
                                          (hide -1 -2)
                                          (("1"
                                            (hide 2)
                                            (("1" (postpone) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand "min")
                                            (("2"
                                              (expand "bag_to_set")
                                              (("2"
                                                (typepred!
                                                 "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (split)
                                                    (("1" (postpone) nil nil)
                                                     ("2" (postpone) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide-all-but 1)
                                          (("3"
                                            (expand "min")
                                            (("3"
                                              (expand "bag_to_set")
                                              (("3"
                                                (typepred!
                                                 "min({t: T | purge(i!1, u_filter(insert(x!1, b!1), i!1))(t) > 0})")
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (expand "purge")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (split)
                                                    (("1" (postpone) nil nil)
                                                     ("2" (postpone) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3)
                                        (("2" (postpone) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (use "u_filter_min_purge")
                                        (("2" (postpone) nil nil))
                                        nil))
                                      nil)
                                     ("3" (hide-all-but -1)
                                      (("3" (postpone) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "x!1")
              (("2" (case "insert(x!1, b!1) = singleton_bag(x!1)")
                (("1" (replace - :hide? t)
                  (("1" (use "card_singleton_bag")
                    (("1" (split)
                      (("1" (use "l_filter_singleton")
                        (("1" (replace -) (("1" (assert) nil nil)) nil)) nil)
                       ("2" (use "u_filter_singleton")
                        (("2" (replace -) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "insert")
                    (("2" (expand "singleton_bag")
                      (("2" (decompose-equality +) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (filter_exists-1 nil 3287943673
   ("" (use "finite_bag_induction")
    (("" (split)
      (("1" (propax) nil nil)
       ("2" (flatten) (("2" (hide 1 3) (("2" (grind) nil nil)) nil)) nil)
       ("3" (skosimp*)
        (("3" (hide 3)
          (("3" (split)
            (("1" (skosimp*)
              (("1" (use "card_bag_insert")
                (("1" (replace - :hide? t)
                  (("1" (hide 3)
                    (("1"
                      (case "EXISTS (k:T): member(k, b!1) AND leq(i!1,k) AND i!1 /=k AND 2 * card(u_filter(insert(x!1, b!1), k)) >= card(b!1) + 1")
                      (("1" (skosimp*)
                        (("1" (inst + "k!1")
                          (("1" (split)
                            (("1"
                              (case "card(l_filter(insert(x!1, b!1), k!1)) > card(l_filter(b!1, i!1))")
                              (("1" (assert) nil nil)
                               ("2" (hide 2) (("2" (postpone) nil nil)) nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (case "EXISTS (k:T): member(k, b!1) AND leq(i!1,k) AND i!1 /=k AND 2 * card(l_filter(insert(x!1, b!1), k)) > card(b!1) + 1")
                        (("1" (skosimp*)
                          (("1" (hide 2)
                            (("1" (inst + "k!1")
                              (("1" (split)
                                (("1" (propax) nil nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 1 2)
                          (("2" (inst + "i!1")
                            (("2"
                              (case "card(l_filter(insert(x!1, b!1), i!1)) + card(u_filter(insert(x!1, b!1), i!1)) - b!1(i!1) = card(b!1) + 1")
                              (("1" (move-terms -1 l 3)
                                (("1"
                                  (case-replace
                                   "card(l_filter(insert(x!1, b!1), i!1)) +
        card(u_filter(insert(x!1, b!1), i!1)) = card(l_filter(b!1, i!1)) + card(u_filter(b!1, i!1)) + 1")
                                  (("1" (hide -1)
                                    (("1" (move-terms -1 l 3)
                                      (("1"
                                        (case-replace
                                         "card(l_filter(b!1, i!1)) + card(u_filter(b!1, i!1)) = card(b!1) - b!1(i!1)")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case "b!1(i!1) > 0")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (reveal 2 3)
                                                (("2"
                                                  (case "b!1(i!1) = 0")
                                                  (("1"
                                                    (case "leq (x!1, i!1)")
                                                    (("1"
                                                      (hide -3 3 4 -5 2)
                                                      (("1"
                                                        (case
                                                         "EXISTS (g: T): member(g, b!1) AND leq(g, i!1) AND i!1 /= g AND l_filter(b!1, g) = l_filter(b!1, i!1)")
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replace*)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (postpone) nil nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))


(max_array
 (imax_TCC1 0
  (imax_TCC1-1 nil 3281095669
   ("" (inst 1 "(LAMBDA (A: [below(N) -> T]): imax_rec(A,0,N-1))")
    (("1" (skosimp*)
      (("1" (assert) (("1" (rewrite "imax_rec_lem") nil nil)) nil)) nil)
     ("2" (assert) (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)
     ("3" (skosimp*) (("3" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (imax_rec_lem formula-decl nil max_array_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (imax_rec def-decl "below(N)" max_array_def nil)
    (<= formal-const-decl "(total_order?[T])" max_array nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil max_array nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" max_array nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (imax existence ""
    "[A: [naturalnumbers.below(max_array.N) -> max_array.T] -> {i: naturalnumbers.below(max_array.N) | FORALL ii: max_array.<=(A(max_array.ii), A(i))}]")))
 (max_TCC1 0
  (max_TCC1-2 "" 3790081398
   ("" (assert)
    (("" (inst 1 "(LAMBDA A: A(imax(A)))")
      (("" (skosimp*)
        (("" (prop)
          (("1" (skosimp*)
            (("1" (typepred "imax(A!1)") (("1" (inst?) nil nil)) nil)) nil)
           ("2" (inst?) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" max_array nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil max_array nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" max_array nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (imax const-decl "{i: below(N) | (FORALL ii: A(ii) <= A(i))}" max_array
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak
   (max existence ""
        "[A: [naturalnumbers.below(max_array.N) -> max_array.T] -> {t: max_array.T | booleans.AND(FORALL ii: max_array.<=(A(max_array.ii), t), EXISTS jj: A(max_array.jj) = t)}]"))
  (max_TCC1-1 nil 3281095669
   ("" (assert)
    (("" (inst 1 "(LAMBDA A: A(imax(A)))")
      (("" (skosimp*)
        (("" (prop)
          (("1" (skosimp*) (("1" (typepred "imax(A!1)") (("1" (inst?) nil)))))
           ("2" (inst?) nil))))))))
    nil)
   nil nil
   (max existence ""
        "[A: [naturalnumbers.below(max_array.N) -> max_array.T] -> {t: max_array.T | booleans.AND(FORALL ii: max_array.<=(A(max_array.ii), t), EXISTS jj: A(max_array.jj) = t)}]")))
 (max_lem 0
  (max_lem-2 "" 3790081399
   ("" (skosimp*) (("" (typepred "max(A!1)") (("" (inst?) nil nil)) nil)) nil)
   ((max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= formal-const-decl "(total_order?[T])" max_array nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil max_array nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" max_array nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (max_lem-1 nil 3281095669
   ("" (skosimp*) (("" (typepred "max(A!1)") (("" (inst?) nil)))) nil) nil
   nil))
 (max_in? 0
  (max_in?-2 "" 3790081399
   ("" (skosimp*)
    (("" (expand "in?")
      (("" (typepred "max(A!1)")
        (("" (skosimp*)
          (("" (hide -1) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((in? const-decl "bool" below_arrays nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" max_array nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil max_array nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" max_array nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array nil))
   shostak)
  (max_in?-1 nil 3281095669
   ("" (skosimp*)
    (("" (expand "in?")
      (("" (typepred "max(A!1)")
        (("" (skosimp*)
          (("" (hide -1) (("" (inst?) (("" (assert) nil))))))))))))
    nil)
   ((in? const-decl "bool" below_arrays nil)) nil))
 (imax_lem 0
  (imax_lem-2 "" 3790081399
   ("" (skosimp*)
    (("" (typepred "imax(A!1)")
      (("" (typepred "max(A!1)")
        (("" (skosimp*)
          (("" (replace -2 * rl)
            (("" (hide -2)
              (("" (inst?)
                (("" (inst -3 "jj!1")
                  (("" (typepred "max_array.<=")
                    (("" (expand "total_order?")
                      (("" (expand "partial_order?")
                        (("" (flatten)
                          (("" (expand "antisymmetric?")
                            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((imax const-decl "{i: below(N) | (FORALL ii: A(ii) <= A(i))}" max_array
     nil)
    (<= formal-const-decl "(total_order?[T])" max_array nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil max_array nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" max_array nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array nil))
   shostak)
  (imax_lem-1 nil 3281095669
   ("" (skosimp*)
    (("" (typepred "imax(A!1)")
      (("" (typepred "max(A!1)")
        (("" (skosimp*)
          (("" (replace -2 * rl)
            (("" (hide -2)
              (("" (inst?)
                (("" (inst -3 "jj!1")
                  (("" (typepred "max_array.<=")
                    (("" (expand "total_order?")
                      (("" (expand "partial_order?")
                        (("" (flatten)
                          (("" (expand "antisymmetric?")
                            (("" (inst?)
                              (("" (assert) nil))))))))))))))))))))))))))))
    nil)
   nil nil))
 (max_def 0
  (max_def-2 "" 3790081399
   ("" (skosimp*)
    (("" (typepred "max(A!1)")
      (("" (assert)
        (("" (prop)
          (("" (skosimp*)
            (("" (expand "in?")
              (("" (inst 1 "jj!1") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= formal-const-decl "(total_order?[T])" max_array nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil max_array nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" max_array nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (in? const-decl "bool" below_arrays nil))
   shostak)
  (max_def-1 nil 3281095669
   ("" (skosimp*)
    (("" (typepred "max(A!1)")
      (("" (assert)
        (("" (prop)
          (("" (skosimp*)
            (("" (expand "in?")
              (("" (inst 1 "jj!1") (("" (assert) nil))))))))))))))
    nil)
   ((in? const-decl "bool" below_arrays nil)) nil))
 (max_it_is 0
  (max_it_is-2 "" 3790081399
   ("" (skosimp*)
    (("" (typepred "max(A!1)")
      (("" (expand "in?")
        (("" (skosimp*)
          (("" (replace -2 * rl)
            (("" (hide -2)
              (("" (replace -3)
                (("" (hide -3)
                  (("" (inst?)
                    (("" (inst -2 "jj!1")
                      (("" (typepred "<=")
                        (("" (expand "total_order?")
                          (("" (expand "partial_order?")
                            (("" (flatten)
                              (("" (expand "antisymmetric?")
                                (("" (inst?) (("" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= formal-const-decl "(total_order?[T])" max_array nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil max_array nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" max_array nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (in? const-decl "bool" below_arrays nil))
   shostak)
  (max_it_is-1 nil 3281095669
   ("" (skosimp*)
    (("" (typepred "max(A!1)")
      (("" (expand "in?")
        (("" (skosimp*)
          (("" (replace -2 * rl)
            (("" (hide -2)
              (("" (replace -3)
                (("" (hide -3)
                  (("" (inst?)
                    (("" (inst -2 "jj!1")
                      (("" (typepred "<=")
                        (("" (expand "total_order?")
                          (("" (expand "partial_order?")
                            (("" (flatten)
                              (("" (expand "antisymmetric?")
                                (("" (inst?)
                                  (("" (assert)
                                    nil))))))))))))))))))))))))))))))))
    nil)
   ((in? const-decl "bool" below_arrays nil)) nil))
 (imax_1 0
  (imax_1-2 "" 3790081399
   ("" (skosimp*) (("" (typepred "imax(A!1)") (("" (assert) nil nil)) nil))
    nil)
   ((imax const-decl "{i: below(N) | (FORALL ii: A(ii) <= A(i))}" max_array
     nil)
    (<= formal-const-decl "(total_order?[T])" max_array nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil max_array nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" max_array nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)
  (imax_1-1 nil 3281095669
   ("" (skosimp*) (("" (typepred "imax(A!1)") (("" (assert) nil)))) nil) nil
   nil))
 (max_2_TCC1 0
  (max_2_TCC1-1 nil 3281095669 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (max_2 subtype "0" "naturalnumbers.below(max_array.N)")))
 (max_2_TCC2 0
  (max_2_TCC2-1 nil 3281095669 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (max_2 subtype "1" "naturalnumbers.below(max_array.N)")))
 (max_2 0
  (max_2-2 "" 3790081399
   ("" (skosimp*)
    (("" (typepred "max(A!1)")
      (("" (skosimp*)
        (("" (replace -2 * rl)
          (("" (case "jj!1 = 0 OR jj!1 = 1")
            (("1" (split -1)
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1" (lift-if)
                    (("1" (inst -1 "1")
                      (("1" (ground)
                        (("1" (hide -3 -4)
                          (("1" (typepred "max_array.<=")
                            (("1" (expand "total_order?")
                              (("1" (expand "partial_order?")
                                (("1" (flatten)
                                  (("1" (hide -1 -3)
                                    (("1" (expand "antisymmetric?")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1)
                (("2" (hide -1)
                  (("2" (inst -1 "0")
                    (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2 -1 -2)
              (("2" (typepred "jj!1")
                (("2" (replace -2) (("2" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= formal-const-decl "(total_order?[T])" max_array nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil max_array nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" max_array nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil))
   shostak)
  (max_2-1 nil 3281095669
   ("" (skosimp*)
    (("" (typepred "max(A!1)")
      (("" (skosimp*)
        (("" (replace -2 * rl)
          (("" (case "jj!1 = 0 OR jj!1 = 1")
            (("1" (split -1)
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1" (lift-if)
                    (("1" (inst -1 "1")
                      (("1" (ground)
                        (("1" (hide -3 -4)
                          (("1" (typepred "max_array.<=")
                            (("1" (expand "total_order?")
                              (("1" (expand "partial_order?")
                                (("1" (flatten)
                                  (("1" (hide -1 -3)
                                    (("1" (expand "antisymmetric?")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil)))))))))))))))))))
                       ("2" (assert) nil)))))))))
               ("2" (replace -1)
                (("2" (hide -1)
                  (("2" (inst -1 "0")
                    (("2" (lift-if) (("2" (ground) nil)))))))))))
             ("2" (hide 2 -1 -2)
              (("2" (typepred "jj!1")
                (("2" (replace -2) (("2" (ground) nil))))))))))))))))
    nil)
   nil nil)))


(indexed_list
 (lt_idx_strict_order 0
  (lt_idx_strict_order-1 nil 3635094676 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil))
   shostak))
 (olidx_car_last_TCC1 0
  (olidx_car_last_TCC1-1 nil 3630094389 ("" (assert) nil nil)
   ((lt_idx_strict_order formula-decl nil indexed_list nil)) nil
   (olidx_car_last assuming
    "ordered_list[[nat, indexed_list.T], indexed_list[indexed_list.T].lt_idx].ordered_list"
    "order: ASSUMPTION orders[ordered_list.T].strict_order?(ordered_list.<)"))
  (olidx_car_last_TCC1-1 nil 3630094386 ("" (subtype-tcc) nil nil) nil nil
   (olidx_car_last assuming
    "ordered_list[[nat, indexed_list.T], indexed_list[indexed_list.T].lt_idx].ordered_list"
    "order: ASSUMPTION orders[ordered_list.T].strict_order?(ordered_list.<)")))
 (olidx_car_last_TCC2 0
  (olidx_car_last_TCC2-1 nil 3635093402 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil indexed_list nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil
   (olidx_car_last subtype "indexed_list.ol"
    "{ol | (booleans.NOT)(ordered_list[[nat, indexed_list.T], indexed_list[indexed_list.T].lt_idx].null_ol?(ol))}")))
 (olidx_car_last 0
  (olidx_car_last-1 nil 3630094389
   ("" (induct "ol" :name "ol_ind_sch[[nat,T], lt_idx[T]]")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skolem 1 "x_")
        (("2" (expand "car_ol")
          (("2" (expand "last_ol" 1)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (prop)
                  (("2" (typepred "x_") (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (expand "null_ol?") (("3" (grind) nil nil)) nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil indexed_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil) (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (first_TCC1 0
  (first_TCC1-1 nil 3630094576 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil indexed_list nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (prefixes const-decl "bool" more_list_props nil))
   nil
   (first subtype "list_adt[[nat, indexed_list.T]].null"
          "(more_list_props[[nat, indexed_list.T]].prefixes(indexed_list.l))"))
  (first_TCC1-1 nil 3630094573 ("" (subtype-tcc) nil nil) nil nil
   (first subtype "list_adt[[nat, indexed_list.T]].null"
          "(more_list_props[[nat, indexed_list.T]].prefixes(indexed_list.l))")))
 (first_TCC2 0
  (first_TCC2-1 nil 3630094576 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil indexed_list nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (first subtype "indexed_list.t" "ordered_list[[nat, T], lt_idx[T]]"))
  (first_TCC2-1 nil 3630094573 ("" (subtype-tcc) nil nil) nil nil
   (first subtype "indexed_list.t" "ordered_list[[nat, T], lt_idx[T]]")))
 (first_TCC3 0
  (first_TCC3-1 nil 3630094576 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil indexed_list nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (first termination "indexed_list.first(indexed_list.t, indexed_list.n)"
          "nil"))
  (first_TCC3-1 nil 3630094573 ("" (termination-tcc) nil nil) nil nil
   (first termination "indexed_list.first(indexed_list.t, indexed_list.n)"
          "nil")))
 (first_TCC4 0
  (first_TCC4-2 nil 3630094576
   ("" (skeep)
    (("" (typepred "v(t,n)")
      (("1" (expand "prefixes")
        (("1" (skeep)
          (("1" (typepred "l")
            (("1" (split)
              (("1" (replaces -4)
                (("1" (replace -2 -1 :dir RL :hide? t)
                  (("1" (expand "ordered_list?" -1)
                    (("1" (grind)
                      (("1" (case "null?(v(t,n))")
                        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
                       ("2" (hide -1 -3)
                        (("2" (grind)
                          (("2" (use "ordered_append[[nat,T], lt_idx[T]]")
                            (("1" (assert) nil nil)
                             ("2" (typepred "l")
                              (("2" (reveal -5) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (prop)
                (("2" (expand "lt_idx")
                  (("2" (use "nnprefixes_same_head[[nat,T]]")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil) ("3" (typepred "l") (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (prefixes const-decl "bool" more_list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil indexed_list nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (t skolem-const-decl "list[[nat, T]]" indexed_list nil)
    (ordered_append formula-decl nil ordered_list nil)
    (TRUE const-decl "bool" booleans nil)
    (nnprefixes_same_head formula-decl nil more_list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil
   (first subtype "indexed_list.first(indexed_list.t, indexed_list.n)"
          "{ol | booleans.OR(list_adt[[nat, indexed_list.T]].null?(ol), indexed_list[indexed_list.T].lt_idx(indexed_list.h, list_adt[[nat, indexed_list.T]].car(ol)))}"))
  (first_TCC4-1 nil 3630094573 ("" (subtype-tcc) nil nil) nil nil
   (first subtype "indexed_list.first(indexed_list.t, indexed_list.n)"
          "{ol | booleans.OR(list_adt[[nat, indexed_list.T]].null?(ol), indexed_list[indexed_list.T].lt_idx(indexed_list.h, list_adt[[nat, indexed_list.T]].car(ol)))}")))
 (first_TCC5 0
  (first_TCC5-2 nil 3630094576
   ("" (skeep*)
    (("" (typepred "v(t,n)")
      (("1" (expand "prefixes")
        (("1" (skeep)
          (("1" (inst 1 "l3")
            (("1" (expand "cons_ol")
              (("1" (expand "append" 1) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (typepred "l") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (prefixes const-decl "bool" more_list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil indexed_list nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append def-decl "list[T]" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (first subtype
          "ordered_list[[nat, indexed_list.T], indexed_list[indexed_list.T].lt_idx].cons_ol(indexed_list.h, indexed_list.first(indexed_list.t, indexed_list.n))"
          "(more_list_props[[nat, indexed_list.T]].prefixes(indexed_list.l))"))
  (first_TCC5-1 nil 3630094573 ("" (subtype-tcc) nil nil) nil nil
   (first subtype
          "ordered_list[[nat, indexed_list.T], indexed_list[indexed_list.T].lt_idx].cons_ol(indexed_list.h, indexed_list.first(indexed_list.t, indexed_list.n))"
          "(more_list_props[[nat, indexed_list.T]].prefixes(indexed_list.l))")))
 (first_TCC6 0
  (first_TCC6-1 nil 3630094576 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil indexed_list nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (append def-decl "list[T]" list_props nil)
    (prefixes const-decl "bool" more_list_props nil))
   nil
   (first subtype "list_adt[[nat, indexed_list.T]].null"
          "(more_list_props[[nat, indexed_list.T]].prefixes(indexed_list.l))"))
  (first_TCC6-1 nil 3630094573 ("" (subtype-tcc) nil nil) nil nil
   (first subtype "list_adt[[nat, indexed_list.T]].null"
          "(more_list_props[[nat, indexed_list.T]].prefixes(indexed_list.l))")))
 (first_is_ol 0
  (first_is_ol-1 nil 3630094618
   ("" (skolem 1 ("n" "_"))
    (("" (induct "l" :name "ol_ind_sch[[nat,T],lt_idx[T]]")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "first" 1)
            (("2" (assert) (("2" (prop) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (pred type-eq-decl nil defined_types nil)
    (prefixes const-decl "bool" more_list_props nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (T formal-type-decl nil indexed_list nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (last_up_to_idx_TCC1 0
  (last_up_to_idx_TCC1-2 nil 3630094629
   ("" (skeep) (("" (use "first_is_ol[T]") nil nil)) nil)
   ((ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil indexed_list nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (first_is_ol formula-decl nil indexed_list nil))
   nil
   (last_up_to_idx subtype
    "indexed_list[indexed_list.T].first(indexed_list.l, indexed_list.n)"
    "{ol | (booleans.NOT)(list_adt[[nat, indexed_list.T]].null?(ol))}"))
  (last_up_to_idx_TCC1-1 nil 3630094626 ("" (subtype-tcc) nil nil) nil nil
   (last_up_to_idx subtype
    "indexed_list[indexed_list.T].first(indexed_list.l, indexed_list.n)"
    "{ol | (booleans.NOT)(list_adt[[nat, indexed_list.T]].null?(ol))}")))
 (last_up_to_idx 0
  (last_up_to_idx-3 "" 3758398867
   ("" (induct "l" :name "ol_ind_sch[[nat,T],lt_idx[T]]")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (grind)
        (("2" (expand "last_ol" 1)
          (("2" (lift-if)
            (("2" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skeep) (("3" (use "first_is_ol[T]") nil nil)) nil)) nil))
    nil)
   ((first_is_ol formula-decl nil indexed_list nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil indexed_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (last_ol def-decl "T" ordered_list nil) (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (prefixes const-decl "bool" more_list_props nil)
    (first def-decl "(prefixes(l))" indexed_list nil))
   shostak)
  (last_up_to_idx-2 "" 3744481375
   ("" (induct "l" :name "ol_ind_sch[[nat,T],lt_idx[T]]")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (grind)
        (("1" (expand "last_ol" 1)
          (("1" (lift-if) (("1" (prop) (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (expand "last_ol" 1)
          (("2" (lift-if) (("2" (assert) (("2" (prop) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skeep) (("3" (use "first_is_ol[T]") nil nil)) nil)) nil))
    nil)
   ((cons_ol const-decl "ordered_list" ordered_list nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (prefixes const-decl "bool" more_list_props nil))
   shostak)
  (last_up_to_idx-1 nil 3630094629
   ("" (induct "l" :name "ol_ind_sch[[nat,T],lt_idx[T]]")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (grind)
        (("2" (expand "last_ol" 1)
          (("2" (lift-if)
            (("2" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skeep) (("3" (use "first_is_ol[T]") nil nil)) nil)) nil))
    nil)
   ((cons_ol const-decl "ordered_list" ordered_list nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (prefixes const-decl "bool" more_list_props nil))
   nil))
 (first_zero_prop 0
  (first_zero_prop-1 nil 3630094640
   ("" (grind)
    (("" (expand "first")
      (("" (lift-if)
        (("" (assert) (("" (prop) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((first def-decl "(prefixes(l))" indexed_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil indexed_list nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil))
   nil))
 (first_all_prop 0
  (first_all_prop-1 nil 3630094653
   ("" (induct "l" :name "ol_ind_sch[[nat,T],lt_idx[T]]")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skolem 1 "x_")
        (("2" (skeep)
          (("2" (expand "first" 1)
            (("2" (assert)
              (("2" (lift-if)
                (("2" (assert)
                  (("2" (prop)
                    (("1" (expand "cons_ol")
                      (("1" (inst?)
                        (("1" (expand "last_idx" -3)
                          (("1" (expand "last_ol")
                            (("1" (lift-if)
                              (("1" (split -3)
                                (("1" (grind) nil nil) ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (expand "last_idx")
                        (("2" (expand "last_ol")
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2" (prop)
                                (("2" (typepred "x_")
                                  (("2" (expand ">")
                                    (("2" (expand "ordered_list?")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "lt_idx")
                                          (("2"
                                            (use "olidx_car_last[T]")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (car_ol const-decl "T" ordered_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil indexed_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (prefixes const-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (last_idx const-decl "int" indexed_list nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil))
   nil))
 (car_up_to_idx_TCC1 0
  (car_up_to_idx_TCC1-2 nil 3630094663
   ("" (skeep) (("" (use "first_is_ol[T]") (("" (grind) nil nil)) nil)) nil)
   ((first_is_ol formula-decl nil indexed_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil indexed_list nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil))
   nil
   (car_up_to_idx subtype "indexed_list.first(indexed_list.l, indexed_list.n)"
    "{ol | (booleans.NOT)(ordered_list[[nat, indexed_list.T], indexed_list[indexed_list.T].lt_idx].null_ol?(ol))}"))
  (car_up_to_idx_TCC1-1 nil 3630094661 ("" (subtype-tcc) nil nil) nil nil
   (car_up_to_idx subtype "indexed_list.first(indexed_list.l, indexed_list.n)"
    "{ol | (booleans.NOT)(ordered_list[[nat, indexed_list.T], indexed_list[indexed_list.T].lt_idx].null_ol?(ol))}")))
 (car_up_to_idx 0
  (car_up_to_idx-1 nil 3630094664
   ("" (induct "l" :name "ol_ind_sch[[nat, T], lt_idx[T]]")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (inst?)
            (("2" (expand "first" 3)
              (("2" (lift-if)
                (("2" (split 3)
                  (("1" (flatten)
                    (("1" (expand "cons_ol")
                      (("1" (expand "car_ol") (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "car_ol")
                    (("2" (flatten) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (split 3)
          (("1" (use "first_is_ol[T]") nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((first_is_ol formula-decl nil indexed_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil indexed_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (prefixes const-decl "bool" more_list_props nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil) (car_ol const-decl "T" ordered_list nil))
   nil)))


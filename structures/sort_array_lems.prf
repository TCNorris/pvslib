(sort_array_lems
 (sort_min_TCC1 0
  (sort_min_TCC1-1 nil 3506271670 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (sort_min subtype "0" "naturalnumbers.below(sort_array_lems.N)")))
 (sort_min 0
  (sort_min-2 "" 3790081404
   ("" (skosimp*)
    (("" (typepred "sort(A!1)")
      (("" (typepred "min(A!1)")
        (("" (skosimp*)
          (("" (expand "permutation_of?")
            (("" (skosimp*)
              (("" (expand "bijective?")
                (("" (flatten)
                  (("" (expand "surjective?")
                    (("" (inst -4 "0")
                      (("" (skosimp*)
                        (("" (inst -5 "x!1")
                          (("" (replace -4)
                            (("" (hide -4)
                              (("" (inst -1 "x!1")
                                (("" (reveal -3)
                                  (("" (inst -1 "jj!1")
                                    (("" (expand "sorted?")
                                      ((""
                                        (inst -6 "0" "f!1(jj!1)")
                                        ((""
                                          (replace -1 * rl)
                                          ((""
                                            (assert)
                                            ((""
                                              (hide -1)
                                              ((""
                                                (replace -2)
                                                ((""
                                                  (replace -4)
                                                  ((""
                                                    (hide -2 -3 -4)
                                                    ((""
                                                      (typepred
                                                       "sort_array_lems.<=")
                                                      ((""
                                                        (expand
                                                         "total_order?")
                                                        ((""
                                                          (expand
                                                           "partial_order?")
                                                          ((""
                                                            (flatten)
                                                            ((""
                                                              (expand
                                                               "antisymmetric?")
                                                              ((""
                                                                (inst?)
                                                                ((""
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sort const-decl "{a | permutation_of?(A, a) AND sorted?(a)}"
      sort_array nil)
    (sorted? const-decl "bool" sort_array nil)
    (<= formal-const-decl "(total_order?[T])" sort_array_lems nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below_array type-eq-decl nil below_arrays nil)
    (permutation_of? const-decl "bool" permutations nil)
    (T formal-type-decl nil sort_array_lems nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" sort_array_lems nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (min const-decl
         "{t: T | (FORALL ii: t <= A(ii)) AND (EXISTS jj: A(jj) = t)}"
         min_array nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak)
  (sort_min-1 nil 3506271670
   ("" (skosimp*)
    (("" (typepred "sort(A!1)")
      (("" (typepred "min(A!1)")
        (("" (skosimp*)
          (("" (expand "permutation_of?")
            (("" (skosimp*)
              (("" (expand "bijective?")
                (("" (flatten)
                  (("" (expand "surjective?")
                    (("" (inst -4 "0")
                      (("" (skosimp*)
                        (("" (inst -5 "x!1")
                          (("" (replace -4)
                            (("" (hide -4)
                              (("" (inst -1 "x!1")
                                (("" (reveal -3)
                                  (("" (inst -1 "jj!1")
                                    (("" (expand "sorted?")
                                      ((""
                                        (inst -6 "0" "f!1(jj!1)")
                                        ((""
                                          (replace -1 * rl)
                                          ((""
                                            (assert)
                                            ((""
                                              (hide -1)
                                              ((""
                                                (replace -2)
                                                ((""
                                                  (replace -4)
                                                  ((""
                                                    (hide -2 -3 -4)
                                                    ((""
                                                      (typepred
                                                       "sort_array_lems.<=")
                                                      ((""
                                                        (expand
                                                         "total_order?")
                                                        ((""
                                                          (expand
                                                           "partial_order?")
                                                          ((""
                                                            (flatten)
                                                            ((""
                                                              (expand
                                                               "antisymmetric?")
                                                              ((""
                                                                (inst?)
                                                                ((""
                                                                  (assert)
                                                                  nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   ((sort const-decl "{a | permutation_of?(A, a) AND sorted?(a)}"
      sort_array nil)
    (sorted? const-decl "bool" sort_array nil)
    (below_array type-eq-decl nil below_arrays nil)
    (permutation_of? const-decl "bool" permutations nil)
    (min const-decl
         "{t: T | (FORALL ii: t <= A(ii)) AND (EXISTS jj: A(jj) = t)}"
         min_array nil))
   nil))
 (sort_max_TCC1 0
  (sort_max_TCC1-1 nil 3506271670 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (sort_max subtype "(number_fields.-)(sort_array_lems.N, 1)"
    "naturalnumbers.below(sort_array_lems.N)")))
 (sort_max 0
  (sort_max-2 "" 3790081404
   ("" (skosimp*)
    (("" (typepred "sort(A!1)")
      (("" (typepred "max(A!1)")
        (("" (expand "sorted?")
          (("" (skosimp*)
            (("" (expand "permutation_of?")
              (("" (skosimp*)
                (("" (inst-cp -4 "jj!1")
                  (("" (expand "bijective?")
                    (("" (flatten)
                      (("" (expand "surjective?")
                        (("" (inst -4 "N-1")
                          (("" (skosimp*)
                            (("" (inst -5 "x!1")
                              (("" (replace -4)
                                (("" (hide -4)
                                  (("" (inst -1 "x!1")
                                    (("" (replace -4)
                                      ((""
                                        (hide -4)
                                        ((""
                                          (inst -5 "f!1(jj!1)" "N-1")
                                          ((""
                                            (assert)
                                            ((""
                                              (replace -2)
                                              ((""
                                                (hide -2)
                                                ((""
                                                  (replace -3 * rl)
                                                  ((""
                                                    (hide -2 -3)
                                                    ((""
                                                      (typepred
                                                       "sort_array_lems.<=")
                                                      ((""
                                                        (expand
                                                         "total_order?")
                                                        ((""
                                                          (expand
                                                           "partial_order?")
                                                          ((""
                                                            (flatten)
                                                            ((""
                                                              (expand
                                                               "antisymmetric?")
                                                              ((""
                                                                (inst?)
                                                                ((""
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sort const-decl "{a | permutation_of?(A, a) AND sorted?(a)}"
      sort_array nil)
    (sorted? const-decl "bool" sort_array nil)
    (<= formal-const-decl "(total_order?[T])" sort_array_lems nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below_array type-eq-decl nil below_arrays nil)
    (permutation_of? const-decl "bool" permutations nil)
    (T formal-type-decl nil sort_array_lems nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" sort_array_lems nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak)
  (sort_max-1 nil 3506271670
   ("" (skosimp*)
    (("" (typepred "sort(A!1)")
      (("" (typepred "max(A!1)")
        (("" (expand "sorted?")
          (("" (skosimp*)
            (("" (expand "permutation_of?")
              (("" (skosimp*)
                (("" (inst-cp -4 "jj!1")
                  (("" (expand "bijective?")
                    (("" (flatten)
                      (("" (expand "surjective?")
                        (("" (inst -4 "N-1")
                          (("" (skosimp*)
                            (("" (inst -5 "x!1")
                              (("" (replace -4)
                                (("" (hide -4)
                                  (("" (inst -1 "x!1")
                                    (("" (replace -4)
                                      ((""
                                        (hide -4)
                                        ((""
                                          (inst -5 "f!1(jj!1)" "N-1")
                                          ((""
                                            (assert)
                                            ((""
                                              (replace -2)
                                              ((""
                                                (hide -2)
                                                ((""
                                                  (replace -3 * rl)
                                                  ((""
                                                    (hide -2 -3)
                                                    ((""
                                                      (typepred
                                                       "sort_array_lems.<=")
                                                      ((""
                                                        (expand
                                                         "total_order?")
                                                        ((""
                                                          (expand
                                                           "partial_order?")
                                                          ((""
                                                            (flatten)
                                                            ((""
                                                              (expand
                                                               "antisymmetric?")
                                                              ((""
                                                                (inst?)
                                                                ((""
                                                                  (assert)
                                                                  nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   ((sort const-decl "{a | permutation_of?(A, a) AND sorted?(a)}"
      sort_array nil)
    (sorted? const-decl "bool" sort_array nil)
    (below_array type-eq-decl nil below_arrays nil)
    (permutation_of? const-decl "bool" permutations nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array nil))
   nil)))


(array_ops
 (caret_fill0_TCC1 0
  (caret_fill0_TCC1-1 nil 3249304933 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (caret_fill0 subtype
    "(number_fields.+)((number_fields.-)(array_ops.j, array_ops.i), 1)"
    "nat")))
 (caret_fill0_TCC2 0
  (caret_fill0_TCC2-1 nil 3249304933 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (caret_fill0 subtype
    "array_ops.fill((number_fields.+)((number_fields.-)(array_ops.j, array_ops.i), 1), array_ops.t)"
    "below_array[IF i > j THEN 0 ELSE 1 + j - i ENDIF, T]")))
 (caret_fill0 0
  (caret_fill0-1 nil 3249304933
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t) (("" (grind) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil array_ops nil)
    (fill const-decl "below_array[n, T]" array_ops nil)
    (^ const-decl
     "below_array[LET (m, n) = p IN IF m > n THEN 0 ELSE n - m + 1 ENDIF, T]"
     caret_arrays nil)
    (below type-eq-decl nil nat_types nil)
    (below_array type-eq-decl nil below_arrays nil)
    (j!1 skolem-const-decl "below(n!1)" array_ops nil)
    (n!1 skolem-const-decl "nat" array_ops nil)
    (i!1 skolem-const-decl "nat" array_ops nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (caret_fill1 0
  (caret_fill1-1 nil 3249304933
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t) (("" (grind) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil array_ops nil)
    (fill const-decl "below_array[n, T]" array_ops nil)
    (^ const-decl
     "below_array[LET (m, n) = p IN IF m > n THEN 0 ELSE n - m + 1 ENDIF, T]"
     caret_arrays nil)
    (below type-eq-decl nil nat_types nil)
    (below_array type-eq-decl nil below_arrays nil)
    (j!1 skolem-const-decl "below(n!1)" array_ops nil)
    (n!1 skolem-const-decl "nat" array_ops nil)
    (i!1 skolem-const-decl "nat" array_ops nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (caret_concat_bot_TCC1 0
  (caret_concat_bot_TCC1-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (caret_concat_bot subtype "array_ops.j" "below[m + n]")))
 (caret_concat_bot 0
  (caret_concat_bot-1 nil 3249304933 ("" (grind) nil nil)
   ((O const-decl "below_array[n + m, T]" concat_arrays nil)
    (^ const-decl
     "below_array[LET (m, n) = p IN IF m > n THEN 0 ELSE n - m + 1 ENDIF, T]"
     caret_arrays nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil))
 (caret_concat_top_TCC1 0
  (caret_concat_top_TCC1-1 nil 3249304933 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil (caret_concat_top subtype "array_ops.j" "below[m + n]")))
 (caret_concat_top_TCC2 0
  (caret_concat_top_TCC2-1 nil 3249304933 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (caret_concat_top subtype "(number_fields.-)(array_ops.i, array_ops.n)"
    "nat")))
 (caret_concat_top_TCC3 0
  (caret_concat_top_TCC3-1 nil 3249304933 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (caret_concat_top subtype "(number_fields.-)(array_ops.j, array_ops.n)"
    "below[m]")))
 (caret_concat_top_TCC4 0
  (caret_concat_top_TCC4-1 nil 3249304933 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (caret_concat_top subtype
    "caret_arrays[array_ops.m, array_ops.T].^(array_ops.B_m, ((number_fields.-)(array_ops.i, array_ops.n), (number_fields.-)(array_ops.j, array_ops.n)))"
    "below_array[IF i > j THEN 0 ELSE 1 + j - i ENDIF, T]")))
 (caret_concat_top 0
  (caret_concat_top-2 "" 3790081406 ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (O const-decl "below_array[n + m, T]" concat_arrays nil)
    (^ const-decl
     "below_array[LET (m, n) = p IN IF m > n THEN 0 ELSE n - m + 1 ENDIF, T]"
     caret_arrays nil))
   shostak)
  (caret_concat_top-1 nil 3249304933
   ("" (skosimp*)
    (("" (grind) (("" (apply-extensionality 1 :hide? t) nil nil)) nil)) nil)
   ((O const-decl "below_array[n + m, T]" concat_arrays nil)
    (^ const-decl
     "below_array[LET (m, n) = p IN IF m > n THEN 0 ELSE n - m + 1 ENDIF, T]"
     caret_arrays nil))
   nil))
 (caret_concat_all_TCC1 0
  (caret_concat_all_TCC1-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (caret_concat_all subtype "array_ops.j" "below[m + n]")))
 (caret_concat_all_TCC2 0
  (caret_concat_all_TCC2-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (caret_concat_all subtype "(number_fields.-)(array_ops.i, array_ops.n)"
    "below[n]")))
 (caret_concat_all_TCC3 0
  (caret_concat_all_TCC3-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (caret_concat_all subtype "(number_fields.-)(array_ops.n, 1)" "below[m]")))
 (caret_concat_all_TCC4 0
  (caret_concat_all_TCC4-1 nil 3249304933 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (caret_concat_all subtype
    "(number_fields.-)((number_fields.+)(1, array_ops.i), array_ops.n)"
    "nat")))
 (caret_concat_all_TCC5 0
  (caret_concat_all_TCC5-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (caret_concat_all subtype "(number_fields.-)(array_ops.n, array_ops.j)"
    "nat")))
 (caret_concat_all_TCC6 0
  (caret_concat_all_TCC6-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (caret_concat_all subtype
    "concat_arrays[IF reals.>(0, (number_fields.-)(array_ops.i, array_ops.n)) THEN 0 ELSE (number_fields.-)((number_fields.+)(1, array_ops.i), array_ops.n) ENDIF, IF reals.>(array_ops.j, (number_fields.-)(array_ops.n, 1)) THEN 0 ELSE (number_fields.-)(array_ops.n, array_ops.j) ENDIF, array_ops.T].o(caret_arrays[array_ops.n, array_ops.T].^(array_ops.A_n, (0, (number_fields.-)(array_ops.i, array_ops.n))), caret_arrays[array_ops.m, array_ops.T].^(array_ops.B_m, (array_ops.j, (number_fields.-)(array_ops.n, 1))))"
    "below_array[IF i > j THEN 0 ELSE 1 + j - i ENDIF, T]")))
 (caret_concat_all 0
  (caret_concat_all-1 nil 3249304933
   ("" (skosimp*) (("" (apply-extensionality 1 :hide? t) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (i!1 skolem-const-decl "nat" array_ops nil)
    (n!1 skolem-const-decl "nat" array_ops nil)
    (m!1 skolem-const-decl "nat" array_ops nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (barr type-eq-decl nil array_ops nil)
    (O const-decl "below_array[n + m, T]" concat_arrays nil)
    (^ const-decl
     "below_array[LET (m, n) = p IN IF m > n THEN 0 ELSE n - m + 1 ENDIF, T]"
     caret_arrays nil)
    (below type-eq-decl nil nat_types nil)
    (below_array type-eq-decl nil below_arrays nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil array_ops nil))
   nil))
 (array_decomp_TCC1 0
  (array_decomp_TCC1-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (array_decomp subtype "array_ops.k" "below[n]")))
 (array_decomp_TCC2 0
  (array_decomp_TCC2-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (array_decomp subtype "(number_fields.-)(array_ops.n, 1)" "below[n]")))
 (array_decomp_TCC3 0
  (array_decomp_TCC3-1 nil 3249304933 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)) nil
   (array_decomp subtype
    "(number_fields.-)((number_fields.-)(array_ops.n, 1), array_ops.k)"
    "nat")))
 (array_decomp_TCC4 0
  (array_decomp_TCC4-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (array_decomp subtype "array_ops.A_n"
    "below_array[IF 1 + k > n - 1 THEN 0 ELSE n - 1 - k ENDIF + IF 0 > k THEN 0 ELSE 1 + k ENDIF, T]")))
 (array_decomp 0
  (array_decomp-1 nil 3249304933
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t) (("" (grind) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil array_ops nil)
    (below_array type-eq-decl nil below_arrays nil)
    (O const-decl "below_array[n + m, T]" concat_arrays nil)
    (below type-eq-decl nil nat_types nil)
    (^ const-decl
     "below_array[LET (m, n) = p IN IF m > n THEN 0 ELSE n - m + 1 ENDIF, T]"
     caret_arrays nil)
    (barr type-eq-decl nil array_ops nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (caret_bot_all_TCC1 0
  (caret_bot_all_TCC1-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (caret_bot_all subtype "(number_fields.-)(array_ops.n, 1)"
    "below[n + m]")))
 (caret_bot_all_TCC2 0
  (caret_bot_all_TCC2-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (caret_bot_all subtype "array_ops.A_n"
    "below_array[IF 0 > n - 1 THEN 0 ELSE n ENDIF, T]")))
 (caret_bot_all 0
  (caret_bot_all-1 nil 3249304933
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t) (("" (grind) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil array_ops nil)
    (barr type-eq-decl nil array_ops nil)
    (O const-decl "below_array[n + m, T]" concat_arrays nil)
    (^ const-decl
     "below_array[LET (m, n) = p IN IF m > n THEN 0 ELSE n - m + 1 ENDIF, T]"
     caret_arrays nil)
    (below type-eq-decl nil nat_types nil)
    (below_array type-eq-decl nil below_arrays nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (caret_top_all_TCC1 0
  (caret_top_all_TCC1-1 nil 3249304933 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (caret_top_all subtype
    "(number_fields.-)((number_fields.+)(array_ops.n, array_ops.m), 1)"
    "below[m + n]")))
 (caret_top_all_TCC2 0
  (caret_top_all_TCC2-1 nil 3249304933 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (caret_top_all subtype "array_ops.B_m"
    "below_array[IF n > m + n - 1 THEN 0 ELSE m ENDIF, T]")))
 (caret_top_all 0
  (caret_top_all-1 nil 3249304933
   ("" (skosimp*)
    (("" (case "m!1 = 0")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (expand "^") (("1" (apply-extensionality 1 :hide? t) nil nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "caret_concat_top")
        (("2" (apply-extensionality 2 :hide? t)
          (("2" (expand "^") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (barr type-eq-decl nil array_ops nil) (< const-decl "bool" reals nil)
    (empty_array const-decl "below_array[0, T]" empty_array_def nil)
    (below_array type-eq-decl nil below_arrays nil)
    (T formal-type-decl nil array_ops nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (^ const-decl
     "below_array[LET (m, n) = p IN IF m > n THEN 0 ELSE n - m + 1 ENDIF, T]"
     caret_arrays nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (> const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (m!1 skolem-const-decl "nat" array_ops nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (caret_concat_top formula-decl nil array_ops nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (concat_array_bot_TCC1 0
  (concat_array_bot_TCC1-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (concat_array_bot subtype "array_ops.i"
    "naturalnumbers.below((number_fields.+)(array_ops.m, array_ops.n))")))
 (concat_array_bot 0
  (concat_array_bot-1 nil 3249304933
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "below_array[n + m, T]" concat_arrays nil))
   nil))
 (concat_array_top_TCC1 0
  (concat_array_top_TCC1-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (concat_array_top subtype "array_ops.j"
    "naturalnumbers.below((number_fields.+)(array_ops.m, array_ops.n))")))
 (concat_array_top_TCC2 0
  (concat_array_top_TCC2-1 nil 3249304933 ("" (subtype-tcc) nil nil) nil nil
   (concat_array_top subtype "(number_fields.-)(array_ops.j, array_ops.m)"
    "naturalnumbers.below(array_ops.n)")))
 (concat_array_top 0
  (concat_array_top-1 nil 3249304933 ("" (grind) nil nil)
   ((O const-decl "below_array[n + m, T]" concat_arrays nil)) nil))
 (concat_array_r 0
  (concat_array_r-1 nil 3249304933
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t) (("" (grind) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil array_ops nil)
    (empty_array const-decl "below_array[0, T]" empty_array_def nil)
    (O const-decl "below_array[n + m, T]" concat_arrays nil)
    (FALSE const-decl "bool" booleans nil)
    (below_array type-eq-decl nil below_arrays nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (concat_array_l 0
  (concat_array_l-1 nil 3249304933
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil array_ops nil)
    (empty_array const-decl "below_array[0, T]" empty_array_def nil)
    (O const-decl "below_array[n + m, T]" concat_arrays nil)
    (below_array type-eq-decl nil below_arrays nil)
    (FALSE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (concat_array_assoc 0
  (concat_array_assoc-1 nil 3249304933
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil array_ops nil)
    (O const-decl "below_array[n + m, T]" concat_arrays nil)
    (below_array type-eq-decl nil below_arrays nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil)))


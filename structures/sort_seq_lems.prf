(sort_seq_lems
 (sort_seq_min_TCC1 0
  (sort_seq_min_TCC1-1 nil 3254568023
   ("" (skosimp*) (("" (rewrite "sort_length") (("" (assert) nil nil)) nil))
    nil)
   ((sort_length formula-decl nil sort_seq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (seqs type-eq-decl nil sort_seq nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (ne_seqs type-eq-decl nil seqs nil)
    (T formal-nonempty-type-decl nil sort_seq_lems nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" sort_seq_lems nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (sort_seq_min subtype "0" "below[sort[T, <=](s)`length]")))
 (sort_seq_min 0
  (sort_seq_min-2 "" 3790081430
   ("" (skosimp*)
    (("" (typepred "sort(s!1)")
      (("" (typepred "min(s!1)")
        (("" (expand "increasing?")
          (("" (skosimp*)
            (("" (expand "permutation?")
              (("" (assert)
                (("" (skosimp*)
                  (("" (expand "bijective?")
                    (("" (flatten)
                      (("" (expand "surjective?")
                        (("" (inst -4 "0")
                          (("" (skosimp*)
                            (("" (inst -5 "x!1")
                              (("" (replace -4)
                                (("" (hide -4)
                                  (("" (inst -1 "x!1")
                                    (("" (reveal -3)
                                      ((""
                                        (inst -1 "jj!1")
                                        ((""
                                          (inst -6 "0" "f!1(jj!1)")
                                          ((""
                                            (replace -1 * rl)
                                            ((""
                                              (assert)
                                              ((""
                                                (hide -1)
                                                ((""
                                                  (replace -2)
                                                  ((""
                                                    (replace -4)
                                                    ((""
                                                      (hide -2 -3 -4)
                                                      ((""
                                                        (typepred
                                                         "sort_seq_lems.<=")
                                                        ((""
                                                          (expand
                                                           "total_order?")
                                                          ((""
                                                            (expand
                                                             "partial_order?")
                                                            ((""
                                                              (flatten)
                                                              ((""
                                                                (expand
                                                                 "antisymmetric?")
                                                                ((""
                                                                  (inst?)
                                                                  ((""
                                                                    (assert)
                                                                    ((""
                                                                      (typepred
                                                                       "f!1(jj!1)")
                                                                      ((""
                                                                        (rewrite
                                                                         "sort_length")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sort const-decl
          "{ss: seqs | permutation?[T, <=](s, ss) AND increasing?(ss)}"
      sort_seq nil)
    (increasing? const-decl "bool" sort_seq nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (seqs type-eq-decl nil sort_seq nil) (ne_seqs type-eq-decl nil seqs nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (permutation? const-decl "bool" permutations_seq nil)
    (<= formal-const-decl "(total_order?[T])" sort_seq_lems nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil sort_seq_lems nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (sort_length formula-decl nil sort_seq nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (dom type-eq-decl nil min_seq nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq nil))
   shostak)
  (sort_seq_min-1 nil 3254568023
   ("" (skosimp*)
    (("" (typepred "sort(s!1)")
      (("" (typepred "min(s!1)")
        (("" (expand "increasing?")
          (("" (skosimp*)
            (("" (expand "permutation?")
              (("" (assert)
                (("" (rewrite "sort_length")
                  (("" (assert)
                    (("" (skosimp*)
                      (("" (expand "bijective?")
                        (("" (flatten)
                          (("" (expand "surjective?")
                            (("" (inst -4 "0")
                              (("1" (skosimp*)
                                (("1" (inst -5 "x!1")
                                  (("1" (replace -4)
                                    (("1" (hide -4)
                                      (("1"
                                        (inst -1 "x!1")
                                        (("1"
                                          (reveal -3)
                                          (("1"
                                            (inst -1 "jj!1")
                                            (("1"
                                              (inst -6 "0" "f!1(jj!1)")
                                              (("1"
                                                (replace -1 * rl)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (hide -2 -3 -4)
                                                          (("1"
                                                            (typepred
                                                             "sort_seq_lems.<=")
                                                            (("1"
                                                              (expand
                                                               "total_order?")
                                                              (("1"
                                                                (expand
                                                                 "partial_order?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "antisymmetric?")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "f!1(jj!1)")
                                                                          (("1"
                                                                            (rewrite
                                                                             "sort_length")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (rewrite "sort_length")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sort const-decl
          "{ss: seqs | permutation?[T, <=](s, ss) AND increasing?(ss)}"
      sort_seq nil)
    (increasing? const-decl "bool" sort_seq nil)
    (seqs type-eq-decl nil sort_seq nil) (ne_seqs type-eq-decl nil seqs nil)
    (permutation? const-decl "bool" permutations_seq nil)
    (sort_length formula-decl nil sort_seq nil)
    (dom type-eq-decl nil min_seq nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq nil))
   nil))
 (sort_seq_max_TCC1 0
  (sort_seq_max_TCC1-2 "" 3790081431
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sort_length formula-decl nil sort_seq nil)
    (T formal-nonempty-type-decl nil sort_seq_lems nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" sort_seq_lems nil))
   shostak
   (sort_seq_max subtype "(number_fields.-)(length(sort_seq_lems.s), 1)"
    "below[sort[T, <=](s)`length]"))
  (sort_seq_max_TCC1-1 nil 3254568023
   ("" (skosimp*)
    (("" (assert) (("" (rewrite "sort_length") (("" (assert) nil)))))) nil)
   ((sort_length formula-decl nil sort_seq nil)) nil
   (sort_seq_max subtype "(number_fields.-)(length(sort_seq_lems.s), 1)"
    "below[sort[T, <=](s)`length]")))
 (sort_seq_max 0
  (sort_seq_max-2 "" 3790081431
   ("" (skosimp*)
    (("" (typepred "sort(s!1)")
      (("" (typepred "max(s!1)")
        (("" (expand "increasing?")
          (("" (skosimp*)
            (("" (expand "permutation?")
              (("" (rewrite "sort_length")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (inst-cp -4 "jj!1")
                      (("" (expand "bijective?")
                        (("" (flatten)
                          (("" (expand "surjective?")
                            (("" (inst -4 "length(sort(s!1))-1")
                              (("" (skosimp*)
                                (("" (inst -5 "x!1")
                                  (("" (replace -4)
                                    (("" (hide -4)
                                      ((""
                                        (inst -1 "x!1")
                                        ((""
                                          (replace -4)
                                          ((""
                                            (hide -4)
                                            ((""
                                              (inst
                                               -5
                                               "f!1(jj!1)"
                                               "length(sort(s!1))-1")
                                              ((""
                                                (assert)
                                                ((""
                                                  (replace -2)
                                                  ((""
                                                    (hide -2)
                                                    ((""
                                                      (replace -3 * rl)
                                                      ((""
                                                        (hide -2 -3)
                                                        ((""
                                                          (typepred
                                                           "sort_seq_lems.<=")
                                                          ((""
                                                            (expand
                                                             "total_order?")
                                                            ((""
                                                              (expand
                                                               "partial_order?")
                                                              ((""
                                                                (flatten)
                                                                ((""
                                                                  (expand
                                                                   "antisymmetric?")
                                                                  ((""
                                                                    (inst?)
                                                                    ((""
                                                                      (assert)
                                                                      ((""
                                                                        (typepred
                                                                         "f!1(jj!1)")
                                                                        ((""
                                                                          (rewrite
                                                                           "sort_length")
                                                                          ((""
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sort const-decl
          "{ss: seqs | permutation?[T, <=](s, ss) AND increasing?(ss)}"
      sort_seq nil)
    (increasing? const-decl "bool" sort_seq nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (seqs type-eq-decl nil sort_seq nil) (ne_seqs type-eq-decl nil seqs nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (permutation? const-decl "bool" permutations_seq nil)
    (<= formal-const-decl "(total_order?[T])" sort_seq_lems nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil sort_seq_lems nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (sort_length formula-decl nil sort_seq nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (dom type-eq-decl nil max_seq nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq nil))
   shostak)
  (sort_seq_max-1 nil 3254568023
   ("" (skosimp*)
    (("" (typepred "sort(s!1)")
      (("" (typepred "max(s!1)")
        (("" (expand "increasing?")
          (("" (skosimp*)
            (("" (expand "permutation?")
              (("" (rewrite "sort_length")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (inst-cp -4 "jj!1")
                      (("" (expand "bijective?")
                        (("" (flatten)
                          (("" (expand "surjective?")
                            (("" (inst -4 "length(sort(s!1))-1")
                              (("1" (skosimp*)
                                (("1" (inst -5 "x!1")
                                  (("1" (replace -4)
                                    (("1" (hide -4)
                                      (("1"
                                        (inst -1 "x!1")
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (hide -4)
                                            (("1"
                                              (inst
                                               -5
                                               "f!1(jj!1)"
                                               "length(sort(s!1))-1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (replace -3 * rl)
                                                      (("1"
                                                        (hide -2 -3)
                                                        (("1"
                                                          (typepred
                                                           "sort_seq_lems.<=")
                                                          (("1"
                                                            (expand
                                                             "total_order?")
                                                            (("1"
                                                              (expand
                                                               "partial_order?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "antisymmetric?")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "sort_length")
                                                                        (("1"
                                                                          (typepred
                                                                           "f!1(jj!1)")
                                                                          (("1"
                                                                            (rewrite
                                                                             "sort_length")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "sort_length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite "sort_length")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (rewrite "sort_length")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sort const-decl
          "{ss: seqs | permutation?[T, <=](s, ss) AND increasing?(ss)}"
      sort_seq nil)
    (increasing? const-decl "bool" sort_seq nil)
    (seqs type-eq-decl nil sort_seq nil) (ne_seqs type-eq-decl nil seqs nil)
    (permutation? const-decl "bool" permutations_seq nil)
    (sort_length formula-decl nil sort_seq nil)
    (dom type-eq-decl nil max_seq nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq nil))
   nil)))


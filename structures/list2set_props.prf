(list2set_props
 (list2set_member 0
  (list2set_member-1 nil 3289154793
   ("" (induct "a")
    (("1" (grind) nil nil)
     ("2" (skosimp*) (("2" (inst -1 "t!1") (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list2set_props nil)
    (member def-decl "bool" list_props nil)
    (list2set def-decl "set[T]" list2set nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (list2set_append 0
  (list2set_append-1 nil 3289576899
   ("" (skolem 1 (_ "b"))
    (("" (induct "a")
      (("1" (grind)
        (("1" (rewrite "union_commutative")
          (("1" (rewrite "union_empty") nil nil)) nil))
        nil)
       ("2" (skolem 1 ("t" "ts"))
        (("2" (flatten)
          (("2" (expand "append" 1)
            (("2" (expand "list2set" 1 (1 2))
              (("2" (replaces -1)
                (("2" (rewrite "add_as_union")
                  (("2" (rewrite "add_as_union")
                    (("2" (rewrite "union_associative")
                      (("2" (lemma "union_commutative[T]")
                        (("2" (inst -1 "list2set(b)" "singleton(t)")
                          (("2" (replaces -1)
                            (("2" (rewrite "union_associative" :dir rl) nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list2set def-decl "set[T]" list2set nil)
    (append def-decl "list[T]" list_props nil)
    (union const-decl "set" sets nil)
    (T formal-type-decl nil list2set_props nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (union_associative formula-decl nil sets_lemmas nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (null_append 0
  (null_append-1 nil 3293965870
   ("" (skolem 1 (_ "b"))
    (("" (induct "a")
      (("1" (grind) nil nil)
       ("2" (skolem 1 ("x" "l"))
        (("2" (flatten)
          (("2" (expand "append" 1) (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil list2set_props nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (member_append 0
  (member_append-1 nil 3293984862
   ("" (skeep)
    (("" (rewrite "list2set_member" :dir rl)
      (("" (rewrite "list2set_member" :dir rl)
        (("" (rewrite "list2set_member" :dir rl)
          (("" (rewrite "list2set_append") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((list2set_member formula-decl nil list2set_props nil)
    (T formal-type-decl nil list2set_props nil)
    (list type-decl nil list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (list2set_append formula-decl nil list2set_props nil))
   shostak)))


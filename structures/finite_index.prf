(finite_index
 (finite_index 0
  (finite_index-2 nil 3601907819
   ("" (skeep)
    (("" (invoke (case "NOT %1") (! 1 1))
      (("1" (hide 2)
        (("1"
          (name "G"
                "LAMBDA (s2:(S2)): LET PI = inverse_image(f, singleton(s2)) IN
                            choose({b2: [(PI) -> below(d)]| bijective?(b2)})")
          (("1" (name "F" "LAMBDA (s1:(S1)): (f(s1),G(f(s1))(s1))")
            (("1" (inst + "F")
              (("1" (expand "bijective?" 1)
                (("1" (invoke (case "NOT %1") (! 1 1))
                  (("1" (hide 2)
                    (("1" (expand "injective?" 1)
                      (("1" (skolem 1 ("s1a" "s1b"))
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1" (expand "F" -1)
                              (("1" (flatten)
                                (("1" (replace -1 -2)
                                  (("1" (typepred "G(f(s1b))")
                                    (("1" (expand "bijective?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "injective?" -1)
                                          (("1"
                                            (inst - "s1a" "s1b")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "surjective?" 1)
                      (("2" (skolem 1 "s2ds")
                        (("2"
                          (case "NOT EXISTS (s2:(S2),id:below(d)): s2ds=(s2,id)")
                          (("1" (inst + "s2ds`1" "s2ds`2")
                            (("1" (decompose-equality 1) nil nil)) nil)
                           ("2" (skeep -1)
                            (("2" (replaces -1)
                              (("2" (typepred "G(s2)")
                                (("2" (expand "bijective?" -1)
                                  (("2" (flatten)
                                    (("2" (expand "surjective?" -2)
                                      (("2"
                                        (inst - "id")
                                        (("2"
                                          (skolem - "s1")
                                          (("2"
                                            (inst + "s1")
                                            (("2"
                                              (expand "F" 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "s1")
                                                  (("2"
                                                    (expand
                                                     "inverse_image"
                                                     -2)
                                                    (("2"
                                                      (expand "member" -2)
                                                      (("2"
                                                        (expand
                                                         "singleton"
                                                         -2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep)
                (("2" (expand "inverse_image" +)
                  (("2" (expand "member" 1)
                    (("2" (expand "singleton" +) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (split 1)
              (("1" (skeep) (("1" (replaces -1) (("1" (ground) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (hide (-2 -3 2))
                  (("2" (invoke (name "A" "%1") (! 1 1))
                    (("1" (replace -1)
                      (("1" (expand "bijective?" 1)
                        (("1" (split)
                          (("1" (expand "injective?" 1)
                            (("1" (skolem 1 ("s1a" "s1b"))
                              (("1" (flatten)
                                (("1" (typepred "A")
                                  (("1" (expand "bijective?" -1)
                                    (("1" (flatten)
                                      (("1"
                                        (expand "injective?")
                                        (("1"
                                          (inst - "s1a" "s1b")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "surjective?")
                            (("2" (skolem 1 "id")
                              (("2" (typepred "A")
                                (("2" (expand "bijective?" -1)
                                  (("2" (flatten)
                                    (("2" (expand "surjective?" -2)
                                      (("2"
                                        (inst - "id")
                                        (("2"
                                          (skeep -)
                                          (("2" (inst + "x") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (reveal -2)
                        (("2" (inst - "s2")
                          (("2" (skeep)
                            (("2" (expand "nonempty?")
                              (("2" (expand "empty?")
                                (("2" (expand "member")
                                  (("2" (inst - "b2")
                                    (("1" (expand "bijective?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1"
                                            (expand "injective?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst - "x1" "x2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "surjective?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst - "y")
                                                (("2"
                                                  (skeep)
                                                  (("2" (inst + "x") nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skeep)
                                      (("2"
                                        (replace -2)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide (-1 2))
            (("3" (skeep)
              (("3" (inst - "s2")
                (("3" (assert)
                  (("3" (expand "nonempty?")
                    (("3" (expand "empty?")
                      (("3" (expand "member")
                        (("3" (skeep)
                          (("3" (inst - "b2")
                            (("1" (expand "bijective?")
                              (("1" (flatten)
                                (("1" (split)
                                  (("1" (expand "injective?")
                                    (("1" (skeep)
                                      (("1"
                                        (inst - "x1" "x2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "surjective?")
                                    (("2" (skeep)
                                      (("2"
                                        (inst - "y")
                                        (("2"
                                          (skeep)
                                          (("2" (inst + "x") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2" (replaces -1) (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (replace -1)
          (("2" (hide -3)
            (("2"
              (case "EXISTS (B:[[below(k),below(d)]->below(k*d)]): bijective?(B)")
              (("1" (copy -3)
                (("1" (copy -3)
                  (("1" (copy -3)
                    (("1" (skeep -1)
                      (("1" (skeep -2)
                        (("1" (skeep -3)
                          (("1"
                            (name "FF"
                                  "LAMBDA (s1:(S1)): B(b1(b(s1)`1),b(s1)`2)")
                            (("1" (inst + "FF")
                              (("1" (expand "bijective?")
                                (("1" (flatten)
                                  (("1" (split)
                                    (("1" (expand "injective?" 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "FF" -1)
                                          (("1"
                                            (expand "injective?" -3)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "injective?" -8)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "injective?"
                                                           -6)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (decompose-equality
                                                                 2)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "surjective?" 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (typepred "y")
                                          (("2"
                                            (expand "FF" 1)
                                            (("2"
                                              (expand "surjective?" -4)
                                              (("2"
                                                (inst - "y")
                                                (("2"
                                                  (skolem - "xvv")
                                                  (("2"
                                                    (expand "surjective?" -8)
                                                    (("2"
                                                      (inst - "xvv`1")
                                                      (("2"
                                                        (skolem - "s2")
                                                        (("2"
                                                          (expand
                                                           "surjective?"
                                                           -6)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "(s2,xvv`2)")
                                                            (("2"
                                                              (skolem
                                                               -
                                                               "xstar")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "xstar")
                                                                (("2"
                                                                  (replace
                                                                   -6
                                                                   +)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2"
                  (case "EXISTS (B: [below(k * d)->[below(k), below(d)]]): bijective?(B)")
                  (("1" (skeep)
                    (("1" (inst + "inverse(B)")
                      (("1" (rewrite "bijective_inverse_is_bijective" 1)
                        (("1" (hide 2)
                          (("1" (inst + "0")
                            (("1" (lemma "posreal_times_posreal_is_posreal")
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst + "0")
                        (("2" (lemma "posreal_times_posreal_is_posreal")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2"
                      (name "BB"
                            "LAMBDA (i:below(k*d)): (floor(i/d),i-d*floor(i/d))")
                      (("2"
                        (case "NOT FORALL (i:below(k*d)): i = d*BB(i)`1+BB(i)`2")
                        (("1" (hide-all-but 1)
                          (("1" (skeep)
                            (("1" (typepred "i")
                              (("1" (expand "BB") (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst + "BB")
                          (("1" (expand "bijective?")
                            (("1" (split)
                              (("1" (expand "injective?")
                                (("1" (skeep)
                                  (("1" (inst-cp - "x1")
                                    (("1" (inst - "x2")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "surjective?")
                                (("2" (skeep)
                                  (("2" (inst + "d*y`1 + y`2")
                                    (("1" (expand "BB" 1)
                                      (("1"
                                        (case
                                         "floor((d * y`1 + y`2) / d) = y`1")
                                        (("1"
                                          (replace -1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "(d * y`1 + y`2) / d =y`1 + y`2/d")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "y`2/d>=0 AND y`2/d<1")
                                                  (("1" (ground) nil nil)
                                                   ("2"
                                                    (split)
                                                    (("1"
                                                      (cross-mult 1)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (typepred "y`1")
                                        (("2"
                                          (typepred "y`2")
                                          (("2"
                                            (case "y`1+1<=k")
                                            (("1"
                                              (mult-by -1 "d")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "BB" 1)
                              (("2" (assert)
                                (("2" (skolem 1 "i")
                                  (("2" (typepred "floor(i/d)")
                                    (("2" (cross-mult -1)
                                      (("2"
                                        (cross-mult -2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "i")
                                            (("2"
                                              (case "i/d<k")
                                              (("1" (assert) nil nil)
                                               ("2" (cross-mult 1) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T1 formal-type-decl nil finite_index nil) (set type-eq-decl nil sets nil)
    (T2 formal-type-decl nil finite_index nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (inverse_image const-decl "set[D]" function_image nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (F skolem-const-decl "[(S1) -> [(S2), below(d)]]" finite_index nil)
    (surjective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil) (member const-decl "bool" sets nil)
    (PI skolem-const-decl "set[(S1)]" finite_index nil)
    (s2 skolem-const-decl "(S2)" finite_index nil)
    (f skolem-const-decl "[(S1) -> (S2)]" finite_index nil)
    (S2 skolem-const-decl "set[T2]" finite_index nil)
    (S1 skolem-const-decl "set[T1]" finite_index nil)
    (empty? const-decl "bool" sets nil)
    (PI skolem-const-decl "set[(S1)]" finite_index nil)
    (s2 skolem-const-decl "(S2)" finite_index nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FF skolem-const-decl "[(S1) -> below(k * d)]" finite_index nil)
    (k skolem-const-decl "posnat" finite_index nil)
    (d skolem-const-decl "posnat" finite_index nil)
    (inverse const-decl "D" function_inverse nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (bijective_inverse_is_bijective judgement-tcc nil function_inverse nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil) (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (y skolem-const-decl "[below(k), below(d)]" finite_index nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (BB skolem-const-decl
     "[i: below(k * d) -> [{i_1 | i_1 <= i / d & i / d < 1 + i_1}, numfield]]"
     finite_index nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil)
  (finite_index-1 nil 3601832556
   ("" (skeep)
    (("" (invoke (case "NOT %1") (! 1 1))
      (("1" (hide 2)
        (("1"
          (name "G"
                "LAMBDA (s2:(S2)): LET PI = inverse_image(f, singleton(s2)) IN
          choose({b2: [(PI) -> below(d)]| bijective?(b2)})")
          (("1" (name "F" "LAMBDA (s1:(S1)): (f(s1),G(f(s1))(s1))")
            (("1" (inst + "F")
              (("1" (expand "bijective?" 1)
                (("1" (invoke (case "NOT %1") (! 1 1))
                  (("1" (hide 2)
                    (("1" (expand "injective?" 1)
                      (("1" (skolem 1 ("s1a" "s1b"))
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1" (expand "F" -1)
                              (("1" (flatten)
                                (("1" (replace -1 -2)
                                  (("1" (typepred "G(f(s1b))")
                                    (("1" (expand "bijective?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "injective?" -1)
                                          (("1"
                                            (inst - "s1a" "s1b")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "surjective?" 1)
                      (("2" (skolem 1 "s2ds")
                        (("2"
                          (case "NOT EXISTS (s2:(S2),id:below(d)): s2ds=(s2,id)")
                          (("1" (inst + "s2ds`1" "s2ds`2")
                            (("1" (decompose-equality 1) nil nil)) nil)
                           ("2" (skeep -1)
                            (("2" (replaces -1)
                              (("2" (typepred "G(s2)")
                                (("2" (expand "bijective?" -1)
                                  (("2" (flatten)
                                    (("2" (expand "surjective?" -2)
                                      (("2"
                                        (inst - "id")
                                        (("2"
                                          (skolem - "s1")
                                          (("2"
                                            (inst + "s1")
                                            (("2"
                                              (expand "F" 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "s1")
                                                  (("2"
                                                    (expand
                                                     "inverse_image"
                                                     -2)
                                                    (("2"
                                                      (expand "member" -2)
                                                      (("2"
                                                        (expand
                                                         "singleton"
                                                         -2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep)
                (("2" (expand "inverse_image" +)
                  (("2" (expand "member" 1)
                    (("2" (expand "singleton" +) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (split 1)
              (("1" (skeep) (("1" (replaces -1) (("1" (ground) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (hide (-2 -3 2))
                  (("2" (invoke (name "A" "%1") (! 1 1))
                    (("1" (replace -1)
                      (("1" (expand "bijective?" 1)
                        (("1" (split)
                          (("1" (expand "injective?" 1)
                            (("1" (skolem 1 ("s1a" "s1b"))
                              (("1" (flatten)
                                (("1" (typepred "A")
                                  (("1" (expand "bijective?" -1)
                                    (("1" (flatten)
                                      (("1"
                                        (expand "injective?")
                                        (("1"
                                          (inst - "s1a" "s1b")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "surjective?")
                            (("2" (skolem 1 "id")
                              (("2" (typepred "A")
                                (("2" (expand "bijective?" -1)
                                  (("2" (flatten)
                                    (("2" (expand "surjective?" -2)
                                      (("2"
                                        (inst - "id")
                                        (("2"
                                          (skeep -)
                                          (("2" (inst + "x") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (reveal -2)
                        (("2" (inst - "s2")
                          (("2" (skeep)
                            (("2" (expand "nonempty?")
                              (("2" (expand "empty?")
                                (("2" (expand "member")
                                  (("2" (inst - "b2")
                                    (("1" (expand "bijective?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1"
                                            (expand "injective?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst - "x1" "x2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "surjective?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst - "y")
                                                (("2"
                                                  (skeep)
                                                  (("2" (inst + "x") nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skeep)
                                      (("2"
                                        (replace -2)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide (-1 2))
            (("3" (skeep)
              (("3" (inst - "s2")
                (("3" (assert)
                  (("3" (expand "nonempty?")
                    (("3" (expand "empty?")
                      (("3" (expand "member")
                        (("3" (skeep)
                          (("3" (inst - "b2")
                            (("1" (expand "bijective?")
                              (("1" (flatten)
                                (("1" (split)
                                  (("1" (expand "injective?")
                                    (("1" (skeep)
                                      (("1"
                                        (inst - "x1" "x2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "surjective?")
                                    (("2" (skeep)
                                      (("2"
                                        (inst - "y")
                                        (("2"
                                          (skeep)
                                          (("2" (inst + "x") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2" (replaces -1) (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (replace -1)
          (("2" (hide -3)
            (("2"
              (case "EXISTS (B:[[below(k),below(d)]->below(k*d)]): bijective?(B)")
              (("1" (copy -3)
                (("1" (copy -3)
                  (("1" (copy -3)
                    (("1" (skeep -1)
                      (("1" (skeep -2)
                        (("1" (skeep -3)
                          (("1"
                            (name "FF"
                                  "LAMBDA (s1:(S1)): B(b1(b(s1)`1),b(s1)`2)")
                            (("1" (inst + "FF")
                              (("1" (expand "bijective?")
                                (("1" (flatten)
                                  (("1" (split)
                                    (("1" (expand "injective?" 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "FF" -1)
                                          (("1"
                                            (expand "injective?" -3)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "injective?" -8)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "injective?"
                                                           -6)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (decompose-equality
                                                                 2)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "surjective?" 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (typepred "y")
                                          (("2"
                                            (expand "FF" 1)
                                            (("2"
                                              (expand "surjective?" -4)
                                              (("2"
                                                (inst - "y")
                                                (("2"
                                                  (skolem - "xvv")
                                                  (("2"
                                                    (expand "surjective?" -8)
                                                    (("2"
                                                      (inst - "xvv`1")
                                                      (("2"
                                                        (skolem - "s2")
                                                        (("2"
                                                          (expand
                                                           "surjective?"
                                                           -6)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "(s2,xvv`2)")
                                                            (("2"
                                                              (skolem
                                                               -
                                                               "xstar")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "xstar")
                                                                (("2"
                                                                  (replace
                                                                   -6
                                                                   +)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2"
                  (case "EXISTS (B: [below(k * d)->[below(k), below(d)]]): bijective?(B)")
                  (("1" (skeep)
                    (("1" (inst + "inverse(B)")
                      (("1" (rewrite "bijective_inverse_is_bijective" 1)
                        (("1" (hide 2)
                          (("1" (inst + "0")
                            (("1" (lemma "posreal_times_posreal_is_posreal")
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst + "0")
                        (("2" (lemma "posreal_times_posreal_is_posreal")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2"
                      (name "BB"
                            "LAMBDA (i:below(k*d)): (floor(i/d),i-floor(i/d))")
                      (("2" (inst + "BB")
                        (("1" (expand "bijective?")
                          (("1" (split)
                            (("1"
                              (case "NOT FORALL (i:below(k*d)): i = d*BB(i)`1+BB(i)`2")
                              (("1" (hide-all-but 1)
                                (("1" (postpone) nil nil)) nil)
                               ("2" (postpone) nil nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))


(permutations
 (perm_reflexive 0
  (perm_reflexive-1 nil 3410114275
   ("" (skosimp*)
    (("" (expand "permutation_of?")
      (("" (inst 1 "(LAMBDA ii: ii)")
        (("" (expand "bijective?")
          (("" (prop)
            (("1" (expand "injective?") (("1" (skosimp*) nil nil)) nil)
             ("2" (expand "surjective?")
              (("2" (skosimp*)
                (("2" (typepred "y!1") (("2" (inst + "y!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutation_of? const-decl "bool" permutations nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" permutations nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (perm_symmetric 0
  (perm_symmetric-1 nil 3410114275
   ("" (skosimp*)
    (("" (expand "permutation_of?")
      (("" (skosimp*)
        (("" (case-replace "N = 0")
          (("1" (inst + "f!1")
            (("1" (prop)
              (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst + "inverse(f!1)")
            (("1" (rewrite "bij_inv_is_bij")
              (("1" (assert)
                (("1" (skosimp*)
                  (("1" (inst -2 "inverse(f!1)(ii!1)")
                    (("1" (case-replace "f!1(inverse(f!1)(ii!1)) = ii!1")
                      (("1" (assert) nil nil)
                       ("2" (hide -2 2)
                        (("2" (expand "bijective?")
                          (("2" (flatten)
                            (("2"
                              (lemma "surjective_inverse[below[N],below[N]]")
                              (("1"
                                (inst -1 "inverse(f!1)(ii!1)" "ii!1" "f!1")
                                (("1" (assert) nil nil)
                                 ("2" (inst 1 "0") nil nil))
                                nil)
                               ("2" (inst 1 "0") nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (inst 1 "0") nil nil))
                      nil)
                     ("2" (inst 1 "0") nil nil))
                    nil))
                  nil))
                nil)
               ("2" (inst 1 "0") nil nil))
              nil)
             ("2" (assert) (("2" (inst 1 "0") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutation_of? const-decl "bool" permutations nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" permutations nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (bijective? const-decl "bool" functions nil)
    (surjective_inverse formula-decl nil function_inverse nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (f!1 skolem-const-decl "[below(N) -> below(N)]" permutations nil)
    (surjective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (perm_tran 0
  (perm_tran-1 nil 3410114275
   ("" (skosimp*)
    (("" (expand "permutation_of?")
      (("" (skosimp*)
        (("" (inst 1 "(LAMBDA ii: f!2(f!1(ii)))")
          (("" (prop)
            (("1" (expand "bijective?")
              (("1" (prop)
                (("1" (expand "injective?")
                  (("1" (skosimp*)
                    (("1" (inst -5 "f!1(x1!1)" "f!1(x2!1)")
                      (("1" (inst -2 "x1!1" "x2!1") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "surjective?")
                  (("2" (skosimp*)
                    (("2" (inst -5 "y!1")
                      (("2" (skosimp*)
                        (("2" (replace -5 * rl)
                          (("2" (inst -2 "x!1")
                            (("2" (skosimp*)
                              (("2" (inst 1 "x!2") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst?) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutation_of? const-decl "bool" permutations nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" permutations nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil))
   nil))
 (perm_in? 0
  (perm_in?-1 nil 3410114275
   ("" (skosimp*)
    (("" (iff 1)
      (("" (prop)
        (("1" (expand "in?")
          (("1" (skosimp*)
            (("1" (expand "permutation_of?")
              (("1" (skosimp*)
                (("1" (inst 1 "f!1(ii!1)")
                  (("1" (assert) (("1" (inst?) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "in?")
          (("2" (skosimp*)
            (("2" (lemma "perm_symmetric")
              (("2" (inst -1 "A1!1" "A2!1")
                (("2" (assert)
                  (("2" (hide -3)
                    (("2" (expand "permutation_of?")
                      (("2" (skosimp*)
                        (("2" (inst - "ii!1")
                          (("2" (inst 1 "f!1(ii!1)") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm_symmetric formula-decl nil permutations nil)
    (T formal-type-decl nil permutations nil)
    (in? const-decl "bool" below_arrays nil)
    (permutation_of? const-decl "bool" permutations nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (N formal-const-decl "nat" permutations nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil))
   nil)))


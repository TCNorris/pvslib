(majority_fseq
 (is_majority_TCC1 0
  (is_majority_TCC1-1 nil 3410629206
   ("" (skosimp*) (("" (rewrite "finite_below") nil nil)) nil)
   ((finite_below formula-decl nil finite_sets_below finite_sets)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil majority_fseq nil)
    (fsq type-eq-decl nil fsq nil))
   nil
   (is_majority subtype
    "{i: naturalnumbers.below(length(majority_fseq.fs)) | seq(majority_fseq.fs)(i) = majority_fseq.mv}"
    "finite_set[below(length(fs))]")))
 (maj_TCC1 0
  (maj_TCC1-1 nil 3410629206
   (""
    (inst 1 "(LAMBDA (fs: fsq[T]):
               IF maj_exists(fs) THEN
                  choose({mv: T | is_majority(mv, fs)})
               ELSE
                  epsilon({mv: T | TRUE})
               ENDIF)")
    (("1" (skosimp*) nil nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)
     ("3" (skosimp*)
      (("3" (assert)
        (("3" (expand "nonempty?")
          (("3" (expand "empty?")
            (("3" (expand "maj_exists")
              (("3" (skosimp*)
                (("3" (inst -2 "mv!1")
                  (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (is_majority const-decl "bool" majority_fseq nil)
    (maj_exists const-decl "bool" majority_fseq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fsq type-eq-decl nil fsq nil)
    (T formal-nonempty-type-decl nil majority_fseq nil))
   nil
   (maj existence ""
    "[fs: fsq[majority_fseq.T].fsq -> {mv | booleans.=>(majority_fseq.maj_exists(fs), majority_fseq.is_majority(majority_fseq.mv, fs))}]")))
 (is_majority_unique 0
  (is_majority_unique-2 "" 3790088242
   ("" (skosimp*)
    (("" (expand "is_majority")
      (("" (name "A" "{i: below(length(fs!1)) | seq(fs!1)(i) = mv1!1}")
        (("" (name "B" "{i: below(length(fs!1)) | seq(fs!1)(i) = mv2!1}")
          (("" (replace -1)
            (("" (hide -1)
              (("" (replace -1)
                (("" (hide -1)
                  (("" (case "disjoint?(A,B)")
                    (("1" (lemma "card_disj_union[below(length(fs!1))]")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (hide -2)
                            (("1" (case "card(union(A, B)) <= length(fs!1)")
                              (("1" (replace -2)
                                (("1" (hide -2 -3 -4 1)
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (hide -1 -2 -3)
                                (("2" (rewrite "card_below") nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (reveal -1 -2)
                      (("2" (hide -3 -4)
                        (("2" (replace -1 + rl)
                          (("2" (hide -1)
                            (("2" (replace -1 + rl)
                              (("2" (hide -1)
                                (("2" (expand "disjoint?")
                                  (("2" (expand "intersection")
                                    (("2" (expand "empty?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (skosimp*)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (is_majority_unique-1 nil 3410629206
   ("" (skosimp*)
    (("" (expand "is_majority")
      (("" (name "A" "{i: below(length(fs!1)) | seq(fs!1)(i) = mv1!1}")
        (("" (name "B" "{i: below(length(fs!1)) | seq(fs!1)(i) = mv2!1}")
          (("" (replace -1)
            (("" (hide -1)
              (("" (replace -1)
                (("" (hide -1)
                  (("" (case "disjoint?(A,B)")
                    (("1" (lemma "card_disj_union[below(length(fs!1))]")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (hide -2)
                            (("1" (case "card(union(A, B)) <= length(fs!1)")
                              (("1" (replace -2)
                                (("1" (hide -2 -3 -4 1)
                                  (("1" (assert) nil)))))
                               ("2" (hide -1 -2 -3)
                                (("2" (rewrite "card_below") nil)))
                               ("3"
                                (lemma "finite_subset[below(length(fs!1))]")
                                (("3"
                                  (inst -1 "{x: below(length(fs!1)) | TRUE}"
                                   "union[below(length(fs!1))](A, B)")
                                  (("1" (assert)
                                    (("1" (hide -1 -2 -3 -4 2 3)
                                      (("1"
                                        (expand "subset?")
                                        (("1"
                                          (expand "union")
                                          (("1"
                                            (expand "member")
                                            (("1" (propax) nil)))))))))))
                                   ("2" (rewrite "finite_below")
                                    nil)))))))))))
                         ("2" (reveal -3)
                          (("2" (hide -2 -3 -4 2)
                            (("2" (replace -1 1 rl)
                              (("2" (hide -1)
                                (("2" (rewrite "finite_below") nil)))))))))
                         ("3" (rewrite "finite_below") nil)))))
                     ("2" (reveal -1 -2)
                      (("2" (hide -3 -4)
                        (("2" (replace -1 + rl)
                          (("2" (hide -1)
                            (("2" (replace -1 + rl)
                              (("2" (hide -1)
                                (("2" (expand "disjoint?")
                                  (("2" (expand "intersection")
                                    (("2" (expand "empty?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (assert)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   ((is_majority const-decl "bool" majority_fseq nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (card_disj_union formula-decl nil finite_sets nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil) (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (union const-decl "set" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (card_below formula-decl nil finite_sets_below finite_sets)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil) (disjoint? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil majority_fseq nil)
    (fsq type-eq-decl nil fsq nil) (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (maj_lem 0
  (maj_lem-2 "" 3790088242
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "maj_exists") (("1" (inst?) nil nil)) nil)
       ("2" (typepred "maj(fs!1)")
        (("2" (split -1)
          (("1" (lemma "is_majority_unique")
            (("1" (inst -1 "fs!1" "mv!1" "maj(fs!1)") (("1" (assert) nil nil))
              nil))
            nil)
           ("2" (expand "maj_exists") (("2" (inst?) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred "maj(fs!1)") (("3" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak)
  (maj_lem-1 nil 3410629206
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "maj_exists") (("1" (inst?) nil)))
       ("2" (typepred "maj(fs!1)")
        (("2" (split -1)
          (("1" (lemma "is_majority_unique")
            (("1" (inst -1 "fs!1" "mv!1" "maj(fs!1)") (("1" (assert) nil)))))
           ("2" (expand "maj_exists") (("2" (inst?) nil)))))))
       ("3" (typepred "maj(fs!1)") (("3" (assert) nil))))))
    nil)
   ((T formal-nonempty-type-decl nil majority_fseq nil)
    (maj_exists const-decl "bool" majority_fseq nil)
    (is_majority_unique formula-decl nil majority_fseq nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fsq type-eq-decl nil fsq nil)
    (is_majority const-decl "bool" majority_fseq nil)
    (maj const-decl "{mv | maj_exists(fs) => is_majority(mv, fs)}"
     majority_fseq nil))
   nil))
 (maj_subset 0
  (maj_subset-2 "" 3790088242
   ("" (skosimp*)
    (("" (expand "is_majority")
      ((""
        (case "subset?(A!1,{i: below(length(fs!1)) | seq(fs!1)(i) = mv!1})")
        (("1" (lemma "card_subset[below(length(fs!1))]")
          (("1" (inst?)
            (("1" (assert) nil nil) ("2" (rewrite "finite_below") nil nil))
            nil))
          nil)
         ("2" (hide -1 2)
          (("2" (expand "subset?")
            (("2" (skosimp*)
              (("2" (expand "member")
                (("2" (inst -2 "x!1") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (maj_subset-1 nil 3410629206
   ("" (skosimp*)
    (("" (expand "is_majority")
      ((""
        (case "subset?(A!1,{i: below(length(fs!1)) | seq(fs!1)(i) = mv!1})")
        (("1" (lemma "card_subset[below(length(fs!1))]")
          (("1" (inst?)
            (("1" (assert) nil) ("2" (rewrite "finite_below") nil)))))
         ("2" (hide -1 2)
          (("2" (expand "subset?")
            (("2" (skosimp*)
              (("2" (expand "member")
                (("2" (inst -2 "x!1") (("2" (assert) nil))))))))))))))))
    nil)
   ((is_majority const-decl "bool" majority_fseq nil)
    (member const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (finite_below formula-decl nil finite_sets_below finite_sets)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (mv!1 skolem-const-decl "T" majority_fseq nil)
    (fs!1 skolem-const-decl "fsq[T]" majority_fseq nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil majority_fseq nil)
    (fsq type-eq-decl nil fsq nil) (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (maj_in_seq 0
  (maj_in_seq-2 "" 3790088242
   ("" (skosimp*)
    (("" (expand "in_seq")
      (("" (expand "is_majority")
        (("" (lemma "card_empty?[below(length(fs!1))]")
          (("" (inst?)
            (("1" (expand "empty?")
              (("1" (expand "member")
                (("1" (iff -1)
                  (("1" (flatten)
                    (("1" (split -1)
                      (("1" (assert) nil nil)
                       ("2" (split -1)
                        (("1" (propax) nil nil)
                         ("2" (skosimp*) (("2" (inst 2 "x!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "finite_below") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (maj_in_seq-1 nil 3410629206
   ("" (skosimp*)
    (("" (expand "in_seq")
      (("" (expand "is_majority")
        (("" (lemma "card_empty?[below(length(fs!1))]")
          (("" (inst?)
            (("1" (expand "empty?")
              (("1" (expand "member")
                (("1" (iff -1)
                  (("1" (flatten)
                    (("1" (split -1)
                      (("1" (assert) nil)
                       ("2" (split -1)
                        (("1" (propax) nil)
                         ("2" (skosimp*)
                          (("2" (inst 2 "x!1") nil)))))))))))))))
             ("2" (rewrite "finite_below") nil))))))))))
    nil)
   ((in_seq const-decl "bool" majority_fseq nil)
    (below type-eq-decl nil naturalnumbers nil) (fsq type-eq-decl nil fsq nil)
    (T formal-nonempty-type-decl nil majority_fseq nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_empty? formula-decl nil finite_sets nil)
    (finite_below formula-decl nil finite_sets_below finite_sets)
    (empty? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (member const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fs!1 skolem-const-decl "fsq[T]" majority_fseq nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mv!1 skolem-const-decl "T" majority_fseq nil)
    (is_majority const-decl "bool" majority_fseq nil))
   nil))
 (length_eq_1 0
  (length_eq_1-3 nil 3410692820
   ("" (skosimp*)
    (("" (expand "fseq1")
      (("" (lemma "maj_lem")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "is_majority")
                (("" (lemma "card_below_fullset[1]")
                  (("" (assert)
                    (("" (expand "fullset") (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fseq1 const-decl "fseq" fseqs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil majority_fseq nil)
    (fsq type-eq-decl nil fsq nil) (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil) (default const-decl "T" fseqs nil)
    (card_below_fullset formula-decl nil finite_sets_below finite_sets)
    (fullset const-decl "set" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (is_majority const-decl "bool" majority_fseq nil)
    (maj_lem formula-decl nil majority_fseq nil))
   nil)
  (length_eq_1-2 nil 3410629757
   ("" (skosimp*)
    (("" (expand "gen1")
      (("" (lemma "maj_lem")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "is_majority")
                (("" (lemma "card_below_fullset[1]")
                  (("" (assert)
                    (("" (expand "fullset") (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((default const-decl "T" fseqs nil)
    (card_below_fullset formula-decl nil finite_sets_below finite_sets))
   nil)
  (length_eq_1-1 nil 3410629206
   ("" (skosimp*)
    (("" (lemma "maj_lem")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (expand "is_majority")
              (("" (expand "gen1")
                ((""
                  (case-replace "{i: below(length(gen1(c!1))) |
               IF i < 1 THEN c!1 ELSE default ENDIF = c!1} = {i: below(1) | TRUE}")
                  (("1" (hide -1)
                    (("1" (lemma "card_below_fullset[1]")
                      (("1" (assert)
                        (("1" (expand "fullset") (("1" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (apply-extensionality 1 :hide? t)
                      (("1" (lift-if)
                        (("1" (typepred "x!1")
                          (("1" (expand "gen1") (("1" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (expand "gen1") (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (expand "gen1") (("3" (propax) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (is_majority_const 0
  (is_majority_const-2 "" 3790088243
   ("" (skosimp*)
    (("" (expand "is_majority")
      (("" (expand "constant_seq")
        (("" (lemma "card_below_fullset[length(constant_seq(n!1, c!1))]")
          (("" (expand "fullset")
            (("" (expand "constant_seq") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (is_majority_const-1 nil 3410629206
   ("" (skosimp*)
    (("" (expand "is_majority")
      (("" (expand "constant_seq")
        (("" (lemma "card_below_fullset[length(constant_seq(n!1, c!1))]")
          (("" (expand "fullset")
            (("" (expand "constant_seq") (("" (assert) nil))))))))))))
    nil)
   ((is_majority const-decl "bool" majority_fseq nil)
    (fsq type-eq-decl nil fsq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil majority_fseq nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_below_fullset formula-decl nil finite_sets_below finite_sets)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (fullset const-decl "set" sets nil)
    (constant_seq const-decl "fsq[T]" majority_fseq nil))
   nil))
 (maj_const 0
  (maj_const-2 "" 3790088243
   ("" (skosimp*)
    (("" (lemma "is_majority_const")
      (("" (inst?)
        (("" (lemma "maj_lem") (("" (inst?) (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (maj_const-1 nil 3410629206
   ("" (skosimp*)
    (("" (lemma "is_majority_const")
      (("" (inst?)
        (("" (lemma "maj_lem") (("" (inst?) (("" (ground) nil))))))))))
    nil)
   ((is_majority_const formula-decl nil majority_fseq nil)
    (maj_lem formula-decl nil majority_fseq nil)
    (constant_seq const-decl "fsq[T]" majority_fseq nil)
    (fsq type-eq-decl nil fsq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil majority_fseq nil))
   nil)))


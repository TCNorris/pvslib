(fault_masking_vote
 (mid_val_is_maj 0
  (mid_val_is_maj-2 "" 3790088107
   ("" (skosimp*)
    (("" (expand "mid_val")
      (("" (expand "maj")
        (("" (lift-if)
          (("" (prop)
            (("" (hide 1)
              (("" (expand "empty?")
                (("" (skosimp*)
                  (("" (expand "member")
                    (("" (case "mid_val?(A!1) = maj?(A!1)")
                      (("1" (replace -) (("1" (propax) nil nil)) nil)
                       ("2" (hide 2)
                        (("2" (decompose-equality 1)
                          (("2" (expand "mid_val?")
                            (("2" (expand "maj?")
                              (("2" (iff)
                                (("2" (prop)
                                  (("1" (case "x!1 = x!2")
                                    (("1" (replace -) (("1" (propax) nil nil))
                                      nil)
                                     ("2" (lemma "maj_size")
                                      (("2"
                                        (inst - "A!1" "x!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case "leq(x!1, x!2)")
                                            (("1"
                                              (use "u_filter_purge")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use "card_subbag?")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "l_filter_purge")
                                              (("2"
                                                (use "card_subbag?")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred! "leq")
                                                    (("2"
                                                      (expand "total_order?")
                                                      (("2"
                                                        (expand
                                                         "partial_order?")
                                                        (("2"
                                                          (expand
                                                           "dichotomous?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2)
                                    (("2" (use "l_filter_extract")
                                      (("2"
                                        (use "card_extract_bag")
                                        (("2"
                                          (use "card_subbag?")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (hide -2)
                                    (("3" (use "u_filter_extract")
                                      (("3"
                                        (use "card_extract_bag")
                                        (("3"
                                          (use "card_subbag?")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (mid_val_is_maj-1 nil 3284827266
   ("" (skosimp*)
    (("" (expand "mid_val")
      (("" (expand "maj")
        (("" (lift-if)
          (("" (prop)
            (("" (hide 1)
              (("" (expand "empty?")
                (("" (skosimp*)
                  (("" (expand "member")
                    (("" (case "mid_val?(A!1) = maj?(A!1)")
                      (("1" (replace -) (("1" (propax) nil nil)) nil)
                       ("2" (hide 2)
                        (("2" (decompose-equality 1)
                          (("2" (expand "mid_val?")
                            (("2" (expand "maj?")
                              (("2" (iff)
                                (("2" (prop)
                                  (("1" (case "x!1 = x!2")
                                    (("1" (replace -) (("1" (propax) nil nil))
                                      nil)
                                     ("2" (lemma "maj_size")
                                      (("2"
                                        (inst - "A!1" "x!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case "leq(x!1, x!2)")
                                            (("1"
                                              (use "u_filter_purge")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use "card_subbag?")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (case "x!1 = x!2")
                                                    (("1" (propax) nil nil)
                                                     ("2"
                                                      (rewrite
                                                       "finite_u_filter")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "l_filter_purge")
                                              (("2"
                                                (use "card_subbag?")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred! "leq")
                                                    (("1"
                                                      (expand "total_order?")
                                                      (("1"
                                                        (expand
                                                         "partial_order?")
                                                        (("1"
                                                          (expand
                                                           "dichotomous?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite "finite_l_filter")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2)
                                    (("2" (use "l_filter_extract")
                                      (("2"
                                        (use "card_extract_bag")
                                        (("2"
                                          (use "card_subbag?")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -2)
                                            (("2"
                                              (use "u_filter_extract")
                                              (("2"
                                                (use "card_extract_bag")
                                                (("2"
                                                  (use "card_subbag?")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "finite_l_filter")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "finite_u_filter")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (hide -2)
                                    (("3" (use "u_filter_extract")
                                      (("3"
                                        (use "card_extract_bag")
                                        (("3"
                                          (use "card_subbag?")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (rewrite "finite_u_filter")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mid_val const-decl "T" middle_value_select nil)
    (maj? const-decl "bool" majority_vote nil)
    (mid_val? const-decl "bool" middle_value_select nil)
    (leq formal-const-decl "(total_order?[T])" fault_masking_vote nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (bag type-eq-decl nil bags nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil fault_masking_vote nil)
    (maj_size formula-decl nil majority_vote nil)
    (nil application-judgement "finite_bag[T]" fault_masking_vote nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nil application-judgement "finite_bag[T]" fault_masking_vote nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (l_filter_purge formula-decl nil bag_filters nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (l_filter const-decl "bag" bag_filters nil)
    (u_filter_purge formula-decl nil bag_filters nil)
    (card_subbag? formula-decl nil finite_bags nil)
    (u_filter const-decl "bag" bag_filters nil)
    (purge const-decl "bag" bags nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "finite_bag[T]" fault_masking_vote nil)
    (l_filter_extract formula-decl nil bag_filters nil)
    (extract const-decl "bag" bags nil)
    (nil application-judgement "finite_bag[T]" fault_masking_vote nil)
    (card_extract_bag formula-decl nil finite_bags nil)
    (u_filter_extract formula-decl nil bag_filters nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (maj const-decl "T" majority_vote nil))
   shostak)))


(swap_counting
 (swap_count_TCC1 0
  (swap_count_TCC1-1 nil 3578317074 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (swap_count subtype "(number_fields.-)(swap_counting.i, 1)"
    "naturalnumbers.below(swap_counting.N)")))
 (swap_count_TCC2 0
  (swap_count_TCC2-1 nil 3578317074 ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   nil
   (swap_count termination
    "swap_counting.swap_count(swap_counting.N, swap_counting.seq)((number_fields.-)(swap_counting.i, 1))"
    "nil")))
 (swap_count_even_TCC1 0
  (swap_count_even_TCC1-1 nil 3578317074 ("" (subtype-tcc) nil nil) nil nil
   (swap_count_even subtype "(number_fields.-)(swap_counting.N, 1)"
    "naturalnumbers.below(swap_counting.N)")))
 (swap_count_even 0
  (swap_count_even-2 "" 3790088390
   (""
    (case "FORALL (nn:nat): FORALL (seq: [below(nn+1) -> bool]):
               even?(swap_count(nn+1, seq)(nn))")
    (("1" (skeep)
      (("1" (inst - "N-1") (("1" (assert) (("1" (inst?) nil nil)) nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "nn")
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (assert)
              (("2" (name "seq2" "LAMBDA (ijk:below(1+j)): seq(ijk)")
                (("2" (inst - "seq2")
                  (("2"
                    (case "NOT FORALL (ik:nat): ik<j IMPLIES swap_count(1+j,seq2)(ik)=swap_count(2+j,seq)(ik)")
                    (("1" (hide-all-but 1)
                      (("1" (induct "ik")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "swap_count")
                              (("1" (case "j = 1")
                                (("1" (replaces -1)
                                  (("1" (assert)
                                    (("1" (expand "seq2")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (case "mod(1,1+j)=1")
                                  (("1" (case "mod(1,2+j)=1")
                                    (("1" (replaces -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "seq2")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 3)
                                      (("2" (rewrite "mod_1") nil nil)) nil))
                                    nil)
                                   ("2" (rewrite "mod_1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (assert)
                            (("2" (expand "swap_count" +)
                              (("2" (replaces -1)
                                (("2" (assert)
                                  (("2" (expand "seq2")
                                    (("2" (case "mod(2+j_1,1+j)=2+j_1")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case "mod(2+j_1,2+j) = 2+j_1")
                                          (("1" (replaces -1) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite "mod_lt_nat")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (rewrite "mod_lt_nat") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp*) (("3" (ground) nil nil)) nil)
                         ("4" (skosimp*) (("4" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst - "j-1")
                      (("1" (assert)
                        (("1" (expand "swap_count" -3)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1" (ground)
                                (("1" (replaces -1)
                                  (("1" (assert)
                                    (("1" (hide -)
                                      (("1"
                                        (expand "swap_count")
                                        (("1"
                                          (expand "swap_count")
                                          (("1"
                                            (case "mod(2,2)=0")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (rewrite "mod_1")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (lift-if)
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replaces -2)
                                  (("2" (expand "swap_count" +)
                                    (("2" (case "mod(2+j,2+j)=0")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "swap_count" +)
                                            (("1"
                                              (case "mod(1+j,2+j)=1+j")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (name
                                                   "MM"
                                                   "swap_count(2+j,seq)(j-1)")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "even_plus_even_is_even")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "1+MM"
                                                           "IF NOT seq(1 + j) = seq(0) THEN 1 ELSE 0 ENDIF +
             IF NOT seq(j) = seq(1 + j) THEN 1 ELSE 0 ENDIF-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 4)
                                                            (("2"
                                                              (expand "seq2")
                                                              (("2"
                                                                (case
                                                                 "FORALL (bb:bool): bb or not bb")
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "seq(1+j)")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "seq(0)")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "seq(j)")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite "mod_lt_nat")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (rewrite "mod_0_divides")
                                          (("2"
                                            (expand "divides")
                                            (("2"
                                              (inst + "1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (expand "swap_count" +)
                                  (("3" (expand "swap_count" +)
                                    (("3" (case "mod(1+j,2+j)=1+j")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case "mod(2+j,2+j)=0")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (replaces -3)
                                              (("1"
                                                (lemma
                                                 "even_plus_even_is_even")
                                                (("1"
                                                  (inst
                                                   -
                                                   "IF NOT seq(1 + j) = seq(0) THEN 1 ELSE 0 ENDIF +
             IF NOT seq(j) = seq(1 + j) THEN 1 ELSE 0 ENDIF"
                                                   "swap_count(2 + j, seq)(j - 1)")
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (case
                                                       "FORALL (bb:bool): bb or not bb")
                                                      (("1"
                                                        (inst-cp - "seq(0)")
                                                        (("1"
                                                          (inst-cp - "seq(j)")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "seq(1+j)")
                                                            (("1"
                                                              (expand "seq2")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but 1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "mod_0_divides")
                                            (("2"
                                              (expand "divides")
                                              (("2"
                                                (inst + "1")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (rewrite "mod_lt_nat") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "j = 0")
                          (("1" (replaces -1)
                            (("1" (hide-all-but 2)
                              (("1" (assert)
                                (("1" (expand "swap_count")
                                  (("1" (case "mod(2,2)=0")
                                    (("1" (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "swap_count")
                                          (("1"
                                            (rewrite "mod_lt_nat")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (rewrite "mod_0_divides")
                                        (("2"
                                          (expand "divides")
                                          (("2"
                                            (inst + "1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*) (("3" (ground) nil nil)) nil)
                     ("4" (skosimp*) (("4" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (swap_count_even-1 nil 3578317176
   (""
    (case "FORALL (nn:nat): FORALL (seq: [below(nn+1) -> bool]):
               even?(swap_count(nn+1, seq)(nn))")
    (("1" (skeep)
      (("1" (inst - "N-1") (("1" (assert) (("1" (inst?) nil nil)) nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "nn")
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (assert)
              (("2" (name "seq2" "LAMBDA (ijk:below(1+j)): seq(ijk)")
                (("2" (inst - "seq2")
                  (("2"
                    (case "NOT FORALL (ik:nat): ik<j IMPLIES swap_count(1+j,seq2)(ik)=swap_count(2+j,seq)(ik)")
                    (("1" (hide-all-but 1)
                      (("1" (induct "ik")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "swap_count")
                              (("1" (case "j = 1")
                                (("1" (replaces -1)
                                  (("1" (assert)
                                    (("1" (expand "seq2")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (case "mod(1,1+j)=1")
                                  (("1" (case "mod(1,2+j)=1")
                                    (("1" (replaces -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "seq2")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 3)
                                      (("2" (rewrite "mod_1") nil nil)) nil))
                                    nil)
                                   ("2" (rewrite "mod_1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (assert)
                            (("2" (expand "swap_count" +)
                              (("2" (replaces -1)
                                (("2" (assert)
                                  (("2" (expand "seq2")
                                    (("2" (case "mod(2+j_1,1+j)=2+j_1")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "mod(2+j_1,2+j) = 2+j_1")
                                            (("1" (replaces -1) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (rewrite "mod_lt_nat")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (rewrite "mod_lt_nat") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp*) (("3" (ground) nil nil)) nil)
                         ("4" (skosimp*) (("4" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst - "j-1")
                      (("1" (assert)
                        (("1" (expand "swap_count" -3)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1" (ground)
                                (("1" (replaces -1)
                                  (("1" (assert)
                                    (("1" (hide -)
                                      (("1"
                                        (expand "swap_count")
                                        (("1"
                                          (expand "swap_count")
                                          (("1"
                                            (case "mod(2,2)=0")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (rewrite "mod_1")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (lift-if)
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replaces -2)
                                  (("2" (expand "swap_count" +)
                                    (("2" (case "mod(2+j,2+j)=0")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "swap_count" +)
                                            (("1"
                                              (case "mod(1+j,2+j)=1+j")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (name
                                                     "MM"
                                                     "swap_count(2+j,seq)(j-1)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "even_plus_even_is_even")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "1+MM"
                                                             "IF NOT seq(1 + j) = seq(0) THEN 1 ELSE 0 ENDIF +
             IF NOT seq(j) = seq(1 + j) THEN 1 ELSE 0 ENDIF-1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 4)
                                                              (("2"
                                                                (expand
                                                                 "seq2")
                                                                (("2"
                                                                  (case
                                                                   "FORALL (bb:bool): bb or not bb")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "seq(1+j)")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -
                                                                       "seq(0)")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "seq(j)")
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite "mod_lt_nat")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (rewrite "mod_0_divides")
                                          (("2"
                                            (expand "divides")
                                            (("2"
                                              (inst + "1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (expand "swap_count" +)
                                  (("3" (expand "swap_count" +)
                                    (("3" (case "mod(1+j,2+j)=1+j")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case "mod(2+j,2+j)=0")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (replaces -3)
                                              (("1"
                                                (lemma
                                                 "even_plus_even_is_even")
                                                (("1"
                                                  (inst
                                                   -
                                                   "IF NOT seq(1 + j) = seq(0) THEN 1 ELSE 0 ENDIF +
             IF NOT seq(j) = seq(1 + j) THEN 1 ELSE 0 ENDIF"
                                                   "swap_count(2 + j, seq)(j - 1)")
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (case
                                                       "FORALL (bb:bool): bb or not bb")
                                                      (("1"
                                                        (inst-cp - "seq(0)")
                                                        (("1"
                                                          (inst-cp - "seq(j)")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "seq(1+j)")
                                                            (("1"
                                                              (expand "seq2")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but 1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "mod_0_divides")
                                            (("2"
                                              (expand "divides")
                                              (("2"
                                                (inst + "1")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (rewrite "mod_lt_nat") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "j = 0")
                          (("1" (replaces -1)
                            (("1" (hide-all-but 2)
                              (("1" (assert)
                                (("1" (expand "swap_count")
                                  (("1" (case "mod(2,2)=0")
                                    (("1" (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "swap_count")
                                          (("1"
                                            (rewrite "mod_lt_nat")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (rewrite "mod_0_divides")
                                        (("2"
                                          (expand "divides")
                                          (("2"
                                            (inst + "1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*) (("3" (ground) nil nil)) nil)
                     ("4" (skosimp*) (("4" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mod_eq_arg formula-decl nil mod nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (seq skolem-const-decl "[below(2 + j) -> bool]" swap_counting nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (even_plus_even_is_even judgement-tcc nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (mod_0_divides formula-decl nil mod_lems ints)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (divides const-decl "bool" divides nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (mod_lt_nat formula-decl nil mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (seq2 skolem-const-decl "[below(1 + j) -> bool]" swap_counting nil)
    (mod_1 formula-decl nil mod_lems ints)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (j skolem-const-decl "nat" swap_counting nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (swap_count def-decl "nat" swap_counting nil))
   shostak)))


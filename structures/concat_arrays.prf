(concat_arrays
 (oh_TCC1 0
  (oh_TCC1-1 nil 3506271670 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m formal-const-decl "nat" concat_arrays nil)
    (n formal-const-decl "nat" concat_arrays nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (oh subtype "(number_fields.-)(concat_arrays.nm, concat_arrays.n)"
    "naturalnumbers.below(concat_arrays.m)")))
 (concat_array_bot0_TCC1 0
  (concat_array_bot0_TCC1-1 nil 3506271670 ("" (subtype-tcc) nil nil) nil nil
   (concat_array_bot0 subtype "concat_arrays.a_n" "below_array[n + m, T]")))
 (concat_array_bot0 0
  (concat_array_bot0-2 "" 3790081413
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t) (("" (grind) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m formal-const-decl "nat" concat_arrays nil)
    (n formal-const-decl "nat" concat_arrays nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil concat_arrays nil)
    (O const-decl "below_array[n + m, T]" concat_arrays nil)
    (below_array type-eq-decl nil below_arrays nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)
  (concat_array_bot0-1 nil 3506271670
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t)
      (("1" (grind) nil) ("2" (skosimp*) (("2" (ground) nil))))))
    nil)
   ((below_array type-eq-decl nil below_arrays nil)) nil))
 (concat_array_top0_TCC1 0
  (concat_array_top0_TCC1-1 nil 3506271670 ("" (subtype-tcc) nil nil) nil nil
   (concat_array_top0 subtype "concat_arrays.a_m" "below_array[n + m, T]")))
 (concat_array_top0 0
  (concat_array_top0-2 "" 3790081413
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t) (("" (grind) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m formal-const-decl "nat" concat_arrays nil)
    (n formal-const-decl "nat" concat_arrays nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil concat_arrays nil)
    (O const-decl "below_array[n + m, T]" concat_arrays nil)
    (below_array type-eq-decl nil below_arrays nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (concat_array_top0-1 nil 3506271670
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t)
      (("1" (grind) nil) ("2" (skosimp*) (("2" (ground) nil))))))
    nil)
   ((below_array type-eq-decl nil below_arrays nil)) nil))
 (concat_array_bot_TCC1 0
  (concat_array_bot_TCC1-1 nil 3506271670 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" concat_arrays nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (concat_array_bot subtype "concat_arrays.i"
    "naturalnumbers.below((number_fields.+)(concat_arrays.n, concat_arrays.m))")))
 (concat_array_bot 0
  (concat_array_bot-1 nil 3506271670 ("" (grind) nil nil)
   ((O const-decl "below_array[n + m, T]" concat_arrays nil)) nil))
 (concat_array_top_TCC1 0
  (concat_array_top_TCC1-1 nil 3506271670 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" concat_arrays nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m formal-const-decl "nat" concat_arrays nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (concat_array_top subtype "concat_arrays.j"
    "naturalnumbers.below((number_fields.+)(concat_arrays.n, concat_arrays.m))")))
 (concat_array_top_TCC2 0
  (concat_array_top_TCC2-1 nil 3506271670 ("" (subtype-tcc) nil nil) nil nil
   (concat_array_top subtype
    "(number_fields.-)(concat_arrays.j, concat_arrays.n)"
    "naturalnumbers.below(concat_arrays.m)")))
 (concat_array_top 0
  (concat_array_top-1 nil 3506271670 ("" (grind) nil nil)
   ((O const-decl "below_array[n + m, T]" concat_arrays nil)) nil)))


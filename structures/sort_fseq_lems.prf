(sort_fseq_lems
 (sort_seq_min 0
  (sort_seq_min-1 nil 3254568023
   ("" (skosimp*)
    (("" (typepred "sort(s!1)")
      (("" (typepred "min(s!1)")
        (("" (expand "increasing?")
          (("" (skosimp*)
            (("" (expand "permutation?")
              (("" (assert)
                (("" (skosimp*)
                  (("" (expand "bijective?")
                    (("" (flatten)
                      (("" (expand "surjective?")
                        (("" (inst -4 "0")
                          (("" (skosimp*)
                            (("" (inst -5 "x!1")
                              (("" (replace -4)
                                (("" (hide -4)
                                  (("" (inst -1 "x!1")
                                    (("" (reveal -3)
                                      ((""
                                        (inst -1 "jj!1")
                                        ((""
                                          (inst -6 "0" "f!1(jj!1)")
                                          ((""
                                            (replace -1 * rl)
                                            ((""
                                              (assert)
                                              ((""
                                                (hide -1)
                                                ((""
                                                  (replace -2)
                                                  ((""
                                                    (replace -4)
                                                    ((""
                                                      (hide -2 -3 -4)
                                                      ((""
                                                        (typepred
                                                         "sort_fseq_lems.<=")
                                                        ((""
                                                          (expand
                                                           "total_order?")
                                                          ((""
                                                            (expand
                                                             "partial_order?")
                                                            ((""
                                                              (flatten)
                                                              ((""
                                                                (expand
                                                                 "antisymmetric?")
                                                                ((""
                                                                  (inst?)
                                                                  ((""
                                                                    (assert)
                                                                    ((""
                                                                      (typepred
                                                                       "f!1(jj!1)")
                                                                      ((""
                                                                        (rewrite
                                                                         "sort_length")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sort const-decl
          "{ss: fseq | permutation?[T, <=](s, ss) AND increasing?(ss)}"
      sort_fseq nil)
    (increasing? const-decl "bool" sort_fseq nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_fseq type-eq-decl nil fseqs nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (fseq type-eq-decl nil fseqs nil) (barray type-eq-decl nil fseqs nil)
    (permutation? const-decl "bool" permutations_fseq nil)
    (<= formal-const-decl "(total_order?[T])" sort_fseq_lems nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil) (fsq type-eq-decl nil fsq nil)
    (T formal-nonempty-type-decl nil sort_fseq_lems nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (sort_length formula-decl nil sort_fseq nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (dom type-eq-decl nil min_fseq nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_fseq nil))
   nil))
 (sort_seq_max_TCC1 0
  (sort_seq_max_TCC1-2 "" 3790088257
   ("" (skosimp*) (("" (assert) nil nil)) nil) nil shostak
   (sort_seq_max subtype "(number_fields.-)(length(sort_fseq_lems.s), 1)"
    "nat"))
  (sort_seq_max_TCC1-1 nil 3254568023
   ("" (skosimp*)
    (("" (assert) (("" (rewrite "sort_length") (("" (assert) nil)))))) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (sort_seq_max subtype "(number_fields.-)(length(sort_fseq_lems.s), 1)"
    "nat")))
 (sort_seq_max 0
  (sort_seq_max-1 nil 3254568023
   ("" (skosimp*)
    (("" (typepred "sort(s!1)")
      (("" (typepred "max(s!1)")
        (("" (expand "increasing?")
          (("" (skosimp*)
            (("" (expand "permutation?")
              (("" (rewrite "sort_length")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (inst-cp -4 "jj!1")
                      (("" (expand "bijective?")
                        (("" (flatten)
                          (("" (expand "surjective?")
                            (("" (inst -4 "length(sort(s!1))-1")
                              (("" (skosimp*)
                                (("" (inst -5 "x!1")
                                  (("" (replace -4)
                                    (("" (hide -4)
                                      ((""
                                        (inst -1 "x!1")
                                        ((""
                                          (replace -4)
                                          ((""
                                            (hide -4)
                                            ((""
                                              (inst
                                               -5
                                               "f!1(jj!1)"
                                               "length(sort(s!1))-1")
                                              ((""
                                                (assert)
                                                ((""
                                                  (replace -2)
                                                  ((""
                                                    (hide -2)
                                                    ((""
                                                      (replace -3 * rl)
                                                      ((""
                                                        (hide -2 -3)
                                                        ((""
                                                          (typepred
                                                           "sort_fseq_lems.<=")
                                                          ((""
                                                            (expand
                                                             "total_order?")
                                                            ((""
                                                              (expand
                                                               "partial_order?")
                                                              ((""
                                                                (flatten)
                                                                ((""
                                                                  (expand
                                                                   "antisymmetric?")
                                                                  ((""
                                                                    (inst?)
                                                                    ((""
                                                                      (assert)
                                                                      ((""
                                                                        (typepred
                                                                         "f!1(jj!1)")
                                                                        ((""
                                                                          (rewrite
                                                                           "sort_length")
                                                                          ((""
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sort const-decl
          "{ss: fseq | permutation?[T, <=](s, ss) AND increasing?(ss)}"
      sort_fseq nil)
    (increasing? const-decl "bool" sort_fseq nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_fseq type-eq-decl nil fseqs nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (fseq type-eq-decl nil fseqs nil) (barray type-eq-decl nil fseqs nil)
    (permutation? const-decl "bool" permutations_fseq nil)
    (<= formal-const-decl "(total_order?[T])" sort_fseq_lems nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil) (fsq type-eq-decl nil fsq nil)
    (T formal-nonempty-type-decl nil sort_fseq_lems nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (sort_length formula-decl nil sort_fseq nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (dom type-eq-decl nil max_fseq nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_fseq nil))
   nil)))


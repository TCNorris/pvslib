(product_finite_measure
 (x_section_bounded_TCC1 0
  (x_section_bounded_TCC1-1 nil 3450064167
   ("" (skosimp)
    (("" (expand "x_section")
      ((""
        (lemma "x_section_measurable[T1,T2]"
         ("Z" "M!1" "x" "x1!1" "S1" "S1" "S2" "S2"))
        (("" (expand "member") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((x_section const-decl "[T1 -> set[T2]]" cross_product topology)
    (member const-decl "bool" sets nil)
    (x_section_measurable formula-decl nil product_sigma_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (set type-eq-decl nil sets nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (T2 formal-type-decl nil product_finite_measure nil))
   nil
   (x_section_bounded subtype
    "cross_product[product_finite_measure.T1, product_finite_measure.T2].x_section(product_finite_measure.M)"
    "[product_finite_measure.T1 -> (product_finite_measure.S2)]")))
 (x_section_bounded 0
  (x_section_bounded-1 nil 3450064365
   ("" (skosimp)
    (("" (expand "o ")
      (("" (split)
        (("1" (assert) nil nil)
         ("2" (expand "x_section")
          (("2"
            (lemma "x_section_measurable[T1,T2]"
             ("Z" "M!1" "x" "x!1" "S1" "S1" "S2" "S2"))
            (("2" (expand "member")
              (("2"
                (lemma "fm_monotone[T2,S2,nu!1]"
                 ("A" "x_section(M!1, x!1)" "B" "fullset[T2]"))
                (("2" (split)
                  (("1" (propax) nil nil)
                   ("2" (expand "subset?")
                    (("2" (skosimp)
                      (("2" (expand "member")
                        (("2" (expand "fullset") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (set type-eq-decl nil sets nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x_section_measurable formula-decl nil product_sigma_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (fullset const-decl "set" sets nil)
    (x_section const-decl "set[T2]" cross_product topology)
    (fm_monotone formula-decl nil finite_measure nil)
    (subset_algebra_fullset name-judgement "(S2)" product_finite_measure nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (x_section const-decl "[T1 -> set[T2]]" cross_product topology))
   shostak))
 (y_section_bounded_TCC1 0
  (y_section_bounded_TCC1-1 nil 3450064167
   ("" (skosimp)
    (("" (expand "y_section")
      ((""
        (lemma "y_section_measurable[T1,T2]"
         ("Z" "M!1" "y" "x1!1" "S1" "S1" "S2" "S2"))
        (("" (expand "member") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((y_section const-decl "[T2 -> set[T1]]" cross_product topology)
    (member const-decl "bool" sets nil)
    (y_section_measurable formula-decl nil product_sigma_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (set type-eq-decl nil sets nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (T2 formal-type-decl nil product_finite_measure nil))
   nil
   (y_section_bounded subtype
    "cross_product[product_finite_measure.T1, product_finite_measure.T2].y_section(product_finite_measure.M)"
    "[product_finite_measure.T2 -> (product_finite_measure.S1)]")))
 (y_section_bounded 0
  (y_section_bounded-1 nil 3450064193
   ("" (skosimp)
    (("" (expand "o")
      (("" (split)
        (("1" (assert) nil nil)
         ("2" (expand "y_section")
          (("2"
            (lemma "y_section_measurable[T1,T2]"
             ("Z" "M!1" "y" "y!1" "S1" "S1" "S2" "S2"))
            (("2" (expand "member")
              (("2"
                (lemma "m_monotone[T1,S1,to_measure(mu!1)]"
                 ("a" "y_section(M!1, y!1)" "b" "fullset[T1]"))
                (("1" (split)
                  (("1" (expand "to_measure")
                    (("1" (expand "x_le") (("1" (propax) nil nil)) nil)) nil)
                   ("2" (expand "subset?")
                    (("2" (expand "fullset")
                      (("2" (expand "member") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "measurable_set?") (("2" (propax) nil nil))
                    nil))
                  nil)
                 ("3" (expand "measurable_set?") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (set type-eq-decl nil sets nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (y_section_measurable formula-decl nil product_sigma_def nil)
    (subset? const-decl "bool" sets nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (subset_algebra_fullset name-judgement "(S1)" product_finite_measure nil)
    (m_monotone formula-decl nil measure_props nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (y_section const-decl "set[T1]" cross_product topology)
    (fullset const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (member const-decl "bool" sets nil)
    (y_section const-decl "[T2 -> set[T1]]" cross_product topology))
   shostak))
 (x_section_measurable 0
  (x_section_measurable-3 "" 3789904299
   ("" (skosimp)
    (("" (name "F" "lambda M: nu!1 o x_section(M)")
      (("1" (case-replace "nu!1 o x_section(M!1) = F(M!1)")
        (("1" (hide-all-but 1)
          (("1"
            (case "forall x,M: 0 <= F(M)(x) & F(M)(x) <= nu!1(fullset[T2])")
            (("1"
              (name "U"
                    "{M:set[[T1,T2]] | sigma_times(S1,S2)(M) & measurable_function?[T1,S1](F(M))}")
              (("1" (case "forall (R:measurable_rectangle(S1,S2)): U(R)")
                (("1"
                  (case "FORALL (a, b: (U)): disjoint?(a,b) => U(union(a, b))")
                  (("1" (case "FORALL (a: (U)): U(complement(a))")
                    (("1" (case "monotone?(U)")
                      (("1" (lemma "monotone_class" ("C" "U"))
                        (("1" (typepred "rectangle_algebra")
                          (("1" (typepred "M!1")
                            (("1" (inst -3 "rectangle_algebra")
                              (("1" (split -3)
                                (("1" (expand "subset?")
                                  (("1" (inst - "M!1")
                                    (("1" (expand "member")
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "U")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "sigma_times" -1)
                                            (("2"
                                              (lemma
                                               "generated_sigma_algebra_subset2"
                                               ("X"
                                                "extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)])"
                                                "Y"
                                                "generated_sigma_algebra(rectangle_algebra)"))
                                              (("2"
                                                (name-replace
                                                 "SA"
                                                 "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (expand "subset?")
                                                    (("1"
                                                      (inst - "M!1")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "subset?")
                                                      (("2"
                                                        (expand "fullset")
                                                        (("2"
                                                          (expand "extend")
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (lemma
                                                                   "generated_sigma_algebra_subset1"
                                                                   ("X"
                                                                    "rectangle_algebra"))
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "rectangle_algebra")
                                                                            (("2"
                                                                              (expand
                                                                               "finite_disjoint_unions")
                                                                              (("2"
                                                                                (expand
                                                                                 "fullset")
                                                                                (("2"
                                                                                  (expand
                                                                                   "extend")
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "finite_disjoint_union?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "lambda (i:nat): if i = 0 then x!1 else emptyset[[T1,T2]] endif"
                                                                                         "1")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "IUnion")
                                                                                              (("2"
                                                                                                (case-replace
                                                                                                 "x!1(x!2, x!3)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "0")
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "emptyset")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (case-replace
                                                                                               "i!1=0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "emptyset_is_empty?")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (expand "subset?")
                                    (("2" (skosimp)
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (expand "rectangle_algebra")
                                          (("2"
                                            (expand "finite_disjoint_unions")
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (expand "extend")
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (expand
                                                       "finite_disjoint_union?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (case
                                                           "forall (n:nat): U(IUnion(n,E!1))")
                                                          (("1"
                                                            (case-replace
                                                             "IUnion(E!1)=IUnion(n!1,E!1)")
                                                            (("1"
                                                              (inst - "n!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 -4))
                                                              (("2"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (expand
                                                                   "IUnion")
                                                                  (("2"
                                                                    (expand
                                                                     "image")
                                                                    (("2"
                                                                      (expand
                                                                       "Union")
                                                                      (("2"
                                                                        (case-replace
                                                                         "EXISTS (i: nat): E!1(i)(x!2, x!3)")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!1")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (case-replace
                                                                                 "i!1<n!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "E!1(i!1)")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "i!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -3
                                                                                       "(x!2,x!3)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           1
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (typepred
                                                                                 "a!1")
                                                                                (("2"
                                                                                  (skolem
                                                                                   -
                                                                                   "n!2")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "n!2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 -7 -1 -8 -3))
                                                            (("2"
                                                              (induct "n")
                                                              (("1"
                                                                (rewrite
                                                                 "IUnion_0_def")
                                                                (("1"
                                                                  (inst - "0")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "E!1(0)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "emptyset_is_empty?")
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "measurable_rectangle?")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "emptyset"
                                                                                   "emptyset")
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (apply-extensionality
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "S1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "sigma_algebra?")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "subset_algebra_empty?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (typepred
                                                                                       "S2")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma_algebra?")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "subset_algebra_empty?")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (rewrite
                                                                   "IUnion_n_def")
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     "E!1(1 + j!1)")
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "IUnion(j!1, E!1)"
                                                                       "E!1(1 + j!1)")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-2
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "disjoint?")
                                                                            (("2"
                                                                              (expand
                                                                               "disjoint?")
                                                                              (("2"
                                                                                (expand
                                                                                 "intersection")
                                                                                (("2"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "image")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "a!1")
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "n!2")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "n!2"
                                                                                                       "1+j!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!2")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "1+j!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (rewrite
                                                                               "emptyset_is_empty?")
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "measurable_rectangle?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "emptyset"
                                                                                       "emptyset")
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "S1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "sigma_algebra?")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "S2")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma_algebra?")
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "monotone?")
                          (("2" (skosimp)
                            (("2" (expand "member")
                              (("2" (split)
                                (("1" (flatten)
                                  (("1" (expand "U" 1)
                                    (("1" (split)
                                      (("1"
                                        (lemma
                                         "sigma_algebra_IUnion[[T1,T2],sigma_times(S1, S2)]"
                                         ("SS" "E!1"))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "x1!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "pointwise_measurable[T1, S1]"
                                         ("f"
                                          "F(IUnion(E!1))"
                                          "u"
                                          "lambda (n:nat): F(E!1(n))"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand
                                               "pointwise_convergence?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand "U")
                                                  (("1"
                                                    (lemma
                                                     "fm_IUnion[T2,S2,nu!1]"
                                                     ("X"
                                                      "lambda (n:nat): x_section(E!1(n),x!1)"))
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (expand "o ")
                                                        (("1"
                                                          (expand "F")
                                                          (("1"
                                                            (expand "o ")
                                                            (("1"
                                                              (expand
                                                               "x_section"
                                                               1)
                                                              (("1"
                                                                (name-replace
                                                                 "LHS"
                                                                 "LAMBDA (n_1: nat): nu!1(x_section(E!1(n_1), x!1))")
                                                                (("1"
                                                                  (case-replace
                                                                   "IUnion(LAMBDA (n: nat): x_section(E!1(n), x!1))=x_section(IUnion(E!1), x!1)")
                                                                  (("1"
                                                                    (name-replace
                                                                     "RHS"
                                                                     "nu!1(x_section(IUnion(E!1), x!1))")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-2 1))
                                                                      (("1"
                                                                        (rewrite
                                                                         "metric_convergence_def")
                                                                        (("1"
                                                                          (expand
                                                                           "convergence")
                                                                          (("1"
                                                                            (expand
                                                                             "metric_converges_to")
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "r!1")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "n!1")
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      (("2"
                                                                        (expand
                                                                         "x_section")
                                                                        (("2"
                                                                          (expand
                                                                           "IUnion")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -2 2)
                                                        (("2"
                                                          (expand
                                                           "increasing?")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!2"
                                                               "y!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "subset?")
                                                                  (("2"
                                                                    (expand
                                                                     "x_section")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "(x!1,x!3)")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst - "n!1")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "x_section_measurable"
                                                             ("S1"
                                                              "S1"
                                                              "S2"
                                                              "S2"
                                                              "Z"
                                                              "E!1(n!1)"
                                                              "x"
                                                              "x!1"))
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "n!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (inst - "n!1")
                                            (("3"
                                              (expand "U")
                                              (("3" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (expand "U")
                                    (("2" (split)
                                      (("1"
                                        (lemma
                                         "sigma_algebra_IIntersection[[T1,T2],sigma_times(S1, S2)]"
                                         ("SS" "E!1"))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "x1!1")
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "pointwise_measurable[T1, S1]"
                                         ("f"
                                          "F(IIntersection(E!1))"
                                          "u"
                                          "lambda (n:nat): F(E!1(n))"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand
                                               "pointwise_convergence?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand "F")
                                                  (("1"
                                                    (expand "o ")
                                                    (("1"
                                                      (lemma
                                                       "fm_IIntersection[T2,S2,nu!1]"
                                                       ("X"
                                                        "lambda (n:nat): x_section(E!1(n),x!1)"))
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (expand "o ")
                                                          (("1"
                                                            (expand
                                                             "x_section"
                                                             1)
                                                            (("1"
                                                              (name-replace
                                                               "LHS"
                                                               "LAMBDA (n_1: nat): nu!1(x_section(E!1(n_1), x!1))")
                                                              (("1"
                                                                (case-replace
                                                                 "IIntersection(LAMBDA
                                     (n: nat):
                                     x_section(E!1(n), x!1))=x_section(IIntersection(E!1), x!1)")
                                                                (("1"
                                                                  (name-replace
                                                                   "RHS"
                                                                   "nu!1(x_section(IIntersection(E!1), x!1))")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-2 1))
                                                                    (("1"
                                                                      (rewrite
                                                                       "metric_convergence_def")
                                                                      (("1"
                                                                        (expand
                                                                         "convergence")
                                                                        (("1"
                                                                          (expand
                                                                           "metric_converges_to")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "r!1")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "n!1")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-3 1))
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "IIntersection")
                                                                      (("2"
                                                                        (expand
                                                                         "x_section")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (expand
                                                             "decreasing?")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "x!2"
                                                                 "y!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (expand
                                                                       "x_section")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "(x!1,x!3)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst - "n!1")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (lemma
                                                               "x_section_measurable"
                                                               ("S1"
                                                                "S1"
                                                                "S2"
                                                                "S2"
                                                                "Z"
                                                                "E!1(n!1)"
                                                                "x"
                                                                "x!1"))
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "n!1")
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (inst - "n!1")
                                            (("3" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skosimp)
                        (("2" (typepred "a!1")
                          (("2" (expand "U")
                            (("2" (flatten)
                              (("2"
                                (lemma
                                 "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                 ("x" "a!1"))
                                (("2" (assert)
                                  (("2"
                                    (lemma "const_measurable[T1,S1]"
                                     ("c" "nu!1(fullset[T2])"))
                                    (("2"
                                      (lemma
                                       "diff_measurable[T1,S1]"
                                       ("g1"
                                        "LAMBDA (x: T1): nu!1(fullset[T2])"
                                        "g2"
                                        "F(a!1)"))
                                      (("1"
                                        (expand "-")
                                        (("1"
                                          (case-replace
                                           "(LAMBDA (x_1: T1):
                             nu!1(fullset[T2]) - F(a!1)(x_1))=F(complement(a!1))")
                                          (("1"
                                            (apply-extensionality :hide? t)
                                            (("1"
                                              (hide 2 -1 -2 -5)
                                              (("1"
                                                (expand "F")
                                                (("1"
                                                  (expand "o ")
                                                  (("1"
                                                    (lemma
                                                     "fm_disjointunion[T2,S2,nu!1]"
                                                     ("A"
                                                      "x_section(a!1)(x!1)"
                                                      "B"
                                                      "x_section(complement(a!1))(x!1)"))
                                                    (("1"
                                                      (expand "x_section")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (case-replace
                                                           "union(x_section(a!1, x!1), x_section(complement(a!1), x!1))=fullset[T2]")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skosimp)
                      (("2" (hide -3)
                        (("2" (typepred "b!1")
                          (("2" (typepred "a!1")
                            (("2" (expand "U")
                              (("2" (flatten)
                                (("2"
                                  (lemma
                                   "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                   ("x" "a!1" "y" "b!1"))
                                  (("2" (assert)
                                    (("2"
                                      (lemma
                                       "sum_measurable[T1, S1]"
                                       ("g1" "F(a!1)" "g2" "F(b!1)"))
                                      (("2"
                                        (expand "+" -1)
                                        (("2"
                                          (case-replace
                                           "(LAMBDA (x: T1): F(a!1)(x) + F(b!1)(x))=F(union(a!1, b!1))")
                                          (("2"
                                            (apply-extensionality :hide? t)
                                            (("2"
                                              (hide-all-but (-2 -3 -4 -7 1))
                                              (("2"
                                                (expand "F")
                                                (("2"
                                                  (expand "o ")
                                                  (("2"
                                                    (expand "x_section")
                                                    (("2"
                                                      (lemma
                                                       "fm_disjointunion[T2,S2,nu!1]"
                                                       ("A"
                                                        "x_section(a!1, x!1)"
                                                        "B"
                                                        "x_section(b!1, x!1)"))
                                                      (("2"
                                                        (rewrite
                                                         "x_section_union")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide-all-but
                                                             (-4 1))
                                                            (("2"
                                                              (lemma
                                                               "x_section_disjoint"
                                                               ("X"
                                                                "a!1"
                                                                "Y"
                                                                "b!1"
                                                                "a"
                                                                "x!1"))
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2" (expand "U")
                      (("2" (hide -1)
                        (("2" (typepred "R!1")
                          (("2" (expand "measurable_rectangle?")
                            (("2" (skosimp)
                              (("2" (split)
                                (("1" (assert)
                                  (("1" (expand "sigma_times")
                                    (("1"
                                      (lemma
                                       "generated_sigma_algebra_subset1"
                                       ("X"
                                        "extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)])"))
                                      (("1"
                                        (name-replace
                                         "SA"
                                         "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (expand "fullset")
                                            (("1"
                                              (expand "extend")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (inst - "R!1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "F")
                                  (("2" (expand "o ")
                                    (("2" (expand "x_section")
                                      (("2"
                                        (hide -4)
                                        (("2"
                                          (lemma
                                           "phi_is_simple[T1,S1]"
                                           ("X" "X!1"))
                                          (("1"
                                            (expand "simple?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (lemma
                                                   "scal_measurable[T1,S1]"
                                                   ("c"
                                                    "nu!1(Y!1)"
                                                    "g"
                                                    "phi[T1,S1](X!1)"))
                                                  (("1"
                                                    (expand "*")
                                                    (("1"
                                                      (expand "phi")
                                                      (("1"
                                                        (expand "member")
                                                        (("1"
                                                          (case-replace
                                                           "(LAMBDA (x: T1):
                             nu!1(Y!1) * IF X!1(x) THEN 1 ELSE 0 ENDIF)=(LAMBDA (x: T1): nu!1(x_section(R!1, x)))")
                                                          (("1"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (replace -3)
                                                              (("1"
                                                                (expand
                                                                 "cross_product")
                                                                (("1"
                                                                  (expand
                                                                   "x_section")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-4
                                                                      -5
                                                                      1))
                                                                    (("1"
                                                                      (case-replace
                                                                       "X!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{b: T2 | Y!1(b)}=Y!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "nu!1")
                                                                          (("2"
                                                                            (expand
                                                                             "finite_measure?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "emptyset")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (replace -3)
                                                                (("2"
                                                                  (expand
                                                                   "cross_product")
                                                                  (("2"
                                                                    (expand
                                                                     "x_section")
                                                                    (("2"
                                                                      (case-replace
                                                                       "X!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{b: T2 | Y!1(b)}=Y!1")
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "S2")
                                                                          (("2"
                                                                            (expand
                                                                             "sigma_algebra?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "subset_algebra_empty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (expand
                                                               "x_section")
                                                              (("2"
                                                                (replace -3)
                                                                (("2"
                                                                  (expand
                                                                   "cross_product")
                                                                  (("2"
                                                                    (case-replace
                                                                     "X!1(x!1)")
                                                                    (("1"
                                                                      (case-replace
                                                                       "{b: T2 | Y!1(b)}=Y!1")
                                                                      (("1"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "S2")
                                                                        (("2"
                                                                          (expand
                                                                           "sigma_algebra?")
                                                                          (("2"
                                                                            (expand
                                                                             "subset_algebra_empty?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (expand
                                                                                   "emptyset")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (propax) nil nil)
                                                   ("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "F")
                (("2" (skosimp)
                  (("2"
                    (lemma "x_section_bounded"
                     ("nu" "nu!1" "M" "M!2" "x" "x!1"))
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "F") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (skosimp)
        (("2" (skosimp)
          (("2" (expand "x_section")
            (("2"
              (lemma "x_section_measurable"
               ("S1" "S1" "S2" "S2" "Z" "M!2" "x" "x1!1"))
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_algebra_fullset name-judgement "(S2)" product_finite_measure nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (fullset const-decl "set" sets nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (R!1 skolem-const-decl "measurable_rectangle[T1, T2](S1, S2)"
     product_finite_measure nil)
    (Y!1 skolem-const-decl "set[T2]" product_finite_measure nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (phi const-decl "nat" measure_space nil)
    (scal_measurable judgement-tcc nil measure_space_def nil)
    (simple? const-decl "bool" measure_space nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (x_section_union formula-decl nil product_sections nil)
    (x_section_disjoint formula-decl nil product_sections nil)
    (sum_measurable judgement-tcc nil measure_space_def nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (diff_measurable judgement-tcc nil measure_space_def nil)
    (const_measurable formula-decl nil measure_space nil)
    (sigma_algebra_complement formula-decl nil sigma_algebra nil)
    (decreasing? const-decl "bool" fun_preds_partial structures)
    (fm_IIntersection formula-decl nil finite_measure nil)
    (IIntersection const-decl "set[T]" indexed_sets nil)
    (sigma_algebra_IIntersection formula-decl nil sigma_algebra nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (fm_IUnion formula-decl nil finite_measure nil)
    (x_section const-decl "set[T2]" cross_product topology)
    (F skolem-const-decl "[(sigma_times(S1, S2)) -> [T1 -> nnreal]]"
     product_finite_measure nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (ball_is_metric_open application-judgement
     "metric_open[real, (LAMBDA (x, y: real): abs(x - y))]" convergence_aux
     metric_space)
    (convergence const-decl "bool" convergence_sequences analysis)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas_aux nil)
    (x_section_measurable formula-decl nil product_sigma_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def nil)
    (pointwise_measurable formula-decl nil measure_space nil)
    (sigma_algebra_IUnion formula-decl nil sigma_algebra nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset_algebra? const-decl "bool" subset_algebra_def nil)
    (subset_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (rectangle_algebra const-decl "subset_algebra[[T1, T2]]" product_sigma
     nil)
    (generated_sigma_algebra_subset2 formula-decl nil subset_algebra_def nil)
    (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)
    (generated_sigma_algebra const-decl "sigma_algebra" subset_algebra_def
     nil)
    (emptyset const-decl "set" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable sigma_set)
    (finite_emptyset name-judgement "finite_set[T]" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_disjoint_union? const-decl "bool" subset_algebra_def nil)
    (finite_disjoint_unions const-decl "setofsets[T]" subset_algebra_def nil)
    (generated_sigma_algebra_subset1 formula-decl nil subset_algebra_def nil)
    (subset_algebra_complement application-judgement "(S)" sigma_algebra nil)
    (subset_algebra_union application-judgement "(S)" sigma_algebra nil)
    (U skolem-const-decl "[set[[T1, T2]] -> boolean]" product_finite_measure
     nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (image const-decl "set[R]" function_image nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (i!1 skolem-const-decl "nat" product_finite_measure nil)
    (E!1 skolem-const-decl "sequence[set[[T1, T2]]]" product_finite_measure
     nil)
    (n!1 skolem-const-decl "nat" product_finite_measure nil)
    (Union const-decl "set" sets nil)
    (j!1 skolem-const-decl "nat" product_finite_measure nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (monotone_class nonempty-type-eq-decl nil subset_algebra_def nil)
    (monotone_class formula-decl nil subset_algebra_def nil)
    (monotone? const-decl "bool" subset_algebra_def nil)
    (complement const-decl "set" sets nil) (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (measurable_rectangle nonempty-type-eq-decl nil product_sigma_def nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (x_section_bounded formula-decl nil product_finite_measure nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (O const-decl "T3" function_props nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (set type-eq-decl nil sets nil)
    (x_section const-decl "[T1 -> set[T2]]" cross_product topology))
   shostak)
  (x_section_measurable-2 "" 3758903788
   ("" (skosimp)
    (("" (name "F" "lambda M: nu!1 o x_section(M)")
      (("1" (case-replace "nu!1 o x_section(M!1) = F(M!1)")
        (("1" (hide-all-but 1)
          (("1"
            (case "forall x,M: 0 <= F(M)(x) & F(M)(x) <= nu!1(fullset[T2])")
            (("1"
              (name "U"
                    "{M:set[[T1,T2]] | sigma_times(S1,S2)(M) & measurable_function?[T1,S1](F(M))}")
              (("1" (case "forall (R:measurable_rectangle(S1,S2)): U(R)")
                (("1"
                  (case "FORALL (a, b: (U)): disjoint?(a,b) => U(union(a, b))")
                  (("1" (case "FORALL (a: (U)): U(complement(a))")
                    (("1" (case "monotone?(U)")
                      (("1" (lemma "monotone_class" ("C" "U"))
                        (("1" (typepred "rectangle_algebra")
                          (("1" (typepred "M!1")
                            (("1" (inst -3 "rectangle_algebra")
                              (("1" (split -3)
                                (("1" (expand "subset?")
                                  (("1" (inst - "M!1")
                                    (("1" (expand "member")
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "U")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "sigma_times" -1)
                                            (("2"
                                              (lemma
                                               "generated_sigma_algebra_subset2"
                                               ("X"
                                                "extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)])"
                                                "Y"
                                                "generated_sigma_algebra(rectangle_algebra)"))
                                              (("2"
                                                (name-replace
                                                 "SA"
                                                 "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (expand "subset?")
                                                    (("1"
                                                      (inst - "M!1")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "subset?")
                                                      (("2"
                                                        (expand "fullset")
                                                        (("2"
                                                          (expand "extend")
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (lemma
                                                                   "generated_sigma_algebra_subset1"
                                                                   ("X"
                                                                    "rectangle_algebra"))
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "rectangle_algebra")
                                                                            (("2"
                                                                              (expand
                                                                               "finite_disjoint_unions")
                                                                              (("2"
                                                                                (expand
                                                                                 "fullset")
                                                                                (("2"
                                                                                  (expand
                                                                                   "extend")
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "finite_disjoint_union?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "lambda (i:nat): if i = 0 then x!1 else emptyset[[T1,T2]] endif"
                                                                                         "1")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "IUnion")
                                                                                              (("2"
                                                                                                (case-replace
                                                                                                 "x!1(x!2, x!3)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "0")
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "emptyset")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (case-replace
                                                                                               "i!1=0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "emptyset_is_empty?")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (expand "subset?")
                                    (("2" (skosimp)
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (expand "rectangle_algebra")
                                          (("2"
                                            (expand "finite_disjoint_unions")
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (expand "extend")
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (expand
                                                       "finite_disjoint_union?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (case
                                                           "forall (n:nat): U(IUnion(n,E!1))")
                                                          (("1"
                                                            (case-replace
                                                             "IUnion(E!1)=IUnion(n!1,E!1)")
                                                            (("1"
                                                              (inst - "n!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 -4))
                                                              (("2"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (expand
                                                                   "IUnion")
                                                                  (("2"
                                                                    (expand
                                                                     "image")
                                                                    (("2"
                                                                      (expand
                                                                       "Union")
                                                                      (("2"
                                                                        (case-replace
                                                                         "EXISTS (i: nat): E!1(i)(x!2, x!3)")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!1")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (case-replace
                                                                                 "i!1<n!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "E!1(i!1)")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "i!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -3
                                                                                       "(x!2,x!3)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           1
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (typepred
                                                                                 "a!1")
                                                                                (("2"
                                                                                  (skolem
                                                                                   -
                                                                                   "n!2")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "n!2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 -7 -1 -8 -3))
                                                            (("2"
                                                              (induct "n")
                                                              (("1"
                                                                (rewrite
                                                                 "IUnion_0_def")
                                                                (("1"
                                                                  (inst - "0")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "E!1(0)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "emptyset_is_empty?")
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "measurable_rectangle?")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "emptyset"
                                                                                   "emptyset")
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (apply-extensionality
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "S1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "sigma_algebra?")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "subset_algebra_empty?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (typepred
                                                                                       "S2")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma_algebra?")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "subset_algebra_empty?")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (rewrite
                                                                   "IUnion_n_def")
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     "E!1(1 + j!1)")
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "IUnion(j!1, E!1)"
                                                                       "E!1(1 + j!1)")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-2
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "disjoint?")
                                                                            (("2"
                                                                              (expand
                                                                               "disjoint?")
                                                                              (("2"
                                                                                (expand
                                                                                 "intersection")
                                                                                (("2"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "image")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "a!1")
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "n!2")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "n!2"
                                                                                                       "1+j!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!2")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "1+j!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (rewrite
                                                                               "emptyset_is_empty?")
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "measurable_rectangle?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "emptyset"
                                                                                       "emptyset")
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "S1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "sigma_algebra?")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "S2")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma_algebra?")
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "monotone?")
                          (("2" (skosimp)
                            (("2" (expand "member")
                              (("2" (split)
                                (("1" (flatten)
                                  (("1" (expand "U" 1)
                                    (("1" (split)
                                      (("1"
                                        (lemma
                                         "sigma_algebra_IUnion[[T1,T2],sigma_times(S1, S2)]"
                                         ("SS" "E!1"))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "x1!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "pointwise_measurable[T1, S1]"
                                         ("f"
                                          "F(IUnion(E!1))"
                                          "u"
                                          "lambda (n:nat): F(E!1(n))"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand
                                               "pointwise_convergence?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand "U")
                                                  (("1"
                                                    (lemma
                                                     "fm_IUnion[T2,S2,nu!1]"
                                                     ("X"
                                                      "lambda (n:nat): x_section(E!1(n),x!1)"))
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (expand "o ")
                                                        (("1"
                                                          (expand "F")
                                                          (("1"
                                                            (expand "o ")
                                                            (("1"
                                                              (expand
                                                               "x_section"
                                                               1)
                                                              (("1"
                                                                (name-replace
                                                                 "LHS"
                                                                 "LAMBDA (n_1: nat): nu!1(x_section(E!1(n_1), x!1))")
                                                                (("1"
                                                                  (case-replace
                                                                   "IUnion(LAMBDA (n: nat): x_section(E!1(n), x!1))=x_section(IUnion(E!1), x!1)")
                                                                  (("1"
                                                                    (name-replace
                                                                     "RHS"
                                                                     "nu!1(x_section(IUnion(E!1), x!1))")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-2 1))
                                                                      (("1"
                                                                        (rewrite
                                                                         "metric_convergence_def")
                                                                        (("1"
                                                                          (expand
                                                                           "convergence")
                                                                          (("1"
                                                                            (expand
                                                                             "metric_converges_to")
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "r!1")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "n!1")
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      (("2"
                                                                        (expand
                                                                         "x_section")
                                                                        (("2"
                                                                          (expand
                                                                           "IUnion")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -2 2)
                                                        (("2"
                                                          (expand
                                                           "increasing?")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!2"
                                                               "y!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "subset?")
                                                                  (("2"
                                                                    (expand
                                                                     "x_section")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "(x!1,x!3)")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst - "n!1")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "x_section_measurable"
                                                             ("S1"
                                                              "S1"
                                                              "S2"
                                                              "S2"
                                                              "Z"
                                                              "E!1(n!1)"
                                                              "x"
                                                              "x!1"))
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "n!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (inst - "n!1")
                                            (("3"
                                              (expand "U")
                                              (("3" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (expand "U")
                                    (("2" (split)
                                      (("1"
                                        (lemma
                                         "sigma_algebra_IIntersection[[T1,T2],sigma_times(S1, S2)]"
                                         ("SS" "E!1"))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "x1!1")
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "pointwise_measurable[T1, S1]"
                                         ("f"
                                          "F(IIntersection(E!1))"
                                          "u"
                                          "lambda (n:nat): F(E!1(n))"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand
                                               "pointwise_convergence?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand "F")
                                                  (("1"
                                                    (expand "o ")
                                                    (("1"
                                                      (lemma
                                                       "fm_IIntersection[T2,S2,nu!1]"
                                                       ("X"
                                                        "lambda (n:nat): x_section(E!1(n),x!1)"))
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (expand "o ")
                                                          (("1"
                                                            (expand
                                                             "x_section"
                                                             1)
                                                            (("1"
                                                              (name-replace
                                                               "LHS"
                                                               "LAMBDA (n_1: nat): nu!1(x_section(E!1(n_1), x!1))")
                                                              (("1"
                                                                (case-replace
                                                                 "IIntersection(LAMBDA
                                     (n: nat):
                                     x_section(E!1(n), x!1))=x_section(IIntersection(E!1), x!1)")
                                                                (("1"
                                                                  (name-replace
                                                                   "RHS"
                                                                   "nu!1(x_section(IIntersection(E!1), x!1))")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-2 1))
                                                                    (("1"
                                                                      (rewrite
                                                                       "metric_convergence_def")
                                                                      (("1"
                                                                        (expand
                                                                         "convergence")
                                                                        (("1"
                                                                          (expand
                                                                           "metric_converges_to")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "r!1")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "n!1")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-3 1))
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "IIntersection")
                                                                      (("2"
                                                                        (expand
                                                                         "x_section")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (expand
                                                             "decreasing?")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "x!2"
                                                                 "y!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (expand
                                                                       "x_section")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "(x!1,x!3)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst - "n!1")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (lemma
                                                               "x_section_measurable"
                                                               ("S1"
                                                                "S1"
                                                                "S2"
                                                                "S2"
                                                                "Z"
                                                                "E!1(n!1)"
                                                                "x"
                                                                "x!1"))
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "n!1")
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (inst - "n!1")
                                            (("3" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skosimp)
                        (("2" (typepred "a!1")
                          (("2" (expand "U")
                            (("2" (flatten)
                              (("2"
                                (lemma
                                 "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                 ("x" "a!1"))
                                (("2" (assert)
                                  (("2"
                                    (lemma "const_measurable[T1,S1]"
                                     ("c" "nu!1(fullset[T2])"))
                                    (("2"
                                      (lemma
                                       "diff_measurable[T1,S1]"
                                       ("g1"
                                        "LAMBDA (x: T1): nu!1(fullset[T2])"
                                        "g2"
                                        "F(a!1)"))
                                      (("1"
                                        (expand "-")
                                        (("1"
                                          (case-replace
                                           "(LAMBDA (x_1: T1):
                             nu!1(fullset[T2]) - F(a!1)(x_1))=F(complement(a!1))")
                                          (("1"
                                            (apply-extensionality :hide? t)
                                            (("1"
                                              (hide 2 -1 -2 -5)
                                              (("1"
                                                (expand "F")
                                                (("1"
                                                  (expand "o ")
                                                  (("1"
                                                    (lemma
                                                     "fm_disjointunion[T2,S2,nu!1]"
                                                     ("A"
                                                      "x_section(a!1)(x!1)"
                                                      "B"
                                                      "x_section(complement(a!1))(x!1)"))
                                                    (("1"
                                                      (expand "x_section")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (case-replace
                                                           "union(x_section(a!1, x!1), x_section(complement(a!1), x!1))=fullset[T2]")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skosimp)
                      (("2" (hide -3)
                        (("2" (typepred "b!1")
                          (("2" (typepred "a!1")
                            (("2" (expand "U")
                              (("2" (flatten)
                                (("2"
                                  (lemma
                                   "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                   ("x" "a!1" "y" "b!1"))
                                  (("2" (assert)
                                    (("2"
                                      (lemma
                                       "sum_measurable[T1, S1]"
                                       ("g1" "F(a!1)" "g2" "F(b!1)"))
                                      (("2"
                                        (expand "+" -1)
                                        (("2"
                                          (case-replace
                                           "(LAMBDA (x: T1): F(a!1)(x) + F(b!1)(x))=F(union(a!1, b!1))")
                                          (("2"
                                            (apply-extensionality :hide? t)
                                            (("2"
                                              (hide-all-but (-2 -3 -4 -7 1))
                                              (("2"
                                                (expand "F")
                                                (("2"
                                                  (expand "o ")
                                                  (("2"
                                                    (expand "x_section")
                                                    (("2"
                                                      (lemma
                                                       "fm_disjointunion[T2,S2,nu!1]"
                                                       ("A"
                                                        "x_section(a!1, x!1)"
                                                        "B"
                                                        "x_section(b!1, x!1)"))
                                                      (("2"
                                                        (rewrite
                                                         "x_section_union")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide-all-but
                                                             (-4 1))
                                                            (("2"
                                                              (lemma
                                                               "x_section_disjoint"
                                                               ("X"
                                                                "a!1"
                                                                "Y"
                                                                "b!1"
                                                                "a"
                                                                "x!1"))
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2" (expand "U")
                      (("2" (hide -1)
                        (("2" (typepred "R!1")
                          (("2" (expand "measurable_rectangle?")
                            (("2" (skosimp)
                              (("2" (split)
                                (("1" (assert)
                                  (("1" (expand "sigma_times")
                                    (("1"
                                      (lemma
                                       "generated_sigma_algebra_subset1"
                                       ("X"
                                        "extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)])"))
                                      (("1"
                                        (name-replace
                                         "SA"
                                         "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (expand "fullset")
                                            (("1"
                                              (expand "extend")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (inst - "R!1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "F")
                                  (("2" (expand "o ")
                                    (("2" (expand "x_section")
                                      (("2"
                                        (hide -4)
                                        (("2"
                                          (lemma
                                           "phi_is_simple[T1,S1]"
                                           ("X" "X!1"))
                                          (("1"
                                            (expand "simple?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (lemma
                                                   "scal_measurable[T1,S1]"
                                                   ("c"
                                                    "nu!1(Y!1)"
                                                    "g"
                                                    "phi[T1,S1](X!1)"))
                                                  (("1"
                                                    (expand "*")
                                                    (("1"
                                                      (expand "phi")
                                                      (("1"
                                                        (expand "member")
                                                        (("1"
                                                          (case-replace
                                                           "(LAMBDA (x: T1):
                             nu!1(Y!1) * IF X!1(x) THEN 1 ELSE 0 ENDIF)=(LAMBDA (x: T1): nu!1(x_section(R!1, x)))")
                                                          (("1"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (replace -3)
                                                              (("1"
                                                                (expand
                                                                 "cross_product")
                                                                (("1"
                                                                  (expand
                                                                   "x_section")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-4
                                                                      -5
                                                                      1))
                                                                    (("1"
                                                                      (case-replace
                                                                       "X!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{b: T2 | Y!1(b)}=Y!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "nu!1")
                                                                          (("2"
                                                                            (expand
                                                                             "finite_measure?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "emptyset")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (replace -3)
                                                                (("2"
                                                                  (expand
                                                                   "cross_product")
                                                                  (("2"
                                                                    (expand
                                                                     "x_section")
                                                                    (("2"
                                                                      (case-replace
                                                                       "X!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{b: T2 | Y!1(b)}=Y!1")
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "S2")
                                                                          (("2"
                                                                            (expand
                                                                             "sigma_algebra?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "subset_algebra_empty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (expand
                                                               "x_section")
                                                              (("2"
                                                                (replace -3)
                                                                (("2"
                                                                  (expand
                                                                   "cross_product")
                                                                  (("2"
                                                                    (case-replace
                                                                     "X!1(x!1)")
                                                                    (("1"
                                                                      (case-replace
                                                                       "{b: T2 | Y!1(b)}=Y!1")
                                                                      (("1"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "S2")
                                                                        (("2"
                                                                          (expand
                                                                           "sigma_algebra?")
                                                                          (("2"
                                                                            (expand
                                                                             "subset_algebra_empty?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (expand
                                                                                   "emptyset")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (propax) nil nil)
                                                   ("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "F")
                (("2" (skosimp)
                  (("2"
                    (lemma "x_section_bounded"
                     ("nu" "nu!1" "M" "M!2" "x" "x!1"))
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "F") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (skosimp)
        (("2" (skosimp)
          (("2" (expand "x_section")
            (("2"
              (lemma "x_section_measurable"
               ("S1" "S1" "S2" "S2" "Z" "M!2" "x" "x1!1"))
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x_section const-decl "[T1 -> set[T2]]" cross_product topology)
    (set type-eq-decl nil sets nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (scal_measurable judgement-tcc nil measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (simple? const-decl "bool" measure_space nil)
    (disjoint? const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (diff_measurable judgement-tcc nil measure_space_def nil)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (const_measurable formula-decl nil measure_space nil)
    (sigma_algebra_complement formula-decl nil sigma_algebra nil)
    (monotone? const-decl "bool" subset_algebra_def nil)
    (subset_algebra? const-decl "bool" subset_algebra_def nil)
    (subset_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (rectangle_algebra const-decl "subset_algebra[[T1, T2]]" product_sigma
     nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (Union const-decl "set" sets nil)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (generated_sigma_algebra_subset2 formula-decl nil subset_algebra_def nil)
    (generated_sigma_algebra const-decl "sigma_algebra" subset_algebra_def
     nil)
    (generated_sigma_algebra_subset1 formula-decl nil subset_algebra_def nil)
    (finite_disjoint_unions const-decl "setofsets[T]" subset_algebra_def nil)
    (finite_disjoint_union? const-decl "bool" subset_algebra_def nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (sequence type-eq-decl nil sequences nil)
    (emptyset const-decl "set" sets nil)
    (monotone_class nonempty-type-eq-decl nil subset_algebra_def nil)
    (monotone_class formula-decl nil subset_algebra_def nil)
    (sigma_algebra_IIntersection formula-decl nil sigma_algebra nil)
    (fm_IIntersection formula-decl nil finite_measure nil)
    (decreasing? const-decl "bool" fun_preds_partial structures)
    (sigma_algebra_IUnion formula-decl nil sigma_algebra nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (x_section_measurable formula-decl nil product_sigma_def nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (x_section const-decl "set[T2]" cross_product topology)
    (fm_IUnion formula-decl nil finite_measure nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def nil)
    (pointwise_measurable formula-decl nil measure_space nil)
    (complement const-decl "set" sets nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (sum_measurable judgement-tcc nil measure_space_def nil)
    (x_section_disjoint formula-decl nil product_sections nil)
    (x_section_union formula-decl nil product_sections nil)
    (measurable_rectangle nonempty-type-eq-decl nil product_sigma_def nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (fullset const-decl "set" sets nil))
   shostak)
  (x_section_measurable-1 nil 3430980741
   ("" (skosimp)
    (("" (name "F" "lambda M: nu!1 o x_section(M)")
      (("1" (case-replace "nu!1 o x_section(M!1) = F(M!1)")
        (("1" (hide-all-but 1)
          (("1"
            (case "forall x,M: 0 <= F(M)(x) & F(M)(x) <= nu!1(fullset[T2])")
            (("1"
              (name "U"
                    "{M:set[[T1,T2]] | sigma_times(S1,S2)(M) & measurable_function?[T1,S1](F(M))}")
              (("1" (case "forall (R:measurable_rectangle(S1,S2)): U(R)")
                (("1"
                  (case "FORALL (a, b: (U)): disjoint?(a,b) => U(union(a, b))")
                  (("1" (case "FORALL (a: (U)): U(complement(a))")
                    (("1" (case "monotone?(U)")
                      (("1" (lemma "monotone_class" ("C" "U"))
                        (("1" (typepred "rectangle_algebra")
                          (("1" (typepred "M!1")
                            (("1" (inst -3 "rectangle_algebra")
                              (("1" (split -3)
                                (("1" (expand "subset?")
                                  (("1" (inst - "M!1")
                                    (("1" (expand "member")
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "U")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "sigma_times" -1)
                                            (("2"
                                              (lemma
                                               "generated_sigma_algebra_subset2"
                                               ("X"
                                                "extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)])"
                                                "Y"
                                                "generated_sigma_algebra(rectangle_algebra)"))
                                              (("2"
                                                (name-replace
                                                 "SA"
                                                 "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (expand "subset?")
                                                    (("1"
                                                      (inst - "M!1")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "subset?")
                                                      (("2"
                                                        (expand "fullset")
                                                        (("2"
                                                          (expand "extend")
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (lemma
                                                                   "generated_sigma_algebra_subset1"
                                                                   ("X"
                                                                    "rectangle_algebra"))
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "rectangle_algebra")
                                                                            (("2"
                                                                              (expand
                                                                               "finite_disjoint_unions")
                                                                              (("2"
                                                                                (expand
                                                                                 "fullset")
                                                                                (("2"
                                                                                  (expand
                                                                                   "extend")
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "finite_disjoint_union?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "lambda (i:nat): if i = 0 then x!1 else emptyset[[T1,T2]] endif"
                                                                                         "1")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "IUnion")
                                                                                              (("2"
                                                                                                (case-replace
                                                                                                 "x!1(x!2, x!3)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "0")
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "emptyset")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (case-replace
                                                                                               "i!1=0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "emptyset_is_empty?")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (expand "subset?")
                                    (("2" (skosimp)
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (expand "rectangle_algebra")
                                          (("2"
                                            (expand "finite_disjoint_unions")
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (expand "extend")
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (expand
                                                       "finite_disjoint_union?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (case
                                                           "forall (n:nat): U(IUnion(n,E!1))")
                                                          (("1"
                                                            (case-replace
                                                             "IUnion(E!1)=IUnion(n!1,E!1)")
                                                            (("1"
                                                              (inst - "n!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 -4))
                                                              (("2"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (expand
                                                                   "IUnion")
                                                                  (("2"
                                                                    (expand
                                                                     "image")
                                                                    (("2"
                                                                      (expand
                                                                       "Union")
                                                                      (("2"
                                                                        (case-replace
                                                                         "EXISTS (i: nat): E!1(i)(x!2, x!3)")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!1")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (case-replace
                                                                                 "i!1<n!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "E!1(i!1)")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "i!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -3
                                                                                       "(x!2,x!3)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           1
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (typepred
                                                                                 "a!1")
                                                                                (("2"
                                                                                  (skolem
                                                                                   -
                                                                                   "n!2")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "n!2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 -7 -1 -8 -3))
                                                            (("2"
                                                              (induct "n")
                                                              (("1"
                                                                (rewrite
                                                                 "IUnion_0_def")
                                                                (("1"
                                                                  (inst - "0")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "E!1(0)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "emptyset_is_empty?")
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "measurable_rectangle?")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "emptyset"
                                                                                   "emptyset")
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (apply-extensionality
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "S1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "sigma_algebra?")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "subset_algebra_empty?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (typepred
                                                                                       "S2")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma_algebra?")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "subset_algebra_empty?")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (rewrite
                                                                   "IUnion_n_def")
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     "E!1(1 + j!1)")
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "IUnion(j!1, E!1)"
                                                                       "E!1(1 + j!1)")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-2
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "disjoint?")
                                                                            (("2"
                                                                              (expand
                                                                               "disjoint?")
                                                                              (("2"
                                                                                (expand
                                                                                 "intersection")
                                                                                (("2"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "image")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "a!1")
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "n!2")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "n!2"
                                                                                                       "1+j!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!2")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "1+j!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (rewrite
                                                                               "emptyset_is_empty?")
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "measurable_rectangle?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "emptyset"
                                                                                       "emptyset")
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "S1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "sigma_algebra?")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "S2")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma_algebra?")
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "monotone?")
                          (("2" (skosimp)
                            (("2" (expand "member")
                              (("2" (split)
                                (("1" (flatten)
                                  (("1" (expand "U" 1)
                                    (("1" (split)
                                      (("1"
                                        (lemma
                                         "sigma_algebra_IUnion[[T1,T2],sigma_times(S1, S2)]"
                                         ("SS" "E!1"))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "x1!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "pointwise_measurable[T1, S1]"
                                         ("f"
                                          "F(IUnion(E!1))"
                                          "u"
                                          "lambda (n:nat): F(E!1(n))"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand
                                               "pointwise_convergence?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand "U")
                                                  (("1"
                                                    (lemma
                                                     "fm_IUnion[T2,S2,nu!1]"
                                                     ("X"
                                                      "lambda (n:nat): x_section(E!1(n),x!1)"))
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (expand "o ")
                                                        (("1"
                                                          (expand "F")
                                                          (("1"
                                                            (expand "o ")
                                                            (("1"
                                                              (expand
                                                               "x_section"
                                                               1)
                                                              (("1"
                                                                (name-replace
                                                                 "LHS"
                                                                 "LAMBDA (n_1: nat): nu!1(x_section(E!1(n_1), x!1))")
                                                                (("1"
                                                                  (case-replace
                                                                   "IUnion(LAMBDA (n: nat): x_section(E!1(n), x!1))=x_section(IUnion(E!1), x!1)")
                                                                  (("1"
                                                                    (name-replace
                                                                     "RHS"
                                                                     "nu!1(x_section(IUnion(E!1), x!1))")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-2 1))
                                                                      (("1"
                                                                        (rewrite
                                                                         "metric_convergence_def")
                                                                        (("1"
                                                                          (expand
                                                                           "convergence")
                                                                          (("1"
                                                                            (expand
                                                                             "metric_converges_to")
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "r!1")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "n!1")
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      (("2"
                                                                        (expand
                                                                         "x_section")
                                                                        (("2"
                                                                          (expand
                                                                           "IUnion")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -2 2)
                                                        (("2"
                                                          (expand
                                                           "increasing?")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!2"
                                                               "y!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "subset?")
                                                                  (("2"
                                                                    (expand
                                                                     "x_section")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "(x!1,x!3)")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst - "n!1")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "x_section_measurable"
                                                             ("S1"
                                                              "S1"
                                                              "S2"
                                                              "S2"
                                                              "Z"
                                                              "E!1(n!1)"
                                                              "x"
                                                              "x!1"))
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "n!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (inst - "n!1")
                                            (("3"
                                              (expand "U")
                                              (("3" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (expand "U")
                                    (("2" (split)
                                      (("1"
                                        (lemma
                                         "sigma_algebra_IIntersection[[T1,T2],sigma_times(S1, S2)]"
                                         ("SS" "E!1"))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "x1!1")
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "pointwise_measurable[T1, S1]"
                                         ("f"
                                          "F(IIntersection(E!1))"
                                          "u"
                                          "lambda (n:nat): F(E!1(n))"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand
                                               "pointwise_convergence?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand "F")
                                                  (("1"
                                                    (expand "o ")
                                                    (("1"
                                                      (lemma
                                                       "fm_IIntersection[T2,S2,nu!1]"
                                                       ("X"
                                                        "lambda (n:nat): x_section(E!1(n),x!1)"))
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (expand "o ")
                                                          (("1"
                                                            (expand
                                                             "x_section"
                                                             1)
                                                            (("1"
                                                              (name-replace
                                                               "LHS"
                                                               "LAMBDA (n_1: nat): nu!1(x_section(E!1(n_1), x!1))")
                                                              (("1"
                                                                (case-replace
                                                                 "IIntersection(LAMBDA
                                     (n: nat):
                                     x_section(E!1(n), x!1))=x_section(IIntersection(E!1), x!1)")
                                                                (("1"
                                                                  (name-replace
                                                                   "RHS"
                                                                   "nu!1(x_section(IIntersection(E!1), x!1))")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-2 1))
                                                                    (("1"
                                                                      (rewrite
                                                                       "metric_convergence_def")
                                                                      (("1"
                                                                        (expand
                                                                         "convergence")
                                                                        (("1"
                                                                          (expand
                                                                           "metric_converges_to")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "r!1")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "n!1")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-3 1))
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "IIntersection")
                                                                      (("2"
                                                                        (expand
                                                                         "x_section")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (expand
                                                             "decreasing?")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "x!2"
                                                                 "y!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (expand
                                                                       "x_section")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "(x!1,x!3)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst - "n!1")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (lemma
                                                               "x_section_measurable"
                                                               ("S1"
                                                                "S1"
                                                                "S2"
                                                                "S2"
                                                                "Z"
                                                                "E!1(n!1)"
                                                                "x"
                                                                "x!1"))
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "n!1")
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (inst - "n!1")
                                            (("3" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skosimp)
                        (("2" (typepred "a!1")
                          (("2" (expand "U")
                            (("2" (flatten)
                              (("2"
                                (lemma
                                 "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                 ("x" "a!1"))
                                (("2" (assert)
                                  (("2"
                                    (lemma "const_measurable[T1,S1]"
                                     ("c" "nu!1(fullset[T2])"))
                                    (("2"
                                      (lemma
                                       "diff_measurable[T1,S1]"
                                       ("g1"
                                        "LAMBDA (x: T1): nu!1(fullset[T2])"
                                        "g2"
                                        "F(a!1)"))
                                      (("1"
                                        (expand "-")
                                        (("1"
                                          (case-replace
                                           "(LAMBDA (x_1: T1):
                             nu!1(fullset[T2]) - F(a!1)(x_1))=F(complement(a!1))")
                                          (("1"
                                            (apply-extensionality :hide? t)
                                            (("1"
                                              (hide 2 -1 -2 -5)
                                              (("1"
                                                (expand "F")
                                                (("1"
                                                  (expand "o ")
                                                  (("1"
                                                    (lemma
                                                     "fm_disjointunion[T2,S2,nu!1]"
                                                     ("A"
                                                      "x_section(a!1)(x!1)"
                                                      "B"
                                                      "x_section(complement(a!1))(x!1)"))
                                                    (("1"
                                                      (expand "x_section")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (case-replace
                                                           "union(x_section(a!1, x!1), x_section(complement(a!1), x!1))=fullset[T2]")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skosimp)
                      (("2" (hide -3)
                        (("2" (typepred "b!1")
                          (("2" (typepred "a!1")
                            (("2" (expand "U")
                              (("2" (flatten)
                                (("2"
                                  (lemma
                                   "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                   ("x" "a!1" "y" "b!1"))
                                  (("2" (assert)
                                    (("2"
                                      (lemma
                                       "sum_measurable[T1, S1]"
                                       ("g1" "F(a!1)" "g2" "F(b!1)"))
                                      (("2"
                                        (expand "+" -1)
                                        (("2"
                                          (case-replace
                                           "(LAMBDA (x: T1): F(a!1)(x) + F(b!1)(x))=F(union(a!1, b!1))")
                                          (("2"
                                            (apply-extensionality :hide? t)
                                            (("2"
                                              (hide-all-but (-2 -3 -4 -7 1))
                                              (("2"
                                                (expand "F")
                                                (("2"
                                                  (expand "o ")
                                                  (("2"
                                                    (expand "x_section")
                                                    (("2"
                                                      (lemma
                                                       "fm_disjointunion[T2,S2,nu!1]"
                                                       ("A"
                                                        "x_section(a!1, x!1)"
                                                        "B"
                                                        "x_section(b!1, x!1)"))
                                                      (("2"
                                                        (rewrite
                                                         "x_section_union")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide-all-but
                                                             (-4 1))
                                                            (("2"
                                                              (lemma
                                                               "x_section_disjoint"
                                                               ("X"
                                                                "a!1"
                                                                "Y"
                                                                "b!1"
                                                                "a"
                                                                "x!1"))
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2" (expand "U")
                      (("2" (hide -1)
                        (("2" (typepred "R!1")
                          (("2" (expand "measurable_rectangle?")
                            (("2" (skosimp)
                              (("2" (split)
                                (("1" (assert)
                                  (("1" (expand "sigma_times")
                                    (("1"
                                      (lemma
                                       "generated_sigma_algebra_subset1"
                                       ("X"
                                        "extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)])"))
                                      (("1"
                                        (name-replace
                                         "SA"
                                         "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (expand "fullset")
                                            (("1"
                                              (expand "extend")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (inst - "R!1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "F")
                                  (("2" (expand "o ")
                                    (("2" (expand "x_section")
                                      (("2"
                                        (hide -4)
                                        (("2"
                                          (lemma
                                           "phi_is_simple[T1,S1]"
                                           ("X" "X!1"))
                                          (("1"
                                            (expand "simple?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (lemma
                                                   "scal_measurable[T1,S1]"
                                                   ("c"
                                                    "nu!1(Y!1)"
                                                    "g"
                                                    "phi[T1,S1](X!1)"))
                                                  (("1"
                                                    (expand "*")
                                                    (("1"
                                                      (expand "phi")
                                                      (("1"
                                                        (expand "member")
                                                        (("1"
                                                          (case-replace
                                                           "(LAMBDA (x: T1):
                             nu!1(Y!1) * IF X!1(x) THEN 1 ELSE 0 ENDIF)=(LAMBDA (x: T1): nu!1(x_section(R!1, x)))")
                                                          (("1"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (replace -3)
                                                              (("1"
                                                                (expand
                                                                 "cross_product")
                                                                (("1"
                                                                  (expand
                                                                   "x_section")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-4
                                                                      -5
                                                                      1))
                                                                    (("1"
                                                                      (case-replace
                                                                       "X!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{b: T2 | Y!1(b)}=Y!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "nu!1")
                                                                          (("2"
                                                                            (expand
                                                                             "finite_measure?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "emptyset")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (replace -3)
                                                                (("2"
                                                                  (expand
                                                                   "cross_product")
                                                                  (("2"
                                                                    (expand
                                                                     "x_section")
                                                                    (("2"
                                                                      (case-replace
                                                                       "X!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{b: T2 | Y!1(b)}=Y!1")
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "S2")
                                                                          (("2"
                                                                            (expand
                                                                             "sigma_algebra?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "subset_algebra_empty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (expand
                                                               "x_section")
                                                              (("2"
                                                                (replace -3)
                                                                (("2"
                                                                  (expand
                                                                   "cross_product")
                                                                  (("2"
                                                                    (case-replace
                                                                     "X!1(x!1)")
                                                                    (("1"
                                                                      (case-replace
                                                                       "{b: T2 | Y!1(b)}=Y!1")
                                                                      (("1"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "S2")
                                                                        (("2"
                                                                          (expand
                                                                           "sigma_algebra?")
                                                                          (("2"
                                                                            (expand
                                                                             "subset_algebra_empty?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (expand
                                                                                   "emptyset")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (propax) nil nil)
                                                   ("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "F")
                (("2" (skosimp)
                  (("2"
                    (lemma "x_section_bounded"
                     ("nu" "nu!1" "M" "M!2" "x" "x!1"))
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "F") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (skosimp)
        (("2" (skosimp)
          (("2" (expand "x_section")
            (("2"
              (lemma "x_section_measurable"
               ("S1" "S1" "S2" "S2" "Z" "M!2" "x" "x1!1"))
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (measurable_rectangle nonempty-type-eq-decl nil product_sigma_def nil)
    (x_section_union formula-decl nil product_sections nil)
    (x_section_disjoint formula-decl nil product_sections nil)
    (sum_measurable judgement-tcc nil measure_space_def nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (complement const-decl "set" sets nil)
    (pointwise_measurable formula-decl nil measure_space nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def nil)
    (fm_IUnion formula-decl nil finite_measure nil)
    (x_section const-decl "set[T2]" cross_product topology)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (convergence const-decl "bool" convergence_sequences analysis)
    (x_section_measurable formula-decl nil product_sigma_def nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (sigma_algebra_IUnion formula-decl nil sigma_algebra nil)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (metric? const-decl "bool" metric_def metric_space)
    (decreasing? const-decl "bool" fun_preds_partial structures)
    (fm_IIntersection formula-decl nil finite_measure nil)
    (sigma_algebra_IIntersection formula-decl nil sigma_algebra nil)
    (monotone_class formula-decl nil subset_algebra_def nil)
    (monotone_class nonempty-type-eq-decl nil subset_algebra_def nil)
    (emptyset const-decl "set" sets nil)
    (sequence type-eq-decl nil sequences nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (finite_disjoint_union? const-decl "bool" subset_algebra_def nil)
    (finite_disjoint_unions const-decl "setofsets[T]" subset_algebra_def nil)
    (generated_sigma_algebra_subset1 formula-decl nil subset_algebra_def nil)
    (generated_sigma_algebra const-decl "sigma_algebra" subset_algebra_def
     nil)
    (generated_sigma_algebra_subset2 formula-decl nil subset_algebra_def nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (Union const-decl "set" sets nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (rectangle_algebra const-decl "subset_algebra[[T1, T2]]" product_sigma
     nil)
    (subset_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (subset_algebra? const-decl "bool" subset_algebra_def nil)
    (monotone? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra_complement formula-decl nil sigma_algebra nil)
    (const_measurable formula-decl nil measure_space nil)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (diff_measurable judgement-tcc nil measure_space_def nil)
    (union const-decl "set" sets nil) (disjoint? const-decl "bool" sets nil)
    (simple? const-decl "bool" measure_space nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (phi const-decl "nat" measure_space nil)
    (scal_measurable judgement-tcc nil measure_space_def nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (set type-eq-decl nil sets nil)
    (x_section const-decl "[T1 -> set[T2]]" cross_product topology))
   shostak))
 (y_section_measurable 0
  (y_section_measurable-3 "" 3789904313
   ("" (skosimp)
    (("" (name "F" "lambda M: mu!1 o y_section(M)")
      (("1" (case-replace "mu!1 o y_section(M!1) = F(M!1)")
        (("1" (hide-all-but 1)
          (("1"
            (case "forall y,M: 0 <= F(M)(y) & F(M)(y) <= mu!1(fullset[T1])")
            (("1"
              (name "U"
                    "{M:set[[T1,T2]] | sigma_times(S1,S2)(M) & measurable_function?[T2,S2](F(M))}")
              (("1" (case "forall (R:measurable_rectangle(S1,S2)): U(R)")
                (("1"
                  (case "FORALL (a, b: (U)): disjoint?(a,b) => U(union(a, b))")
                  (("1" (case "FORALL (a: (U)): U(complement(a))")
                    (("1" (case "monotone?(U)")
                      (("1" (lemma "monotone_class" ("C" "U"))
                        (("1" (typepred "rectangle_algebra")
                          (("1" (typepred "M!1")
                            (("1" (inst -3 "rectangle_algebra")
                              (("1" (split)
                                (("1" (expand "subset?")
                                  (("1" (inst - "M!1")
                                    (("1" (expand "member")
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "U")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "sigma_times" -1)
                                            (("2"
                                              (lemma
                                               "generated_sigma_algebra_subset2"
                                               ("X"
                                                "extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)])"
                                                "Y"
                                                "generated_sigma_algebra(rectangle_algebra)"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (name-replace
                                                     "SA"
                                                     "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                                    (("1"
                                                      (expand "subset?")
                                                      (("1"
                                                        (inst - "M!1")
                                                        (("1"
                                                          (expand "member")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "subset?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand "fullset")
                                                          (("2"
                                                            (expand "extend")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (lemma
                                                                   "generated_sigma_algebra_subset1"
                                                                   ("X"
                                                                    "rectangle_algebra"))
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "rectangle_algebra")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "finite_disjoint_rectangles")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "singleton[(measurable_rectangle?(S1, S2))](x!1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "singleton")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "extend")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "x!1(x!2,x!3)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "a!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x!2")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "y!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "singleton")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (expand "subset?")
                                    (("2" (skosimp)
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (expand "rectangle_algebra")
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand
                                                 "finite_disjoint_unions")
                                                (("2"
                                                  (expand "fullset")
                                                  (("2"
                                                    (expand "extend")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (expand
                                                         "finite_disjoint_union?")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (case
                                                               "forall (n:nat): U(IUnion(n,E!1))")
                                                              (("1"
                                                                (case-replace
                                                                 "IUnion(E!1)=IUnion(n!1, E!1)")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (case-replace
                                                                       "IUnion(E!1)(x!2, x!3)")
                                                                      (("1"
                                                                        (expand
                                                                         "IUnion")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (case
                                                                             "i!1>=n!1")
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "i!1")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -7
                                                                                       "(x!2,x!3)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -5
                                                                               "i!1")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "image")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "Union")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "E!1(i!1)")
                                                                                        (("2"
                                                                                          (inst
                                                                                           +
                                                                                           "i!1")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "IUnion")
                                                                          (("2"
                                                                            (expand
                                                                             "image")
                                                                            (("2"
                                                                              (expand
                                                                               "Union")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "a!1")
                                                                                  (("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "x!4")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -6
                                                                  1
                                                                  -7
                                                                  -3))
                                                                (("2"
                                                                  (induct "n")
                                                                  (("1"
                                                                    (rewrite
                                                                     "IUnion_0_def")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "0")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (case-replace
                                                                           "n!1>0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "E!1(0)")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (rewrite
                                                                               "emptyset_is_empty?")
                                                                              (("2"
                                                                                (replace
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -4
                                                                                   "emptyset")
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "measurable_rectangle?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "emptyset"
                                                                                         "emptyset")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cross_product")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "S1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sigma_algebra?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (typepred
                                                                                             "S2")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma_algebra?")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (rewrite
                                                                       "IUnion_n_def")
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "IUnion(j!1, E!1)"
                                                                         "E!1(1 + j!1)")
                                                                        (("1"
                                                                          (split
                                                                           -4)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "disjoint?")
                                                                              (("2"
                                                                                (expand
                                                                                 "disjoint?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "intersection")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "IUnion")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "image")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "a!1")
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "n!2")
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "n!2")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "n!2"
                                                                                                         "1+j!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x!2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "1+j!1")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "E!1(1+j!1)")
                                                                              (("2"
                                                                                (hide
                                                                                 2
                                                                                 -1)
                                                                                (("2"
                                                                                  (case-replace
                                                                                   "1 + j!1 < n!1")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "emptyset_is_empty?")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "measurable_rectangle?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "emptyset"
                                                                                               "emptyset")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (apply-extensionality
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "S1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "sigma_algebra?")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "subset_algebra_empty?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (typepred
                                                                                                   "S2")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "sigma_algebra?")
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "subset_algebra_empty?")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "monotone?")
                          (("2" (skosimp)
                            (("2" (expand "member")
                              (("2" (split)
                                (("1" (flatten)
                                  (("1"
                                    (lemma
                                     "sigma_algebra_IUnion[[T1,T2],sigma_times(S1,S2)]"
                                     ("SS" "E!1"))
                                    (("1" (expand "member")
                                      (("1"
                                        (expand "U" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "pointwise_measurable[T2, S2]"
                                             ("f"
                                              "F(IUnion(E!1))"
                                              "u"
                                              "lambda (n:nat): F(E!1(n))"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand
                                                   "pointwise_convergence?")
                                                  (("1"
                                                    (skolem + "y!1")
                                                    (("1"
                                                      (expand "F")
                                                      (("1"
                                                        (expand "o ")
                                                        (("1"
                                                          (expand "y_section")
                                                          (("1"
                                                            (hide -7)
                                                            (("1"
                                                              (typepred
                                                               "mu!1")
                                                              (("1"
                                                                (expand
                                                                 "finite_measure?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "disjoint_IUnion"
                                                                     ("A"
                                                                      "E!1"))
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (case
                                                                         "forall (n:nat): sigma_times(S1, S2)(B!1(n))")
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "lambda (n:nat): y_section(B!1(n), y!1)")
                                                                          (("1"
                                                                            (case-replace
                                                                             "(IUnion(LAMBDA (n: nat): y_section(B!1(n), y!1)))=y_section(IUnion(E!1), y!1)")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (name-replace
                                                                                 "RHS"
                                                                                 "mu!1(y_section(IUnion(E!1), y!1))")
                                                                                (("1"
                                                                                  (expand
                                                                                   "o ")
                                                                                  (("1"
                                                                                    (case
                                                                                     "forall (n:nat): IUnion(n, E!1)=E!1(n)")
                                                                                    (("1"
                                                                                      (case
                                                                                       "forall (n:nat): series(LAMBDA (x: nat): mu!1(y_section(B!1(x), y!1)))(n)= mu!1(y_section(E!1(n), y!1))")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "extensionality_postulate"
                                                                                         ("f"
                                                                                          "series(LAMBDA (x: nat): mu!1(y_section(B!1(x), y!1)))"
                                                                                          "g"
                                                                                          "lambda (n:nat): mu!1(y_section(E!1(n), y!1))"))
                                                                                        (("1"
                                                                                          (flatten
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "LHS"
                                                                                                     "LAMBDA (n: nat): mu!1(y_section(E!1(n), y!1))")
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-10
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "metric_convergence_def")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "convergence")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "metric_converges_to")
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "r!1")
                                                                                                                (("1"
                                                                                                                  (skosimp)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     +
                                                                                                                     "n!1")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "i!1")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "member")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ball")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!1")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (induct
                                                                                           "n")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "series")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "series")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sigma"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -6
                                                                                                       "j!1")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "j!1")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "fm_disjointunion[T1,S1,mu!1]"
                                                                                                               ("A"
                                                                                                                "y_section(difference(E!1(j!1 + 1), E!1(j!1)), y!1)"
                                                                                                                "B"
                                                                                                                "y_section(E!1(j!1), y!1)"))
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (case-replace
                                                                                                                   "union(y_section(difference(E!1(j!1 + 1), E!1(j!1)), y!1),
                 y_section(E!1(j!1), y!1))=y_section(E!1(1 + j!1), y!1)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-12
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "difference")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "y_section")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "union")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "member")
                                                                                                                              (("2"
                                                                                                                                (case-replace
                                                                                                                                 "E!1(1 + j!1)(x!1, y!1)")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "increasing?")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "j!1"
                                                                                                                                       "1+j!1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "subset?")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "(x!1,y!1)")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (1
                                                                                                                    -11))
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "difference")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "y_section")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "disjoint?")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "intersection")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "increasing?")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "subset?")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "member")
                                                                                                                                  (("2"
                                                                                                                                    (skosimp)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -12
                                                                                               "n!2")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "U")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (lemma
                                                                                                     "y_section_measurable"
                                                                                                     ("S1"
                                                                                                      "S1"
                                                                                                      "S2"
                                                                                                      "S2"
                                                                                                      "Z"
                                                                                                      "E!1(n!2)"
                                                                                                      "y"
                                                                                                      "y!1"))
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (skosimp)
                                                                                            (("4"
                                                                                              (inst
                                                                                               -
                                                                                               "x!1")
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 "y_section_measurable"
                                                                                                 ("S1"
                                                                                                  "S1"
                                                                                                  "S2"
                                                                                                  "S2"
                                                                                                  "Z"
                                                                                                  "B!1(x!1)"
                                                                                                  "y"
                                                                                                  "y!1"))
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skosimp)
                                                                                        (("3"
                                                                                          (inst
                                                                                           -12
                                                                                           "n!1")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "U"
                                                                                             -12)
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "y_section_measurable"
                                                                                                 ("S1"
                                                                                                  "S1"
                                                                                                  "S2"
                                                                                                  "S2"
                                                                                                  "Z"
                                                                                                  "E!1(n!1)"
                                                                                                  "y"
                                                                                                  "y!1"))
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skosimp)
                                                                                        (("4"
                                                                                          (inst
                                                                                           -2
                                                                                           "x!1")
                                                                                          (("4"
                                                                                            (lemma
                                                                                             "y_section_measurable"
                                                                                             ("S1"
                                                                                              "S1"
                                                                                              "S2"
                                                                                              "S2"
                                                                                              "Z"
                                                                                              "B!1(x!1)"
                                                                                              "y"
                                                                                              "y!1"))
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-10
                                                                                        1))
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "IUnion")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "image")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Union")
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   "E!1(n!1)(x!1, x!2)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "E!1(n!1)")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "n!1")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "a!1")
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -
                                                                                                           "n!2")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "increasing?")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "n!2"
                                                                                                               "n!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "subset?")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "(x!1,x!2)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply-extensionality
                                                                               :hide?
                                                                               t)
                                                                              (("2"
                                                                                (replace
                                                                                 -6)
                                                                                (("2"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "y_section")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "disjoint_indexed_measurable?")
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-2
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "disjoint?")
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "i!1"
                                                                                     "j!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "y_section_disjoint"
                                                                                         ("X"
                                                                                          "B!1(i!1)"
                                                                                          "Y"
                                                                                          "B!1(j!1)"
                                                                                          "b"
                                                                                          "y!1"))
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (inst
                                                                               -
                                                                               "n!1")
                                                                              (("3"
                                                                                (lemma
                                                                                 "y_section_measurable"
                                                                                 ("S1"
                                                                                  "S1"
                                                                                  "S2"
                                                                                  "S2"
                                                                                  "Z"
                                                                                  "B!1(n!1)"
                                                                                  "y"
                                                                                  "y!1"))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -7
                                                                           2
                                                                           -14)
                                                                          (("2"
                                                                            (induct
                                                                             "n")
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -9
                                                                                   "0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "U")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 -5
                                                                                 "j!1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "IUnion(j!1, E!1)=E!1(j!1)")
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -11
                                                                                       "j!1")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -11
                                                                                         "j!1+1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "U")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "sigma_algebra_difference[[T1,T2],sigma_times(S1, S2)]"
                                                                                               ("x"
                                                                                                "E!1(j!1 + 1)"
                                                                                                "y"
                                                                                                "E!1(j!1)"))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (1
                                                                                        -9))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (case-replace
                                                                                             "E!1(j!1)(x!1, x!2)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "IUnion")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "image")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Union")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "E!1(j!1)")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "j!1")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "IUnion")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "image")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "Union")
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "a!1")
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -
                                                                                                           "n!1")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "increasing?")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "n!1")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "n!1"
                                                                                                                     "j!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "subset?")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "(x!1,x!2)")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (inst -3 "n!1")
                                                (("2"
                                                  (expand "U")
                                                  (("2" (flatten) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skosimp)
                                      (("2"
                                        (inst - "x1!1")
                                        (("2"
                                          (expand "U")
                                          (("2" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (expand "U" 1)
                                    (("2" (split)
                                      (("1"
                                        (lemma
                                         "sigma_algebra_IIntersection[[T1,T2],sigma_times(S1,S2)]"
                                         ("SS" "E!1"))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "x1!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "pointwise_measurable[T2, S2]"
                                         ("f"
                                          "F(IIntersection(E!1))"
                                          "u"
                                          "lambda (n:nat): F(E!1(n))"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand
                                               "pointwise_convergence?")
                                              (("1"
                                                (skolem + "y!1")
                                                (("1"
                                                  (expand "F")
                                                  (("1"
                                                    (expand "o ")
                                                    (("1"
                                                      (lemma
                                                       "fm_IIntersection[T1,S1,mu!1]"
                                                       ("X"
                                                        "lambda (n:nat): y_section(E!1(n),y!1)"))
                                                      (("1"
                                                        (expand "y_section" 1)
                                                        (("1"
                                                          (expand "o ")
                                                          (("1"
                                                            (name-replace
                                                             "LHS"
                                                             "LAMBDA (x: nat): mu!1(y_section(E!1(x), y!1))")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (case-replace
                                                                 "IIntersection(LAMBDA
                                     (n: nat):
                                     y_section(E!1(n), y!1))=y_section(IIntersection(E!1), y!1)")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-2 1))
                                                                  (("1"
                                                                    (name-replace
                                                                     "RHS"
                                                                     "mu!1(y_section(IIntersection(E!1), y!1))")
                                                                    (("1"
                                                                      (rewrite
                                                                       "metric_convergence_def")
                                                                      (("1"
                                                                        (expand
                                                                         "metric_converges_to")
                                                                        (("1"
                                                                          (expand
                                                                           "convergence")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "r!1")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "n!1")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "IIntersection")
                                                                      (("2"
                                                                        (expand
                                                                         "y_section")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1 1))
                                                                (("2"
                                                                  (expand
                                                                   "decreasing?")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1"
                                                                       "y!2")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "subset?")
                                                                          (("2"
                                                                            (expand
                                                                             "y_section")
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "(x!2,y!1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst - "n!1")
                                                          (("2"
                                                            (expand "U")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (lemma
                                                                 "y_section_measurable"
                                                                 ("S1"
                                                                  "S1"
                                                                  "S2"
                                                                  "S2"
                                                                  "Z"
                                                                  "E!1(n!1)"
                                                                  "y"
                                                                  "y!1"))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "n!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (inst - "n!1")
                                            (("3"
                                              (expand "U")
                                              (("3" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skosimp)
                        (("2" (typepred "a!1")
                          (("2" (expand "U")
                            (("2" (flatten)
                              (("2" (split)
                                (("1"
                                  (lemma
                                   "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                   ("x" "a!1"))
                                  (("1" (assert) nil nil)) nil)
                                 ("2" (expand "F")
                                  (("2" (expand "y_section")
                                    (("2" (hide -5)
                                      (("2"
                                        (expand "o ")
                                        (("2"
                                          (lemma
                                           "const_measurable[T2,S2]"
                                           ("c" "mu!1(fullset[T1])"))
                                          (("2"
                                            (lemma
                                             "diff_measurable[T2, S2]"
                                             ("g1"
                                              "(LAMBDA (x: T2): mu!1(fullset[T1]))"
                                              "g2"
                                              "(LAMBDA (x: T2): mu!1(y_section(a!1, x)))"))
                                            (("1"
                                              (expand "-")
                                              (("1"
                                                (case-replace
                                                 "(LAMBDA (x_1: T2):
                             mu!1(fullset[T1]) - mu!1(y_section(a!1, x_1)))=(LAMBDA (x: T2): mu!1(y_section(complement(a!1), x)))")
                                                (("1"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (hide-all-but (-3 1))
                                                      (("1"
                                                        (lemma
                                                         "fm_disjointunion[T1,S1,mu!1]"
                                                         ("A"
                                                          "y_section(a!1, x!1)"
                                                          "B"
                                                          "y_section(complement(a!1), x!1)"))
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (case-replace
                                                             "union(y_section(a!1, x!1), y_section(complement(a!1), x!1))=fullset[T1]")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "fullset")
                                                                  (("2"
                                                                    (expand
                                                                     "union")
                                                                    (("2"
                                                                      (expand
                                                                       "complement")
                                                                      (("2"
                                                                        (expand
                                                                         "y_section")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (flatten)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (expand
                                                               "disjoint?")
                                                              (("2"
                                                                (expand
                                                                 "complement")
                                                                (("2"
                                                                  (expand
                                                                   "intersection")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "y_section")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (hide-all-but (-3 1))
                                                      (("2"
                                                        (lemma
                                                         "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                                         ("x" "a!1"))
                                                        (("2"
                                                          (expand "member")
                                                          (("2"
                                                            (lemma
                                                             "y_section_measurable"
                                                             ("S1"
                                                              "S1"
                                                              "S2"
                                                              "S2"
                                                              "Z"
                                                              "complement(a!1)"
                                                              "y"
                                                              "x!1"))
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skosimp)
                                                    (("3"
                                                      (lemma
                                                       "y_section_measurable"
                                                       ("S1"
                                                        "S1"
                                                        "S2"
                                                        "S2"
                                                        "Z"
                                                        "a!1"
                                                        "y"
                                                        "x!1"))
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (lemma
                                                     "y_section_measurable"
                                                     ("S1"
                                                      "S1"
                                                      "S2"
                                                      "S2"
                                                      "Z"
                                                      "complement(a!1)"
                                                      "y"
                                                      "x!1"))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                                         ("x" "a!1"))
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (lemma
                                                 "y_section_measurable"
                                                 ("S1"
                                                  "S1"
                                                  "S2"
                                                  "S2"
                                                  "Z"
                                                  "a!1"
                                                  "y"
                                                  "x!1"))
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("4" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skosimp)
                      (("2" (typepred "a!1")
                        (("2" (typepred "b!1")
                          (("2" (expand "U")
                            (("2" (flatten)
                              (("2" (hide -7)
                                (("2" (split)
                                  (("1"
                                    (lemma
                                     "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                     ("x" "a!1" "y" "b!1"))
                                    (("1" (expand "member")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2"
                                    (lemma "sum_measurable[T2, S2]"
                                     ("g1" "F(a!1)" "g2" "F(b!1)"))
                                    (("1"
                                      (case-replace
                                       "F(union(a!1, b!1))=(reals@real_fun_ops[T2].+)(F(a!1), F(b!1))")
                                      (("1"
                                        (hide-all-but (-6 -8 1))
                                        (("1"
                                          (apply-extensionality :hide? t)
                                          (("1"
                                            (expand "+")
                                            (("1"
                                              (expand "F")
                                              (("1"
                                                (expand "o ")
                                                (("1"
                                                  (expand "y_section")
                                                  (("1"
                                                    (rewrite
                                                     "y_section_union")
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (lemma
                                                         "y_section_disjoint"
                                                         ("X"
                                                          "a!1"
                                                          "Y"
                                                          "b!1"
                                                          "b"
                                                          "x!1"))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "fm_disjointunion[T1,S1,mu!1]"
                                                             ("A"
                                                              "y_section(a!1, x!1)"
                                                              "B"
                                                              "y_section(b!1, x!1)"))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (expand "+")
                                              (("2"
                                                (inst-cp - "x1!1" "a!1")
                                                (("2"
                                                  (inst - "x1!1" "b!1")
                                                  (("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2" (typepred "R!1")
                      (("2" (expand "U")
                        (("2" (hide -2)
                          (("2" (assert)
                            (("2" (split)
                              (("1" (expand "sigma_times")
                                (("1"
                                  (lemma "generated_sigma_algebra_subset1"
                                   ("X" "(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))"))
                                  (("1"
                                    (name-replace "AA"
                                     "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                    (("1" (expand "fullset")
                                      (("1"
                                        (expand "extend")
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst - "R!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -2)
                                (("2" (expand "F")
                                  (("2" (expand "measurable_rectangle?")
                                    (("2" (skosimp)
                                      (("2"
                                        (expand "o ")
                                        (("2"
                                          (lemma
                                           "phi_is_simple[T2,S2]"
                                           ("X" "Y!1"))
                                          (("1"
                                            (expand "simple?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (lemma
                                                   "scal_measurable[T2,S2]"
                                                   ("c"
                                                    "mu!1(X!1)"
                                                    "g"
                                                    "phi[T2,S2](Y!1)"))
                                                  (("1"
                                                    (expand "*" -1)
                                                    (("1"
                                                      (expand "y_section")
                                                      (("1"
                                                        (expand "phi")
                                                        (("1"
                                                          (expand "member")
                                                          (("1"
                                                            (case-replace
                                                             "(LAMBDA (x: T2):
                             mu!1(X!1) * IF Y!1(x) THEN 1 ELSE 0 ENDIF)=(LAMBDA (x: T2): mu!1(y_section(R!1, x)))")
                                                            (("1"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace -3)
                                                                (("1"
                                                                  (expand
                                                                   "cross_product")
                                                                  (("1"
                                                                    (expand
                                                                     "y_section")
                                                                    (("1"
                                                                      (case-replace
                                                                       "Y!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{a: T1 | X!1(a)}=X!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "mu!1")
                                                                          (("2"
                                                                            (expand
                                                                             "finite_measure?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "emptyset")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (expand
                                                                   "y_section")
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "cross_product")
                                                                      (("2"
                                                                        (case-replace
                                                                         "Y!1(x!1)")
                                                                        (("1"
                                                                          (case-replace
                                                                           "{a: T1 | X!1(a)}=X!1")
                                                                          (("1"
                                                                            (apply-extensionality
                                                                             :hide?
                                                                             t)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "S1")
                                                                            (("2"
                                                                              (expand
                                                                               "sigma_algebra?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset_algebra_empty?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "emptyset")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 "y_section")
                                                                (("2"
                                                                  (replace -3)
                                                                  (("2"
                                                                    (expand
                                                                     "cross_product")
                                                                    (("2"
                                                                      (case-replace
                                                                       "Y!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{a: T1 | X!1(a)}=X!1")
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "S1")
                                                                          (("2"
                                                                            (expand
                                                                             "sigma_algebra?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "subset_algebra_empty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skosimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (propax) nil nil)
                                                   ("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (expand "F")
                  (("2"
                    (lemma "y_section_bounded"
                     ("M" "M!2" "mu" "mu!1" "y" "y!1"))
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "F") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "y_section")
          (("2"
            (lemma "y_section_measurable[T1,T2]"
             ("Z" "M!2" "S1" "S1" "S2" "S2" "y" "x1!1"))
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_algebra_fullset name-judgement "(S1)" product_finite_measure nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (fullset const-decl "set" sets nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (X!1 skolem-const-decl "set[T1]" product_finite_measure nil)
    (R!1 skolem-const-decl "measurable_rectangle[T1, T2](S1, S2)"
     product_finite_measure nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (phi const-decl "nat" measure_space nil)
    (scal_measurable judgement-tcc nil measure_space_def nil)
    (simple? const-decl "bool" measure_space nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (sum_measurable judgement-tcc nil measure_space_def nil)
    (b!1 skolem-const-decl "(U)" product_finite_measure nil)
    (a!1 skolem-const-decl "(U)" product_finite_measure nil)
    (y_section_union formula-decl nil product_sections nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (sigma_algebra_complement formula-decl nil sigma_algebra nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (a!1 skolem-const-decl "(U)" product_finite_measure nil)
    (diff_measurable judgement-tcc nil measure_space_def nil)
    (const_measurable formula-decl nil measure_space nil)
    (ball_is_metric_open application-judgement
     "metric_open[real, (LAMBDA (x, y: real): abs(x - y))]" convergence_aux
     metric_space)
    (decreasing? const-decl "bool" fun_preds_partial structures)
    (fm_IIntersection formula-decl nil finite_measure nil)
    (IIntersection const-decl "set[T]" indexed_sets nil)
    (sigma_algebra_IIntersection formula-decl nil sigma_algebra nil)
    (sigma_algebra_IUnion formula-decl nil sigma_algebra nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (F skolem-const-decl "[(sigma_times(S1, S2)) -> [T2 -> nnreal]]"
     product_finite_measure nil)
    (y_section const-decl "set[T1]" cross_product topology)
    (B!1 skolem-const-decl "sequence[set[[T1, T2]]]" product_finite_measure
     nil)
    (y!1 skolem-const-decl "T2" product_finite_measure nil)
    (disjoint_indexed_measurable? const-decl "bool" generalized_measure_def
     nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (n!1 skolem-const-decl "nat" product_finite_measure nil)
    (E!1 skolem-const-decl "sequence[set[[T1, T2]]]" product_finite_measure
     nil)
    (sigma def-decl "real" sigma reals)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (difference const-decl "set" sets nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (y_section_measurable formula-decl nil product_sigma_def nil)
    (extensionality_postulate formula-decl nil functions nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (series const-decl "sequence[real]" series series)
    (y_section_disjoint formula-decl nil product_sections nil)
    (sigma_algebra_difference formula-decl nil sigma_algebra nil)
    (j!1 skolem-const-decl "nat" product_finite_measure nil)
    (disjoint_IUnion formula-decl nil nat_indexed_sets sets_aux)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def nil)
    (pointwise_measurable formula-decl nil measure_space nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset_algebra? const-decl "bool" subset_algebra_def nil)
    (subset_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (rectangle_algebra const-decl "subset_algebra[[T1, T2]]" product_sigma
     nil)
    (generated_sigma_algebra_subset2 formula-decl nil subset_algebra_def nil)
    (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)
    (generated_sigma_algebra const-decl "sigma_algebra" subset_algebra_def
     nil)
    (finite_disjoint_rectangles formula-decl nil product_sigma nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set[T]"
     step_fun_props analysis)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[set[T]]" countable_setofsets sets_aux)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas_aux nil)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas nil)
    (finite_extend application-judgement "finite_set[T]" extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])" extend_set_props
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Union const-decl "set" sets nil) (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (generated_sigma_algebra_subset1 formula-decl nil subset_algebra_def nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas_aux nil)
    (subset_algebra_complement application-judgement "(S)" sigma_algebra nil)
    (subset_algebra_union application-judgement "(S)" sigma_algebra nil)
    (U skolem-const-decl "[set[[T1, T2]] -> boolean]" product_finite_measure
     nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (finite_disjoint_unions const-decl "setofsets[T]" subset_algebra_def nil)
    (finite_disjoint_union? const-decl "bool" subset_algebra_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (empty? const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (image const-decl "set[R]" function_image nil)
    (n!1 skolem-const-decl "nat" product_finite_measure nil)
    (E!1 skolem-const-decl "sequence[set[[T1, T2]]]" product_finite_measure
     nil)
    (i!1 skolem-const-decl "nat" product_finite_measure nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (< const-decl "bool" reals nil) (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (j!1 skolem-const-decl "nat" product_finite_measure nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable sigma_set)
    (finite_emptyset name-judgement "finite_set[T]" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (monotone_class nonempty-type-eq-decl nil subset_algebra_def nil)
    (monotone_class formula-decl nil subset_algebra_def nil)
    (monotone? const-decl "bool" subset_algebra_def nil)
    (complement const-decl "set" sets nil) (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (measurable_rectangle nonempty-type-eq-decl nil product_sigma_def nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (y_section_bounded formula-decl nil product_finite_measure nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (O const-decl "T3" function_props nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (set type-eq-decl nil sets nil)
    (y_section const-decl "[T2 -> set[T1]]" cross_product topology))
   shostak)
  (y_section_measurable-2 "" 3758903815
   ("" (skosimp)
    (("" (name "F" "lambda M: mu!1 o y_section(M)")
      (("1" (case-replace "mu!1 o y_section(M!1) = F(M!1)")
        (("1" (hide-all-but 1)
          (("1"
            (case "forall y,M: 0 <= F(M)(y) & F(M)(y) <= mu!1(fullset[T1])")
            (("1"
              (name "U"
                    "{M:set[[T1,T2]] | sigma_times(S1,S2)(M) & measurable_function?[T2,S2](F(M))}")
              (("1" (case "forall (R:measurable_rectangle(S1,S2)): U(R)")
                (("1"
                  (case "FORALL (a, b: (U)): disjoint?(a,b) => U(union(a, b))")
                  (("1" (case "FORALL (a: (U)): U(complement(a))")
                    (("1" (case "monotone?(U)")
                      (("1" (lemma "monotone_class" ("C" "U"))
                        (("1" (typepred "rectangle_algebra")
                          (("1" (typepred "M!1")
                            (("1" (inst -3 "rectangle_algebra")
                              (("1" (split)
                                (("1" (expand "subset?")
                                  (("1" (inst - "M!1")
                                    (("1" (expand "member")
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "U")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "sigma_times" -1)
                                            (("2"
                                              (lemma
                                               "generated_sigma_algebra_subset2"
                                               ("X"
                                                "extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)])"
                                                "Y"
                                                "generated_sigma_algebra(rectangle_algebra)"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (name-replace
                                                     "SA"
                                                     "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                                    (("1"
                                                      (expand "subset?")
                                                      (("1"
                                                        (inst - "M!1")
                                                        (("1"
                                                          (expand "member")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "subset?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand "fullset")
                                                          (("2"
                                                            (expand "extend")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (lemma
                                                                   "generated_sigma_algebra_subset1"
                                                                   ("X"
                                                                    "rectangle_algebra"))
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "rectangle_algebra")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "finite_disjoint_rectangles")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "singleton[(measurable_rectangle?(S1, S2))](x!1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "singleton")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "extend")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "x!1(x!2,x!3)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "a!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x!2")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "y!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "singleton")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (expand "subset?")
                                    (("2" (skosimp)
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (expand "rectangle_algebra")
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand
                                                 "finite_disjoint_unions")
                                                (("2"
                                                  (expand "fullset")
                                                  (("2"
                                                    (expand "extend")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (expand
                                                         "finite_disjoint_union?")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (case
                                                               "forall (n:nat): U(IUnion(n,E!1))")
                                                              (("1"
                                                                (case-replace
                                                                 "IUnion(E!1)=IUnion(n!1, E!1)")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (case-replace
                                                                       "IUnion(E!1)(x!2, x!3)")
                                                                      (("1"
                                                                        (expand
                                                                         "IUnion")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (case
                                                                             "i!1>=n!1")
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "i!1")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -7
                                                                                       "(x!2,x!3)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -5
                                                                               "i!1")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "image")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "Union")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "E!1(i!1)")
                                                                                        (("2"
                                                                                          (inst
                                                                                           +
                                                                                           "i!1")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "IUnion")
                                                                          (("2"
                                                                            (expand
                                                                             "image")
                                                                            (("2"
                                                                              (expand
                                                                               "Union")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "a!1")
                                                                                  (("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "x!4")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -6
                                                                  1
                                                                  -7
                                                                  -3))
                                                                (("2"
                                                                  (induct "n")
                                                                  (("1"
                                                                    (rewrite
                                                                     "IUnion_0_def")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "0")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (case-replace
                                                                           "n!1>0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "E!1(0)")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (rewrite
                                                                               "emptyset_is_empty?")
                                                                              (("2"
                                                                                (replace
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -4
                                                                                   "emptyset")
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "measurable_rectangle?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "emptyset"
                                                                                         "emptyset")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cross_product")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "S1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sigma_algebra?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (typepred
                                                                                             "S2")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma_algebra?")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (rewrite
                                                                       "IUnion_n_def")
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "IUnion(j!1, E!1)"
                                                                         "E!1(1 + j!1)")
                                                                        (("1"
                                                                          (split
                                                                           -4)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "disjoint?")
                                                                              (("2"
                                                                                (expand
                                                                                 "disjoint?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "intersection")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "IUnion")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "image")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "a!1")
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "n!2")
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "n!2")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "n!2"
                                                                                                         "1+j!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x!2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "1+j!1")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "E!1(1+j!1)")
                                                                              (("2"
                                                                                (hide
                                                                                 2
                                                                                 -1)
                                                                                (("2"
                                                                                  (case-replace
                                                                                   "1 + j!1 < n!1")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "emptyset_is_empty?")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "measurable_rectangle?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "emptyset"
                                                                                               "emptyset")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (apply-extensionality
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "S1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "sigma_algebra?")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "subset_algebra_empty?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (typepred
                                                                                                   "S2")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "sigma_algebra?")
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "subset_algebra_empty?")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "monotone?")
                          (("2" (skosimp)
                            (("2" (expand "member")
                              (("2" (split)
                                (("1" (flatten)
                                  (("1"
                                    (lemma
                                     "sigma_algebra_IUnion[[T1,T2],sigma_times(S1,S2)]"
                                     ("SS" "E!1"))
                                    (("1" (expand "member")
                                      (("1"
                                        (expand "U" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "pointwise_measurable[T2, S2]"
                                             ("f"
                                              "F(IUnion(E!1))"
                                              "u"
                                              "lambda (n:nat): F(E!1(n))"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand
                                                   "pointwise_convergence?")
                                                  (("1"
                                                    (skolem + "y!1")
                                                    (("1"
                                                      (expand "F")
                                                      (("1"
                                                        (expand "o ")
                                                        (("1"
                                                          (expand "y_section")
                                                          (("1"
                                                            (hide -7)
                                                            (("1"
                                                              (typepred
                                                               "mu!1")
                                                              (("1"
                                                                (expand
                                                                 "finite_measure?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "disjoint_IUnion"
                                                                     ("A"
                                                                      "E!1"))
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (case
                                                                         "forall (n:nat): sigma_times(S1, S2)(B!1(n))")
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "lambda (n:nat): y_section(B!1(n), y!1)")
                                                                          (("1"
                                                                            (case-replace
                                                                             "(IUnion(LAMBDA (n: nat): y_section(B!1(n), y!1)))=y_section(IUnion(E!1), y!1)")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (name-replace
                                                                                 "RHS"
                                                                                 "mu!1(y_section(IUnion(E!1), y!1))")
                                                                                (("1"
                                                                                  (expand
                                                                                   "o ")
                                                                                  (("1"
                                                                                    (case
                                                                                     "forall (n:nat): IUnion(n, E!1)=E!1(n)")
                                                                                    (("1"
                                                                                      (case
                                                                                       "forall (n:nat): series(LAMBDA (x: nat): mu!1(y_section(B!1(x), y!1)))(n)= mu!1(y_section(E!1(n), y!1))")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "extensionality_postulate"
                                                                                         ("f"
                                                                                          "series(LAMBDA (x: nat): mu!1(y_section(B!1(x), y!1)))"
                                                                                          "g"
                                                                                          "lambda (n:nat): mu!1(y_section(E!1(n), y!1))"))
                                                                                        (("1"
                                                                                          (flatten
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "LHS"
                                                                                                     "LAMBDA (n: nat): mu!1(y_section(E!1(n), y!1))")
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-10
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "metric_convergence_def")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "convergence")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "metric_converges_to")
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "r!1")
                                                                                                                (("1"
                                                                                                                  (skosimp)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     +
                                                                                                                     "n!1")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "i!1")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "member")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ball")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!1")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (induct
                                                                                           "n")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "series")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "series")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sigma"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -6
                                                                                                       "j!1")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "j!1")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "fm_disjointunion[T1,S1,mu!1]"
                                                                                                               ("A"
                                                                                                                "y_section(difference(E!1(j!1 + 1), E!1(j!1)), y!1)"
                                                                                                                "B"
                                                                                                                "y_section(E!1(j!1), y!1)"))
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (case-replace
                                                                                                                   "union(y_section(difference(E!1(j!1 + 1), E!1(j!1)), y!1),
                 y_section(E!1(j!1), y!1))=y_section(E!1(1 + j!1), y!1)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-12
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "difference")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "y_section")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "union")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "member")
                                                                                                                              (("2"
                                                                                                                                (case-replace
                                                                                                                                 "E!1(1 + j!1)(x!1, y!1)")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "increasing?")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "j!1"
                                                                                                                                       "1+j!1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "subset?")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "(x!1,y!1)")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (1
                                                                                                                    -11))
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "difference")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "y_section")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "disjoint?")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "intersection")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "increasing?")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "subset?")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "member")
                                                                                                                                  (("2"
                                                                                                                                    (skosimp)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -12
                                                                                               "n!2")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "U")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (lemma
                                                                                                     "y_section_measurable"
                                                                                                     ("S1"
                                                                                                      "S1"
                                                                                                      "S2"
                                                                                                      "S2"
                                                                                                      "Z"
                                                                                                      "E!1(n!2)"
                                                                                                      "y"
                                                                                                      "y!1"))
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (skosimp)
                                                                                            (("4"
                                                                                              (inst
                                                                                               -
                                                                                               "x!1")
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 "y_section_measurable"
                                                                                                 ("S1"
                                                                                                  "S1"
                                                                                                  "S2"
                                                                                                  "S2"
                                                                                                  "Z"
                                                                                                  "B!1(x!1)"
                                                                                                  "y"
                                                                                                  "y!1"))
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skosimp)
                                                                                        (("3"
                                                                                          (inst
                                                                                           -12
                                                                                           "n!1")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "U"
                                                                                             -12)
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "y_section_measurable"
                                                                                                 ("S1"
                                                                                                  "S1"
                                                                                                  "S2"
                                                                                                  "S2"
                                                                                                  "Z"
                                                                                                  "E!1(n!1)"
                                                                                                  "y"
                                                                                                  "y!1"))
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skosimp)
                                                                                        (("4"
                                                                                          (inst
                                                                                           -2
                                                                                           "x!1")
                                                                                          (("4"
                                                                                            (lemma
                                                                                             "y_section_measurable"
                                                                                             ("S1"
                                                                                              "S1"
                                                                                              "S2"
                                                                                              "S2"
                                                                                              "Z"
                                                                                              "B!1(x!1)"
                                                                                              "y"
                                                                                              "y!1"))
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-10
                                                                                        1))
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "IUnion")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "image")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Union")
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   "E!1(n!1)(x!1, x!2)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "E!1(n!1)")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "n!1")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "a!1")
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -
                                                                                                           "n!2")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "increasing?")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "n!2"
                                                                                                               "n!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "subset?")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "(x!1,x!2)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply-extensionality
                                                                               :hide?
                                                                               t)
                                                                              (("2"
                                                                                (replace
                                                                                 -6)
                                                                                (("2"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "y_section")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "disjoint_indexed_measurable?")
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-2
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "disjoint?")
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "i!1"
                                                                                     "j!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "y_section_disjoint"
                                                                                         ("X"
                                                                                          "B!1(i!1)"
                                                                                          "Y"
                                                                                          "B!1(j!1)"
                                                                                          "b"
                                                                                          "y!1"))
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (inst
                                                                               -
                                                                               "n!1")
                                                                              (("3"
                                                                                (lemma
                                                                                 "y_section_measurable"
                                                                                 ("S1"
                                                                                  "S1"
                                                                                  "S2"
                                                                                  "S2"
                                                                                  "Z"
                                                                                  "B!1(n!1)"
                                                                                  "y"
                                                                                  "y!1"))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -7
                                                                           2
                                                                           -14)
                                                                          (("2"
                                                                            (induct
                                                                             "n")
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -9
                                                                                   "0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "U")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 -5
                                                                                 "j!1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "IUnion(j!1, E!1)=E!1(j!1)")
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -11
                                                                                       "j!1")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -11
                                                                                         "j!1+1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "U")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "sigma_algebra_difference[[T1,T2],sigma_times(S1, S2)]"
                                                                                               ("x"
                                                                                                "E!1(j!1 + 1)"
                                                                                                "y"
                                                                                                "E!1(j!1)"))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (1
                                                                                        -9))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (case-replace
                                                                                             "E!1(j!1)(x!1, x!2)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "IUnion")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "image")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Union")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "E!1(j!1)")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "j!1")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "IUnion")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "image")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "Union")
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "a!1")
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -
                                                                                                           "n!1")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "increasing?")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "n!1")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "n!1"
                                                                                                                     "j!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "subset?")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "(x!1,x!2)")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (inst -3 "n!1")
                                                (("2"
                                                  (expand "U")
                                                  (("2" (flatten) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skosimp)
                                      (("2"
                                        (inst - "x1!1")
                                        (("2"
                                          (expand "U")
                                          (("2" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (expand "U" 1)
                                    (("2" (split)
                                      (("1"
                                        (lemma
                                         "sigma_algebra_IIntersection[[T1,T2],sigma_times(S1,S2)]"
                                         ("SS" "E!1"))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "x1!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "pointwise_measurable[T2, S2]"
                                         ("f"
                                          "F(IIntersection(E!1))"
                                          "u"
                                          "lambda (n:nat): F(E!1(n))"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand
                                               "pointwise_convergence?")
                                              (("1"
                                                (skolem + "y!1")
                                                (("1"
                                                  (expand "F")
                                                  (("1"
                                                    (expand "o ")
                                                    (("1"
                                                      (lemma
                                                       "fm_IIntersection[T1,S1,mu!1]"
                                                       ("X"
                                                        "lambda (n:nat): y_section(E!1(n),y!1)"))
                                                      (("1"
                                                        (expand "y_section" 1)
                                                        (("1"
                                                          (expand "o ")
                                                          (("1"
                                                            (name-replace
                                                             "LHS"
                                                             "LAMBDA (x: nat): mu!1(y_section(E!1(x), y!1))")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (case-replace
                                                                 "IIntersection(LAMBDA
                                     (n: nat):
                                     y_section(E!1(n), y!1))=y_section(IIntersection(E!1), y!1)")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-2 1))
                                                                  (("1"
                                                                    (name-replace
                                                                     "RHS"
                                                                     "mu!1(y_section(IIntersection(E!1), y!1))")
                                                                    (("1"
                                                                      (rewrite
                                                                       "metric_convergence_def")
                                                                      (("1"
                                                                        (expand
                                                                         "metric_converges_to")
                                                                        (("1"
                                                                          (expand
                                                                           "convergence")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "r!1")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "n!1")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "IIntersection")
                                                                      (("2"
                                                                        (expand
                                                                         "y_section")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1 1))
                                                                (("2"
                                                                  (expand
                                                                   "decreasing?")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1"
                                                                       "y!2")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "subset?")
                                                                          (("2"
                                                                            (expand
                                                                             "y_section")
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "(x!2,y!1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst - "n!1")
                                                          (("2"
                                                            (expand "U")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (lemma
                                                                 "y_section_measurable"
                                                                 ("S1"
                                                                  "S1"
                                                                  "S2"
                                                                  "S2"
                                                                  "Z"
                                                                  "E!1(n!1)"
                                                                  "y"
                                                                  "y!1"))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "n!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (inst - "n!1")
                                            (("3"
                                              (expand "U")
                                              (("3" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skosimp)
                        (("2" (typepred "a!1")
                          (("2" (expand "U")
                            (("2" (flatten)
                              (("2" (split)
                                (("1"
                                  (lemma
                                   "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                   ("x" "a!1"))
                                  (("1" (assert) nil nil)) nil)
                                 ("2" (expand "F")
                                  (("2" (expand "y_section")
                                    (("2" (hide -5)
                                      (("2"
                                        (expand "o ")
                                        (("2"
                                          (lemma
                                           "const_measurable[T2,S2]"
                                           ("c" "mu!1(fullset[T1])"))
                                          (("2"
                                            (lemma
                                             "diff_measurable[T2, S2]"
                                             ("g1"
                                              "(LAMBDA (x: T2): mu!1(fullset[T1]))"
                                              "g2"
                                              "(LAMBDA (x: T2): mu!1(y_section(a!1, x)))"))
                                            (("1"
                                              (expand "-")
                                              (("1"
                                                (case-replace
                                                 "(LAMBDA (x_1: T2):
                             mu!1(fullset[T1]) - mu!1(y_section(a!1, x_1)))=(LAMBDA (x: T2): mu!1(y_section(complement(a!1), x)))")
                                                (("1"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (hide-all-but (-3 1))
                                                      (("1"
                                                        (lemma
                                                         "fm_disjointunion[T1,S1,mu!1]"
                                                         ("A"
                                                          "y_section(a!1, x!1)"
                                                          "B"
                                                          "y_section(complement(a!1), x!1)"))
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (case-replace
                                                             "union(y_section(a!1, x!1), y_section(complement(a!1), x!1))=fullset[T1]")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "fullset")
                                                                  (("2"
                                                                    (expand
                                                                     "union")
                                                                    (("2"
                                                                      (expand
                                                                       "complement")
                                                                      (("2"
                                                                        (expand
                                                                         "y_section")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (flatten)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (expand
                                                               "disjoint?")
                                                              (("2"
                                                                (expand
                                                                 "complement")
                                                                (("2"
                                                                  (expand
                                                                   "intersection")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "y_section")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (hide-all-but (-3 1))
                                                      (("2"
                                                        (lemma
                                                         "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                                         ("x" "a!1"))
                                                        (("2"
                                                          (expand "member")
                                                          (("2"
                                                            (lemma
                                                             "y_section_measurable"
                                                             ("S1"
                                                              "S1"
                                                              "S2"
                                                              "S2"
                                                              "Z"
                                                              "complement(a!1)"
                                                              "y"
                                                              "x!1"))
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skosimp)
                                                    (("3"
                                                      (lemma
                                                       "y_section_measurable"
                                                       ("S1"
                                                        "S1"
                                                        "S2"
                                                        "S2"
                                                        "Z"
                                                        "a!1"
                                                        "y"
                                                        "x!1"))
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (lemma
                                                     "y_section_measurable"
                                                     ("S1"
                                                      "S1"
                                                      "S2"
                                                      "S2"
                                                      "Z"
                                                      "complement(a!1)"
                                                      "y"
                                                      "x!1"))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                                         ("x" "a!1"))
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (lemma
                                                 "y_section_measurable"
                                                 ("S1"
                                                  "S1"
                                                  "S2"
                                                  "S2"
                                                  "Z"
                                                  "a!1"
                                                  "y"
                                                  "x!1"))
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("4" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skosimp)
                      (("2" (typepred "a!1")
                        (("2" (typepred "b!1")
                          (("2" (expand "U")
                            (("2" (flatten)
                              (("2" (hide -7)
                                (("2" (split)
                                  (("1"
                                    (lemma
                                     "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                     ("x" "a!1" "y" "b!1"))
                                    (("1" (expand "member")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2"
                                    (lemma "sum_measurable[T2, S2]"
                                     ("g1" "F(a!1)" "g2" "F(b!1)"))
                                    (("1"
                                      (case-replace
                                       "F(union(a!1, b!1))=(reals@real_fun_ops[T2].+)(F(a!1), F(b!1))")
                                      (("1"
                                        (hide-all-but (-6 -8 1))
                                        (("1"
                                          (apply-extensionality :hide? t)
                                          (("1"
                                            (expand "+")
                                            (("1"
                                              (expand "F")
                                              (("1"
                                                (expand "o ")
                                                (("1"
                                                  (expand "y_section")
                                                  (("1"
                                                    (rewrite
                                                     "y_section_union")
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (lemma
                                                         "y_section_disjoint"
                                                         ("X"
                                                          "a!1"
                                                          "Y"
                                                          "b!1"
                                                          "b"
                                                          "x!1"))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "fm_disjointunion[T1,S1,mu!1]"
                                                             ("A"
                                                              "y_section(a!1, x!1)"
                                                              "B"
                                                              "y_section(b!1, x!1)"))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (expand "+")
                                              (("2"
                                                (inst-cp - "x1!1" "a!1")
                                                (("2"
                                                  (inst - "x1!1" "b!1")
                                                  (("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2" (typepred "R!1")
                      (("2" (expand "U")
                        (("2" (hide -2)
                          (("2" (assert)
                            (("2" (split)
                              (("1" (expand "sigma_times")
                                (("1"
                                  (lemma "generated_sigma_algebra_subset1"
                                   ("X" "(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))"))
                                  (("1"
                                    (name-replace "AA"
                                     "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                    (("1" (expand "fullset")
                                      (("1"
                                        (expand "extend")
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst - "R!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -2)
                                (("2" (expand "F")
                                  (("2" (expand "measurable_rectangle?")
                                    (("2" (skosimp)
                                      (("2"
                                        (expand "o ")
                                        (("2"
                                          (lemma
                                           "phi_is_simple[T2,S2]"
                                           ("X" "Y!1"))
                                          (("1"
                                            (expand "simple?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (lemma
                                                   "scal_measurable[T2,S2]"
                                                   ("c"
                                                    "mu!1(X!1)"
                                                    "g"
                                                    "phi[T2,S2](Y!1)"))
                                                  (("1"
                                                    (expand "*" -1)
                                                    (("1"
                                                      (expand "y_section")
                                                      (("1"
                                                        (expand "phi")
                                                        (("1"
                                                          (expand "member")
                                                          (("1"
                                                            (case-replace
                                                             "(LAMBDA (x: T2):
                             mu!1(X!1) * IF Y!1(x) THEN 1 ELSE 0 ENDIF)=(LAMBDA (x: T2): mu!1(y_section(R!1, x)))")
                                                            (("1"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace -3)
                                                                (("1"
                                                                  (expand
                                                                   "cross_product")
                                                                  (("1"
                                                                    (expand
                                                                     "y_section")
                                                                    (("1"
                                                                      (case-replace
                                                                       "Y!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{a: T1 | X!1(a)}=X!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "mu!1")
                                                                          (("2"
                                                                            (expand
                                                                             "finite_measure?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "emptyset")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (expand
                                                                   "y_section")
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "cross_product")
                                                                      (("2"
                                                                        (case-replace
                                                                         "Y!1(x!1)")
                                                                        (("1"
                                                                          (case-replace
                                                                           "{a: T1 | X!1(a)}=X!1")
                                                                          (("1"
                                                                            (apply-extensionality
                                                                             :hide?
                                                                             t)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "S1")
                                                                            (("2"
                                                                              (expand
                                                                               "sigma_algebra?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset_algebra_empty?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "emptyset")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 "y_section")
                                                                (("2"
                                                                  (replace -3)
                                                                  (("2"
                                                                    (expand
                                                                     "cross_product")
                                                                    (("2"
                                                                      (case-replace
                                                                       "Y!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{a: T1 | X!1(a)}=X!1")
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "S1")
                                                                          (("2"
                                                                            (expand
                                                                             "sigma_algebra?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "subset_algebra_empty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skosimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (propax) nil nil)
                                                   ("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (expand "F")
                  (("2"
                    (lemma "y_section_bounded"
                     ("M" "M!2" "mu" "mu!1" "y" "y!1"))
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "F") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "y_section")
          (("2"
            (lemma "y_section_measurable[T1,T2]"
             ("Z" "M!2" "S1" "S1" "S2" "S2" "y" "x1!1"))
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((y_section const-decl "[T2 -> set[T1]]" cross_product topology)
    (set type-eq-decl nil sets nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (scal_measurable judgement-tcc nil measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (simple? const-decl "bool" measure_space nil)
    (disjoint? const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (const_measurable formula-decl nil measure_space nil)
    (diff_measurable judgement-tcc nil measure_space_def nil)
    (sigma_algebra_complement formula-decl nil sigma_algebra nil)
    (monotone? const-decl "bool" subset_algebra_def nil)
    (subset_algebra? const-decl "bool" subset_algebra_def nil)
    (subset_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (rectangle_algebra const-decl "subset_algebra[[T1, T2]]" product_sigma
     nil)
    (sequence type-eq-decl nil sequences nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (empty? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (intersection const-decl "set" sets nil)
    (finite_disjoint_union? const-decl "bool" subset_algebra_def nil)
    (finite_disjoint_unions const-decl "setofsets[T]" subset_algebra_def nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (generated_sigma_algebra_subset2 formula-decl nil subset_algebra_def nil)
    (generated_sigma_algebra const-decl "sigma_algebra" subset_algebra_def
     nil)
    (generated_sigma_algebra_subset1 formula-decl nil subset_algebra_def nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil) (Union const-decl "set" sets nil)
    (finite_disjoint_rectangles formula-decl nil product_sigma nil)
    (monotone_class nonempty-type-eq-decl nil subset_algebra_def nil)
    (monotone_class formula-decl nil subset_algebra_def nil)
    (sigma_algebra_IIntersection formula-decl nil sigma_algebra nil)
    (fm_IIntersection formula-decl nil finite_measure nil)
    (decreasing? const-decl "bool" fun_preds_partial structures)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (sigma_algebra_difference formula-decl nil sigma_algebra nil)
    (y_section const-decl "set[T1]" cross_product topology)
    (disjoint_indexed_measurable? const-decl "bool" generalized_measure_def
     nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (extensionality_postulate formula-decl nil functions nil)
    (sigma def-decl "real" sigma reals)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (difference const-decl "set" sets nil)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (y_section_measurable formula-decl nil product_sigma_def nil)
    (y_section_disjoint formula-decl nil product_sections nil)
    (disjoint_IUnion formula-decl nil nat_indexed_sets sets_aux)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def nil)
    (pointwise_measurable formula-decl nil measure_space nil)
    (sigma_algebra_IUnion formula-decl nil sigma_algebra nil)
    (complement const-decl "set" sets nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (y_section_union formula-decl nil product_sections nil)
    (sum_measurable judgement-tcc nil measure_space_def nil)
    (measurable_rectangle nonempty-type-eq-decl nil product_sigma_def nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (fullset const-decl "set" sets nil))
   shostak)
  (y_section_measurable-1 nil 3455615935
   ("" (skosimp)
    (("" (name "F" "lambda M: mu!1 o y_section(M)")
      (("1" (case-replace "mu!1 o y_section(M!1) = F(M!1)")
        (("1" (hide-all-but 1)
          (("1"
            (case "forall y,M: 0 <= F(M)(y) & F(M)(y) <= mu!1(fullset[T1])")
            (("1"
              (name "U"
                    "{M:set[[T1,T2]] | sigma_times(S1,S2)(M) & measurable_function?[T2,S2](F(M))}")
              (("1" (case "forall (R:measurable_rectangle(S1,S2)): U(R)")
                (("1"
                  (case "FORALL (a, b: (U)): disjoint?(a,b) => U(union(a, b))")
                  (("1" (case "FORALL (a: (U)): U(complement(a))")
                    (("1" (case "monotone?(U)")
                      (("1" (lemma "monotone_class" ("C" "U"))
                        (("1" (typepred "rectangle_algebra")
                          (("1" (typepred "M!1")
                            (("1" (inst -3 "rectangle_algebra")
                              (("1" (split)
                                (("1" (expand "subset?")
                                  (("1" (inst - "M!1")
                                    (("1" (expand "member")
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "U")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "sigma_times" -1)
                                            (("2"
                                              (lemma
                                               "generated_sigma_algebra_subset2"
                                               ("X"
                                                "extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)])"
                                                "Y"
                                                "generated_sigma_algebra(rectangle_algebra)"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (name-replace
                                                     "SA"
                                                     "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                                    (("1"
                                                      (expand "subset?")
                                                      (("1"
                                                        (inst - "M!1")
                                                        (("1"
                                                          (expand "member")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "subset?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand "fullset")
                                                          (("2"
                                                            (expand "extend")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (lemma
                                                                   "generated_sigma_algebra_subset1"
                                                                   ("X"
                                                                    "rectangle_algebra"))
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "rectangle_algebra")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "finite_disjoint_rectangles")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "singleton[(measurable_rectangle?(S1, S2))](x!1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "singleton")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "extend")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "x!1(x!2,x!3)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "a!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x!2")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "y!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "singleton")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (expand "subset?")
                                    (("2" (skosimp)
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (expand "rectangle_algebra")
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand
                                                 "finite_disjoint_unions")
                                                (("2"
                                                  (expand "fullset")
                                                  (("2"
                                                    (expand "extend")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (expand
                                                         "finite_disjoint_union?")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (case
                                                               "forall (n:nat): U(IUnion(n,E!1))")
                                                              (("1"
                                                                (case-replace
                                                                 "IUnion(E!1)=IUnion(n!1, E!1)")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (case-replace
                                                                       "IUnion(E!1)(x!2, x!3)")
                                                                      (("1"
                                                                        (expand
                                                                         "IUnion")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (case
                                                                             "i!1>=n!1")
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "i!1")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -7
                                                                                       "(x!2,x!3)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -5
                                                                               "i!1")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "image")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "Union")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "E!1(i!1)")
                                                                                        (("2"
                                                                                          (inst
                                                                                           +
                                                                                           "i!1")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "IUnion")
                                                                          (("2"
                                                                            (expand
                                                                             "image")
                                                                            (("2"
                                                                              (expand
                                                                               "Union")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "a!1")
                                                                                  (("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "x!4")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -6
                                                                  1
                                                                  -7
                                                                  -3))
                                                                (("2"
                                                                  (induct "n")
                                                                  (("1"
                                                                    (rewrite
                                                                     "IUnion_0_def")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "0")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (case-replace
                                                                           "n!1>0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "E!1(0)")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (rewrite
                                                                               "emptyset_is_empty?")
                                                                              (("2"
                                                                                (replace
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -4
                                                                                   "emptyset")
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "measurable_rectangle?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "emptyset"
                                                                                         "emptyset")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cross_product")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "S1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sigma_algebra?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (typepred
                                                                                             "S2")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma_algebra?")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "subset_algebra_empty?")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (rewrite
                                                                       "IUnion_n_def")
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "IUnion(j!1, E!1)"
                                                                         "E!1(1 + j!1)")
                                                                        (("1"
                                                                          (split
                                                                           -4)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "disjoint?")
                                                                              (("2"
                                                                                (expand
                                                                                 "disjoint?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "intersection")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "IUnion")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "image")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "a!1")
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "n!2")
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "n!2")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "n!2"
                                                                                                         "1+j!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x!2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "1+j!1")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "E!1(1+j!1)")
                                                                              (("2"
                                                                                (hide
                                                                                 2
                                                                                 -1)
                                                                                (("2"
                                                                                  (case-replace
                                                                                   "1 + j!1 < n!1")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "emptyset_is_empty?")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "measurable_rectangle?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "emptyset"
                                                                                               "emptyset")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (apply-extensionality
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "S1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "sigma_algebra?")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "subset_algebra_empty?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (typepred
                                                                                                   "S2")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "sigma_algebra?")
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "subset_algebra_empty?")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "monotone?")
                          (("2" (skosimp)
                            (("2" (expand "member")
                              (("2" (split)
                                (("1" (flatten)
                                  (("1"
                                    (lemma
                                     "sigma_algebra_IUnion[[T1,T2],sigma_times(S1,S2)]"
                                     ("SS" "E!1"))
                                    (("1" (expand "member")
                                      (("1"
                                        (expand "U" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "pointwise_measurable[T2, S2]"
                                             ("f"
                                              "F(IUnion(E!1))"
                                              "u"
                                              "lambda (n:nat): F(E!1(n))"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand
                                                   "pointwise_convergence?")
                                                  (("1"
                                                    (skolem + "y!1")
                                                    (("1"
                                                      (expand "F")
                                                      (("1"
                                                        (expand "o ")
                                                        (("1"
                                                          (expand "y_section")
                                                          (("1"
                                                            (hide -7)
                                                            (("1"
                                                              (typepred
                                                               "mu!1")
                                                              (("1"
                                                                (expand
                                                                 "finite_measure?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "disjoint_IUnion"
                                                                     ("A"
                                                                      "E!1"))
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (case
                                                                         "forall (n:nat): sigma_times(S1, S2)(B!1(n))")
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "lambda (n:nat): y_section(B!1(n), y!1)")
                                                                          (("1"
                                                                            (case-replace
                                                                             "(IUnion(LAMBDA (n: nat): y_section(B!1(n), y!1)))=y_section(IUnion(E!1), y!1)")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (name-replace
                                                                                 "RHS"
                                                                                 "mu!1(y_section(IUnion(E!1), y!1))")
                                                                                (("1"
                                                                                  (expand
                                                                                   "o ")
                                                                                  (("1"
                                                                                    (case
                                                                                     "forall (n:nat): IUnion(n, E!1)=E!1(n)")
                                                                                    (("1"
                                                                                      (case
                                                                                       "forall (n:nat): series(LAMBDA (x: nat): mu!1(y_section(B!1(x), y!1)))(n)= mu!1(y_section(E!1(n), y!1))")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "extensionality_postulate"
                                                                                         ("f"
                                                                                          "series(LAMBDA (x: nat): mu!1(y_section(B!1(x), y!1)))"
                                                                                          "g"
                                                                                          "lambda (n:nat): mu!1(y_section(E!1(n), y!1))"))
                                                                                        (("1"
                                                                                          (flatten
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "LHS"
                                                                                                     "LAMBDA (n: nat): mu!1(y_section(E!1(n), y!1))")
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-10
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "metric_convergence_def")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "convergence")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "metric_converges_to")
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "r!1")
                                                                                                                (("1"
                                                                                                                  (skosimp)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     +
                                                                                                                     "n!1")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "i!1")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "member")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ball")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!1")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (induct
                                                                                           "n")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "series")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "series")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sigma"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -6
                                                                                                       "j!1")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "j!1")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "fm_disjointunion[T1,S1,mu!1]"
                                                                                                               ("A"
                                                                                                                "y_section(difference(E!1(j!1 + 1), E!1(j!1)), y!1)"
                                                                                                                "B"
                                                                                                                "y_section(E!1(j!1), y!1)"))
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (case-replace
                                                                                                                   "union(y_section(difference(E!1(j!1 + 1), E!1(j!1)), y!1),
                 y_section(E!1(j!1), y!1))=y_section(E!1(1 + j!1), y!1)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-12
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "difference")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "y_section")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "union")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "member")
                                                                                                                              (("2"
                                                                                                                                (case-replace
                                                                                                                                 "E!1(1 + j!1)(x!1, y!1)")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "increasing?")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "j!1"
                                                                                                                                       "1+j!1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "subset?")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "(x!1,y!1)")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (1
                                                                                                                    -11))
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "difference")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "y_section")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "disjoint?")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "intersection")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "increasing?")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "subset?")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "member")
                                                                                                                                  (("2"
                                                                                                                                    (skosimp)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -12
                                                                                               "n!2")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "U")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (lemma
                                                                                                     "y_section_measurable"
                                                                                                     ("S1"
                                                                                                      "S1"
                                                                                                      "S2"
                                                                                                      "S2"
                                                                                                      "Z"
                                                                                                      "E!1(n!2)"
                                                                                                      "y"
                                                                                                      "y!1"))
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (skosimp)
                                                                                            (("4"
                                                                                              (inst
                                                                                               -
                                                                                               "x!1")
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 "y_section_measurable"
                                                                                                 ("S1"
                                                                                                  "S1"
                                                                                                  "S2"
                                                                                                  "S2"
                                                                                                  "Z"
                                                                                                  "B!1(x!1)"
                                                                                                  "y"
                                                                                                  "y!1"))
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skosimp)
                                                                                        (("3"
                                                                                          (inst
                                                                                           -12
                                                                                           "n!1")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "U"
                                                                                             -12)
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "y_section_measurable"
                                                                                                 ("S1"
                                                                                                  "S1"
                                                                                                  "S2"
                                                                                                  "S2"
                                                                                                  "Z"
                                                                                                  "E!1(n!1)"
                                                                                                  "y"
                                                                                                  "y!1"))
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skosimp)
                                                                                        (("4"
                                                                                          (inst
                                                                                           -2
                                                                                           "x!1")
                                                                                          (("4"
                                                                                            (lemma
                                                                                             "y_section_measurable"
                                                                                             ("S1"
                                                                                              "S1"
                                                                                              "S2"
                                                                                              "S2"
                                                                                              "Z"
                                                                                              "B!1(x!1)"
                                                                                              "y"
                                                                                              "y!1"))
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-10
                                                                                        1))
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "IUnion")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "image")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Union")
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   "E!1(n!1)(x!1, x!2)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "E!1(n!1)")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "n!1")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "a!1")
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -
                                                                                                           "n!2")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "increasing?")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "n!2"
                                                                                                               "n!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "subset?")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "(x!1,x!2)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply-extensionality
                                                                               :hide?
                                                                               t)
                                                                              (("2"
                                                                                (replace
                                                                                 -6)
                                                                                (("2"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "y_section")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "disjoint_indexed_measurable?")
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-2
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "disjoint?")
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "i!1"
                                                                                     "j!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "y_section_disjoint"
                                                                                         ("X"
                                                                                          "B!1(i!1)"
                                                                                          "Y"
                                                                                          "B!1(j!1)"
                                                                                          "b"
                                                                                          "y!1"))
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (inst
                                                                               -
                                                                               "n!1")
                                                                              (("3"
                                                                                (lemma
                                                                                 "y_section_measurable"
                                                                                 ("S1"
                                                                                  "S1"
                                                                                  "S2"
                                                                                  "S2"
                                                                                  "Z"
                                                                                  "B!1(n!1)"
                                                                                  "y"
                                                                                  "y!1"))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -7
                                                                           2
                                                                           -14)
                                                                          (("2"
                                                                            (induct
                                                                             "n")
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -9
                                                                                   "0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "U")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 -5
                                                                                 "j!1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "IUnion(j!1, E!1)=E!1(j!1)")
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -11
                                                                                       "j!1")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -11
                                                                                         "j!1+1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "U")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "sigma_algebra_difference[[T1,T2],sigma_times(S1, S2)]"
                                                                                               ("x"
                                                                                                "E!1(j!1 + 1)"
                                                                                                "y"
                                                                                                "E!1(j!1)"))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (1
                                                                                        -9))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (case-replace
                                                                                             "E!1(j!1)(x!1, x!2)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "IUnion")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "image")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Union")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "E!1(j!1)")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "j!1")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "IUnion")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "image")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "Union")
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "a!1")
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -
                                                                                                           "n!1")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "increasing?")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "n!1")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "n!1"
                                                                                                                     "j!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "subset?")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "(x!1,x!2)")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (inst -3 "n!1")
                                                (("2"
                                                  (expand "U")
                                                  (("2" (flatten) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skosimp)
                                      (("2"
                                        (inst - "x1!1")
                                        (("2"
                                          (expand "U")
                                          (("2" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (expand "U" 1)
                                    (("2" (split)
                                      (("1"
                                        (lemma
                                         "sigma_algebra_IIntersection[[T1,T2],sigma_times(S1,S2)]"
                                         ("SS" "E!1"))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "x1!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "pointwise_measurable[T2, S2]"
                                         ("f"
                                          "F(IIntersection(E!1))"
                                          "u"
                                          "lambda (n:nat): F(E!1(n))"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand
                                               "pointwise_convergence?")
                                              (("1"
                                                (skolem + "y!1")
                                                (("1"
                                                  (expand "F")
                                                  (("1"
                                                    (expand "o ")
                                                    (("1"
                                                      (lemma
                                                       "fm_IIntersection[T1,S1,mu!1]"
                                                       ("X"
                                                        "lambda (n:nat): y_section(E!1(n),y!1)"))
                                                      (("1"
                                                        (expand "y_section" 1)
                                                        (("1"
                                                          (expand "o ")
                                                          (("1"
                                                            (name-replace
                                                             "LHS"
                                                             "LAMBDA (x: nat): mu!1(y_section(E!1(x), y!1))")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (case-replace
                                                                 "IIntersection(LAMBDA
                                     (n: nat):
                                     y_section(E!1(n), y!1))=y_section(IIntersection(E!1), y!1)")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-2 1))
                                                                  (("1"
                                                                    (name-replace
                                                                     "RHS"
                                                                     "mu!1(y_section(IIntersection(E!1), y!1))")
                                                                    (("1"
                                                                      (rewrite
                                                                       "metric_convergence_def")
                                                                      (("1"
                                                                        (expand
                                                                         "metric_converges_to")
                                                                        (("1"
                                                                          (expand
                                                                           "convergence")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "r!1")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "n!1")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "IIntersection")
                                                                      (("2"
                                                                        (expand
                                                                         "y_section")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1 1))
                                                                (("2"
                                                                  (expand
                                                                   "decreasing?")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1"
                                                                       "y!2")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "subset?")
                                                                          (("2"
                                                                            (expand
                                                                             "y_section")
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "(x!2,y!1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst - "n!1")
                                                          (("2"
                                                            (expand "U")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (lemma
                                                                 "y_section_measurable"
                                                                 ("S1"
                                                                  "S1"
                                                                  "S2"
                                                                  "S2"
                                                                  "Z"
                                                                  "E!1(n!1)"
                                                                  "y"
                                                                  "y!1"))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "n!1")
                                            (("2"
                                              (expand "U")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (inst - "n!1")
                                            (("3"
                                              (expand "U")
                                              (("3" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skosimp)
                        (("2" (typepred "a!1")
                          (("2" (expand "U")
                            (("2" (flatten)
                              (("2" (split)
                                (("1"
                                  (lemma
                                   "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                   ("x" "a!1"))
                                  (("1" (assert) nil nil)) nil)
                                 ("2" (expand "F")
                                  (("2" (expand "y_section")
                                    (("2" (hide -5)
                                      (("2"
                                        (expand "o ")
                                        (("2"
                                          (lemma
                                           "const_measurable[T2,S2]"
                                           ("c" "mu!1(fullset[T1])"))
                                          (("2"
                                            (lemma
                                             "diff_measurable[T2, S2]"
                                             ("g1"
                                              "(LAMBDA (x: T2): mu!1(fullset[T1]))"
                                              "g2"
                                              "(LAMBDA (x: T2): mu!1(y_section(a!1, x)))"))
                                            (("1"
                                              (expand "-")
                                              (("1"
                                                (case-replace
                                                 "(LAMBDA (x_1: T2):
                             mu!1(fullset[T1]) - mu!1(y_section(a!1, x_1)))=(LAMBDA (x: T2): mu!1(y_section(complement(a!1), x)))")
                                                (("1"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (hide-all-but (-3 1))
                                                      (("1"
                                                        (lemma
                                                         "fm_disjointunion[T1,S1,mu!1]"
                                                         ("A"
                                                          "y_section(a!1, x!1)"
                                                          "B"
                                                          "y_section(complement(a!1), x!1)"))
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (case-replace
                                                             "union(y_section(a!1, x!1), y_section(complement(a!1), x!1))=fullset[T1]")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "fullset")
                                                                  (("2"
                                                                    (expand
                                                                     "union")
                                                                    (("2"
                                                                      (expand
                                                                       "complement")
                                                                      (("2"
                                                                        (expand
                                                                         "y_section")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (flatten)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (expand
                                                               "disjoint?")
                                                              (("2"
                                                                (expand
                                                                 "complement")
                                                                (("2"
                                                                  (expand
                                                                   "intersection")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "y_section")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (hide-all-but (-3 1))
                                                      (("2"
                                                        (lemma
                                                         "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                                         ("x" "a!1"))
                                                        (("2"
                                                          (expand "member")
                                                          (("2"
                                                            (lemma
                                                             "y_section_measurable"
                                                             ("S1"
                                                              "S1"
                                                              "S2"
                                                              "S2"
                                                              "Z"
                                                              "complement(a!1)"
                                                              "y"
                                                              "x!1"))
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skosimp)
                                                    (("3"
                                                      (lemma
                                                       "y_section_measurable"
                                                       ("S1"
                                                        "S1"
                                                        "S2"
                                                        "S2"
                                                        "Z"
                                                        "a!1"
                                                        "y"
                                                        "x!1"))
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (lemma
                                                     "y_section_measurable"
                                                     ("S1"
                                                      "S1"
                                                      "S2"
                                                      "S2"
                                                      "Z"
                                                      "complement(a!1)"
                                                      "y"
                                                      "x!1"))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "sigma_algebra_complement[[T1,T2],sigma_times(S1, S2)]"
                                                         ("x" "a!1"))
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (lemma
                                                 "y_section_measurable"
                                                 ("S1"
                                                  "S1"
                                                  "S2"
                                                  "S2"
                                                  "Z"
                                                  "a!1"
                                                  "y"
                                                  "x!1"))
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("4" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skosimp)
                      (("2" (typepred "a!1")
                        (("2" (typepred "b!1")
                          (("2" (expand "U")
                            (("2" (flatten)
                              (("2" (hide -7)
                                (("2" (split)
                                  (("1"
                                    (lemma
                                     "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                     ("x" "a!1" "y" "b!1"))
                                    (("1" (expand "member")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2"
                                    (lemma "sum_measurable[T2, S2]"
                                     ("g1" "F(a!1)" "g2" "F(b!1)"))
                                    (("1"
                                      (case-replace
                                       "F(union(a!1, b!1))=(reals@real_fun_ops[T2].+)(F(a!1), F(b!1))")
                                      (("1"
                                        (hide-all-but (-6 -8 1))
                                        (("1"
                                          (apply-extensionality :hide? t)
                                          (("1"
                                            (expand "+")
                                            (("1"
                                              (expand "F")
                                              (("1"
                                                (expand "o ")
                                                (("1"
                                                  (expand "y_section")
                                                  (("1"
                                                    (rewrite
                                                     "y_section_union")
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (lemma
                                                         "y_section_disjoint"
                                                         ("X"
                                                          "a!1"
                                                          "Y"
                                                          "b!1"
                                                          "b"
                                                          "x!1"))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "fm_disjointunion[T1,S1,mu!1]"
                                                             ("A"
                                                              "y_section(a!1, x!1)"
                                                              "B"
                                                              "y_section(b!1, x!1)"))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (expand "+")
                                              (("2"
                                                (inst-cp - "x1!1" "a!1")
                                                (("2"
                                                  (inst - "x1!1" "b!1")
                                                  (("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2" (typepred "R!1")
                      (("2" (expand "U")
                        (("2" (hide -2)
                          (("2" (assert)
                            (("2" (split)
                              (("1" (expand "sigma_times")
                                (("1"
                                  (lemma "generated_sigma_algebra_subset1"
                                   ("X" "(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))"))
                                  (("1"
                                    (name-replace "AA"
                                     "generated_sigma_algebra(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))")
                                    (("1" (expand "fullset")
                                      (("1"
                                        (expand "extend")
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst - "R!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -2)
                                (("2" (expand "F")
                                  (("2" (expand "measurable_rectangle?")
                                    (("2" (skosimp)
                                      (("2"
                                        (expand "o ")
                                        (("2"
                                          (lemma
                                           "phi_is_simple[T2,S2]"
                                           ("X" "Y!1"))
                                          (("1"
                                            (expand "simple?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (lemma
                                                   "scal_measurable[T2,S2]"
                                                   ("c"
                                                    "mu!1(X!1)"
                                                    "g"
                                                    "phi[T2,S2](Y!1)"))
                                                  (("1"
                                                    (expand "*" -1)
                                                    (("1"
                                                      (expand "y_section")
                                                      (("1"
                                                        (expand "phi")
                                                        (("1"
                                                          (expand "member")
                                                          (("1"
                                                            (case-replace
                                                             "(LAMBDA (x: T2):
                             mu!1(X!1) * IF Y!1(x) THEN 1 ELSE 0 ENDIF)=(LAMBDA (x: T2): mu!1(y_section(R!1, x)))")
                                                            (("1"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace -3)
                                                                (("1"
                                                                  (expand
                                                                   "cross_product")
                                                                  (("1"
                                                                    (expand
                                                                     "y_section")
                                                                    (("1"
                                                                      (case-replace
                                                                       "Y!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{a: T1 | X!1(a)}=X!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "mu!1")
                                                                          (("2"
                                                                            (expand
                                                                             "finite_measure?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "emptyset")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (expand
                                                                   "y_section")
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "cross_product")
                                                                      (("2"
                                                                        (case-replace
                                                                         "Y!1(x!1)")
                                                                        (("1"
                                                                          (case-replace
                                                                           "{a: T1 | X!1(a)}=X!1")
                                                                          (("1"
                                                                            (apply-extensionality
                                                                             :hide?
                                                                             t)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "S1")
                                                                            (("2"
                                                                              (expand
                                                                               "sigma_algebra?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset_algebra_empty?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "emptyset")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 "y_section")
                                                                (("2"
                                                                  (replace -3)
                                                                  (("2"
                                                                    (expand
                                                                     "cross_product")
                                                                    (("2"
                                                                      (case-replace
                                                                       "Y!1(x!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "{a: T1 | X!1(a)}=X!1")
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "S1")
                                                                          (("2"
                                                                            (expand
                                                                             "sigma_algebra?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "subset_algebra_empty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skosimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (propax) nil nil)
                                                   ("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (expand "F")
                  (("2"
                    (lemma "y_section_bounded"
                     ("M" "M!2" "mu" "mu!1" "y" "y!1"))
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "F") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "y_section")
          (("2"
            (lemma "y_section_measurable[T1,T2]"
             ("Z" "M!2" "S1" "S1" "S2" "S2" "y" "x1!1"))
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (measurable_rectangle nonempty-type-eq-decl nil product_sigma_def nil)
    (sum_measurable judgement-tcc nil measure_space_def nil)
    (y_section_union formula-decl nil product_sections nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (complement const-decl "set" sets nil)
    (sigma_algebra_IUnion formula-decl nil sigma_algebra nil)
    (pointwise_measurable formula-decl nil measure_space nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (disjoint_IUnion formula-decl nil nat_indexed_sets sets_aux)
    (y_section_disjoint formula-decl nil product_sections nil)
    (y_section_measurable formula-decl nil product_sigma_def nil)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (difference const-decl "set" sets nil)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (sigma def-decl "real" sigma reals)
    (extensionality_postulate formula-decl nil functions nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (convergence const-decl "bool" convergence_sequences analysis)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool" generalized_measure_def
     nil)
    (y_section const-decl "set[T1]" cross_product topology)
    (sigma_algebra_difference formula-decl nil sigma_algebra nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (decreasing? const-decl "bool" fun_preds_partial structures)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (metric? const-decl "bool" metric_def metric_space)
    (fm_IIntersection formula-decl nil finite_measure nil)
    (sigma_algebra_IIntersection formula-decl nil sigma_algebra nil)
    (monotone_class formula-decl nil subset_algebra_def nil)
    (monotone_class nonempty-type-eq-decl nil subset_algebra_def nil)
    (finite_disjoint_rectangles formula-decl nil product_sigma nil)
    (Union const-decl "set" sets nil) (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (generated_sigma_algebra_subset1 formula-decl nil subset_algebra_def nil)
    (generated_sigma_algebra const-decl "sigma_algebra" subset_algebra_def
     nil)
    (generated_sigma_algebra_subset2 formula-decl nil subset_algebra_def nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (finite_disjoint_unions const-decl "setofsets[T]" subset_algebra_def nil)
    (finite_disjoint_union? const-decl "bool" subset_algebra_def nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (sequence type-eq-decl nil sequences nil)
    (rectangle_algebra const-decl "subset_algebra[[T1, T2]]" product_sigma
     nil)
    (subset_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (subset_algebra? const-decl "bool" subset_algebra_def nil)
    (monotone? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra_complement formula-decl nil sigma_algebra nil)
    (diff_measurable judgement-tcc nil measure_space_def nil)
    (const_measurable formula-decl nil measure_space nil)
    (union const-decl "set" sets nil) (disjoint? const-decl "bool" sets nil)
    (simple? const-decl "bool" measure_space nil)
    (phi const-decl "nat" measure_space nil)
    (scal_measurable judgement-tcc nil measure_space_def nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (set type-eq-decl nil sets nil)
    (y_section const-decl "[T2 -> set[T1]]" cross_product topology))
   shostak))
 (x_section_integrable 0
  (x_section_integrable-1 nil 3449893818
   ("" (skosimp)
    (("" (lemma "x_section_measurable" ("nu" "nu!1" "M" "M!1"))
      ((""
        (lemma "nn_integrable_le[T1, S1, to_measure(mu!1)]"
         ("g" "nu!1 o x_section(M!1)"))
        (("1" (inst - "lambda (x:T1): nu!1(fullset[T2])")
          (("1" (split -1)
            (("1" (flatten)
              (("1" (hide -2 -3)
                (("1"
                  (lemma
                   "nn_integrable_is_integrable[T1, S1, to_measure(mu!1)]")
                  (("1" (inst - "nu!1 o x_section(M!1)") nil nil)) nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (expand "o")
                  (("2" (assert)
                    (("2" (split)
                      (("1" (assert) nil nil)
                       ("2"
                        (lemma "m_monotone[T2, S2, to_measure(nu!1)]"
                         ("a" "x_section(M!1)(x!1)" "b" "fullset[T2]"))
                        (("1" (split -1)
                          (("1" (expand "to_measure")
                            (("1" (expand "x_le") (("1" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (expand "subset?")
                              (("2" (expand "fullset")
                                (("2" (expand "member")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2 -1)
                          (("2" (expand "measurable_set?")
                            (("2" (propax) nil nil)) nil))
                          nil)
                         ("3" (hide 2)
                          (("3"
                            (lemma "x_section_measurable[T1,T2]"
                             ("Z" "M!1" "S1" "S1" "S2" "S2" "x" "x!1"))
                            (("3" (expand "member")
                              (("3" (expand "measurable_set?")
                                (("3" (expand "x_section" 1)
                                  (("3" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 2)
            (("2" (lemma "nn_isf_is_nn_integrable[T1, S1, to_measure(mu!1)]")
              (("2" (inst - "LAMBDA (x: T1): nu!1(fullset[T2])")
                (("1" (flatten) nil nil)
                 ("2" (hide 2)
                  (("2" (expand "nn_isf?")
                    (("2" (split)
                      (("1" (expand "isf?")
                        (("1" (split)
                          (("1"
                            (lemma "simple_const[T1,S1]"
                             ("c" "nu!1(fullset[T2])"))
                            (("1" (propax) nil nil)) nil)
                           ("2" (expand "mu_fin?")
                            (("2" (expand "to_measure")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2" (typepred "nu!1") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   ((finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (x_section_measurable formula-decl nil product_finite_measure nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (x_section const-decl "[T1 -> set[T2]]" cross_product topology)
    (set type-eq-decl nil sets nil) (O const-decl "T3" function_props nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (nn_integrable_le formula-decl nil nn_integral nil)
    (subset_algebra_fullset name-judgement "(S2)" product_finite_measure nil)
    (mu!1 skolem-const-decl "finite_measure[T1, S1]" product_finite_measure
     nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nu!1 skolem-const-decl "finite_measure[T2, S2]" product_finite_measure
     nil)
    (fullset const-decl "set" sets nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (M!1 skolem-const-decl "(sigma_times(S1, S2))" product_finite_measure nil)
    (nn_integrable_is_integrable judgement-tcc nil integral nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (m_monotone formula-decl nil measure_props nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (x_section_measurable formula-decl nil product_sigma_def nil)
    (nn_isf_is_nn_integrable judgement-tcc nil nn_integral nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (isf? const-decl "bool" isf nil) (isf nonempty-type-eq-decl nil isf nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (simple_const formula-decl nil measure_space nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (y_section_integrable 0
  (y_section_integrable-1 nil 3449899886
   ("" (skosimp)
    ((""
      (lemma "nn_integrable_le[T2, S2, to_measure(nu!1)]"
       ("g" "mu!1 o y_section(M!1)" "f" "lambda (x:T2): mu!1(fullset[T1])"))
      (("1" (split -1)
        (("1" (flatten)
          (("1"
            (lemma "nn_integrable_is_integrable[T2, S2, to_measure(nu!1)]")
            (("1" (inst - "mu!1 o y_section(M!1)") nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp)
            (("2" (expand "o")
              (("2" (split)
                (("1" (assert) nil nil)
                 ("2" (expand "y_section")
                  (("2"
                    (lemma "m_monotone[T1,S1,to_measure(mu!1)]"
                     ("a" "y_section(M!1, x!1)" "b" "fullset[T1]"))
                    (("1" (split -1)
                      (("1" (expand "to_measure")
                        (("1" (expand "x_le") (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "subset?")
                          (("2" (expand "fullset")
                            (("2" (expand "member") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "measurable_set?")
                        (("2" (propax) nil nil)) nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (expand "measurable_set?")
                        (("3"
                          (lemma "y_section_measurable[T1,T2]"
                           ("Z" "M!1" "S1" "S1" "S2" "S2" "y" "x!1"))
                          (("3" (expand "member") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (rewrite "y_section_measurable") nil nil)) nil)
       ("3" (hide 2)
        (("3" (lemma "nn_isf_is_nn_integrable[T2, S2, to_measure(nu!1)]")
          (("3" (inst - "LAMBDA (x: T2): mu!1(fullset[T1])")
            (("1" (flatten) nil nil)
             ("2" (hide 2)
              (("2" (expand "nn_isf?")
                (("2" (split)
                  (("1" (expand "isf?")
                    (("1" (expand "mu_fin?")
                      (("1" (expand "to_measure")
                        (("1"
                          (lemma "simple_const[T2,S2]"
                           ("c" "mu!1(fullset[T1])"))
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (simple_const formula-decl nil measure_space nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (mu!1 skolem-const-decl "finite_measure[T1, S1]" product_finite_measure
     nil)
    (isf? const-decl "bool" isf nil)
    (nu!1 skolem-const-decl "finite_measure[T2, S2]" product_finite_measure
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nn_isf_is_nn_integrable judgement-tcc nil nn_integral nil)
    (y_section_measurable formula-decl nil product_finite_measure nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (y_section_measurable formula-decl nil product_sigma_def nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (y_section const-decl "set[T1]" cross_product topology)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (m_monotone formula-decl nil measure_props nil)
    (nn_integrable_is_integrable judgement-tcc nil integral nil)
    (subset_algebra_fullset name-judgement "(S1)" product_finite_measure nil)
    (nn_integrable_le formula-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def nil)
    (O const-decl "T3" function_props nil)
    (y_section const-decl "[T2 -> set[T1]]" cross_product topology)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil))
   shostak))
 (rectangle_measure1_TCC1 0
  (rectangle_measure1_TCC1-1 nil 3450064940
   ("" (skosimp) (("" (rewrite "x_section_integrable") nil nil)) nil)
   ((x_section_integrable formula-decl nil product_finite_measure nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil))
   nil
   (rectangle_measure1 subtype
    "function_props[product_finite_measure.T1, (product_finite_measure.S2), nnreal].o(product_finite_measure.nu, cross_product[product_finite_measure.T1, product_finite_measure.T2].x_section(product_finite_measure.M))"
    "integrable[T1, S1, to_measure[T1, S1](mu)]")))
 (rectangle_measure1 0
  (rectangle_measure1-1 nil 3450065087
   ("" (skosimp)
    (("" (expand "o ")
      (("" (expand "x_section")
        ((""
          (case-replace
           "(LAMBDA (x: T1): nu!1(x_section(M!1, x))) = lambda x: phi[T1,S1](X!1)(x)* nu!1(Y!1)")
          (("1" (hide -1)
            (("1"
              (lemma "integral_scal[T1, S1, to_measure(mu!1)]"
               ("c" "nu!1(Y!1)" "f" "phi[T1, S1](X!1)"))
              (("1"
                (lemma "integral_phi[T1, S1, to_measure(mu!1)]" ("F" "X!1"))
                (("1" (expand "mu" -1)
                  (("1" (expand "to_measure")
                    (("1" (replace -1)
                      (("1" (expand "*")
                        (("1" (expand "phi")
                          (("1" (expand "member")
                            (("1" (hide -1)
                              (("1" (expand "integral")
                                (("1"
                                  (case-replace "(LAMBDA (x: T1):
                       nu!1(Y!1) * IF X!1(x) THEN 1 ELSE 0 ENDIF)=(LAMBDA x: IF X!1(x) THEN 1 ELSE 0 ENDIF * nu!1(Y!1))")
                                  (("1" (replace -2 1)
                                    (("1" (assert) nil nil)) nil)
                                   ("2" (apply-extensionality :hide? t)
                                    (("2" (case-replace "X!1(x!1)")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "mu_fin?")
                  (("2" (expand "to_measure")
                    (("2" (expand "measurable_set?") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "isf_phi[T1, S1, to_measure(mu!1)]" ("E" "X!1"))
                  (("1" (lemma "isf_is_integrable[T1, S1, to_measure(mu!1)]")
                    (("1" (inst - "phi[T1, S1](X!1)") nil nil)) nil)
                   ("2" (expand "mu_fin?")
                    (("2" (expand "to_measure")
                      (("2" (expand "measurable_set?")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (apply-extensionality :hide? t)
              (("1" (expand "x_section")
                (("1" (replace -1)
                  (("1" (expand "cross_product")
                    (("1" (hide -1)
                      (("1" (expand "phi")
                        (("1" (expand "member")
                          (("1" (case-replace "X!1(x!1)")
                            (("1" (case-replace "{y: T2 | Y!1(y)}=Y!1")
                              (("1" (assert) nil nil)
                               ("2" (apply-extensionality :hide? t) nil nil))
                              nil)
                             ("2" (assert)
                              (("2" (typepred "nu!1")
                                (("2" (expand "finite_measure?")
                                  (("2" (expand "emptyset")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2"
                  (lemma "x_section_measurable[T1,T2]"
                   ("x" "x!1" "Z" "M!1" "S1" "S1" "S2" "S2"))
                  (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("3" (skosimp)
            (("3"
              (lemma "x_section_measurable[T1,T2]"
               ("x" "x!1" "Z" "M!1" "S1" "S1" "S2" "S2"))
              (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (M!1 skolem-const-decl "(sigma_times(S1, S2))" product_finite_measure nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (x_section_measurable formula-decl nil product_sigma_def nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integral_scal formula-decl nil integral nil)
    (integral_phi formula-decl nil integral nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (member const-decl "bool" sets nil)
    (integral const-decl "real" integral nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (mu const-decl "nnreal" measure_props nil)
    (isf_is_integrable judgement-tcc nil integral nil)
    (X!1 skolem-const-decl "(S1)" product_finite_measure nil)
    (mu!1 skolem-const-decl "finite_measure[T1, S1]" product_finite_measure
     nil)
    (isf? const-decl "bool" isf nil) (isf nonempty-type-eq-decl nil isf nil)
    (isf_phi judgement-tcc nil isf nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (x_section const-decl "set[T2]" cross_product topology)
    (set type-eq-decl nil sets nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (x_section const-decl "[T1 -> set[T2]]" cross_product topology))
   shostak))
 (rectangle_measure2_TCC1 0
  (rectangle_measure2_TCC1-1 nil 3450064940
   ("" (skosimp) (("" (rewrite "y_section_integrable") nil nil)) nil)
   ((y_section_integrable formula-decl nil product_finite_measure nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil))
   nil
   (rectangle_measure2 subtype
    "function_props[product_finite_measure.T2, (product_finite_measure.S1), nnreal].o(product_finite_measure.mu, cross_product[product_finite_measure.T1, product_finite_measure.T2].y_section(product_finite_measure.M))"
    "integrable[T2, S2, to_measure[T2, S2](nu)]")))
 (rectangle_measure2 0
  (rectangle_measure2-1 nil 3450066860
   ("" (skosimp)
    (("" (expand "o ")
      (("" (expand "y_section")
        ((""
          (case-replace
           "(LAMBDA y: mu!1(y_section(M!1, y))) = lambda y: phi[T2,S2](Y!1)(y)* mu!1(X!1)")
          (("1" (hide -1)
            (("1" (hide -1)
              (("1" (lemma "isf_phi[T2, S2, to_measure(nu!1)]" ("E" "Y!1"))
                (("1" (lemma "isf_is_integrable[T2, S2, to_measure(nu!1)]")
                  (("1" (inst - "phi[T2,S2](Y!1)")
                    (("1" (hide -2)
                      (("1"
                        (lemma "integral_phi[T2, S2, to_measure(nu!1)]"
                         ("F" "Y!1"))
                        (("1"
                          (lemma "integral_scal[T2, S2, to_measure(nu!1)]"
                           ("c" "mu!1(X!1)" "f" "phi[T2, S2](Y!1)"))
                          (("1" (expand "*")
                            (("1"
                              (case-replace
                               "(LAMBDA (x: T2): mu!1(X!1) * phi[T2, S2](Y!1)(x))=(LAMBDA y: phi[T2, S2](Y!1)(y) * mu!1(X!1))")
                              (("1" (replace -2)
                                (("1" (replace -3)
                                  (("1" (expand "mu")
                                    (("1" (expand "to_measure")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but 1)
                                (("2" (apply-extensionality :hide? t) nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "measurable_set?")
                  (("2" (expand "mu_fin?")
                    (("2" (expand "to_measure") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (apply-extensionality :hide? t)
            (("1" (replace -1)
              (("1" (hide-all-but 1)
                (("1" (expand "cross_product")
                  (("1" (expand "y_section")
                    (("1" (expand "phi")
                      (("1" (expand "member")
                        (("1" (case-replace "Y!1(x!1)")
                          (("1" (case-replace "{x_1: T1 | X!1(x_1)}=X!1")
                            (("1" (assert) nil nil)
                             ("2" (apply-extensionality :hide? t) nil nil))
                            nil)
                           ("2" (assert)
                            (("2" (typepred "mu!1")
                              (("2" (expand "finite_measure?")
                                (("2" (expand "emptyset")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2"
                (lemma "y_section_measurable[T1,T2]"
                 ("Z" "M!1" "y" "y!1" "S1" "S1" "S2" "S2"))
                (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (skosimp)
            (("3"
              (lemma "y_section_measurable[T1,T2]"
               ("Z" "M!1" "y" "y!1" "S1" "S1" "S2" "S2"))
              (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (y_section_measurable formula-decl nil product_sigma_def nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (emptyset const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (M!1 skolem-const-decl "(sigma_times(S1, S2))" product_finite_measure nil)
    (isf_is_integrable judgement-tcc nil integral nil)
    (integral_scal formula-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (mu const-decl "nnreal" measure_props nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integral_phi formula-decl nil integral nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (Y!1 skolem-const-decl "(S2)" product_finite_measure nil)
    (isf? const-decl "bool" isf nil)
    (nu!1 skolem-const-decl "finite_measure[T2, S2]" product_finite_measure
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (mu_fin? const-decl "bool" measure_props nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (isf_phi judgement-tcc nil isf nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (y_section const-decl "set[T1]" cross_product topology)
    (set type-eq-decl nil sets nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (y_section const-decl "[T2 -> set[T1]]" cross_product topology))
   shostak))
 (fm_times_TCC1 0
  (fm_times_TCC1-1 nil 3431017313
   ("" (skosimp) (("" (rewrite "x_section_integrable") nil nil)) nil)
   ((x_section_integrable formula-decl nil product_finite_measure nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil))
   nil
   (fm_times subtype
    "function_props[product_finite_measure.T1, (product_finite_measure.S2), nnreal].o(product_finite_measure.nu, cross_product[product_finite_measure.T1, product_finite_measure.T2].x_section(product_finite_measure.M))"
    "integrable[T1, S1, to_measure[T1, S1](mu)]")))
 (fm_times_TCC2 0
  (fm_times_TCC2-1 nil 3431017313
   ("" (skosimp)
    (("" (expand "o")
      ((""
        (lemma "integral_nonneg[T1, S1, to_measure[T1, S1](mu!1)]"
         ("f" "LAMBDA (x: T1): nu!1(x_section[T1, T2](M!1)(x))"))
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide -1 2) (("2" (skosimp) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "fm_times_TCC1" ("mu" "mu!1" "nu" "nu!1" "M" "M!1"))
            (("2" (expand "o") (("2" (propax) nil nil)) nil)) nil))
          nil)
         ("3" (hide 2)
          (("3" (skosimp)
            (("3" (expand "x_section")
              (("3"
                (lemma "x_section_measurable[T1,T2]"
                 ("Z" "M!1" "S1" "S1" "S2" "S2" "x" "x!1"))
                (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (x_section const-decl "[T1 -> set[T2]]" cross_product topology)
    (set type-eq-decl nil sets nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integral_nonneg formula-decl nil integral nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (fm_times_TCC1 subtype-tcc nil product_finite_measure nil)
    (x_section_measurable formula-decl nil product_sigma_def nil)
    (member const-decl "bool" sets nil))
   nil
   (fm_times subtype
    "integral[product_finite_measure.T1, product_finite_measure.S1, generalized_measure_def[product_finite_measure.T1, product_finite_measure.S1].to_measure(product_finite_measure.mu)].integral(function_props[product_finite_measure.T1, (product_finite_measure.S2), nnreal].o(product_finite_measure.nu, cross_product[product_finite_measure.T1, product_finite_measure.T2].x_section(product_finite_measure.M)))"
    "nnreal")))
 (fm_times_TCC3 0
  (fm_times_TCC3-3 "" 3789904335
   ("" (skosimp)
    (("" (lemma "fm_times_TCC1" ("mu" "mu!1" "nu" "nu!1"))
      (("" (lemma "fm_times_TCC2" ("mu" "mu!1" "nu" "nu!1"))
        (("" (rewrite "finite_measure_def")
          (("1" (split 1)
            (("1" (inst -2 "emptyset[[T1,T2]]")
              (("1" (assert)
                (("1" (inst -1 "emptyset[[T1,T2]]")
                  (("1"
                    (case-replace
                     "x_section[T1, T2](emptyset[[T1, T2]])=lambda (x:T1): emptyset[T2]")
                    (("1" (hide -1)
                      (("1" (expand "o")
                        (("1" (rewrite "fm_emptyset[T2,S2,nu!1]")
                          (("1"
                            (rewrite
                             "integral_zero[T1, S1, to_measure[T1, S1](mu!1)]"
                             1)
                            nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (apply-extensionality :hide? t)
                          (("2" (expand "emptyset")
                            (("2" (expand "x_section")
                              (("2" (expand "x_section")
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (expand "o")
                (("2" (typepred "nu!1")
                  (("2" (rewrite "finite_measure_def" -1)
                    (("2" (flatten)
                      (("2" (hide -3)
                        (("2"
                          (case-replace
                           "(LAMBDA (x: T1): nu!1(x_section[T1, T2](union(a!1, b!1))(x)))=(reals@real_fun_ops.+)((LAMBDA (x: T1): nu!1(x_section[T1, T2](a!1)(x))),(LAMBDA (x: T1): nu!1(x_section[T1, T2](b!1)(x))))")
                          (("1" (hide -1)
                            (("1" (expand "x_section")
                              (("1"
                                (rewrite
                                 "integral_add[T1, S1, to_measure[T1, S1](mu!1)]"
                                 1)
                                (("1" (inst -5 "b!1") nil nil)
                                 ("2" (skosimp)
                                  (("2"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "b!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("2" (expand "member")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("3" (inst -5 "a!1") nil nil)
                                 ("4" (skosimp)
                                  (("4"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "a!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("4" (expand "member")
                                      (("4" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -4 -5 2)
                            (("2" (apply-extensionality :hide? t)
                              (("1" (expand "+")
                                (("1"
                                  (lemma "x_section_disjoint"
                                   ("X" "a!1" "Y" "b!1" "a" "x!1"))
                                  (("1" (assert)
                                    (("1"
                                      (inst
                                       -
                                       "x_section(a!1, x!1)"
                                       "x_section(b!1, x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "x_section" 1)
                                          (("1"
                                            (rewrite "x_section_union")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "x_section_measurable[T1,T2]"
                                         ("Z"
                                          "b!1"
                                          "S1"
                                          "S1"
                                          "S2"
                                          "S2"
                                          "x"
                                          "x!1"))
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma
                                         "x_section_measurable[T1,T2]"
                                         ("Z"
                                          "a!1"
                                          "S1"
                                          "S1"
                                          "S2"
                                          "S2"
                                          "x"
                                          "x!1"))
                                        (("3"
                                          (expand "member")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp)
                                (("2" (expand "+")
                                  (("2" (expand "x_section")
                                    (("2"
                                      (lemma
                                       "x_section_measurable[T1,T2]"
                                       ("Z"
                                        "a!1"
                                        "S1"
                                        "S1"
                                        "S2"
                                        "S2"
                                        "x"
                                        "x1!1"))
                                      (("2"
                                        (lemma
                                         "x_section_measurable[T1,T2]"
                                         ("Z"
                                          "b!1"
                                          "S1"
                                          "S1"
                                          "S2"
                                          "S2"
                                          "x"
                                          "x1!1"))
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (typepred
                                             "nu!1(x_section(a!1, x1!1))")
                                            (("2"
                                              (typepred
                                               "nu!1(x_section(b!1, x1!1))")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (skosimp)
                                (("3" (expand "x_section")
                                  (("3"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "b!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("3" (expand "member")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("4" (skosimp)
                                (("4" (expand "x_section")
                                  (("4"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "a!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("4" (expand "member")
                                      (("4" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("5" (skosimp)
                                (("5" (expand "x_section")
                                  (("5"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2"
                                      "x" "x!1"))
                                    (("5" (expand "member")
                                      (("5" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (skosimp)
                              (("3" (expand "x_section")
                                (("3"
                                  (lemma "x_section_measurable[T1,T2]"
                                   ("Z" "b!1" "S1" "S1" "S2" "S2" "x" "x!1"))
                                  (("3" (expand "member")
                                    (("3" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (expand "x_section")
                              (("4" (skosimp)
                                (("4"
                                  (lemma "x_section_measurable[T1,T2]"
                                   ("Z" "a!1" "S1" "S1" "S2" "S2" "x" "x!1"))
                                  (("4" (expand "member")
                                    (("4" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide-all-but 1)
                            (("5" (skosimp)
                              (("5" (expand "x_section")
                                (("5"
                                  (lemma "x_section_measurable[T1,T2]"
                                   ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2"
                                    "x" "x!1"))
                                  (("5" (expand "member")
                                    (("5" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (typepred "X!1")
                (("3" (expand "o ")
                  (("3" (expand "x_section")
                    (("3"
                      (name "SS" "(LAMBDA (x_1: nat):
                     integral[T1, S1, to_measure[T1, S1](mu!1)]
                         (LAMBDA (x: T1): nu!1(x_section(X!1(x_1), x))))")
                      (("1" (replace -1)
                        (("1"
                          (name "FF"
                                "lambda (n:nat): LAMBDA x: nu!1(x_section(IUnion(n,X!1), x))")
                          (("1"
                            (case "forall (n:nat): sigma_times(S1,S2)(IUnion(n,X!1))")
                            (("1"
                              (case "forall (n: nat): integrable?[T1, S1, to_measure[T1, S1](mu!1)](FF(n))")
                              (("1"
                                (case "forall (n:nat,x): 0<=FF(n)(x) & FF(n)(x)<=FF(n+1)(x)")
                                (("1"
                                  (name "ff"
                                        "LAMBDA (x: T1): nu!1(x_section(IUnion(X!1), x))")
                                  (("1" (replace -1)
                                    (("1"
                                      (case
                                       "forall (n:nat,x): FF(n)(x)<=ff(x)")
                                      (("1"
                                        (lemma
                                         "monotone_convergence_scaf[T1, S1, to_measure[T1, S1](mu!1)]"
                                         ("F" "FF" "f" "ff"))
                                        (("1"
                                          (case-replace
                                           "series(SS) = integral[T1, S1, to_measure[T1, S1](mu!1)] o FF")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "converges_upto?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (name-replace
                                                       "LHS"
                                                       "integral[T1, S1, to_measure[T1, S1](mu!1)](ff)")
                                                      (("1"
                                                        (name-replace
                                                         "DRL1"
                                                         "integral[T1, S1, to_measure[T1, S1](mu!1)] o FF")
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 -12 1))
                                                          (("1"
                                                            (lemma
                                                             "convergence_sequences.limit_lemma"
                                                             ("v" "DRL1"))
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (rewrite
                                                                 "metric_convergence_def")
                                                                (("1"
                                                                  (expand
                                                                   "convergence")
                                                                  (("1"
                                                                    (name-replace
                                                                     "RHS"
                                                                     "convergence_sequences.limit(DRL1)")
                                                                    (("1"
                                                                      (expand
                                                                       "metric_converges_to")
                                                                      (("1"
                                                                        (expand
                                                                         "ball")
                                                                        (("1"
                                                                          (expand
                                                                           "member")
                                                                          (("1"
                                                                            (case
                                                                             "LHS>RHS")
                                                                            (("1"
                                                                              (hide
                                                                               1)
                                                                              (("1"
                                                                                (name
                                                                                 "DELTA"
                                                                                 "(LHS-RHS)/2")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "DELTA")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "DELTA")
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "n!1+n!2")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "n!1+n!2")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "triangle")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "LHS - DRL1(n!1 + n!2)"
                                                                                                 "DRL1(n!1 + n!2) - RHS")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand
                                                   "pointwise_converges_upto?")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "pointwise_convergence?")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (typepred "nu!1")
                                                          (("1"
                                                            (expand
                                                             "finite_measure?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (name
                                                                 "XX"
                                                                 "lambda (n:nat): x_section(X!1(n), x!1)")
                                                                (("1"
                                                                  (case
                                                                   "disjoint?(XX)")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "XX")
                                                                    (("1"
                                                                      (case-replace
                                                                       "nu!1(IUnion(XX)) = ff(x!1)")
                                                                      (("1"
                                                                        (name-replace
                                                                         "RHS"
                                                                         "ff(x!1)")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (case-replace
                                                                             "series(nu!1 o XX)=LAMBDA (n:nat): FF(n)(x!1)")
                                                                            (("1"
                                                                              (name-replace
                                                                               "LHS"
                                                                               "LAMBDA (n:nat): FF(n)(x!1)")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-5
                                                                                  1))
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "metric_convergence_def")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "convergence")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "metric_converges_to")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "r!1")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               " n!1")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "i!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "ball")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (case
                                                                                 "forall (n:nat): series(nu!1 o XX)(n) = FF(n)(x!1)")
                                                                                (("1"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (induct
                                                                                     "n")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "FF")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "IUnion_0_def")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "o ")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "series")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "XX")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "series")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "sigma"
                                                                                           1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "o ")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "FF")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "IUnion_n_def")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "XX")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "x_section_union")
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "fm_disjointunion[T2,S2,nu!1]"
                                                                                                         ("A"
                                                                                                          "x_section(IUnion(j!1, X!1), x!1)"
                                                                                                          "B"
                                                                                                          "x_section(X!1(1 + j!1), x!1)"))
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (hide-all-but
                                                                                                             (-2
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "disjoint?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "disjoint?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "intersection")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "empty?")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "x_section")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "IUnion")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "image")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "Union")
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (typepred
                                                                                                                                     "a!1")
                                                                                                                                    (("2"
                                                                                                                                      (skolem
                                                                                                                                       -
                                                                                                                                       "n!2")
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "n!2")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "n!2"
                                                                                                                                           "1+j!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "x!2")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "ff")
                                                                        (("2"
                                                                          (expand
                                                                           "XX")
                                                                          (("2"
                                                                            (case-replace
                                                                             "IUnion(LAMBDA (n: nat): x_section(X!1(n), x!1))=x_section(IUnion(X!1), x!1)")
                                                                            (("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (apply-extensionality
                                                                                 :hide?
                                                                                 t)
                                                                                (("2"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "x_section")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "disjoint_indexed_measurable?")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skolem
                                                                           +
                                                                           "n!1")
                                                                          (("2"
                                                                            (expand
                                                                             "XX")
                                                                            (("2"
                                                                              (lemma
                                                                               "x_section_measurable[T1,T2]"
                                                                               ("Z"
                                                                                "X!1(n!1)"
                                                                                "S1"
                                                                                "S1"
                                                                                "S2"
                                                                                "S2"
                                                                                "x"
                                                                                "x!1"))
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-11 1))
                                                                    (("2"
                                                                      (expand
                                                                       "XX")
                                                                      (("2"
                                                                        (expand
                                                                         "disjoint_indexed_measurable?")
                                                                        (("2"
                                                                          (expand
                                                                           "disjoint?")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "i!1"
                                                                               "j!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "x_section_disjoint"
                                                                                   ("X"
                                                                                    "X!1(i!1)"
                                                                                    "Y"
                                                                                    "X!1(j!1)"
                                                                                    "a"
                                                                                    "x!1"))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "pointwise_increasing?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (case
                                                           "forall (i,j:nat): FF(i)(x!1)<=FF(i+j)(x!1)")
                                                          (("1"
                                                            (expand
                                                             "increasing?")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!2"
                                                                 "y!1-x!2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1))
                                                            (("2"
                                                              (induct "j")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "i!1")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i!1+j!1"
                                                                     "x!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (expand "bounded?")
                                                  (("3"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "bounded_above?")
                                                      (("1"
                                                        (inst
                                                         +
                                                         "integral[T1, S1, to_measure(mu!1)](ff)")
                                                        (("1"
                                                          (expand "o ")
                                                          (("1"
                                                            (skolem + "n!1")
                                                            (("1"
                                                              (inst - "n!1")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n!1"
                                                                 "_")
                                                                (("1"
                                                                  (lemma
                                                                   "integral_ae_le[T1, S1, to_measure(mu!1)]"
                                                                   ("f1"
                                                                    "FF(n!1)"
                                                                    "f2"
                                                                    "ff"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "ae_le?")
                                                                      (("1"
                                                                        (expand
                                                                         "pointwise_ae?")
                                                                        (("1"
                                                                          (expand
                                                                           "ae?")
                                                                          (("1"
                                                                            (expand
                                                                             "fullset")
                                                                            (("1"
                                                                              (expand
                                                                               "ae_in?")
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "emptyset")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "x!1")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "negligible_set?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "emptyset[T1]")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "null_set?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "measurable_set?")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "mu!1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "mu_fin?")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "mu")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "to_measure")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "finite_measure?")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "subset?")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "ff")
                                                          (("2"
                                                            (inst
                                                             -11
                                                             "IUnion(X!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "bounded_below?")
                                                      (("2"
                                                        (inst + "0")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand "o ")
                                                            (("2"
                                                              (lemma
                                                               "integral_nonneg[T1, S1, to_measure(mu!1)]"
                                                               ("f"
                                                                "FF(x!1)"))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "x!1"
                                                                     "x!2")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (case
                                               "forall (n:nat): series(SS)(n) = integral[T1, S1, to_measure[T1, S1](mu!1)](FF(n))")
                                              (("1"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (inst - "x!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "o ")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (induct "n")
                                                  (("1"
                                                    (expand "series")
                                                    (("1"
                                                      (expand "sigma")
                                                      (("1"
                                                        (expand "sigma")
                                                        (("1"
                                                          (expand "SS")
                                                          (("1"
                                                            (expand "FF")
                                                            (("1"
                                                              (rewrite
                                                               "IUnion_0_def")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (expand "series")
                                                      (("2"
                                                        (expand "sigma" 1)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (expand "FF")
                                                              (("2"
                                                                (rewrite
                                                                 "IUnion_n_def"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "SS")
                                                                  (("2"
                                                                    (case-replace
                                                                     "(LAMBDA x:
              nu!1(x_section(union(IUnion(j!1, X!1), X!1(1 + j!1)), x)))=(reals@real_fun_ops.+)(LAMBDA x: nu!1(x_section(IUnion(j!1, X!1), x)),LAMBDA (x: T1): nu!1(x_section(X!1(1 + j!1), x)))")
                                                                    (("1"
                                                                      (rewrite
                                                                       "integral_add[T1, S1, to_measure[T1, S1](mu!1)]")
                                                                      (("1"
                                                                        (inst
                                                                         -10
                                                                         "X!1(1 + j!1)")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (lemma
                                                                             "x_section_measurable[T1,T2]"
                                                                             ("Z"
                                                                              "X!1(1+j!1)"
                                                                              "S1"
                                                                              "S1"
                                                                              "S2"
                                                                              "S2"
                                                                              "x"
                                                                              "x!1"))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (inst
                                                                         -10
                                                                         "IUnion[[T1, T2]](j!1, X!1)")
                                                                        (("3"
                                                                          (inst
                                                                           -6
                                                                           "j!1")
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skosimp)
                                                                        (("4"
                                                                          (inst
                                                                           -6
                                                                           "j!1")
                                                                          (("4"
                                                                            (lemma
                                                                             "x_section_measurable[T1,T2]"
                                                                             ("Z"
                                                                              "IUnion(j!1,X!1)"
                                                                              "S1"
                                                                              "S1"
                                                                              "S2"
                                                                              "S2"
                                                                              "x"
                                                                              "x!1"))
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (hide
                                                                         -9
                                                                         -10
                                                                         -6
                                                                         -8)
                                                                        (("2"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (expand
                                                                             "+")
                                                                            (("1"
                                                                              (rewrite
                                                                               "x_section_union")
                                                                              (("1"
                                                                                (lemma
                                                                                 "fm_disjointunion[T2,S2,nu!1]"
                                                                                 ("A"
                                                                                  "x_section(IUnion(j!1, X!1), x!1)"
                                                                                  "B"
                                                                                  "x_section(X!1(1 + j!1), x!1)"))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      -6))
                                                                                    (("1"
                                                                                      (expand
                                                                                       "disjoint_indexed_measurable?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "disjoint?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "disjoint?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "intersection")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "empty?")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "x_section")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "IUnion")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "image")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "Union")
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "a!1")
                                                                                                                (("1"
                                                                                                                  (skolem
                                                                                                                   -
                                                                                                                   "n!2")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "n!2")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "n!2"
                                                                                                                       "1+j!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "(x!1, x!2)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (expand
                                                                               "+")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (lemma
                                                                               "x_section_measurable[T1,T2]"
                                                                               ("Z"
                                                                                "X!1(1+j!1)"
                                                                                "S1"
                                                                                "S1"
                                                                                "S2"
                                                                                "S2"
                                                                                "x"
                                                                                "x!1"))
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (skosimp)
                                                                            (("4"
                                                                              (inst
                                                                               -5
                                                                               "j!1")
                                                                              (("4"
                                                                                (lemma
                                                                                 "x_section_measurable[T1,T2]"
                                                                                 ("Z"
                                                                                  "IUnion(j!1,X!1)"
                                                                                  "S1"
                                                                                  "S1"
                                                                                  "S2"
                                                                                  "S2"
                                                                                  "x"
                                                                                  "x!1"))
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (skosimp)
                                                                            (("5"
                                                                              (inst
                                                                               -5
                                                                               "1+j!1")
                                                                              (("5"
                                                                                (lemma
                                                                                 "x_section_measurable[T1,T2]"
                                                                                 ("Z"
                                                                                  "IUnion(1+j!1,X!1)"
                                                                                  "S1"
                                                                                  "S1"
                                                                                  "S2"
                                                                                  "S2"
                                                                                  "x"
                                                                                  "x!1"))
                                                                                (("5"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("5"
                                                                                    (assert)
                                                                                    (("5"
                                                                                      (rewrite
                                                                                       "IUnion_n_def")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (lemma
                                                                         "x_section_measurable[T1,T2]"
                                                                         ("Z"
                                                                          "X!1(1+j!1)"
                                                                          "S1"
                                                                          "S1"
                                                                          "S2"
                                                                          "S2"
                                                                          "x"
                                                                          "x!1"))
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (skosimp)
                                                                      (("4"
                                                                        (inst
                                                                         -5
                                                                         "j!1")
                                                                        (("4"
                                                                          (lemma
                                                                           "x_section_measurable[T1,T2]"
                                                                           ("Z"
                                                                            "IUnion(j!1,X!1)"
                                                                            "S1"
                                                                            "S1"
                                                                            "S2"
                                                                            "S2"
                                                                            "x"
                                                                            "x!1"))
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (skosimp)
                                                                      (("5"
                                                                        (hide
                                                                         2)
                                                                        (("5"
                                                                          (inst
                                                                           -5
                                                                           "j!1+1")
                                                                          (("5"
                                                                            (hide-all-but
                                                                             (1
                                                                              -5))
                                                                            (("5"
                                                                              (lemma
                                                                               "x_section_measurable[T1,T2]"
                                                                               ("Z"
                                                                                "IUnion(1+j!1,X!1)"
                                                                                "S1"
                                                                                "S1"
                                                                                "S2"
                                                                                "S2"
                                                                                "x"
                                                                                "x!1"))
                                                                              (("5"
                                                                                (assert)
                                                                                (("5"
                                                                                  (rewrite
                                                                                   "IUnion_n_def")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (hide -9 -10 2 -6 -8)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (expand "ff")
                                            (("2"
                                              (expand "FF")
                                              (("2"
                                                (lemma
                                                 "fm_monotone[T2,S2,nu!1]"
                                                 ("A"
                                                  "x_section(IUnion(n!1, X!1), x!1)"
                                                  "B"
                                                  "x_section(IUnion(X!1), x!1)"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand "subset?")
                                                      (("2"
                                                        (expand "member")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "x_section")
                                                            (("2"
                                                              (expand
                                                               "IUnion")
                                                              (("2"
                                                                (expand
                                                                 "image")
                                                                (("2"
                                                                  (expand
                                                                   "Union")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (typepred
                                                                       "a!1")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "x!3")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp)
                                    (("2"
                                      (lemma
                                       "x_section_measurable[T1,T2]"
                                       ("Z"
                                        "IUnion[nat, [T1, T2]](X!1)"
                                        "S1"
                                        "S1"
                                        "S2"
                                        "S2"
                                        "x"
                                        "x!1"))
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (skosimp)
                                    (("2" (expand "FF")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (rewrite "IUnion_n_def")
                                            (("2"
                                              (lemma
                                               "fm_subset_le[T2,S2,nu!1]"
                                               ("A"
                                                "x_section(IUnion(n!1, X!1), x!1)"
                                                "B"
                                                "x_section(union(IUnion(n!1, X!1), X!1(1 + n!1)), x!1)"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "x_section_union")
                                                    (("2"
                                                      (expand "union")
                                                      (("2"
                                                        (expand "subset?")
                                                        (("2"
                                                          (expand "member")
                                                          (("2"
                                                            (skosimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp)
                                (("2" (inst - "n!1")
                                  (("2" (inst -7 "IUnion(n!1, X!1)")
                                    (("2" (expand "FF")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (induct "n")
                                (("1" (rewrite "IUnion_0_def")
                                  (("1" (assert) nil nil)) nil)
                                 ("2" (skosimp)
                                  (("2" (rewrite "IUnion_n_def")
                                    (("2" (assert)
                                      (("2"
                                        (typepred "X!1(1 + j!1)")
                                        (("2"
                                          (lemma
                                           "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                           ("x"
                                            "IUnion(j!1, X!1)"
                                            "y"
                                            "X!1(1 + j!1)"))
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (skolem + ("_" "x!1"))
                              (("2" (induct "n")
                                (("1" (rewrite "IUnion_0_def")
                                  (("1"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "X!1(0)" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("1" (expand "member")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (skosimp*)
                                  (("2"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "X!1(j!1+1)" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("2" (expand "member")
                                      (("2"
                                        (rewrite "IUnion_n_def")
                                        (("2"
                                          (rewrite "x_section_union")
                                          (("2"
                                            (lemma
                                             "sigma_algebra_union[T2,S2]"
                                             ("x"
                                              "x_section(IUnion(j!1, X!1), x!1)"
                                              "y"
                                              "x_section(X!1(1 + j!1), x!1)"))
                                            (("1"
                                              (expand "member")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2"
                          (lemma "x_section_integrable"
                           ("mu" "mu!1" "nu" "nu!1" "M" "X!1(x!1)"))
                          (("2" (expand "o ")
                            (("2" (expand "x_section" -1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skosimp)
                        (("3"
                          (lemma "x_section_measurable[T1,T2]"
                           ("S1" "S1" "S2" "S2" "Z" "X!1(x!1)" "x" "x!2"))
                          (("3" (expand "member") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (skosimp*)
              (("2"
                (lemma "x_section_measurable[T1,T2]"
                 ("Z" "M!1" "S1" "S1" "S2" "S2" "x" "x1!1"))
                (("2" (expand "member")
                  (("2" (expand "x_section" 1) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (fm_times_TCC1 subtype-tcc nil product_finite_measure nil)
    (x_section_integrable formula-decl nil product_finite_measure nil)
    (sequence type-eq-decl nil sequences nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (fm_monotone formula-decl nil finite_measure nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas_aux nil)
    (subset_algebra_intersection application-judgement "(S)"
     product_finite_measure nil)
    (j!1 skolem-const-decl "nat" product_finite_measure nil)
    (X!1 skolem-const-decl
     "disjoint_indexed_measurable[[T1, T2], sigma_times(S1, S2)]"
     product_finite_measure nil)
    (SS skolem-const-decl "[nat -> real]" product_finite_measure nil)
    (converges_upto? const-decl "bool" convergence_aux metric_space)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (> const-decl "bool" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (DELTA skolem-const-decl "real" product_finite_measure nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (triangle formula-decl nil real_props nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (limit const-decl "real" convergence_sequences analysis)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (XX skolem-const-decl "[nat -> set[T2]]" product_finite_measure nil)
    (ball_is_metric_open application-judgement
     "metric_open[real, (LAMBDA (x, y: real): abs(x - y))]" convergence_aux
     metric_space)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (sigma def-decl "real" sigma reals)
    (FF skolem-const-decl "[nat -> [T1 -> nnreal]]" product_finite_measure
     nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (empty? const-decl "bool" sets nil) (Union const-decl "set" sets nil)
    (image const-decl "set[R]" function_image nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (ff skolem-const-decl "[T1 -> nnreal]" product_finite_measure nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (y!1 skolem-const-decl "nat" product_finite_measure nil)
    (x!2 skolem-const-decl "nat" product_finite_measure nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (bounded? const-decl "bool" real_fun_preds reals)
    (integral_ae_le formula-decl nil integral nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (subset_algebra_fullset name-judgement "(S1)" product_finite_measure nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (TRUE const-decl "bool" booleans nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (mu const-decl "nnreal" measure_props nil)
    (null_set? const-decl "bool" measure_theory nil)
    (subset? const-decl "bool" sets nil) (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (mu!1 skolem-const-decl "finite_measure[T1, S1]" product_finite_measure
     nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (integral_nonneg formula-decl nil integral nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (series const-decl "sequence[real]" series series)
    (monotone_convergence_scaf formula-decl nil integral_convergence_scaf nil)
    (fm_subset_le formula-decl nil finite_measure nil)
    (n!1 skolem-const-decl "nat" product_finite_measure nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool" generalized_measure_def
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nu!1 skolem-const-decl "finite_measure[T2, S2]" product_finite_measure
     nil)
    (b!1 skolem-const-decl "(sigma_times(S1, S2))" product_finite_measure nil)
    (a!1 skolem-const-decl "(sigma_times(S1, S2))" product_finite_measure nil)
    (subset_algebra_union application-judgement "(S)" product_finite_measure
     nil)
    (x_section_disjoint formula-decl nil product_sections nil)
    (x_section_union formula-decl nil product_sections nil)
    (x!1 skolem-const-decl "T1" product_finite_measure nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil)
    (x_section_measurable formula-decl nil product_sigma_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (integral_add formula-decl nil integral nil)
    (union const-decl "set" sets nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (integral_zero formula-decl nil integral nil)
    (fm_emptyset formula-decl nil finite_measure nil)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (x_section const-decl "set[T2]" cross_product topology)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable sigma_set)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (x_section const-decl "[T1 -> set[T2]]" cross_product topology)
    (set type-eq-decl nil sets nil) (O const-decl "T3" function_props nil)
    (integral const-decl "real" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (finite_measure_def formula-decl nil measure_def nil)
    (fm_times_TCC2 subtype-tcc nil product_finite_measure nil))
   shostak
   (fm_times subtype
    "LAMBDA M: integral[product_finite_measure.T1, product_finite_measure.S1, generalized_measure_def[product_finite_measure.T1, product_finite_measure.S1].to_measure(product_finite_measure.mu)].integral(function_props[product_finite_measure.T1, (product_finite_measure.S2), nnreal].o(product_finite_measure.nu, cross_product[product_finite_measure.T1, product_finite_measure.T2].x_section(product_finite_measure.M)))"
    "finite_measure[[T1, T2], sigma_times[T1, T2](S1, S2)]"))
  (fm_times_TCC3-2 "" 3758903837
   ("" (skosimp)
    (("" (lemma "fm_times_TCC1" ("mu" "mu!1" "nu" "nu!1"))
      (("" (lemma "fm_times_TCC2" ("mu" "mu!1" "nu" "nu!1"))
        (("" (rewrite "finite_measure_def")
          (("1" (split 1)
            (("1" (inst -2 "emptyset[[T1,T2]]")
              (("1" (assert)
                (("1" (inst -1 "emptyset[[T1,T2]]")
                  (("1"
                    (case-replace
                     "x_section[T1, T2](emptyset[[T1, T2]])=lambda (x:T1): emptyset[T2]")
                    (("1" (hide -1)
                      (("1" (expand "o")
                        (("1" (rewrite "fm_emptyset[T2,S2,nu!1]")
                          (("1"
                            (rewrite
                             "integral_zero[T1, S1, to_measure[T1, S1](mu!1)]"
                             1)
                            nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (apply-extensionality :hide? t)
                          (("2" (expand "emptyset")
                            (("2" (expand "x_section")
                              (("2" (expand "x_section")
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (expand "o")
                (("2" (typepred "nu!1")
                  (("2" (rewrite "finite_measure_def" -1)
                    (("2" (flatten)
                      (("2" (hide -3)
                        (("2"
                          (case-replace
                           "(LAMBDA (x: T1): nu!1(x_section[T1, T2](union(a!1, b!1))(x)))=(reals@real_fun_ops.+)((LAMBDA (x: T1): nu!1(x_section[T1, T2](a!1)(x))),(LAMBDA (x: T1): nu!1(x_section[T1, T2](b!1)(x))))")
                          (("1" (hide -1)
                            (("1" (expand "x_section")
                              (("1"
                                (rewrite
                                 "integral_add[T1, S1, to_measure[T1, S1](mu!1)]"
                                 1)
                                (("1" (inst -5 "b!1") nil nil)
                                 ("2" (skosimp)
                                  (("2"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "b!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("2" (expand "member")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("3" (inst -5 "a!1") nil nil)
                                 ("4" (skosimp)
                                  (("4"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "a!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("4" (expand "member")
                                      (("4" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -4 -5 2)
                            (("2" (apply-extensionality :hide? t)
                              (("1" (expand "+")
                                (("1"
                                  (lemma "x_section_disjoint"
                                   ("X" "a!1" "Y" "b!1" "a" "x!1"))
                                  (("1" (assert)
                                    (("1"
                                      (inst
                                       -
                                       "x_section(a!1, x!1)"
                                       "x_section(b!1, x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "x_section" 1)
                                          (("1"
                                            (rewrite "x_section_union")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "x_section_measurable[T1,T2]"
                                         ("Z"
                                          "b!1"
                                          "S1"
                                          "S1"
                                          "S2"
                                          "S2"
                                          "x"
                                          "x!1"))
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma
                                         "x_section_measurable[T1,T2]"
                                         ("Z"
                                          "a!1"
                                          "S1"
                                          "S1"
                                          "S2"
                                          "S2"
                                          "x"
                                          "x!1"))
                                        (("3"
                                          (expand "member")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp)
                                (("2" (expand "+")
                                  (("2" (expand "x_section")
                                    (("2"
                                      (lemma
                                       "x_section_measurable[T1,T2]"
                                       ("Z"
                                        "a!1"
                                        "S1"
                                        "S1"
                                        "S2"
                                        "S2"
                                        "x"
                                        "x1!1"))
                                      (("2"
                                        (lemma
                                         "x_section_measurable[T1,T2]"
                                         ("Z"
                                          "b!1"
                                          "S1"
                                          "S1"
                                          "S2"
                                          "S2"
                                          "x"
                                          "x1!1"))
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (typepred
                                             "nu!1(x_section(a!1, x1!1))")
                                            (("2"
                                              (typepred
                                               "nu!1(x_section(b!1, x1!1))")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (skosimp)
                                (("3" (expand "x_section")
                                  (("3"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "b!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("3" (expand "member")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("4" (skosimp)
                                (("4" (expand "x_section")
                                  (("4"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "a!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("4" (expand "member")
                                      (("4" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("5" (skosimp)
                                (("5" (expand "x_section")
                                  (("5"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2"
                                      "x" "x!1"))
                                    (("5" (expand "member")
                                      (("5" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (skosimp)
                              (("3" (expand "x_section")
                                (("3"
                                  (lemma "x_section_measurable[T1,T2]"
                                   ("Z" "b!1" "S1" "S1" "S2" "S2" "x" "x!1"))
                                  (("3" (expand "member")
                                    (("3" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (expand "x_section")
                              (("4" (skosimp)
                                (("4"
                                  (lemma "x_section_measurable[T1,T2]"
                                   ("Z" "a!1" "S1" "S1" "S2" "S2" "x" "x!1"))
                                  (("4" (expand "member")
                                    (("4" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide-all-but 1)
                            (("5" (skosimp)
                              (("5" (expand "x_section")
                                (("5"
                                  (lemma "x_section_measurable[T1,T2]"
                                   ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2"
                                    "x" "x!1"))
                                  (("5" (expand "member")
                                    (("5" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (typepred "X!1")
                (("3" (expand "o ")
                  (("3" (expand "x_section")
                    (("3"
                      (name "SS" "(LAMBDA (x_1: nat):
                     integral[T1, S1, to_measure[T1, S1](mu!1)]
                         (LAMBDA (x: T1): nu!1(x_section(X!1(x_1), x))))")
                      (("1" (replace -1)
                        (("1"
                          (name "FF"
                                "lambda (n:nat): LAMBDA x: nu!1(x_section(IUnion(n,X!1), x))")
                          (("1"
                            (case "forall (n:nat): sigma_times(S1,S2)(IUnion(n,X!1))")
                            (("1"
                              (case "forall (n: nat): integrable?[T1, S1, to_measure[T1, S1](mu!1)](FF(n))")
                              (("1"
                                (case "forall (n:nat,x): 0<=FF(n)(x) & FF(n)(x)<=FF(n+1)(x)")
                                (("1"
                                  (name "ff"
                                        "LAMBDA (x: T1): nu!1(x_section(IUnion(X!1), x))")
                                  (("1" (replace -1)
                                    (("1"
                                      (case
                                       "forall (n:nat,x): FF(n)(x)<=ff(x)")
                                      (("1"
                                        (lemma
                                         "monotone_convergence_scaf[T1, S1, to_measure[T1, S1](mu!1)]"
                                         ("F" "FF" "f" "ff"))
                                        (("1"
                                          (case-replace
                                           "series(SS) = integral[T1, S1, to_measure[T1, S1](mu!1)] o FF")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "converges_upto?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (name-replace
                                                       "LHS"
                                                       "integral[T1, S1, to_measure[T1, S1](mu!1)](ff)")
                                                      (("1"
                                                        (name-replace
                                                         "DRL1"
                                                         "integral[T1, S1, to_measure[T1, S1](mu!1)] o FF")
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 -12 1))
                                                          (("1"
                                                            (lemma
                                                             "convergence_sequences.limit_lemma"
                                                             ("v" "DRL1"))
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (rewrite
                                                                 "metric_convergence_def")
                                                                (("1"
                                                                  (expand
                                                                   "convergence")
                                                                  (("1"
                                                                    (name-replace
                                                                     "RHS"
                                                                     "convergence_sequences.limit(DRL1)")
                                                                    (("1"
                                                                      (expand
                                                                       "metric_converges_to")
                                                                      (("1"
                                                                        (expand
                                                                         "ball")
                                                                        (("1"
                                                                          (expand
                                                                           "member")
                                                                          (("1"
                                                                            (case
                                                                             "LHS>RHS")
                                                                            (("1"
                                                                              (hide
                                                                               1)
                                                                              (("1"
                                                                                (name
                                                                                 "DELTA"
                                                                                 "(LHS-RHS)/2")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "DELTA")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "DELTA")
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "n!1+n!2")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "n!1+n!2")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "triangle")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "LHS - DRL1(n!1 + n!2)"
                                                                                                 "DRL1(n!1 + n!2) - RHS")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand
                                                   "pointwise_converges_upto?")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "pointwise_convergence?")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (typepred "nu!1")
                                                          (("1"
                                                            (expand
                                                             "finite_measure?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (name
                                                                 "XX"
                                                                 "lambda (n:nat): x_section(X!1(n), x!1)")
                                                                (("1"
                                                                  (case
                                                                   "disjoint?(XX)")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "XX")
                                                                    (("1"
                                                                      (case-replace
                                                                       "nu!1(IUnion(XX)) = ff(x!1)")
                                                                      (("1"
                                                                        (name-replace
                                                                         "RHS"
                                                                         "ff(x!1)")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (case-replace
                                                                             "series(nu!1 o XX)=LAMBDA (n:nat): FF(n)(x!1)")
                                                                            (("1"
                                                                              (name-replace
                                                                               "LHS"
                                                                               "LAMBDA (n:nat): FF(n)(x!1)")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-5
                                                                                  1))
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "metric_convergence_def")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "convergence")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "metric_converges_to")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "r!1")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               " n!1")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "i!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "ball")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (case
                                                                                 "forall (n:nat): series(nu!1 o XX)(n) = FF(n)(x!1)")
                                                                                (("1"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (induct
                                                                                     "n")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "FF")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "IUnion_0_def")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "o ")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "series")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "XX")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "series")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "sigma"
                                                                                           1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "o ")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "FF")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "IUnion_n_def")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "XX")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "x_section_union")
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "fm_disjointunion[T2,S2,nu!1]"
                                                                                                         ("A"
                                                                                                          "x_section(IUnion(j!1, X!1), x!1)"
                                                                                                          "B"
                                                                                                          "x_section(X!1(1 + j!1), x!1)"))
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (hide-all-but
                                                                                                             (-2
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "disjoint?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "disjoint?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "intersection")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "empty?")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "x_section")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "IUnion")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "image")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "Union")
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (typepred
                                                                                                                                     "a!1")
                                                                                                                                    (("2"
                                                                                                                                      (skolem
                                                                                                                                       -
                                                                                                                                       "n!2")
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "n!2")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "n!2"
                                                                                                                                           "1+j!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "x!2")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "ff")
                                                                        (("2"
                                                                          (expand
                                                                           "XX")
                                                                          (("2"
                                                                            (case-replace
                                                                             "IUnion(LAMBDA (n: nat): x_section(X!1(n), x!1))=x_section(IUnion(X!1), x!1)")
                                                                            (("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (apply-extensionality
                                                                                 :hide?
                                                                                 t)
                                                                                (("2"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "x_section")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "disjoint_indexed_measurable?")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skolem
                                                                           +
                                                                           "n!1")
                                                                          (("2"
                                                                            (expand
                                                                             "XX")
                                                                            (("2"
                                                                              (lemma
                                                                               "x_section_measurable[T1,T2]"
                                                                               ("Z"
                                                                                "X!1(n!1)"
                                                                                "S1"
                                                                                "S1"
                                                                                "S2"
                                                                                "S2"
                                                                                "x"
                                                                                "x!1"))
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-11 1))
                                                                    (("2"
                                                                      (expand
                                                                       "XX")
                                                                      (("2"
                                                                        (expand
                                                                         "disjoint_indexed_measurable?")
                                                                        (("2"
                                                                          (expand
                                                                           "disjoint?")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "i!1"
                                                                               "j!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "x_section_disjoint"
                                                                                   ("X"
                                                                                    "X!1(i!1)"
                                                                                    "Y"
                                                                                    "X!1(j!1)"
                                                                                    "a"
                                                                                    "x!1"))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "pointwise_increasing?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (case
                                                           "forall (i,j:nat): FF(i)(x!1)<=FF(i+j)(x!1)")
                                                          (("1"
                                                            (expand
                                                             "increasing?")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!2"
                                                                 "y!1-x!2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1))
                                                            (("2"
                                                              (induct "j")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "i!1")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i!1+j!1"
                                                                     "x!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (expand "bounded?")
                                                  (("3"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "bounded_above?")
                                                      (("1"
                                                        (inst
                                                         +
                                                         "integral[T1, S1, to_measure(mu!1)](ff)")
                                                        (("1"
                                                          (expand "o ")
                                                          (("1"
                                                            (skolem + "n!1")
                                                            (("1"
                                                              (inst - "n!1")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n!1"
                                                                 "_")
                                                                (("1"
                                                                  (lemma
                                                                   "integral_ae_le[T1, S1, to_measure(mu!1)]"
                                                                   ("f1"
                                                                    "FF(n!1)"
                                                                    "f2"
                                                                    "ff"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "ae_le?")
                                                                      (("1"
                                                                        (expand
                                                                         "pointwise_ae?")
                                                                        (("1"
                                                                          (expand
                                                                           "ae?")
                                                                          (("1"
                                                                            (expand
                                                                             "fullset")
                                                                            (("1"
                                                                              (expand
                                                                               "ae_in?")
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "emptyset")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "x!1")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "negligible_set?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "emptyset[T1]")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "null_set?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "measurable_set?")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "mu!1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "mu_fin?")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "mu")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "to_measure")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "finite_measure?")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "subset?")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "ff")
                                                          (("2"
                                                            (inst
                                                             -11
                                                             "IUnion(X!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "bounded_below?")
                                                      (("2"
                                                        (inst + "0")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand "o ")
                                                            (("2"
                                                              (lemma
                                                               "integral_nonneg[T1, S1, to_measure(mu!1)]"
                                                               ("f"
                                                                "FF(x!1)"))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "x!1"
                                                                     "x!2")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (case
                                               "forall (n:nat): series(SS)(n) = integral[T1, S1, to_measure[T1, S1](mu!1)](FF(n))")
                                              (("1"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (inst - "x!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "o ")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (induct "n")
                                                  (("1"
                                                    (expand "series")
                                                    (("1"
                                                      (expand "sigma")
                                                      (("1"
                                                        (expand "sigma")
                                                        (("1"
                                                          (expand "SS")
                                                          (("1"
                                                            (expand "FF")
                                                            (("1"
                                                              (rewrite
                                                               "IUnion_0_def")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (expand "series")
                                                      (("2"
                                                        (expand "sigma" 1)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (expand "FF")
                                                              (("2"
                                                                (rewrite
                                                                 "IUnion_n_def"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "SS")
                                                                  (("2"
                                                                    (case-replace
                                                                     "(LAMBDA x:
              nu!1(x_section(union(IUnion(j!1, X!1), X!1(1 + j!1)), x)))=(reals@real_fun_ops.+)(LAMBDA x: nu!1(x_section(IUnion(j!1, X!1), x)),LAMBDA (x: T1): nu!1(x_section(X!1(1 + j!1), x)))")
                                                                    (("1"
                                                                      (rewrite
                                                                       "integral_add[T1, S1, to_measure[T1, S1](mu!1)]")
                                                                      (("1"
                                                                        (inst
                                                                         -10
                                                                         "X!1(1 + j!1)")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (lemma
                                                                             "x_section_measurable[T1,T2]"
                                                                             ("Z"
                                                                              "X!1(1+j!1)"
                                                                              "S1"
                                                                              "S1"
                                                                              "S2"
                                                                              "S2"
                                                                              "x"
                                                                              "x!1"))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (inst
                                                                         -10
                                                                         "IUnion[[T1, T2]](j!1, X!1)")
                                                                        (("3"
                                                                          (inst
                                                                           -6
                                                                           "j!1")
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skosimp)
                                                                        (("4"
                                                                          (inst
                                                                           -6
                                                                           "j!1")
                                                                          (("4"
                                                                            (lemma
                                                                             "x_section_measurable[T1,T2]"
                                                                             ("Z"
                                                                              "IUnion(j!1,X!1)"
                                                                              "S1"
                                                                              "S1"
                                                                              "S2"
                                                                              "S2"
                                                                              "x"
                                                                              "x!1"))
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (hide
                                                                         -9
                                                                         -10
                                                                         -6
                                                                         -8)
                                                                        (("2"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (expand
                                                                             "+")
                                                                            (("1"
                                                                              (rewrite
                                                                               "x_section_union")
                                                                              (("1"
                                                                                (lemma
                                                                                 "fm_disjointunion[T2,S2,nu!1]"
                                                                                 ("A"
                                                                                  "x_section(IUnion(j!1, X!1), x!1)"
                                                                                  "B"
                                                                                  "x_section(X!1(1 + j!1), x!1)"))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      -6))
                                                                                    (("1"
                                                                                      (expand
                                                                                       "disjoint_indexed_measurable?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "disjoint?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "disjoint?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "intersection")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "empty?")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "x_section")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "IUnion")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "image")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "Union")
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "a!1")
                                                                                                                (("1"
                                                                                                                  (skolem
                                                                                                                   -
                                                                                                                   "n!2")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "n!2")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "n!2"
                                                                                                                       "1+j!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "(x!1, x!2)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (expand
                                                                               "+")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (lemma
                                                                               "x_section_measurable[T1,T2]"
                                                                               ("Z"
                                                                                "X!1(1+j!1)"
                                                                                "S1"
                                                                                "S1"
                                                                                "S2"
                                                                                "S2"
                                                                                "x"
                                                                                "x!1"))
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (skosimp)
                                                                            (("4"
                                                                              (inst
                                                                               -5
                                                                               "j!1")
                                                                              (("4"
                                                                                (lemma
                                                                                 "x_section_measurable[T1,T2]"
                                                                                 ("Z"
                                                                                  "IUnion(j!1,X!1)"
                                                                                  "S1"
                                                                                  "S1"
                                                                                  "S2"
                                                                                  "S2"
                                                                                  "x"
                                                                                  "x!1"))
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (skosimp)
                                                                            (("5"
                                                                              (inst
                                                                               -5
                                                                               "1+j!1")
                                                                              (("5"
                                                                                (lemma
                                                                                 "x_section_measurable[T1,T2]"
                                                                                 ("Z"
                                                                                  "IUnion(1+j!1,X!1)"
                                                                                  "S1"
                                                                                  "S1"
                                                                                  "S2"
                                                                                  "S2"
                                                                                  "x"
                                                                                  "x!1"))
                                                                                (("5"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("5"
                                                                                    (assert)
                                                                                    (("5"
                                                                                      (rewrite
                                                                                       "IUnion_n_def")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (lemma
                                                                         "x_section_measurable[T1,T2]"
                                                                         ("Z"
                                                                          "X!1(1+j!1)"
                                                                          "S1"
                                                                          "S1"
                                                                          "S2"
                                                                          "S2"
                                                                          "x"
                                                                          "x!1"))
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (skosimp)
                                                                      (("4"
                                                                        (inst
                                                                         -5
                                                                         "j!1")
                                                                        (("4"
                                                                          (lemma
                                                                           "x_section_measurable[T1,T2]"
                                                                           ("Z"
                                                                            "IUnion(j!1,X!1)"
                                                                            "S1"
                                                                            "S1"
                                                                            "S2"
                                                                            "S2"
                                                                            "x"
                                                                            "x!1"))
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (skosimp)
                                                                      (("5"
                                                                        (hide
                                                                         2)
                                                                        (("5"
                                                                          (inst
                                                                           -5
                                                                           "j!1+1")
                                                                          (("5"
                                                                            (hide-all-but
                                                                             (1
                                                                              -5))
                                                                            (("5"
                                                                              (lemma
                                                                               "x_section_measurable[T1,T2]"
                                                                               ("Z"
                                                                                "IUnion(1+j!1,X!1)"
                                                                                "S1"
                                                                                "S1"
                                                                                "S2"
                                                                                "S2"
                                                                                "x"
                                                                                "x!1"))
                                                                              (("5"
                                                                                (assert)
                                                                                (("5"
                                                                                  (rewrite
                                                                                   "IUnion_n_def")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (hide -9 -10 2 -6 -8)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (expand "ff")
                                            (("2"
                                              (expand "FF")
                                              (("2"
                                                (lemma
                                                 "fm_monotone[T2,S2,nu!1]"
                                                 ("A"
                                                  "x_section(IUnion(n!1, X!1), x!1)"
                                                  "B"
                                                  "x_section(IUnion(X!1), x!1)"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand "subset?")
                                                      (("2"
                                                        (expand "member")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "x_section")
                                                            (("2"
                                                              (expand
                                                               "IUnion")
                                                              (("2"
                                                                (expand
                                                                 "image")
                                                                (("2"
                                                                  (expand
                                                                   "Union")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (typepred
                                                                       "a!1")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "x!3")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp)
                                    (("2"
                                      (lemma
                                       "x_section_measurable[T1,T2]"
                                       ("Z"
                                        "IUnion[nat, [T1, T2]](X!1)"
                                        "S1"
                                        "S1"
                                        "S2"
                                        "S2"
                                        "x"
                                        "x!1"))
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (skosimp)
                                    (("2" (expand "FF")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (rewrite "IUnion_n_def")
                                            (("2"
                                              (lemma
                                               "fm_subset_le[T2,S2,nu!1]"
                                               ("A"
                                                "x_section(IUnion(n!1, X!1), x!1)"
                                                "B"
                                                "x_section(union(IUnion(n!1, X!1), X!1(1 + n!1)), x!1)"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "x_section_union")
                                                    (("2"
                                                      (expand "union")
                                                      (("2"
                                                        (expand "subset?")
                                                        (("2"
                                                          (expand "member")
                                                          (("2"
                                                            (skosimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp)
                                (("2" (inst - "n!1")
                                  (("2" (inst -7 "IUnion(n!1, X!1)")
                                    (("2" (expand "FF")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (induct "n")
                                (("1" (rewrite "IUnion_0_def")
                                  (("1" (assert) nil nil)) nil)
                                 ("2" (skosimp)
                                  (("2" (rewrite "IUnion_n_def")
                                    (("2" (assert)
                                      (("2"
                                        (typepred "X!1(1 + j!1)")
                                        (("2"
                                          (lemma
                                           "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                           ("x"
                                            "IUnion(j!1, X!1)"
                                            "y"
                                            "X!1(1 + j!1)"))
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (skolem + ("_" "x!1"))
                              (("2" (induct "n")
                                (("1" (rewrite "IUnion_0_def")
                                  (("1"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "X!1(0)" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("1" (expand "member")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (skosimp*)
                                  (("2"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "X!1(j!1+1)" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("2" (expand "member")
                                      (("2"
                                        (rewrite "IUnion_n_def")
                                        (("2"
                                          (rewrite "x_section_union")
                                          (("2"
                                            (lemma
                                             "sigma_algebra_union[T2,S2]"
                                             ("x"
                                              "x_section(IUnion(j!1, X!1), x!1)"
                                              "y"
                                              "x_section(X!1(1 + j!1), x!1)"))
                                            (("1"
                                              (expand "member")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2"
                          (lemma "x_section_integrable"
                           ("mu" "mu!1" "nu" "nu!1" "M" "X!1(x!1)"))
                          (("2" (expand "o ")
                            (("2" (expand "x_section" -1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skosimp)
                        (("3"
                          (lemma "x_section_measurable[T1,T2]"
                           ("S1" "S1" "S2" "S2" "Z" "X!1(x!1)" "x" "x!2"))
                          (("3" (expand "member") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (skosimp*)
              (("2"
                (lemma "x_section_measurable[T1,T2]"
                 ("Z" "M!1" "S1" "S1" "S2" "S2" "x" "x1!1"))
                (("2" (expand "member")
                  (("2" (expand "x_section" 1) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (finite_measure_def formula-decl nil measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integral const-decl "real" integral nil) (set type-eq-decl nil sets nil)
    (x_section const-decl "[T1 -> set[T2]]" cross_product topology)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (sequence type-eq-decl nil sequences nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (fm_subset_le formula-decl nil finite_measure nil)
    (converges_upto? const-decl "bool" convergence_aux metric_space)
    (convergence const-decl "bool" convergence_sequences analysis)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (limit const-decl "real" convergence_sequences analysis)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence nil)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil) (Union const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (sigma def-decl "real" sigma reals)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (bounded? const-decl "bool" real_fun_preds reals)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (integral_nonneg formula-decl nil integral nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (integral_ae_le formula-decl nil integral nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (mu const-decl "nnreal" measure_props nil)
    (null_set? const-decl "bool" measure_theory nil)
    (subset? const-decl "bool" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (monotone_convergence_scaf formula-decl nil integral_convergence_scaf nil)
    (fm_monotone formula-decl nil finite_measure nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool" generalized_measure_def
     nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (x_section_measurable formula-decl nil product_sigma_def nil)
    (integral_add formula-decl nil integral nil)
    (x_section_disjoint formula-decl nil product_sections nil)
    (x_section_union formula-decl nil product_sections nil)
    (emptyset const-decl "set" sets nil)
    (x_section const-decl "set[T2]" cross_product topology)
    (fm_emptyset formula-decl nil finite_measure nil)
    (integral_zero formula-decl nil integral nil))
   shostak
   (fm_times subtype
    "LAMBDA M: integral[product_finite_measure.T1, product_finite_measure.S1, generalized_measure_def[product_finite_measure.T1, product_finite_measure.S1].to_measure(product_finite_measure.mu)].integral(function_props[product_finite_measure.T1, (product_finite_measure.S2), nnreal].o(product_finite_measure.nu, cross_product[product_finite_measure.T1, product_finite_measure.T2].x_section(product_finite_measure.M)))"
    "finite_measure[[T1, T2], sigma_times[T1, T2](S1, S2)]"))
  (fm_times_TCC3-1 nil 3431017313
   ("" (skosimp)
    (("" (lemma "fm_times_TCC1" ("mu" "mu!1" "nu" "nu!1"))
      (("" (lemma "fm_times_TCC2" ("mu" "mu!1" "nu" "nu!1"))
        (("" (rewrite "finite_measure_def")
          (("1" (split 1)
            (("1" (inst -2 "emptyset[[T1,T2]]")
              (("1" (assert)
                (("1" (inst -1 "emptyset[[T1,T2]]")
                  (("1"
                    (case-replace
                     "x_section[T1, T2](emptyset[[T1, T2]])=lambda (x:T1): emptyset[T2]")
                    (("1" (hide -1)
                      (("1" (expand "o")
                        (("1" (rewrite "fm_emptyset[T2,S2,nu!1]")
                          (("1"
                            (rewrite
                             "integral_zero[T1, S1, to_measure[T1, S1](mu!1)]"
                             1)
                            nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (apply-extensionality :hide? t)
                          (("2" (expand "emptyset")
                            (("2" (expand "x_section")
                              (("2" (expand "x_section")
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (expand "o")
                (("2" (typepred "nu!1")
                  (("2" (rewrite "finite_measure_def" -1)
                    (("2" (flatten)
                      (("2" (hide -3)
                        (("2"
                          (case-replace
                           "(LAMBDA (x: T1): nu!1(x_section[T1, T2](union(a!1, b!1))(x)))=(reals@real_fun_ops.+)((LAMBDA (x: T1): nu!1(x_section[T1, T2](a!1)(x))),(LAMBDA (x: T1): nu!1(x_section[T1, T2](b!1)(x))))")
                          (("1" (hide -1)
                            (("1" (expand "x_section")
                              (("1"
                                (rewrite
                                 "integral_add[T1, S1, to_measure[T1, S1](mu!1)]"
                                 1)
                                (("1" (inst -5 "b!1") nil nil)
                                 ("2" (skosimp)
                                  (("2"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "b!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("2" (expand "member")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("3" (inst -5 "a!1") nil nil)
                                 ("4" (skosimp)
                                  (("4"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "a!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("4" (expand "member")
                                      (("4" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -4 -5 2)
                            (("2" (apply-extensionality :hide? t)
                              (("1" (expand "+")
                                (("1"
                                  (lemma "x_section_disjoint"
                                   ("X" "a!1" "Y" "b!1" "a" "x!1"))
                                  (("1" (assert)
                                    (("1"
                                      (inst
                                       -
                                       "x_section(a!1, x!1)"
                                       "x_section(b!1, x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "x_section" 1)
                                          (("1"
                                            (rewrite "x_section_union")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "x_section_measurable[T1,T2]"
                                         ("Z"
                                          "b!1"
                                          "S1"
                                          "S1"
                                          "S2"
                                          "S2"
                                          "x"
                                          "x!1"))
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma
                                         "x_section_measurable[T1,T2]"
                                         ("Z"
                                          "a!1"
                                          "S1"
                                          "S1"
                                          "S2"
                                          "S2"
                                          "x"
                                          "x!1"))
                                        (("3"
                                          (expand "member")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp)
                                (("2" (expand "+")
                                  (("2" (expand "x_section")
                                    (("2"
                                      (lemma
                                       "x_section_measurable[T1,T2]"
                                       ("Z"
                                        "a!1"
                                        "S1"
                                        "S1"
                                        "S2"
                                        "S2"
                                        "x"
                                        "x1!1"))
                                      (("2"
                                        (lemma
                                         "x_section_measurable[T1,T2]"
                                         ("Z"
                                          "b!1"
                                          "S1"
                                          "S1"
                                          "S2"
                                          "S2"
                                          "x"
                                          "x1!1"))
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (typepred
                                             "nu!1(x_section(a!1, x1!1))")
                                            (("2"
                                              (typepred
                                               "nu!1(x_section(b!1, x1!1))")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (skosimp)
                                (("3" (expand "x_section")
                                  (("3"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "b!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("3" (expand "member")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("4" (skosimp)
                                (("4" (expand "x_section")
                                  (("4"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "a!1" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("4" (expand "member")
                                      (("4" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("5" (skosimp)
                                (("5" (expand "x_section")
                                  (("5"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2"
                                      "x" "x!1"))
                                    (("5" (expand "member")
                                      (("5" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (skosimp)
                              (("3" (expand "x_section")
                                (("3"
                                  (lemma "x_section_measurable[T1,T2]"
                                   ("Z" "b!1" "S1" "S1" "S2" "S2" "x" "x!1"))
                                  (("3" (expand "member")
                                    (("3" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (expand "x_section")
                              (("4" (skosimp)
                                (("4"
                                  (lemma "x_section_measurable[T1,T2]"
                                   ("Z" "a!1" "S1" "S1" "S2" "S2" "x" "x!1"))
                                  (("4" (expand "member")
                                    (("4" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide-all-but 1)
                            (("5" (skosimp)
                              (("5" (expand "x_section")
                                (("5"
                                  (lemma "x_section_measurable[T1,T2]"
                                   ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2"
                                    "x" "x!1"))
                                  (("5" (expand "member")
                                    (("5" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (typepred "X!1")
                (("3" (expand "o ")
                  (("3" (expand "x_section")
                    (("3"
                      (name "SS" "(LAMBDA (x_1: nat):
                     integral[T1, S1, to_measure[T1, S1](mu!1)]
                         (LAMBDA (x: T1): nu!1(x_section(X!1(x_1), x))))")
                      (("1" (replace -1)
                        (("1"
                          (name "FF"
                                "lambda (n:nat): LAMBDA x: nu!1(x_section(IUnion(n,X!1), x))")
                          (("1"
                            (case "forall (n:nat): sigma_times(S1,S2)(IUnion(n,X!1))")
                            (("1"
                              (case "forall (n: nat): integrable?[T1, S1, to_measure[T1, S1](mu!1)](FF(n))")
                              (("1"
                                (case "forall (n:nat,x): 0<=FF(n)(x) & FF(n)(x)<=FF(n+1)(x)")
                                (("1"
                                  (name "ff"
                                        "LAMBDA (x: T1): nu!1(x_section(IUnion(X!1), x))")
                                  (("1" (replace -1)
                                    (("1"
                                      (case
                                       "forall (n:nat,x): FF(n)(x)<=ff(x)")
                                      (("1"
                                        (lemma
                                         "monotone_convergence_scaf[T1, S1, to_measure[T1, S1](mu!1)]"
                                         ("F" "FF" "f" "ff"))
                                        (("1"
                                          (case-replace
                                           "series(SS) = integral[T1, S1, to_measure[T1, S1](mu!1)] o FF")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "converges_upto?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (name-replace
                                                       "LHS"
                                                       "integral[T1, S1, to_measure[T1, S1](mu!1)](ff)")
                                                      (("1"
                                                        (name-replace
                                                         "DRL1"
                                                         "integral[T1, S1, to_measure[T1, S1](mu!1)] o FF")
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 -12 1))
                                                          (("1"
                                                            (lemma
                                                             "convergence_sequences.limit_lemma"
                                                             ("v" "DRL1"))
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (rewrite
                                                                 "metric_convergence_def")
                                                                (("1"
                                                                  (expand
                                                                   "convergence")
                                                                  (("1"
                                                                    (name-replace
                                                                     "RHS"
                                                                     "convergence_sequences.limit(DRL1)")
                                                                    (("1"
                                                                      (expand
                                                                       "metric_converges_to")
                                                                      (("1"
                                                                        (expand
                                                                         "ball")
                                                                        (("1"
                                                                          (expand
                                                                           "member")
                                                                          (("1"
                                                                            (case
                                                                             "LHS>RHS")
                                                                            (("1"
                                                                              (hide
                                                                               1)
                                                                              (("1"
                                                                                (name
                                                                                 "DELTA"
                                                                                 "(LHS-RHS)/2")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "DELTA")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "DELTA")
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "n!1+n!2")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "n!1+n!2")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "triangle")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "LHS - DRL1(n!1 + n!2)"
                                                                                                 "DRL1(n!1 + n!2) - RHS")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand
                                                   "pointwise_converges_upto?")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "pointwise_convergence?")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (typepred "nu!1")
                                                          (("1"
                                                            (expand
                                                             "finite_measure?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (name
                                                                 "XX"
                                                                 "lambda (n:nat): x_section(X!1(n), x!1)")
                                                                (("1"
                                                                  (case
                                                                   "disjoint?(XX)")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "XX")
                                                                    (("1"
                                                                      (case-replace
                                                                       "nu!1(IUnion(XX)) = ff(x!1)")
                                                                      (("1"
                                                                        (name-replace
                                                                         "RHS"
                                                                         "ff(x!1)")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (case-replace
                                                                             "series(nu!1 o XX)=LAMBDA (n:nat): FF(n)(x!1)")
                                                                            (("1"
                                                                              (name-replace
                                                                               "LHS"
                                                                               "LAMBDA (n:nat): FF(n)(x!1)")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-5
                                                                                  1))
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "metric_convergence_def")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "convergence")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "metric_converges_to")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "r!1")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               " n!1")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "i!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "ball")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (case
                                                                                 "forall (n:nat): series(nu!1 o XX)(n) = FF(n)(x!1)")
                                                                                (("1"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (induct
                                                                                     "n")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "FF")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "IUnion_0_def")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "o ")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "series")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "XX")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "series")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "sigma"
                                                                                           1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "o ")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "FF")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "IUnion_n_def")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "XX")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "x_section_union")
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "fm_disjointunion[T2,S2,nu!1]"
                                                                                                         ("A"
                                                                                                          "x_section(IUnion(j!1, X!1), x!1)"
                                                                                                          "B"
                                                                                                          "x_section(X!1(1 + j!1), x!1)"))
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (hide-all-but
                                                                                                             (-2
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "disjoint?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "disjoint?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "intersection")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "empty?")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "x_section")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "IUnion")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "image")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "Union")
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (typepred
                                                                                                                                     "a!1")
                                                                                                                                    (("2"
                                                                                                                                      (skolem
                                                                                                                                       -
                                                                                                                                       "n!2")
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "n!2")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "n!2"
                                                                                                                                           "1+j!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "x!2")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "ff")
                                                                        (("2"
                                                                          (expand
                                                                           "XX")
                                                                          (("2"
                                                                            (case-replace
                                                                             "IUnion(LAMBDA (n: nat): x_section(X!1(n), x!1))=x_section(IUnion(X!1), x!1)")
                                                                            (("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (apply-extensionality
                                                                                 :hide?
                                                                                 t)
                                                                                (("2"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "x_section")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "disjoint_indexed_measurable?")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skolem
                                                                           +
                                                                           "n!1")
                                                                          (("2"
                                                                            (expand
                                                                             "XX")
                                                                            (("2"
                                                                              (lemma
                                                                               "x_section_measurable[T1,T2]"
                                                                               ("Z"
                                                                                "X!1(n!1)"
                                                                                "S1"
                                                                                "S1"
                                                                                "S2"
                                                                                "S2"
                                                                                "x"
                                                                                "x!1"))
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-11 1))
                                                                    (("2"
                                                                      (expand
                                                                       "XX")
                                                                      (("2"
                                                                        (expand
                                                                         "disjoint_indexed_measurable?")
                                                                        (("2"
                                                                          (expand
                                                                           "disjoint?")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "i!1"
                                                                               "j!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "x_section_disjoint"
                                                                                   ("X"
                                                                                    "X!1(i!1)"
                                                                                    "Y"
                                                                                    "X!1(j!1)"
                                                                                    "a"
                                                                                    "x!1"))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "pointwise_increasing?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (case
                                                           "forall (i,j:nat): FF(i)(x!1)<=FF(i+j)(x!1)")
                                                          (("1"
                                                            (expand
                                                             "increasing?")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!2"
                                                                 "y!1-x!2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1))
                                                            (("2"
                                                              (induct "j")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "i!1")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i!1+j!1"
                                                                     "x!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (expand "bounded?")
                                                  (("3"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "bounded_above?")
                                                      (("1"
                                                        (inst
                                                         +
                                                         "integral[T1, S1, to_measure(mu!1)](ff)")
                                                        (("1"
                                                          (expand "o ")
                                                          (("1"
                                                            (skolem + "n!1")
                                                            (("1"
                                                              (inst - "n!1")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n!1"
                                                                 "_")
                                                                (("1"
                                                                  (lemma
                                                                   "integral_ae_le[T1, S1, to_measure(mu!1)]"
                                                                   ("f1"
                                                                    "FF(n!1)"
                                                                    "f2"
                                                                    "ff"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "ae_le?")
                                                                      (("1"
                                                                        (expand
                                                                         "pointwise_ae?")
                                                                        (("1"
                                                                          (expand
                                                                           "ae?")
                                                                          (("1"
                                                                            (expand
                                                                             "fullset")
                                                                            (("1"
                                                                              (expand
                                                                               "ae_in?")
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "emptyset")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "x!1")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "negligible_set?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "emptyset[T1]")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "null_set?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "measurable_set?")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "mu!1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "mu_fin?")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "mu")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "to_measure")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "finite_measure?")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "subset?")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "ff")
                                                          (("2"
                                                            (inst
                                                             -11
                                                             "IUnion(X!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "bounded_below?")
                                                      (("2"
                                                        (inst + "0")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand "o ")
                                                            (("2"
                                                              (lemma
                                                               "integral_nonneg[T1, S1, to_measure(mu!1)]"
                                                               ("f"
                                                                "FF(x!1)"))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "x!1"
                                                                     "x!2")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (case
                                               "forall (n:nat): series(SS)(n) = integral[T1, S1, to_measure[T1, S1](mu!1)](FF(n))")
                                              (("1"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (inst - "x!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "o ")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (induct "n")
                                                  (("1"
                                                    (expand "series")
                                                    (("1"
                                                      (expand "sigma")
                                                      (("1"
                                                        (expand "sigma")
                                                        (("1"
                                                          (expand "SS")
                                                          (("1"
                                                            (expand "FF")
                                                            (("1"
                                                              (rewrite
                                                               "IUnion_0_def")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (expand "series")
                                                      (("2"
                                                        (expand "sigma" 1)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (expand "FF")
                                                              (("2"
                                                                (rewrite
                                                                 "IUnion_n_def"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "SS")
                                                                  (("2"
                                                                    (case-replace
                                                                     "(LAMBDA x:
              nu!1(x_section(union(IUnion(j!1, X!1), X!1(1 + j!1)), x)))=(reals@real_fun_ops.+)(LAMBDA x: nu!1(x_section(IUnion(j!1, X!1), x)),LAMBDA (x: T1): nu!1(x_section(X!1(1 + j!1), x)))")
                                                                    (("1"
                                                                      (rewrite
                                                                       "integral_add[T1, S1, to_measure[T1, S1](mu!1)]")
                                                                      (("1"
                                                                        (inst
                                                                         -10
                                                                         "X!1(1 + j!1)")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (lemma
                                                                             "x_section_measurable[T1,T2]"
                                                                             ("Z"
                                                                              "X!1(1+j!1)"
                                                                              "S1"
                                                                              "S1"
                                                                              "S2"
                                                                              "S2"
                                                                              "x"
                                                                              "x!1"))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (inst
                                                                         -10
                                                                         "IUnion[[T1, T2]](j!1, X!1)")
                                                                        (("3"
                                                                          (inst
                                                                           -6
                                                                           "j!1")
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skosimp)
                                                                        (("4"
                                                                          (inst
                                                                           -6
                                                                           "j!1")
                                                                          (("4"
                                                                            (lemma
                                                                             "x_section_measurable[T1,T2]"
                                                                             ("Z"
                                                                              "IUnion(j!1,X!1)"
                                                                              "S1"
                                                                              "S1"
                                                                              "S2"
                                                                              "S2"
                                                                              "x"
                                                                              "x!1"))
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (hide
                                                                         -9
                                                                         -10
                                                                         -6
                                                                         -8)
                                                                        (("2"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (expand
                                                                             "+")
                                                                            (("1"
                                                                              (rewrite
                                                                               "x_section_union")
                                                                              (("1"
                                                                                (lemma
                                                                                 "fm_disjointunion[T2,S2,nu!1]"
                                                                                 ("A"
                                                                                  "x_section(IUnion(j!1, X!1), x!1)"
                                                                                  "B"
                                                                                  "x_section(X!1(1 + j!1), x!1)"))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      -6))
                                                                                    (("1"
                                                                                      (expand
                                                                                       "disjoint_indexed_measurable?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "disjoint?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "disjoint?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "intersection")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "empty?")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "x_section")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "IUnion")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "image")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "Union")
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "a!1")
                                                                                                                (("1"
                                                                                                                  (skolem
                                                                                                                   -
                                                                                                                   "n!2")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "n!2")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "n!2"
                                                                                                                       "1+j!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "(x!1, x!2)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (expand
                                                                               "+")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (lemma
                                                                               "x_section_measurable[T1,T2]"
                                                                               ("Z"
                                                                                "X!1(1+j!1)"
                                                                                "S1"
                                                                                "S1"
                                                                                "S2"
                                                                                "S2"
                                                                                "x"
                                                                                "x!1"))
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (skosimp)
                                                                            (("4"
                                                                              (inst
                                                                               -5
                                                                               "j!1")
                                                                              (("4"
                                                                                (lemma
                                                                                 "x_section_measurable[T1,T2]"
                                                                                 ("Z"
                                                                                  "IUnion(j!1,X!1)"
                                                                                  "S1"
                                                                                  "S1"
                                                                                  "S2"
                                                                                  "S2"
                                                                                  "x"
                                                                                  "x!1"))
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (skosimp)
                                                                            (("5"
                                                                              (inst
                                                                               -5
                                                                               "1+j!1")
                                                                              (("5"
                                                                                (lemma
                                                                                 "x_section_measurable[T1,T2]"
                                                                                 ("Z"
                                                                                  "IUnion(1+j!1,X!1)"
                                                                                  "S1"
                                                                                  "S1"
                                                                                  "S2"
                                                                                  "S2"
                                                                                  "x"
                                                                                  "x!1"))
                                                                                (("5"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("5"
                                                                                    (assert)
                                                                                    (("5"
                                                                                      (rewrite
                                                                                       "IUnion_n_def")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (lemma
                                                                         "x_section_measurable[T1,T2]"
                                                                         ("Z"
                                                                          "X!1(1+j!1)"
                                                                          "S1"
                                                                          "S1"
                                                                          "S2"
                                                                          "S2"
                                                                          "x"
                                                                          "x!1"))
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (skosimp)
                                                                      (("4"
                                                                        (inst
                                                                         -5
                                                                         "j!1")
                                                                        (("4"
                                                                          (lemma
                                                                           "x_section_measurable[T1,T2]"
                                                                           ("Z"
                                                                            "IUnion(j!1,X!1)"
                                                                            "S1"
                                                                            "S1"
                                                                            "S2"
                                                                            "S2"
                                                                            "x"
                                                                            "x!1"))
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (skosimp)
                                                                      (("5"
                                                                        (hide
                                                                         2)
                                                                        (("5"
                                                                          (inst
                                                                           -5
                                                                           "j!1+1")
                                                                          (("5"
                                                                            (hide-all-but
                                                                             (1
                                                                              -5))
                                                                            (("5"
                                                                              (lemma
                                                                               "x_section_measurable[T1,T2]"
                                                                               ("Z"
                                                                                "IUnion(1+j!1,X!1)"
                                                                                "S1"
                                                                                "S1"
                                                                                "S2"
                                                                                "S2"
                                                                                "x"
                                                                                "x!1"))
                                                                              (("5"
                                                                                (assert)
                                                                                (("5"
                                                                                  (rewrite
                                                                                   "IUnion_n_def")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (hide -9 -10 2 -6 -8)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (expand "ff")
                                            (("2"
                                              (expand "FF")
                                              (("2"
                                                (lemma
                                                 "fm_monotone[T2,S2,nu!1]"
                                                 ("A"
                                                  "x_section(IUnion(n!1, X!1), x!1)"
                                                  "B"
                                                  "x_section(IUnion(X!1), x!1)"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand "subset?")
                                                      (("2"
                                                        (expand "member")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "x_section")
                                                            (("2"
                                                              (expand
                                                               "IUnion")
                                                              (("2"
                                                                (expand
                                                                 "image")
                                                                (("2"
                                                                  (expand
                                                                   "Union")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (typepred
                                                                       "a!1")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "x!3")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp)
                                    (("2"
                                      (lemma
                                       "x_section_measurable[T1,T2]"
                                       ("Z"
                                        "IUnion[nat, [T1, T2]](X!1)"
                                        "S1"
                                        "S1"
                                        "S2"
                                        "S2"
                                        "x"
                                        "x!1"))
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (skosimp)
                                    (("2" (expand "FF")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (rewrite "IUnion_n_def")
                                            (("2"
                                              (lemma
                                               "fm_subset_le[T2,S2,nu!1]"
                                               ("A"
                                                "x_section(IUnion(n!1, X!1), x!1)"
                                                "B"
                                                "x_section(union(IUnion(n!1, X!1), X!1(1 + n!1)), x!1)"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "x_section_union")
                                                    (("2"
                                                      (expand "union")
                                                      (("2"
                                                        (expand "subset?")
                                                        (("2"
                                                          (expand "member")
                                                          (("2"
                                                            (skosimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp)
                                (("2" (inst - "n!1")
                                  (("2" (inst -7 "IUnion(n!1, X!1)")
                                    (("2" (expand "FF")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (induct "n")
                                (("1" (rewrite "IUnion_0_def")
                                  (("1" (assert) nil nil)) nil)
                                 ("2" (skosimp)
                                  (("2" (rewrite "IUnion_n_def")
                                    (("2" (assert)
                                      (("2"
                                        (typepred "X!1(1 + j!1)")
                                        (("2"
                                          (lemma
                                           "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                           ("x"
                                            "IUnion(j!1, X!1)"
                                            "y"
                                            "X!1(1 + j!1)"))
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (skolem + ("_" "x!1"))
                              (("2" (induct "n")
                                (("1" (rewrite "IUnion_0_def")
                                  (("1"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "X!1(0)" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("1" (expand "member")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (skosimp*)
                                  (("2"
                                    (lemma "x_section_measurable[T1,T2]"
                                     ("Z" "X!1(j!1+1)" "S1" "S1" "S2" "S2" "x"
                                      "x!1"))
                                    (("2" (expand "member")
                                      (("2"
                                        (rewrite "IUnion_n_def")
                                        (("2"
                                          (rewrite "x_section_union")
                                          (("2"
                                            (lemma
                                             "sigma_algebra_union[T2,S2]"
                                             ("x"
                                              "x_section(IUnion(j!1, X!1), x!1)"
                                              "y"
                                              "x_section(X!1(1 + j!1), x!1)"))
                                            (("1"
                                              (expand "member")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2"
                          (lemma "x_section_integrable"
                           ("mu" "mu!1" "nu" "nu!1" "M" "X!1(x!1)"))
                          (("2" (expand "o ")
                            (("2" (expand "x_section" -1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skosimp)
                        (("3"
                          (lemma "x_section_measurable[T1,T2]"
                           ("S1" "S1" "S2" "S2" "Z" "X!1(x!1)" "x" "x!2"))
                          (("3" (expand "member") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (skosimp*)
              (("2"
                (lemma "x_section_measurable[T1,T2]"
                 ("Z" "M!1" "S1" "S1" "S2" "S2" "x" "x1!1"))
                (("2" (expand "member")
                  (("2" (expand "x_section" 1) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral_zero formula-decl nil integral nil)
    (fm_emptyset formula-decl nil finite_measure nil)
    (x_section const-decl "set[T2]" cross_product topology)
    (emptyset const-decl "set" sets nil)
    (x_section_union formula-decl nil product_sections nil)
    (x_section_disjoint formula-decl nil product_sections nil)
    (integral_add formula-decl nil integral nil)
    (x_section_measurable formula-decl nil product_sigma_def nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (disjoint_indexed_measurable? const-decl "bool" generalized_measure_def
     nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (fm_monotone formula-decl nil finite_measure nil)
    (monotone_convergence_scaf formula-decl nil integral_convergence_scaf nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (subset? const-decl "bool" sets nil)
    (null_set? const-decl "bool" measure_theory nil)
    (mu const-decl "nnreal" measure_props nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (integral_ae_le formula-decl nil integral nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (integral_nonneg formula-decl nil integral nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (bounded? const-decl "bool" real_fun_preds reals)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (metric? const-decl "bool" metric_def metric_space)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (sigma def-decl "real" sigma reals)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (empty? const-decl "bool" sets nil) (Union const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence nil)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (limit const-decl "real" convergence_sequences analysis)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (convergence const-decl "bool" convergence_sequences analysis)
    (converges_upto? const-decl "bool" convergence_aux metric_space)
    (fm_subset_le formula-decl nil finite_measure nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (sequence type-eq-decl nil sequences nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (x_section const-decl "[T1 -> set[T2]]" cross_product topology)
    (set type-eq-decl nil sets nil) (integral const-decl "real" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (finite_measure_def formula-decl nil measure_def nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil))
   nil
   (fm_times subtype
    "LAMBDA M: integral[product_finite_measure.T1, product_finite_measure.S1, generalized_measure_def[product_finite_measure.T1, product_finite_measure.S1].to_measure(product_finite_measure.mu)].integral(function_props[product_finite_measure.T1, (product_finite_measure.S2), nnreal].o(product_finite_measure.nu, cross_product[product_finite_measure.T1, product_finite_measure.T2].x_section(product_finite_measure.M)))"
    "finite_measure[[T1, T2], sigma_times[T1, T2](S1, S2)]")))
 (fm_times_alt_TCC1 0
  (fm_times_alt_TCC1-1 nil 3455596585
   ("" (skosimp)
    (("" (lemma "y_section_integrable" ("mu" "mu!1" "nu" "nu!1" "M" "M!1"))
      (("" (propax) nil nil)) nil))
    nil)
   ((finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (y_section_integrable formula-decl nil product_finite_measure nil))
   nil
   (fm_times_alt subtype
    "function_props[product_finite_measure.T2, (product_finite_measure.S1), nnreal].o(product_finite_measure.mu, cross_product[product_finite_measure.T1, product_finite_measure.T2].y_section(product_finite_measure.M))"
    "integrable[T2, S2, to_measure[T2, S2](nu)]")))
 (fm_times_alt_TCC2 0
  (fm_times_alt_TCC2-1 nil 3455596585
   ("" (skosimp)
    (("" (lemma "y_section_integrable" ("mu" "mu!1" "nu" "nu!1" "M" "M!1"))
      ((""
        (lemma "integral_nonneg[T2, S2, to_measure[T2, S2](nu!1)]"
         ("f" "mu!1 o y_section(M!1)"))
        (("" (assert)
          (("" (skosimp)
            (("" (lemma "y_section_bounded" ("mu" "mu!1" "M" "M!1" "y" "x!1"))
              (("" (flatten) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (y_section_integrable formula-decl nil product_finite_measure nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (y_section_bounded formula-decl nil product_finite_measure nil)
    (subset_algebra_fullset name-judgement "(S1)" product_finite_measure nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (integral_nonneg formula-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (O const-decl "T3" function_props nil) (set type-eq-decl nil sets nil)
    (y_section const-decl "[T2 -> set[T1]]" cross_product topology)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil))
   nil
   (fm_times_alt subtype
    "integral[product_finite_measure.T2, product_finite_measure.S2, generalized_measure_def[product_finite_measure.T2, product_finite_measure.S2].to_measure(product_finite_measure.nu)].integral(function_props[product_finite_measure.T2, (product_finite_measure.S1), nnreal].o(product_finite_measure.mu, cross_product[product_finite_measure.T1, product_finite_measure.T2].y_section(product_finite_measure.M)))"
    "nnreal")))
 (fm_times_alt 0
  (fm_times_alt-3 "" 3789904349
   ("" (skosimp)
    (("" (lemma "fm_times_alt_TCC1" ("mu" "mu!1" "nu" "nu!1"))
      (("" (lemma "fm_times_alt_TCC2" ("mu" "mu!1" "nu" "nu!1"))
        (("" (rewrite "finite_measure_def" 1)
          (("1" (split)
            (("1" (inst -2 "emptyset[[T1, T2]]")
              (("1"
                (case-replace
                 "y_section[T1, T2](emptyset[[T1, T2]])=lambda y: emptyset[T1]")
                (("1" (expand "o ")
                  (("1" (rewrite "fm_emptyset[T1,S1,mu!1]")
                    (("1"
                      (rewrite
                       "integral_zero[T2, S2, to_measure[T2, S2](nu!1)]" 1)
                      nil nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (apply-extensionality :hide? t)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (expand "o ")
                (("2" (typepred "mu!1")
                  (("2" (rewrite "finite_measure_def" -1)
                    (("2" (flatten)
                      (("2" (hide -3)
                        (("2"
                          (case-replace
                           "(LAMBDA y: mu!1(y_section[T1, T2](union(a!1, b!1))(y)))=(reals@real_fun_ops.+)((LAMBDA y: mu!1(y_section[T1, T2](a!1)(y))),(LAMBDA y: mu!1(y_section[T1, T2](b!1)(y))))")
                          (("1"
                            (rewrite
                             "integral_add[T2, S2, to_measure[T2, S2](nu!1)]"
                             1)
                            (("1" (inst -6 "b!1") nil nil)
                             ("2" (skosimp)
                              (("2" (expand "y_section")
                                (("2"
                                  (lemma "y_section_measurable[T1,T2]"
                                   ("Z" "b!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("3" (inst -6 "a!1") nil nil)
                             ("4" (skosimp)
                              (("4" (expand "y_section")
                                (("4"
                                  (lemma "y_section_measurable[T1,T2]"
                                   ("Z" "a!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                  (("4" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (apply-extensionality :hide? t)
                              (("1" (expand "+")
                                (("1" (expand "y_section")
                                  (("1" (rewrite "y_section_union")
                                    (("1"
                                      (inst
                                       -
                                       "y_section(a!1, x!1)"
                                       "y_section(b!1, x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2 -4 -3)
                                          (("1"
                                            (lemma
                                             "fm_disjointunion[T1,S1,mu!1]"
                                             ("A"
                                              "y_section(a!1, x!1)"
                                              "B"
                                              "y_section(b!1, x!1)"))
                                            (("1"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma
                                                   "y_section_disjoint"
                                                   ("X"
                                                    "a!1"
                                                    "Y"
                                                    "b!1"
                                                    "b"
                                                    "x!1"))
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "+")
                                (("2" (skosimp) (("2" (assert) nil nil)) nil))
                                nil)
                               ("3" (skosimp)
                                (("3" (expand "y_section")
                                  (("3"
                                    (lemma "y_section_measurable[T1,T2]"
                                     ("Z" "b!1" "S1" "S1" "S2" "S2" "y"
                                      "y!1"))
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("4" (skosimp)
                                (("4" (expand "y_section")
                                  (("4"
                                    (lemma "y_section_measurable[T1,T2]"
                                     ("Z" "a!1" "S1" "S1" "S2" "S2" "y"
                                      "y!1"))
                                    (("4" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("5" (skosimp)
                                (("5" (expand "y_section")
                                  (("5"
                                    (lemma "y_section_measurable[T1,T2]"
                                     ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2"
                                      "y" "y!1"))
                                    (("5" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp)
                            (("3" (expand "y_section")
                              (("3"
                                (lemma "y_section_measurable[T1,T2]"
                                 ("Z" "b!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("4" (skosimp)
                            (("4" (expand "y_section")
                              (("4"
                                (lemma "y_section_measurable[T1,T2]"
                                 ("Z" "a!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                (("4" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("5" (skosimp)
                            (("5" (expand "y_section")
                              (("5"
                                (lemma "y_section_measurable[T1,T2]"
                                 ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2" "y"
                                  "y!1"))
                                (("5" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (name "HH" "lambda M: mu!1 o y_section(M)")
              (("1"
                (case "FORALL (M):
        integrable?[T2, S2, to_measure(nu!1)](HH(M))")
                (("1" (hide -4)
                  (("1"
                    (case "FORALL (M):
        integral[T2, S2, to_measure[T2, S2](nu!1)](HH(M))>=0")
                    (("1" (hide -4)
                      (("1"
                        (case "FORALL (X:
                disjoint_indexed_measurable
                    [[T1, T2], sigma_times(S1, S2)]):
        convergence_sequences.convergent?(series((LAMBDA M:
                             integral[T2, S2, to_measure(nu!1)]
                                 (HH(M)))
                           o X))
         =>
         integral[T2, S2, to_measure(nu!1)](HH(IUnion(X))) <=
          convergence_sequences.limit
              (series((LAMBDA M:
                         integral[T2, S2, to_measure(nu!1)]
                             (HH(M)))
                       o X))")
                        (("1" (skosimp)
                          (("1" (inst - "X!1")
                            (("1" (expand "HH") (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (expand "o ")
                              (("2" (hide -4)
                                (("2"
                                  (name "SS" "LAMBDA (n: nat):
                     integral[T2, S2, to_measure[T2, S2](nu!1)](HH(X!1(n)))")
                                  (("1" (replace -1)
                                    (("1" (hide -1)
                                      (("1"
                                        (lemma
                                         "convergence_sequences.limit_lemma"
                                         ("v" "series(SS)"))
                                        (("1"
                                          (name-replace
                                           "RHS"
                                           "convergence_sequences.limit(series(SS))")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (case
                                               "forall (n:nat): sigma_times(S1,S2)(IUnion(n,X!1))")
                                              (("1"
                                                (name
                                                 "FF"
                                                 "lambda (n:nat): HH(IUnion(n,X!1))")
                                                (("1"
                                                  (case
                                                   "forall (n: nat): integrable?[T2, S2, to_measure[T2, S2](nu!1)](FF(n))")
                                                  (("1"
                                                    (case
                                                     "forall (n:nat): disjoint?(IUnion(n, X!1),X!1(1+n))")
                                                    (("1"
                                                      (case
                                                       "forall (n:nat,y): 0<=FF(n)(y) & FF(n)(y)<=FF(n+1)(y)")
                                                      (("1"
                                                        (case-replace
                                                         "series(SS) = integral[T2, S2, to_measure(nu!1)] o FF")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (name-replace
                                                             "ff"
                                                             "HH(IUnion(X!1))")
                                                            (("1"
                                                              (case
                                                               "forall (n:nat,y): FF(n)(y)<=ff(y)")
                                                              (("1"
                                                                (lemma
                                                                 "monotone_convergence_scaf[T2, S2, to_measure[T2, S2](nu!1)]"
                                                                 ("F"
                                                                  "FF"
                                                                  "f"
                                                                  "ff"))
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "converges_upto?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (name-replace
                                                                           "LHS"
                                                                           "integral[T2, S2, to_measure(nu!1)](ff)")
                                                                          (("1"
                                                                            (name-replace
                                                                             "DRL"
                                                                             "integral[T2, S2, to_measure(nu!1)] o FF")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-2
                                                                                -10
                                                                                1))
                                                                              (("1"
                                                                                (rewrite
                                                                                 "metric_convergence_def")
                                                                                (("1"
                                                                                  (expand
                                                                                   "convergence")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "metric_converges_to")
                                                                                    (("1"
                                                                                      (case
                                                                                       "LHS>RHS")
                                                                                      (("1"
                                                                                        (name
                                                                                         "DELTA"
                                                                                         "(LHS-RHS)/2")
                                                                                        (("1"
                                                                                          (case
                                                                                           "DELTA>0")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "DELTA")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "DELTA")
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "n!1+n!2")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "n!1+n!2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ball")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "triangle"
                                                                                                           ("x"
                                                                                                            "LHS - DRL(n!1 + n!2)"
                                                                                                            "y"
                                                                                                            "DRL(n!1 + n!2) - RHS"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (expand
                                                                       "pointwise_converges_upto?")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           "pointwise_convergence?")
                                                                          (("1"
                                                                            (skolem
                                                                             +
                                                                             "y!1")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (1
                                                                                -6
                                                                                -3))
                                                                              (("1"
                                                                                (typepred
                                                                                 "mu!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "ff")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "FF")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "HH")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "o ")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "y_section")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "finite_measure?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (name
                                                                                                 "XX"
                                                                                                 "lambda (n:nat): y_section(X!1(n),y!1)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "XX")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "y_section(IUnion(X!1), y!1)=IUnion(XX)")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "RHS1"
                                                                                                       "mu!1(IUnion(XX))")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "(LAMBDA (n:nat): mu!1(y_section(IUnion(n, X!1), y!1)))=series(mu!1 o XX)")
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-4
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (name-replace
                                                                                                               "DRL3"
                                                                                                               "series(mu!1 o XX)")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "metric_convergence_def")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "convergence")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "metric_converges_to")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "r!1")
                                                                                                                        (("1"
                                                                                                                          (skosimp)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             +
                                                                                                                             "n!1")
                                                                                                                            (("1"
                                                                                                                              (skosimp)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "i!1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "ball")
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "forall (n:nat): FF(n)(y!1) = series(mu!1 o XX)(n)")
                                                                                                              (("1"
                                                                                                                (apply-extensionality
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "FF")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "HH")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "o ")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "y_section"
                                                                                                                           -1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "o")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "series")
                                                                                                                    (("2"
                                                                                                                      (induct
                                                                                                                       "x1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sigma")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sigma")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "sigma"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (skolem
                                                                                                                         +
                                                                                                                         "n!1")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "XX")
                                                                                                                          (("3"
                                                                                                                            (lemma
                                                                                                                             "y_section_measurable[T1,T2]"
                                                                                                                             ("Z"
                                                                                                                              "X!1(n!1)"
                                                                                                                              "S1"
                                                                                                                              "S1"
                                                                                                                              "S2"
                                                                                                                              "S2"
                                                                                                                              "y"
                                                                                                                              "y!1"))
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (skosimp)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -6
                                                                                                                     "n!1")
                                                                                                                    (("3"
                                                                                                                      (lemma
                                                                                                                       "y_section_measurable[T1,T2]"
                                                                                                                       ("Z"
                                                                                                                        "IUnion(n!1,X!1)"
                                                                                                                        "S1"
                                                                                                                        "S1"
                                                                                                                        "S2"
                                                                                                                        "S2"
                                                                                                                        "y"
                                                                                                                        "y!1"))
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (induct
                                                                                                                   "n")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "series")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sigma")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sigma")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "FF")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "HH")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "o ")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "XX")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "IUnion_0_def")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "y_section"
                                                                                                                                     1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "series")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "sigma"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           *
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "FF")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "HH")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "o ")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "y_section")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "XX")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "j!1")
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "IUnion_n_def"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "y_section_union")
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "fm_disjointunion[T1,S1,mu!1]"
                                                                                                                                                 ("A"
                                                                                                                                                  "y_section(IUnion(j!1, X!1), y!1)"
                                                                                                                                                  "B"
                                                                                                                                                  "y_section(X!1(1 + j!1), y!1)"))
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "y_section_disjoint"
                                                                                                                                                     ("X"
                                                                                                                                                      "IUnion(j!1, X!1)"
                                                                                                                                                      "Y"
                                                                                                                                                      "X!1(1 + j!1)"
                                                                                                                                                      "b"
                                                                                                                                                      "y!1"))
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (skosimp)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -5
                                                                                                               "n!1")
                                                                                                              (("3"
                                                                                                                (lemma
                                                                                                                 "y_section_measurable[T1,T2]"
                                                                                                                 ("Z"
                                                                                                                  "IUnion(n!1,X!1)"
                                                                                                                  "S1"
                                                                                                                  "S1"
                                                                                                                  "S2"
                                                                                                                  "S2"
                                                                                                                  "y"
                                                                                                                  "y!1"))
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (apply-extensionality
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "y_section")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "XX")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "y_section")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "IUnion")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         +
                                                                                                         "n!1")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "XX")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "y_section_measurable[T1,T2]"
                                                                                                             ("Z"
                                                                                                              "X!1(n!1)"
                                                                                                              "S1"
                                                                                                              "S1"
                                                                                                              "S2"
                                                                                                              "S2"
                                                                                                              "y"
                                                                                                              "y!1"))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "X!1")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "disjoint_indexed_measurable?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "disjoint?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "XX")
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "i!1"
                                                                                                                     "j!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "y_section_disjoint"
                                                                                                                         ("X"
                                                                                                                          "X!1(i!1)"
                                                                                                                          "Y"
                                                                                                                          "X!1(j!1)"
                                                                                                                          "b"
                                                                                                                          "y!1"))
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "pointwise_increasing?")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (case
                                                                               "forall (i,j:nat): FF(i)(x!1)<=FF(i+j)(x!1)")
                                                                              (("1"
                                                                                (expand
                                                                                 "increasing?")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "x!2"
                                                                                     "y!1-x!2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  1))
                                                                                (("2"
                                                                                  (induct
                                                                                   "j")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1+j!1"
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide 2)
                                                                    (("3"
                                                                      (expand
                                                                       "bounded?")
                                                                      (("3"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           "bounded_above?")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "integral[T2, S2, to_measure[T2, S2](nu!1)](ff)")
                                                                            (("1"
                                                                              (skolem
                                                                               +
                                                                               "n!1")
                                                                              (("1"
                                                                                (expand
                                                                                 "o")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "integral_ae_le[T2, S2, to_measure[T2, S2](nu!1)]"
                                                                                   ("f1"
                                                                                    "FF(n!1)"
                                                                                    "f2"
                                                                                    "ff"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ae_le?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "pointwise_ae?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "ae?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "fullset")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "ae_in?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "emptyset[T2]")
                                                                                                  (("1"
                                                                                                    (skosimp)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "n!1"
                                                                                                         "x!1")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "negligible_set?")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "emptyset[T2]")
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "null_set?")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "measurable_set?")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "mu_fin?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "mu")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "to_measure")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "nu!1")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "finite_measure?")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "subset?")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "ff")
                                                                              (("2"
                                                                                (inst
                                                                                 -9
                                                                                 "IUnion(X!1)")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "bounded_below?")
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "0")
                                                                            (("2"
                                                                              (skolem
                                                                               +
                                                                               "n!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "o ")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "integral_nonneg[T2, S2, to_measure(nu!1)]"
                                                                                   ("f"
                                                                                    "FF(n!1)"))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -2
                                                                                         "n!1"
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "ff")
                                                                    (("2"
                                                                      (expand
                                                                       "FF")
                                                                      (("2"
                                                                        (expand
                                                                         "HH")
                                                                        (("2"
                                                                          (expand
                                                                           "o ")
                                                                          (("2"
                                                                            (expand
                                                                             "y_section")
                                                                            (("2"
                                                                              (lemma
                                                                               "fm_monotone[T1,S1,mu!1]"
                                                                               ("A"
                                                                                "y_section(IUnion(n!1, X!1), y!1)"
                                                                                "B"
                                                                                "y_section(IUnion(X!1), y!1)"))
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "subset?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "y_section")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "IUnion")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "image")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "a!1")
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "n!2")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "n!2")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (case
                                                             "forall (n:nat): series(SS)(n) = integral[T2, S2, to_measure(nu!1)](FF(n))")
                                                            (("1"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (inst - "x!1")
                                                                (("1"
                                                                  (expand
                                                                   "o ")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (induct "n")
                                                                (("1"
                                                                  (expand
                                                                   "series")
                                                                  (("1"
                                                                    (expand
                                                                     "sigma")
                                                                    (("1"
                                                                      (expand
                                                                       "sigma")
                                                                      (("1"
                                                                        (expand
                                                                         "SS")
                                                                        (("1"
                                                                          (expand
                                                                           "FF")
                                                                          (("1"
                                                                            (rewrite
                                                                             "IUnion_0_def")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "series")
                                                                    (("2"
                                                                      (expand
                                                                       "sigma"
                                                                       1)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "SS")
                                                                            (("2"
                                                                              (case-replace
                                                                               "FF(1+j!1)=(reals@real_fun_ops.+)(FF(j!1),HH(X!1(1 + j!1)))")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "integral_add[T2, S2, to_measure(nu!1)]"
                                                                                 1)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2
                                                                                 -6)
                                                                                (("2"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "+")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "FF")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "IUnion_n_def"
                                                                                         1)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-2
                                                                                            -4
                                                                                            1))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "HH")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "o ")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "y_section")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "y_section_union")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j!1")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "y_section_disjoint"
                                                                                                       ("X"
                                                                                                        "IUnion(j!1, X!1)"
                                                                                                        "Y"
                                                                                                        "X!1(1 + j!1)"
                                                                                                        "b"
                                                                                                        "x!1"))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "fm_disjointunion[T1,S1,mu!1]"
                                                                                                           ("A"
                                                                                                            "y_section(IUnion(j!1, X!1), x!1)"
                                                                                                            "B"
                                                                                                            "y_section(X!1(1 + j!1), x!1)"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "+")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "j!1"
                                                                                         "x1!1")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "HH")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "o ")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand "FF")
                                                              (("1"
                                                                (expand "HH")
                                                                (("1"
                                                                  (expand
                                                                   "o ")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand "FF")
                                                              (("2"
                                                                (expand "HH")
                                                                (("2"
                                                                  (expand
                                                                   "o ")
                                                                  (("2"
                                                                    (rewrite
                                                                     "IUnion_n_def")
                                                                    (("2"
                                                                      (expand
                                                                       "y_section")
                                                                      (("2"
                                                                        (rewrite
                                                                         "y_section_union")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "n!1")
                                                                          (("2"
                                                                            (lemma
                                                                             "fm_monotone[T1,S1,mu!1]"
                                                                             ("A"
                                                                              "y_section(IUnion(n!1, X!1), y!1)"
                                                                              "B"
                                                                              "union(y_section(IUnion(n!1, X!1), y!1),
                  y_section(X!1(1 + n!1), y!1))"))
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (typepred "X!1")
                                                          (("2"
                                                            (expand
                                                             "disjoint_indexed_measurable?")
                                                            (("2"
                                                              (expand
                                                               "disjoint?")
                                                              (("2"
                                                                (expand
                                                                 "disjoint?")
                                                                (("2"
                                                                  (expand
                                                                   "intersection")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (expand
                                                                           "IUnion")
                                                                          (("2"
                                                                            (expand
                                                                             "image")
                                                                            (("2"
                                                                              (expand
                                                                               "Union")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "a!1")
                                                                                  (("2"
                                                                                    (skolem
                                                                                     -
                                                                                     "n!2")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "n!2")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "n!2"
                                                                                         "1+n!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (expand "FF")
                                                      (("2"
                                                        (inst -2 "n!1")
                                                        (("2"
                                                          (inst
                                                           -5
                                                           "IUnion(n!1, X!1)")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (induct "n")
                                                  (("1"
                                                    (rewrite "IUnion_0_def")
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (rewrite "IUnion_n_def")
                                                      (("2"
                                                        (lemma
                                                         "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                                         ("x"
                                                          "IUnion(j!1, X!1)"
                                                          "y"
                                                          "X!1(1 + j!1)"))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp)
                                    (("2" (typepred "X!1(n!1)")
                                      (("2" (inst -4 "X!1(n!1)") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2) (("3" (skosimp) nil nil)) nil)
                         ("4" (skosimp)
                          (("4" (inst -3 "IUnion(X!1)") nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (expand "HH") (("2" (inst -3 "M!1") nil nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (expand "HH") (("2" (inst -3 "M!1") nil nil)) nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (expand "y_section")
                  (("2"
                    (lemma "y_section_measurable[T1,T2]"
                     ("Z" "M!1" "S1" "S1" "S2" "S2" "y" "x1!1"))
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (expand "y_section")
              (("2"
                (lemma "y_section_measurable[T1,T2]"
                 ("Z" "M!1" "S1" "S1" "S2" "S2" "y" "x1!1"))
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (fm_times_alt_TCC1 subtype-tcc nil product_finite_measure nil)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (disjoint? const-decl "bool" sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (integral_nonneg formula-decl nil integral nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (nu!1 skolem-const-decl "finite_measure[T2, S2]" product_finite_measure
     nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (subset_algebra_fullset name-judgement "(S2)" product_finite_measure nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (TRUE const-decl "bool" booleans nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (mu const-decl "nnreal" measure_props nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (null_set? const-decl "bool" measure_theory nil)
    (subset? const-decl "bool" sets nil) (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (integral_ae_le formula-decl nil integral nil)
    (bounded? const-decl "bool" real_fun_preds reals)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (x!2 skolem-const-decl "nat" product_finite_measure nil)
    (y!1 skolem-const-decl "nat" product_finite_measure nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (ff skolem-const-decl "[T2 -> nnreal]" product_finite_measure nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (y!1 skolem-const-decl "T2" product_finite_measure nil)
    (X!1 skolem-const-decl
     "disjoint_indexed_measurable[[T1, T2], sigma_times(S1, S2)]"
     product_finite_measure nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (minus_real_is_real application-judgement "real" reals nil)
    (ball_is_metric_open application-judgement
     "metric_open[real, (LAMBDA (x, y: real): abs(x - y))]" convergence_aux
     metric_space)
    (XX skolem-const-decl "[nat -> set[T1]]" product_finite_measure nil)
    (FF skolem-const-decl "[nat -> [T2 -> nnreal]]" product_finite_measure
     nil)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (> const-decl "bool" reals nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (triangle formula-decl nil real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DELTA skolem-const-decl "real" product_finite_measure nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (converges_upto? const-decl "bool" convergence_aux metric_space)
    (monotone_convergence_scaf formula-decl nil integral_convergence_scaf nil)
    (fm_monotone formula-decl nil finite_measure nil)
    (Union const-decl "set" sets nil)
    (image const-decl "set[R]" function_image nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas_aux nil)
    (SS skolem-const-decl "[nat -> real]" product_finite_measure nil)
    (j!1 skolem-const-decl "nat" product_finite_measure nil)
    (subset_algebra_intersection application-judgement "(S)"
     product_finite_measure nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (HH skolem-const-decl "[(sigma_times(S1, S2)) -> [T2 -> nnreal]]"
     product_finite_measure nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (disjoint_indexed_measurable? const-decl "bool" generalized_measure_def
     nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (<= const-decl "bool" reals nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (limit const-decl "real" convergence_sequences analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mu!1 skolem-const-decl "finite_measure[T1, S1]" product_finite_measure
     nil)
    (b!1 skolem-const-decl "(sigma_times(S1, S2))" product_finite_measure nil)
    (a!1 skolem-const-decl "(sigma_times(S1, S2))" product_finite_measure nil)
    (subset_algebra_union application-judgement "(S)" product_finite_measure
     nil)
    (y_section_disjoint formula-decl nil product_sections nil)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (y_section_union formula-decl nil product_sections nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (y_section_measurable formula-decl nil product_sigma_def nil)
    (member const-decl "bool" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (integral_add formula-decl nil integral nil)
    (union const-decl "set" sets nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fm_emptyset formula-decl nil finite_measure nil)
    (integral_zero formula-decl nil integral nil)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (y_section const-decl "set[T1]" cross_product topology)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable sigma_set)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (y_section const-decl "[T2 -> set[T1]]" cross_product topology)
    (set type-eq-decl nil sets nil) (O const-decl "T3" function_props nil)
    (integral const-decl "real" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (finite_measure_def formula-decl nil measure_def nil)
    (fm_times_alt_TCC2 subtype-tcc nil product_finite_measure nil))
   shostak)
  (fm_times_alt-2 "" 3758903858
   ("" (skosimp)
    (("" (lemma "fm_times_alt_TCC1" ("mu" "mu!1" "nu" "nu!1"))
      (("" (lemma "fm_times_alt_TCC2" ("mu" "mu!1" "nu" "nu!1"))
        (("" (rewrite "finite_measure_def" 1)
          (("1" (split)
            (("1" (inst -2 "emptyset[[T1, T2]]")
              (("1"
                (case-replace
                 "y_section[T1, T2](emptyset[[T1, T2]])=lambda y: emptyset[T1]")
                (("1" (expand "o ")
                  (("1" (rewrite "fm_emptyset[T1,S1,mu!1]")
                    (("1"
                      (rewrite
                       "integral_zero[T2, S2, to_measure[T2, S2](nu!1)]" 1)
                      nil nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (apply-extensionality :hide? t)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (expand "o ")
                (("2" (typepred "mu!1")
                  (("2" (rewrite "finite_measure_def" -1)
                    (("2" (flatten)
                      (("2" (hide -3)
                        (("2"
                          (case-replace
                           "(LAMBDA y: mu!1(y_section[T1, T2](union(a!1, b!1))(y)))=(reals@real_fun_ops.+)((LAMBDA y: mu!1(y_section[T1, T2](a!1)(y))),(LAMBDA y: mu!1(y_section[T1, T2](b!1)(y))))")
                          (("1"
                            (rewrite
                             "integral_add[T2, S2, to_measure[T2, S2](nu!1)]"
                             1)
                            (("1" (inst -6 "b!1") nil nil)
                             ("2" (skosimp)
                              (("2" (expand "y_section")
                                (("2"
                                  (lemma "y_section_measurable[T1,T2]"
                                   ("Z" "b!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("3" (inst -6 "a!1") nil nil)
                             ("4" (skosimp)
                              (("4" (expand "y_section")
                                (("4"
                                  (lemma "y_section_measurable[T1,T2]"
                                   ("Z" "a!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                  (("4" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (apply-extensionality :hide? t)
                              (("1" (expand "+")
                                (("1" (expand "y_section")
                                  (("1" (rewrite "y_section_union")
                                    (("1"
                                      (inst
                                       -
                                       "y_section(a!1, x!1)"
                                       "y_section(b!1, x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2 -4 -3)
                                          (("1"
                                            (lemma
                                             "fm_disjointunion[T1,S1,mu!1]"
                                             ("A"
                                              "y_section(a!1, x!1)"
                                              "B"
                                              "y_section(b!1, x!1)"))
                                            (("1"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma
                                                   "y_section_disjoint"
                                                   ("X"
                                                    "a!1"
                                                    "Y"
                                                    "b!1"
                                                    "b"
                                                    "x!1"))
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "+")
                                (("2" (skosimp) (("2" (assert) nil nil)) nil))
                                nil)
                               ("3" (skosimp)
                                (("3" (expand "y_section")
                                  (("3"
                                    (lemma "y_section_measurable[T1,T2]"
                                     ("Z" "b!1" "S1" "S1" "S2" "S2" "y"
                                      "y!1"))
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("4" (skosimp)
                                (("4" (expand "y_section")
                                  (("4"
                                    (lemma "y_section_measurable[T1,T2]"
                                     ("Z" "a!1" "S1" "S1" "S2" "S2" "y"
                                      "y!1"))
                                    (("4" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("5" (skosimp)
                                (("5" (expand "y_section")
                                  (("5"
                                    (lemma "y_section_measurable[T1,T2]"
                                     ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2"
                                      "y" "y!1"))
                                    (("5" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp)
                            (("3" (expand "y_section")
                              (("3"
                                (lemma "y_section_measurable[T1,T2]"
                                 ("Z" "b!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("4" (skosimp)
                            (("4" (expand "y_section")
                              (("4"
                                (lemma "y_section_measurable[T1,T2]"
                                 ("Z" "a!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                (("4" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("5" (skosimp)
                            (("5" (expand "y_section")
                              (("5"
                                (lemma "y_section_measurable[T1,T2]"
                                 ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2" "y"
                                  "y!1"))
                                (("5" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (name "HH" "lambda M: mu!1 o y_section(M)")
              (("1"
                (case "FORALL (M):
        integrable?[T2, S2, to_measure(nu!1)](HH(M))")
                (("1" (hide -4)
                  (("1"
                    (case "FORALL (M):
        integral[T2, S2, to_measure[T2, S2](nu!1)](HH(M))>=0")
                    (("1" (hide -4)
                      (("1"
                        (case "FORALL (X:
                disjoint_indexed_measurable
                    [[T1, T2], sigma_times(S1, S2)]):
        convergence_sequences.convergent?(series((LAMBDA M:
                             integral[T2, S2, to_measure(nu!1)]
                                 (HH(M)))
                           o X))
         =>
         integral[T2, S2, to_measure(nu!1)](HH(IUnion(X))) <=
          convergence_sequences.limit
              (series((LAMBDA M:
                         integral[T2, S2, to_measure(nu!1)]
                             (HH(M)))
                       o X))")
                        (("1" (skosimp)
                          (("1" (inst - "X!1")
                            (("1" (expand "HH") (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (expand "o ")
                              (("2" (hide -4)
                                (("2"
                                  (name "SS" "LAMBDA (n: nat):
                     integral[T2, S2, to_measure[T2, S2](nu!1)](HH(X!1(n)))")
                                  (("1" (replace -1)
                                    (("1" (hide -1)
                                      (("1"
                                        (lemma
                                         "convergence_sequences.limit_lemma"
                                         ("v" "series(SS)"))
                                        (("1"
                                          (name-replace
                                           "RHS"
                                           "convergence_sequences.limit(series(SS))")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (case
                                               "forall (n:nat): sigma_times(S1,S2)(IUnion(n,X!1))")
                                              (("1"
                                                (name
                                                 "FF"
                                                 "lambda (n:nat): HH(IUnion(n,X!1))")
                                                (("1"
                                                  (case
                                                   "forall (n: nat): integrable?[T2, S2, to_measure[T2, S2](nu!1)](FF(n))")
                                                  (("1"
                                                    (case
                                                     "forall (n:nat): disjoint?(IUnion(n, X!1),X!1(1+n))")
                                                    (("1"
                                                      (case
                                                       "forall (n:nat,y): 0<=FF(n)(y) & FF(n)(y)<=FF(n+1)(y)")
                                                      (("1"
                                                        (case-replace
                                                         "series(SS) = integral[T2, S2, to_measure(nu!1)] o FF")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (name-replace
                                                             "ff"
                                                             "HH(IUnion(X!1))")
                                                            (("1"
                                                              (case
                                                               "forall (n:nat,y): FF(n)(y)<=ff(y)")
                                                              (("1"
                                                                (lemma
                                                                 "monotone_convergence_scaf[T2, S2, to_measure[T2, S2](nu!1)]"
                                                                 ("F"
                                                                  "FF"
                                                                  "f"
                                                                  "ff"))
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "converges_upto?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (name-replace
                                                                           "LHS"
                                                                           "integral[T2, S2, to_measure(nu!1)](ff)")
                                                                          (("1"
                                                                            (name-replace
                                                                             "DRL"
                                                                             "integral[T2, S2, to_measure(nu!1)] o FF")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-2
                                                                                -10
                                                                                1))
                                                                              (("1"
                                                                                (rewrite
                                                                                 "metric_convergence_def")
                                                                                (("1"
                                                                                  (expand
                                                                                   "convergence")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "metric_converges_to")
                                                                                    (("1"
                                                                                      (case
                                                                                       "LHS>RHS")
                                                                                      (("1"
                                                                                        (name
                                                                                         "DELTA"
                                                                                         "(LHS-RHS)/2")
                                                                                        (("1"
                                                                                          (case
                                                                                           "DELTA>0")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "DELTA")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "DELTA")
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "n!1+n!2")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "n!1+n!2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ball")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "triangle"
                                                                                                           ("x"
                                                                                                            "LHS - DRL(n!1 + n!2)"
                                                                                                            "y"
                                                                                                            "DRL(n!1 + n!2) - RHS"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (expand
                                                                       "pointwise_converges_upto?")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           "pointwise_convergence?")
                                                                          (("1"
                                                                            (skolem
                                                                             +
                                                                             "y!1")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (1
                                                                                -6
                                                                                -3))
                                                                              (("1"
                                                                                (typepred
                                                                                 "mu!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "ff")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "FF")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "HH")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "o ")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "y_section")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "finite_measure?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (name
                                                                                                 "XX"
                                                                                                 "lambda (n:nat): y_section(X!1(n),y!1)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "XX")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "y_section(IUnion(X!1), y!1)=IUnion(XX)")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "RHS1"
                                                                                                       "mu!1(IUnion(XX))")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "(LAMBDA (n:nat): mu!1(y_section(IUnion(n, X!1), y!1)))=series(mu!1 o XX)")
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-4
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (name-replace
                                                                                                               "DRL3"
                                                                                                               "series(mu!1 o XX)")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "metric_convergence_def")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "convergence")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "metric_converges_to")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "r!1")
                                                                                                                        (("1"
                                                                                                                          (skosimp)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             +
                                                                                                                             "n!1")
                                                                                                                            (("1"
                                                                                                                              (skosimp)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "i!1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "ball")
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "forall (n:nat): FF(n)(y!1) = series(mu!1 o XX)(n)")
                                                                                                              (("1"
                                                                                                                (apply-extensionality
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "FF")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "HH")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "o ")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "y_section"
                                                                                                                           -1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "o")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "series")
                                                                                                                    (("2"
                                                                                                                      (induct
                                                                                                                       "x1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sigma")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sigma")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "sigma"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (skolem
                                                                                                                         +
                                                                                                                         "n!1")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "XX")
                                                                                                                          (("3"
                                                                                                                            (lemma
                                                                                                                             "y_section_measurable[T1,T2]"
                                                                                                                             ("Z"
                                                                                                                              "X!1(n!1)"
                                                                                                                              "S1"
                                                                                                                              "S1"
                                                                                                                              "S2"
                                                                                                                              "S2"
                                                                                                                              "y"
                                                                                                                              "y!1"))
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (skosimp)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -6
                                                                                                                     "n!1")
                                                                                                                    (("3"
                                                                                                                      (lemma
                                                                                                                       "y_section_measurable[T1,T2]"
                                                                                                                       ("Z"
                                                                                                                        "IUnion(n!1,X!1)"
                                                                                                                        "S1"
                                                                                                                        "S1"
                                                                                                                        "S2"
                                                                                                                        "S2"
                                                                                                                        "y"
                                                                                                                        "y!1"))
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (induct
                                                                                                                   "n")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "series")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sigma")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sigma")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "FF")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "HH")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "o ")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "XX")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "IUnion_0_def")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "y_section"
                                                                                                                                     1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "series")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "sigma"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           *
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "FF")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "HH")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "o ")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "y_section")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "XX")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "j!1")
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "IUnion_n_def"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "y_section_union")
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "fm_disjointunion[T1,S1,mu!1]"
                                                                                                                                                 ("A"
                                                                                                                                                  "y_section(IUnion(j!1, X!1), y!1)"
                                                                                                                                                  "B"
                                                                                                                                                  "y_section(X!1(1 + j!1), y!1)"))
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "y_section_disjoint"
                                                                                                                                                     ("X"
                                                                                                                                                      "IUnion(j!1, X!1)"
                                                                                                                                                      "Y"
                                                                                                                                                      "X!1(1 + j!1)"
                                                                                                                                                      "b"
                                                                                                                                                      "y!1"))
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (skosimp)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -5
                                                                                                               "n!1")
                                                                                                              (("3"
                                                                                                                (lemma
                                                                                                                 "y_section_measurable[T1,T2]"
                                                                                                                 ("Z"
                                                                                                                  "IUnion(n!1,X!1)"
                                                                                                                  "S1"
                                                                                                                  "S1"
                                                                                                                  "S2"
                                                                                                                  "S2"
                                                                                                                  "y"
                                                                                                                  "y!1"))
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (apply-extensionality
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "y_section")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "XX")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "y_section")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "IUnion")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         +
                                                                                                         "n!1")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "XX")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "y_section_measurable[T1,T2]"
                                                                                                             ("Z"
                                                                                                              "X!1(n!1)"
                                                                                                              "S1"
                                                                                                              "S1"
                                                                                                              "S2"
                                                                                                              "S2"
                                                                                                              "y"
                                                                                                              "y!1"))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "X!1")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "disjoint_indexed_measurable?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "disjoint?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "XX")
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "i!1"
                                                                                                                     "j!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "y_section_disjoint"
                                                                                                                         ("X"
                                                                                                                          "X!1(i!1)"
                                                                                                                          "Y"
                                                                                                                          "X!1(j!1)"
                                                                                                                          "b"
                                                                                                                          "y!1"))
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "pointwise_increasing?")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (case
                                                                               "forall (i,j:nat): FF(i)(x!1)<=FF(i+j)(x!1)")
                                                                              (("1"
                                                                                (expand
                                                                                 "increasing?")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "x!2"
                                                                                     "y!1-x!2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  1))
                                                                                (("2"
                                                                                  (induct
                                                                                   "j")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1+j!1"
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide 2)
                                                                    (("3"
                                                                      (expand
                                                                       "bounded?")
                                                                      (("3"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           "bounded_above?")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "integral[T2, S2, to_measure[T2, S2](nu!1)](ff)")
                                                                            (("1"
                                                                              (skolem
                                                                               +
                                                                               "n!1")
                                                                              (("1"
                                                                                (expand
                                                                                 "o")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "integral_ae_le[T2, S2, to_measure[T2, S2](nu!1)]"
                                                                                   ("f1"
                                                                                    "FF(n!1)"
                                                                                    "f2"
                                                                                    "ff"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ae_le?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "pointwise_ae?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "ae?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "fullset")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "ae_in?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "emptyset[T2]")
                                                                                                  (("1"
                                                                                                    (skosimp)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "n!1"
                                                                                                         "x!1")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "negligible_set?")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "emptyset[T2]")
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "null_set?")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "measurable_set?")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "mu_fin?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "mu")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "to_measure")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "nu!1")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "finite_measure?")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "subset?")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "ff")
                                                                              (("2"
                                                                                (inst
                                                                                 -9
                                                                                 "IUnion(X!1)")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "bounded_below?")
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "0")
                                                                            (("2"
                                                                              (skolem
                                                                               +
                                                                               "n!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "o ")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "integral_nonneg[T2, S2, to_measure(nu!1)]"
                                                                                   ("f"
                                                                                    "FF(n!1)"))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -2
                                                                                         "n!1"
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "ff")
                                                                    (("2"
                                                                      (expand
                                                                       "FF")
                                                                      (("2"
                                                                        (expand
                                                                         "HH")
                                                                        (("2"
                                                                          (expand
                                                                           "o ")
                                                                          (("2"
                                                                            (expand
                                                                             "y_section")
                                                                            (("2"
                                                                              (lemma
                                                                               "fm_monotone[T1,S1,mu!1]"
                                                                               ("A"
                                                                                "y_section(IUnion(n!1, X!1), y!1)"
                                                                                "B"
                                                                                "y_section(IUnion(X!1), y!1)"))
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "subset?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "y_section")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "IUnion")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "image")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "a!1")
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "n!2")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "n!2")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (case
                                                             "forall (n:nat): series(SS)(n) = integral[T2, S2, to_measure(nu!1)](FF(n))")
                                                            (("1"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (inst - "x!1")
                                                                (("1"
                                                                  (expand
                                                                   "o ")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (induct "n")
                                                                (("1"
                                                                  (expand
                                                                   "series")
                                                                  (("1"
                                                                    (expand
                                                                     "sigma")
                                                                    (("1"
                                                                      (expand
                                                                       "sigma")
                                                                      (("1"
                                                                        (expand
                                                                         "SS")
                                                                        (("1"
                                                                          (expand
                                                                           "FF")
                                                                          (("1"
                                                                            (rewrite
                                                                             "IUnion_0_def")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "series")
                                                                    (("2"
                                                                      (expand
                                                                       "sigma"
                                                                       1)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "SS")
                                                                            (("2"
                                                                              (case-replace
                                                                               "FF(1+j!1)=(reals@real_fun_ops.+)(FF(j!1),HH(X!1(1 + j!1)))")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "integral_add[T2, S2, to_measure(nu!1)]"
                                                                                 1)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2
                                                                                 -6)
                                                                                (("2"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "+")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "FF")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "IUnion_n_def"
                                                                                         1)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-2
                                                                                            -4
                                                                                            1))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "HH")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "o ")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "y_section")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "y_section_union")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j!1")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "y_section_disjoint"
                                                                                                       ("X"
                                                                                                        "IUnion(j!1, X!1)"
                                                                                                        "Y"
                                                                                                        "X!1(1 + j!1)"
                                                                                                        "b"
                                                                                                        "x!1"))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "fm_disjointunion[T1,S1,mu!1]"
                                                                                                           ("A"
                                                                                                            "y_section(IUnion(j!1, X!1), x!1)"
                                                                                                            "B"
                                                                                                            "y_section(X!1(1 + j!1), x!1)"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "+")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "j!1"
                                                                                         "x1!1")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "HH")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "o ")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand "FF")
                                                              (("1"
                                                                (expand "HH")
                                                                (("1"
                                                                  (expand
                                                                   "o ")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand "FF")
                                                              (("2"
                                                                (expand "HH")
                                                                (("2"
                                                                  (expand
                                                                   "o ")
                                                                  (("2"
                                                                    (rewrite
                                                                     "IUnion_n_def")
                                                                    (("2"
                                                                      (expand
                                                                       "y_section")
                                                                      (("2"
                                                                        (rewrite
                                                                         "y_section_union")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "n!1")
                                                                          (("2"
                                                                            (lemma
                                                                             "fm_monotone[T1,S1,mu!1]"
                                                                             ("A"
                                                                              "y_section(IUnion(n!1, X!1), y!1)"
                                                                              "B"
                                                                              "union(y_section(IUnion(n!1, X!1), y!1),
                  y_section(X!1(1 + n!1), y!1))"))
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (typepred "X!1")
                                                          (("2"
                                                            (expand
                                                             "disjoint_indexed_measurable?")
                                                            (("2"
                                                              (expand
                                                               "disjoint?")
                                                              (("2"
                                                                (expand
                                                                 "disjoint?")
                                                                (("2"
                                                                  (expand
                                                                   "intersection")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (expand
                                                                           "IUnion")
                                                                          (("2"
                                                                            (expand
                                                                             "image")
                                                                            (("2"
                                                                              (expand
                                                                               "Union")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "a!1")
                                                                                  (("2"
                                                                                    (skolem
                                                                                     -
                                                                                     "n!2")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "n!2")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "n!2"
                                                                                         "1+n!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (expand "FF")
                                                      (("2"
                                                        (inst -2 "n!1")
                                                        (("2"
                                                          (inst
                                                           -5
                                                           "IUnion(n!1, X!1)")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (induct "n")
                                                  (("1"
                                                    (rewrite "IUnion_0_def")
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (rewrite "IUnion_n_def")
                                                      (("2"
                                                        (lemma
                                                         "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                                         ("x"
                                                          "IUnion(j!1, X!1)"
                                                          "y"
                                                          "X!1(1 + j!1)"))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp)
                                    (("2" (typepred "X!1(n!1)")
                                      (("2" (inst -4 "X!1(n!1)") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2) (("3" (skosimp) nil nil)) nil)
                         ("4" (skosimp)
                          (("4" (inst -3 "IUnion(X!1)") nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (expand "HH") (("2" (inst -3 "M!1") nil nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (expand "HH") (("2" (inst -3 "M!1") nil nil)) nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (expand "y_section")
                  (("2"
                    (lemma "y_section_measurable[T1,T2]"
                     ("Z" "M!1" "S1" "S1" "S2" "S2" "y" "x1!1"))
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (expand "y_section")
              (("2"
                (lemma "y_section_measurable[T1,T2]"
                 ("Z" "M!1" "S1" "S1" "S2" "S2" "y" "x1!1"))
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (finite_measure_def formula-decl nil measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integral const-decl "real" integral nil) (set type-eq-decl nil sets nil)
    (y_section const-decl "[T2 -> set[T1]]" cross_product topology)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (converges_upto? const-decl "bool" convergence_aux metric_space)
    (convergence const-decl "bool" convergence_sequences analysis)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence nil)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (bounded? const-decl "bool" real_fun_preds reals)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (integral_nonneg formula-decl nil integral nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (integral_ae_le formula-decl nil integral nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (subset? const-decl "bool" sets nil)
    (null_set? const-decl "bool" measure_theory nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (mu const-decl "nnreal" measure_props nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (monotone_convergence_scaf formula-decl nil integral_convergence_scaf nil)
    (fm_monotone formula-decl nil finite_measure nil)
    (Union const-decl "set" sets nil) (disjoint? const-decl "bool" sets nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (disjoint_indexed_measurable? const-decl "bool" generalized_measure_def
     nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (sequence type-eq-decl nil sequences nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit const-decl "real" convergence_sequences analysis)
    (union const-decl "set" sets nil)
    (y_section_measurable formula-decl nil product_sigma_def nil)
    (member const-decl "bool" sets nil)
    (integral_add formula-decl nil integral nil)
    (y_section_disjoint formula-decl nil product_sections nil)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (y_section_union formula-decl nil product_sections nil)
    (emptyset const-decl "set" sets nil)
    (y_section const-decl "set[T1]" cross_product topology)
    (integral_zero formula-decl nil integral nil)
    (fm_emptyset formula-decl nil finite_measure nil))
   shostak)
  (fm_times_alt-1 nil 3455609073
   ("" (skosimp)
    (("" (lemma "fm_times_alt_TCC1" ("mu" "mu!1" "nu" "nu!1"))
      (("" (lemma "fm_times_alt_TCC2" ("mu" "mu!1" "nu" "nu!1"))
        (("" (rewrite "finite_measure_def" 1)
          (("1" (split)
            (("1" (inst -2 "emptyset[[T1, T2]]")
              (("1"
                (case-replace
                 "y_section[T1, T2](emptyset[[T1, T2]])=lambda y: emptyset[T1]")
                (("1" (expand "o ")
                  (("1" (rewrite "fm_emptyset[T1,S1,mu!1]")
                    (("1"
                      (rewrite
                       "integral_zero[T2, S2, to_measure[T2, S2](nu!1)]" 1)
                      nil nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (apply-extensionality :hide? t)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (expand "o ")
                (("2" (typepred "mu!1")
                  (("2" (rewrite "finite_measure_def" -1)
                    (("2" (flatten)
                      (("2" (hide -3)
                        (("2"
                          (case-replace
                           "(LAMBDA y: mu!1(y_section[T1, T2](union(a!1, b!1))(y)))=(reals@real_fun_ops.+)((LAMBDA y: mu!1(y_section[T1, T2](a!1)(y))),(LAMBDA y: mu!1(y_section[T1, T2](b!1)(y))))")
                          (("1"
                            (rewrite
                             "integral_add[T2, S2, to_measure[T2, S2](nu!1)]"
                             1)
                            (("1" (inst -6 "b!1") nil nil)
                             ("2" (skosimp)
                              (("2" (expand "y_section")
                                (("2"
                                  (lemma "y_section_measurable[T1,T2]"
                                   ("Z" "b!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("3" (inst -6 "a!1") nil nil)
                             ("4" (skosimp)
                              (("4" (expand "y_section")
                                (("4"
                                  (lemma "y_section_measurable[T1,T2]"
                                   ("Z" "a!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                  (("4" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (apply-extensionality :hide? t)
                              (("1" (expand "+")
                                (("1" (expand "y_section")
                                  (("1" (rewrite "y_section_union")
                                    (("1"
                                      (inst
                                       -
                                       "y_section(a!1, x!1)"
                                       "y_section(b!1, x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2 -4 -3)
                                          (("1"
                                            (lemma
                                             "fm_disjointunion[T1,S1,mu!1]"
                                             ("A"
                                              "y_section(a!1, x!1)"
                                              "B"
                                              "y_section(b!1, x!1)"))
                                            (("1"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma
                                                   "y_section_disjoint"
                                                   ("X"
                                                    "a!1"
                                                    "Y"
                                                    "b!1"
                                                    "b"
                                                    "x!1"))
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "+")
                                (("2" (skosimp) (("2" (assert) nil nil)) nil))
                                nil)
                               ("3" (skosimp)
                                (("3" (expand "y_section")
                                  (("3"
                                    (lemma "y_section_measurable[T1,T2]"
                                     ("Z" "b!1" "S1" "S1" "S2" "S2" "y"
                                      "y!1"))
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("4" (skosimp)
                                (("4" (expand "y_section")
                                  (("4"
                                    (lemma "y_section_measurable[T1,T2]"
                                     ("Z" "a!1" "S1" "S1" "S2" "S2" "y"
                                      "y!1"))
                                    (("4" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("5" (skosimp)
                                (("5" (expand "y_section")
                                  (("5"
                                    (lemma "y_section_measurable[T1,T2]"
                                     ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2"
                                      "y" "y!1"))
                                    (("5" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp)
                            (("3" (expand "y_section")
                              (("3"
                                (lemma "y_section_measurable[T1,T2]"
                                 ("Z" "b!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("4" (skosimp)
                            (("4" (expand "y_section")
                              (("4"
                                (lemma "y_section_measurable[T1,T2]"
                                 ("Z" "a!1" "S1" "S1" "S2" "S2" "y" "y!1"))
                                (("4" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("5" (skosimp)
                            (("5" (expand "y_section")
                              (("5"
                                (lemma "y_section_measurable[T1,T2]"
                                 ("Z" "union(a!1,b!1)" "S1" "S1" "S2" "S2" "y"
                                  "y!1"))
                                (("5" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (name "HH" "lambda M: mu!1 o y_section(M)")
              (("1"
                (case "FORALL (M):
        integrable?[T2, S2, to_measure(nu!1)](HH(M))")
                (("1" (hide -4)
                  (("1"
                    (case "FORALL (M):
        integral[T2, S2, to_measure[T2, S2](nu!1)](HH(M))>=0")
                    (("1" (hide -4)
                      (("1"
                        (case "FORALL (X:
                disjoint_indexed_measurable
                    [[T1, T2], sigma_times(S1, S2)]):
        convergence_sequences.convergent?(series((LAMBDA M:
                             integral[T2, S2, to_measure(nu!1)]
                                 (HH(M)))
                           o X))
         =>
         integral[T2, S2, to_measure(nu!1)](HH(IUnion(X))) <=
          convergence_sequences.limit
              (series((LAMBDA M:
                         integral[T2, S2, to_measure(nu!1)]
                             (HH(M)))
                       o X))")
                        (("1" (skosimp)
                          (("1" (inst - "X!1")
                            (("1" (expand "HH")
                              (("1" (assert)
                                (("1" (expand "o ")
                                  (("1" (replace -5) (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (expand "o ")
                              (("2" (hide -4)
                                (("2"
                                  (name "SS" "LAMBDA (n: nat):
                     integral[T2, S2, to_measure[T2, S2](nu!1)](HH(X!1(n)))")
                                  (("1" (replace -1)
                                    (("1" (hide -1)
                                      (("1"
                                        (lemma
                                         "convergence_sequences.limit_lemma"
                                         ("v" "series(SS)"))
                                        (("1"
                                          (name-replace
                                           "RHS"
                                           "convergence_sequences.limit(series(SS))")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (case
                                               "forall (n:nat): sigma_times(S1,S2)(IUnion(n,X!1))")
                                              (("1"
                                                (name
                                                 "FF"
                                                 "lambda (n:nat): HH(IUnion(n,X!1))")
                                                (("1"
                                                  (case
                                                   "forall (n: nat): integrable?[T2, S2, to_measure[T2, S2](nu!1)](FF(n))")
                                                  (("1"
                                                    (case
                                                     "forall (n:nat): disjoint?(IUnion(n, X!1),X!1(1+n))")
                                                    (("1"
                                                      (case
                                                       "forall (n:nat,y): 0<=FF(n)(y) & FF(n)(y)<=FF(n+1)(y)")
                                                      (("1"
                                                        (case-replace
                                                         "series(SS) = integral[T2, S2, to_measure(nu!1)] o FF")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (name-replace
                                                             "ff"
                                                             "HH(IUnion(X!1))")
                                                            (("1"
                                                              (case
                                                               "forall (n:nat,y): FF(n)(y)<=ff(y)")
                                                              (("1"
                                                                (lemma
                                                                 "monotone_convergence_scaf[T2, S2, to_measure[T2, S2](nu!1)]"
                                                                 ("F"
                                                                  "FF"
                                                                  "f"
                                                                  "ff"))
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "converges_upto?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (name-replace
                                                                           "LHS"
                                                                           "integral[T2, S2, to_measure(nu!1)](ff)")
                                                                          (("1"
                                                                            (name-replace
                                                                             "DRL"
                                                                             "integral[T2, S2, to_measure(nu!1)] o FF")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-2
                                                                                -10
                                                                                1))
                                                                              (("1"
                                                                                (rewrite
                                                                                 "metric_convergence_def")
                                                                                (("1"
                                                                                  (expand
                                                                                   "convergence")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "metric_converges_to")
                                                                                    (("1"
                                                                                      (case
                                                                                       "LHS>RHS")
                                                                                      (("1"
                                                                                        (name
                                                                                         "DELTA"
                                                                                         "(LHS-RHS)/2")
                                                                                        (("1"
                                                                                          (case
                                                                                           "DELTA>0")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "DELTA")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "DELTA")
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "n!1+n!2")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "n!1+n!2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ball")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "triangle"
                                                                                                           ("x"
                                                                                                            "LHS - DRL(n!1 + n!2)"
                                                                                                            "y"
                                                                                                            "DRL(n!1 + n!2) - RHS"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (expand
                                                                       "pointwise_converges_upto?")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           "pointwise_convergence?")
                                                                          (("1"
                                                                            (skolem
                                                                             +
                                                                             "y!1")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (1
                                                                                -6
                                                                                -3))
                                                                              (("1"
                                                                                (typepred
                                                                                 "mu!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "ff")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "FF")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "HH")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "o ")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "y_section")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "finite_measure?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (name
                                                                                                 "XX"
                                                                                                 "lambda (n:nat): y_section(X!1(n),y!1)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "XX")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "y_section(IUnion(X!1), y!1)=IUnion(XX)")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "RHS1"
                                                                                                       "mu!1(IUnion(XX))")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "(LAMBDA (n:nat): mu!1(y_section(IUnion(n, X!1), y!1)))=series(mu!1 o XX)")
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-4
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (name-replace
                                                                                                               "DRL3"
                                                                                                               "series(mu!1 o XX)")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "metric_convergence_def")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "convergence")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "metric_converges_to")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "r!1")
                                                                                                                        (("1"
                                                                                                                          (skosimp)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             +
                                                                                                                             "n!1")
                                                                                                                            (("1"
                                                                                                                              (skosimp)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "i!1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "ball")
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "forall (n:nat): FF(n)(y!1) = series(mu!1 o XX)(n)")
                                                                                                              (("1"
                                                                                                                (apply-extensionality
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "FF")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "HH")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "o ")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "y_section"
                                                                                                                           -1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "o")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "series")
                                                                                                                    (("2"
                                                                                                                      (induct
                                                                                                                       "x1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sigma")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sigma")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "sigma"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (skolem
                                                                                                                         +
                                                                                                                         "n!1")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "XX")
                                                                                                                          (("3"
                                                                                                                            (lemma
                                                                                                                             "y_section_measurable[T1,T2]"
                                                                                                                             ("Z"
                                                                                                                              "X!1(n!1)"
                                                                                                                              "S1"
                                                                                                                              "S1"
                                                                                                                              "S2"
                                                                                                                              "S2"
                                                                                                                              "y"
                                                                                                                              "y!1"))
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (skosimp)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -6
                                                                                                                     "n!1")
                                                                                                                    (("3"
                                                                                                                      (lemma
                                                                                                                       "y_section_measurable[T1,T2]"
                                                                                                                       ("Z"
                                                                                                                        "IUnion(n!1,X!1)"
                                                                                                                        "S1"
                                                                                                                        "S1"
                                                                                                                        "S2"
                                                                                                                        "S2"
                                                                                                                        "y"
                                                                                                                        "y!1"))
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (induct
                                                                                                                   "n")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "series")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sigma")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sigma")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "FF")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "HH")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "o ")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "XX")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "IUnion_0_def")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "y_section"
                                                                                                                                     1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "series")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "sigma"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           *
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "FF")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "HH")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "o ")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "y_section")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "XX")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "j!1")
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "IUnion_n_def"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "y_section_union")
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "fm_disjointunion[T1,S1,mu!1]"
                                                                                                                                                 ("A"
                                                                                                                                                  "y_section(IUnion(j!1, X!1), y!1)"
                                                                                                                                                  "B"
                                                                                                                                                  "y_section(X!1(1 + j!1), y!1)"))
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "y_section_disjoint"
                                                                                                                                                     ("X"
                                                                                                                                                      "IUnion(j!1, X!1)"
                                                                                                                                                      "Y"
                                                                                                                                                      "X!1(1 + j!1)"
                                                                                                                                                      "b"
                                                                                                                                                      "y!1"))
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (skosimp)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -5
                                                                                                               "n!1")
                                                                                                              (("3"
                                                                                                                (lemma
                                                                                                                 "y_section_measurable[T1,T2]"
                                                                                                                 ("Z"
                                                                                                                  "IUnion(n!1,X!1)"
                                                                                                                  "S1"
                                                                                                                  "S1"
                                                                                                                  "S2"
                                                                                                                  "S2"
                                                                                                                  "y"
                                                                                                                  "y!1"))
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (apply-extensionality
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "y_section")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "XX")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "y_section")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "IUnion")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         +
                                                                                                         "n!1")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "XX")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "y_section_measurable[T1,T2]"
                                                                                                             ("Z"
                                                                                                              "X!1(n!1)"
                                                                                                              "S1"
                                                                                                              "S1"
                                                                                                              "S2"
                                                                                                              "S2"
                                                                                                              "y"
                                                                                                              "y!1"))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "X!1")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "disjoint_indexed_measurable?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "disjoint?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "XX")
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "i!1"
                                                                                                                     "j!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "y_section_disjoint"
                                                                                                                         ("X"
                                                                                                                          "X!1(i!1)"
                                                                                                                          "Y"
                                                                                                                          "X!1(j!1)"
                                                                                                                          "b"
                                                                                                                          "y!1"))
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "pointwise_increasing?")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (case
                                                                               "forall (i,j:nat): FF(i)(x!1)<=FF(i+j)(x!1)")
                                                                              (("1"
                                                                                (expand
                                                                                 "increasing?")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "x!2"
                                                                                     "y!1-x!2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  1))
                                                                                (("2"
                                                                                  (induct
                                                                                   "j")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1+j!1"
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide 2)
                                                                    (("3"
                                                                      (expand
                                                                       "bounded?")
                                                                      (("3"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           "bounded_above?")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "integral[T2, S2, to_measure[T2, S2](nu!1)](ff)")
                                                                            (("1"
                                                                              (skolem
                                                                               +
                                                                               "n!1")
                                                                              (("1"
                                                                                (expand
                                                                                 "o")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "integral_ae_le[T2, S2, to_measure[T2, S2](nu!1)]"
                                                                                   ("f1"
                                                                                    "FF(n!1)"
                                                                                    "f2"
                                                                                    "ff"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ae_le?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "pointwise_ae?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "ae?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "fullset")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "ae_in?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "emptyset[T2]")
                                                                                                  (("1"
                                                                                                    (skosimp)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "n!1"
                                                                                                         "x!1")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "negligible_set?")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "emptyset[T2]")
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "null_set?")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "measurable_set?")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "mu_fin?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "mu")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "to_measure")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "nu!1")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "finite_measure?")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "subset?")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "ff")
                                                                              (("2"
                                                                                (inst
                                                                                 -9
                                                                                 "IUnion(X!1)")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "bounded_below?")
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "0")
                                                                            (("2"
                                                                              (skolem
                                                                               +
                                                                               "n!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "o ")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "integral_nonneg[T2, S2, to_measure(nu!1)]"
                                                                                   ("f"
                                                                                    "FF(n!1)"))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -2
                                                                                         "n!1"
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "ff")
                                                                    (("2"
                                                                      (expand
                                                                       "FF")
                                                                      (("2"
                                                                        (expand
                                                                         "HH")
                                                                        (("2"
                                                                          (expand
                                                                           "o ")
                                                                          (("2"
                                                                            (expand
                                                                             "y_section")
                                                                            (("2"
                                                                              (lemma
                                                                               "fm_monotone[T1,S1,mu!1]"
                                                                               ("A"
                                                                                "y_section(IUnion(n!1, X!1), y!1)"
                                                                                "B"
                                                                                "y_section(IUnion(X!1), y!1)"))
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "subset?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "y_section")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "IUnion")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "image")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Union")
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "a!1")
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "n!2")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "n!2")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (case
                                                             "forall (n:nat): series(SS)(n) = integral[T2, S2, to_measure(nu!1)](FF(n))")
                                                            (("1"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (inst - "x!1")
                                                                (("1"
                                                                  (expand
                                                                   "o ")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (induct "n")
                                                                (("1"
                                                                  (expand
                                                                   "series")
                                                                  (("1"
                                                                    (expand
                                                                     "sigma")
                                                                    (("1"
                                                                      (expand
                                                                       "sigma")
                                                                      (("1"
                                                                        (expand
                                                                         "SS")
                                                                        (("1"
                                                                          (expand
                                                                           "FF")
                                                                          (("1"
                                                                            (rewrite
                                                                             "IUnion_0_def")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "series")
                                                                    (("2"
                                                                      (expand
                                                                       "sigma"
                                                                       1)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "SS")
                                                                            (("2"
                                                                              (case-replace
                                                                               "FF(1+j!1)=(reals@real_fun_ops.+)(FF(j!1),HH(X!1(1 + j!1)))")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "integral_add[T2, S2, to_measure(nu!1)]"
                                                                                 1)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2
                                                                                 -6)
                                                                                (("2"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "+")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "FF")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "IUnion_n_def"
                                                                                         1)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-2
                                                                                            -4
                                                                                            1))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "HH")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "o ")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "y_section")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "y_section_union")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j!1")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "y_section_disjoint"
                                                                                                       ("X"
                                                                                                        "IUnion(j!1, X!1)"
                                                                                                        "Y"
                                                                                                        "X!1(1 + j!1)"
                                                                                                        "b"
                                                                                                        "x!1"))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "fm_disjointunion[T1,S1,mu!1]"
                                                                                                           ("A"
                                                                                                            "y_section(IUnion(j!1, X!1), x!1)"
                                                                                                            "B"
                                                                                                            "y_section(X!1(1 + j!1), x!1)"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "+")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "j!1"
                                                                                         "x1!1")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "HH")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "o ")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand "FF")
                                                              (("1"
                                                                (expand "HH")
                                                                (("1"
                                                                  (expand
                                                                   "o ")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand "FF")
                                                              (("2"
                                                                (expand "HH")
                                                                (("2"
                                                                  (expand
                                                                   "o ")
                                                                  (("2"
                                                                    (rewrite
                                                                     "IUnion_n_def")
                                                                    (("2"
                                                                      (expand
                                                                       "y_section")
                                                                      (("2"
                                                                        (rewrite
                                                                         "y_section_union")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "n!1")
                                                                          (("2"
                                                                            (lemma
                                                                             "fm_monotone[T1,S1,mu!1]"
                                                                             ("A"
                                                                              "y_section(IUnion(n!1, X!1), y!1)"
                                                                              "B"
                                                                              "union(y_section(IUnion(n!1, X!1), y!1),
                  y_section(X!1(1 + n!1), y!1))"))
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (typepred "X!1")
                                                          (("2"
                                                            (expand
                                                             "disjoint_indexed_measurable?")
                                                            (("2"
                                                              (expand
                                                               "disjoint?")
                                                              (("2"
                                                                (expand
                                                                 "disjoint?")
                                                                (("2"
                                                                  (expand
                                                                   "intersection")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (expand
                                                                           "IUnion")
                                                                          (("2"
                                                                            (expand
                                                                             "image")
                                                                            (("2"
                                                                              (expand
                                                                               "Union")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "a!1")
                                                                                  (("2"
                                                                                    (skolem
                                                                                     -
                                                                                     "n!2")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "n!2")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "n!2"
                                                                                         "1+n!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (expand "FF")
                                                      (("2"
                                                        (inst -2 "n!1")
                                                        (("2"
                                                          (inst
                                                           -5
                                                           "IUnion(n!1, X!1)")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (induct "n")
                                                  (("1"
                                                    (rewrite "IUnion_0_def")
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (rewrite "IUnion_n_def")
                                                      (("2"
                                                        (lemma
                                                         "sigma_algebra_union[[T1,T2],sigma_times(S1, S2)]"
                                                         ("x"
                                                          "IUnion(j!1, X!1)"
                                                          "y"
                                                          "X!1(1 + j!1)"))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp)
                                    (("2" (typepred "X!1(n!1)")
                                      (("2" (inst -4 "X!1(n!1)") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2) (("3" (skosimp) nil nil)) nil)
                         ("4" (skosimp)
                          (("4" (inst -3 "IUnion(X!1)") nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (expand "HH") (("2" (inst -3 "M!1") nil nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (expand "HH") (("2" (inst -3 "M!1") nil nil)) nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (expand "y_section")
                  (("2"
                    (lemma "y_section_measurable[T1,T2]"
                     ("Z" "M!1" "S1" "S1" "S2" "S2" "y" "x1!1"))
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (expand "y_section")
              (("2"
                (lemma "y_section_measurable[T1,T2]"
                 ("Z" "M!1" "S1" "S1" "S2" "S2" "y" "x1!1"))
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fm_emptyset formula-decl nil finite_measure nil)
    (integral_zero formula-decl nil integral nil)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (y_section const-decl "set[T1]" cross_product topology)
    (emptyset const-decl "set" sets nil)
    (y_section_union formula-decl nil product_sections nil)
    (fm_disjointunion formula-decl nil finite_measure nil)
    (y_section_disjoint formula-decl nil product_sections nil)
    (integral_add formula-decl nil integral nil)
    (member const-decl "bool" sets nil)
    (y_section_measurable formula-decl nil product_sigma_def nil)
    (union const-decl "set" sets nil)
    (limit const-decl "real" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (sequence type-eq-decl nil sequences nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool" generalized_measure_def
     nil)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (disjoint? const-decl "bool" sets nil) (Union const-decl "set" sets nil)
    (fm_monotone formula-decl nil finite_measure nil)
    (monotone_convergence_scaf formula-decl nil integral_convergence_scaf nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (mu const-decl "nnreal" measure_props nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (null_set? const-decl "bool" measure_theory nil)
    (subset? const-decl "bool" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (integral_ae_le formula-decl nil integral nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (integral_nonneg formula-decl nil integral nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (bounded? const-decl "bool" real_fun_preds reals)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (metric? const-decl "bool" metric_def metric_space)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (pointwise_convergence? const-decl "bool" pointwise_convergence nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (metric_converges_to const-decl "bool" metric_space_def metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (convergence const-decl "bool" convergence_sequences analysis)
    (converges_upto? const-decl "bool" convergence_aux metric_space)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (y_section const-decl "[T2 -> set[T1]]" cross_product topology)
    (set type-eq-decl nil sets nil) (integral const-decl "real" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (finite_measure_def formula-decl nil measure_def nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil))
   shostak))
 (finite_product_alt 0
  (finite_product_alt-2 "" 3789904353
   ("" (skosimp)
    (("" (typepred "fm_times(mu!1, nu!1)")
      (("" (lemma "fm_times_alt" ("nu" "nu!1" "mu" "mu!1"))
        (("" (name "F" "fm_times(mu!1, nu!1)")
          (("" (replace -1)
            ((""
              (name "G"
                    "LAMBDA M: integral[T2, S2, to_measure(nu!1)](mu!1 o y_section(M))")
              (("1" (replace -1)
                (("1"
                  (lemma
                   "monotone_finite_measures[[T1,T2],fullset[(measurable_rectangle?(S1,S2))]]"
                   ("nu" "G" "mu" "F"))
                  (("1" (split)
                    (("1" (inst - "M!1")
                      (("1" (expand "G") (("1" (propax) nil nil)) nil)
                       ("2" (typepred "M!1")
                        (("2" (expand "sigma_times") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skosimp)
                        (("2" (typepred "b!1")
                          (("2" (typepred "a!1")
                            (("2" (expand "fullset")
                              (("2" (expand "extend")
                                (("2" (prop)
                                  (("2" (expand "intersection")
                                    (("2" (expand "member")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (expand "measurable_rectangle?")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               +
                                               "intersection(X!1,X!2)"
                                               "intersection(Y!1,Y!2)")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  (("1" (grind) nil nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "sigma_algebra_intersection[T1,S1]"
                                                   ("x" "X!1" "y" "X!2"))
                                                  (("1" (assert) nil nil)
                                                   ("2" (propax) nil nil)
                                                   ("3" (propax) nil nil))
                                                  nil)
                                                 ("3"
                                                  (lemma
                                                   "sigma_algebra_intersection[T2,S2]"
                                                   ("x" "Y!1" "y" "Y!2"))
                                                  (("1" (assert) nil nil)
                                                   ("2" (propax) nil nil)
                                                   ("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1)
                      (("3" (skosimp)
                        (("3" (typepred "a!1")
                          (("3" (expand "fullset")
                            (("3" (expand "extend")
                              (("3" (prop)
                                (("3"
                                  (lemma "complement_rectangle" ("r" "a!1"))
                                  (("1" (expand "finite_disjoint_union?")
                                    (("1" (skosimp)
                                      (("1"
                                        (inst + "E!1" "n!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst - "i!1")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (flatten)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but 1)
                      (("4" (skosimp)
                        (("4" (typepred "a!1")
                          (("4" (expand "fullset")
                            (("4" (expand "extend")
                              (("4" (prop)
                                (("4" (expand "F")
                                  (("4" (expand "measurable_rectangle?")
                                    (("4" (skosimp)
                                      (("4"
                                        (lemma
                                         "rectangle_measure1"
                                         ("M"
                                          "a!1"
                                          "X"
                                          "X!1"
                                          "Y"
                                          "Y!1"
                                          "nu"
                                          "nu!1"
                                          "mu"
                                          "mu!1"))
                                        (("1"
                                          (lemma
                                           "rectangle_measure2"
                                           ("M"
                                            "a!1"
                                            "X"
                                            "X!1"
                                            "Y"
                                            "Y!1"
                                            "nu"
                                            "nu!1"
                                            "mu"
                                            "mu!1"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "G")
                                              (("1"
                                                (expand "fm_times")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 -4 1))
                    (("2" (split)
                      (("1" (skosimp)
                        (("1" (expand "sigma_times") (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "finite_measure?")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (skosimp)
                              (("2" (typepred "X!1")
                                (("2" (inst - "X!1")
                                  (("1" (assert)
                                    (("1" (expand "o ")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (split)
                                      (("1"
                                        (skolem + "n!1")
                                        (("1"
                                          (typepred "X!1(n!1)")
                                          (("1"
                                            (expand "sigma_times")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand
                                         "disjoint_indexed_measurable?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but (1 -3))
                    (("3" (split)
                      (("1" (skosimp)
                        (("1" (expand "sigma_times") (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2" (assert)
                          (("2" (expand "G")
                            (("2"
                              (lemma "y_section_bounded"
                               ("M" "x1!1" "mu" "mu!1"))
                              (("2" (hide -2)
                                (("2"
                                  (lemma "y_section_integrable"
                                   ("nu" "nu!1" "mu" "mu!1" "M" "x1!1"))
                                  (("2"
                                    (lemma
                                     "integral_nonneg[T2, S2, to_measure(nu!1)]"
                                     ("f" "mu!1 o y_section(x1!1)"))
                                    (("2" (assert)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst - "x!1")
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "finite_measure?")
                        (("3" (flatten)
                          (("3" (assert)
                            (("3" (skosimp)
                              (("3" (typepred "X!1")
                                (("3" (inst - "X!1")
                                  (("1" (expand "o ") (("1" (propax) nil nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (split)
                                      (("1"
                                        (skolem + "n!1")
                                        (("1"
                                          (typepred "X!1(n!1)")
                                          (("1"
                                            (expand "sigma_times")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand
                                         "disjoint_indexed_measurable?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide-all-but 1)
                    (("4" (expand "nonempty?")
                      (("4" (expand "empty?")
                        (("4" (inst - "emptyset[[T1, T2]]")
                          (("4" (expand "member")
                            (("4" (expand "extend")
                              (("4" (expand "fullset")
                                (("4" (prop)
                                  (("4" (expand "measurable_rectangle?")
                                    (("4" (inst + "emptyset" "emptyset")
                                      (("4"
                                        (typepred "S1")
                                        (("4"
                                          (typepred "S2")
                                          (("4"
                                            (expand "sigma_algebra?")
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (expand
                                                 "subset_algebra_empty?")
                                                (("4"
                                                  (expand "member")
                                                  (("4"
                                                    (hide -2 -3 -5 -6)
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        (("4"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2"
                  (lemma "y_section_integrable"
                   ("nu" "nu!1" "mu" "mu!1" "M" "M!2"))
                  (("2" (propax) nil nil)) nil))
                nil)
               ("3" (skosimp)
                (("3" (skosimp)
                  (("3" (expand "y_section")
                    (("3"
                      (lemma "y_section_measurable[T1,T2]"
                       ("Z" "M!2" "S1" "S1" "S2" "S2" "y" "x1!1"))
                      (("3" (expand "member") (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fm_times const-decl "finite_measure[[T1, T2], sigma_times(S1, S2)]"
     product_finite_measure nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_finite_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_finite_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T2 formal-type-decl nil product_finite_measure nil)
    (T1 formal-type-decl nil product_finite_measure nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (y_section_measurable formula-decl nil product_sigma_def nil)
    (monotone_finite_measures formula-decl nil monotone_classes nil)
    (generated_sigma_algebra const-decl "sigma_algebra" subset_algebra_def
     nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (M!1 skolem-const-decl "(sigma_times(S1, S2))" product_finite_measure nil)
    (G skolem-const-decl "[(sigma_times(S1, S2)) -> real]"
     product_finite_measure nil)
    (intersection const-decl "set" sets nil)
    (sigma_algebra_intersection formula-decl nil sigma_algebra nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (subset_algebra_complement application-judgement "(S)" sigma_algebra nil)
    (complement_rectangle formula-decl nil product_sigma nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (finite_disjoint_union? const-decl "bool" subset_algebra_def nil)
    (rectangle_measure2 formula-decl nil product_finite_measure nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (rectangle_measure1 formula-decl nil product_finite_measure nil)
    (F skolem-const-decl "finite_measure[[T1, T2], sigma_times(S1, S2)]"
     product_finite_measure nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable sigma_set)
    (finite_emptyset name-judgement "finite_set[T]" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (disjoint_indexed_measurable? const-decl "bool" generalized_measure_def
     nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (X!1 skolem-const-decl "disjoint_indexed_measurable
    [[T1, T2],
     (generated_sigma_algebra(extend
                                  [set[[T1, T2]],
                                   (measurable_rectangle?[T1, T2](S1, S2)),
                                   bool, FALSE]
                                  (fullset
                                       [(measurable_rectangle?(S1, S2))])))]"
     product_finite_measure nil)
    (X!1 skolem-const-decl "disjoint_indexed_measurable
    [[T1, T2],
     (generated_sigma_algebra(extend
                                  [set[[T1, T2]],
                                   (measurable_rectangle?[T1, T2](S1, S2)),
                                   bool, FALSE]
                                  (fullset
                                       [(measurable_rectangle?(S1, S2))])))]"
     product_finite_measure nil)
    (integral_nonneg formula-decl nil integral nil)
    (y_section_integrable formula-decl nil product_finite_measure nil)
    (y_section_bounded formula-decl nil product_finite_measure nil)
    (emptyset const-decl "set" sets nil)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (subset_algebra_emptyset name-judgement "(S)" product_finite_measure nil)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (empty? const-decl "bool" sets nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integral const-decl "real" integral nil)
    (O const-decl "T3" function_props nil) (set type-eq-decl nil sets nil)
    (y_section const-decl "[T2 -> set[T1]]" cross_product topology)
    (fm_times_alt formula-decl nil product_finite_measure nil))
   shostak)
  (finite_product_alt-1 nil 3455344817
   ("" (skosimp)
    (("" (typepred "fm_times(mu!1, nu!1)")
      (("" (lemma "fm_times_alt" ("nu" "nu!1" "mu" "mu!1"))
        (("" (name "F" "fm_times(mu!1, nu!1)")
          (("" (replace -1)
            ((""
              (name "G"
                    "LAMBDA M: integral[T2, S2, to_measure(nu!1)](mu!1 o y_section(M))")
              (("1" (replace -1)
                (("1"
                  (lemma
                   "monotone_finite_measures[[T1,T2],fullset[(measurable_rectangle?(S1,S2))]]"
                   ("nu" "G" "mu" "F"))
                  (("1" (split)
                    (("1" (inst - "M!1")
                      (("1" (expand "G") (("1" (propax) nil nil)) nil)
                       ("2" (typepred "M!1")
                        (("2" (expand "sigma_times") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skosimp)
                        (("2" (typepred "b!1")
                          (("2" (typepred "a!1")
                            (("2" (expand "fullset")
                              (("2" (expand "extend")
                                (("2" (prop)
                                  (("2" (expand "intersection")
                                    (("2" (expand "member")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (expand "measurable_rectangle?")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               +
                                               "intersection(X!1,X!2)"
                                               "intersection(Y!1,Y!2)")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  (("1" (grind) nil nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "sigma_algebra_intersection[T1,S1]"
                                                   ("x" "X!1" "y" "X!2"))
                                                  (("1" (assert) nil nil)
                                                   ("2" (propax) nil nil)
                                                   ("3" (propax) nil nil))
                                                  nil)
                                                 ("3"
                                                  (lemma
                                                   "sigma_algebra_intersection[T2,S2]"
                                                   ("x" "Y!1" "y" "Y!2"))
                                                  (("1" (assert) nil nil)
                                                   ("2" (propax) nil nil)
                                                   ("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1)
                      (("3" (skosimp)
                        (("3" (typepred "a!1")
                          (("3" (expand "fullset")
                            (("3" (expand "extend")
                              (("3" (prop)
                                (("3"
                                  (lemma "complement_rectangle" ("r" "a!1"))
                                  (("1" (expand "finite_disjoint_union?")
                                    (("1" (skosimp)
                                      (("1"
                                        (inst + "E!1" "n!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst - "i!1")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (flatten)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but 1)
                      (("4" (skosimp)
                        (("4" (typepred "a!1")
                          (("4" (expand "fullset")
                            (("4" (expand "extend")
                              (("4" (prop)
                                (("4" (expand "F")
                                  (("4" (expand "measurable_rectangle?")
                                    (("4" (skosimp)
                                      (("4"
                                        (lemma
                                         "rectangle_measure1"
                                         ("M"
                                          "a!1"
                                          "X"
                                          "X!1"
                                          "Y"
                                          "Y!1"
                                          "nu"
                                          "nu!1"
                                          "mu"
                                          "mu!1"))
                                        (("1"
                                          (lemma
                                           "rectangle_measure2"
                                           ("M"
                                            "a!1"
                                            "X"
                                            "X!1"
                                            "Y"
                                            "Y!1"
                                            "nu"
                                            "nu!1"
                                            "mu"
                                            "mu!1"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "G")
                                              (("1"
                                                (expand "fm_times")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "cross_product")
                                                    (("1"
                                                      (replace -3 * rl)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 -4 1))
                    (("2" (split)
                      (("1" (skosimp)
                        (("1" (expand "sigma_times") (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "finite_measure?")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (skosimp)
                              (("2" (typepred "X!1")
                                (("2" (inst - "X!1")
                                  (("1" (assert)
                                    (("1" (expand "o ")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (split)
                                      (("1"
                                        (skolem + "n!1")
                                        (("1"
                                          (typepred "X!1(n!1)")
                                          (("1"
                                            (expand "sigma_times")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand
                                         "disjoint_indexed_measurable?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but (1 -3))
                    (("3" (split)
                      (("1" (skosimp)
                        (("1" (expand "sigma_times") (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2" (assert)
                          (("2" (expand "G")
                            (("2"
                              (lemma "y_section_bounded"
                               ("M" "x1!1" "mu" "mu!1"))
                              (("2" (hide -2)
                                (("2"
                                  (lemma "y_section_integrable"
                                   ("nu" "nu!1" "mu" "mu!1" "M" "x1!1"))
                                  (("2"
                                    (lemma
                                     "integral_nonneg[T2, S2, to_measure(nu!1)]"
                                     ("f" "mu!1 o y_section(x1!1)"))
                                    (("2" (assert)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst - "x!1")
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "finite_measure?")
                        (("3" (flatten)
                          (("3" (assert)
                            (("3" (skosimp)
                              (("3" (typepred "X!1")
                                (("3" (inst - "X!1")
                                  (("1" (expand "o ") (("1" (propax) nil nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (split)
                                      (("1"
                                        (skolem + "n!1")
                                        (("1"
                                          (typepred "X!1(n!1)")
                                          (("1"
                                            (expand "sigma_times")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand
                                         "disjoint_indexed_measurable?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide-all-but 1)
                    (("4" (expand "nonempty?")
                      (("4" (expand "empty?")
                        (("4" (inst - "emptyset[[T1, T2]]")
                          (("4" (expand "member")
                            (("4" (expand "extend")
                              (("4" (expand "fullset")
                                (("4" (prop)
                                  (("4" (expand "measurable_rectangle?")
                                    (("4" (inst + "emptyset" "emptyset")
                                      (("4"
                                        (typepred "S1")
                                        (("4"
                                          (typepred "S2")
                                          (("4"
                                            (expand "sigma_algebra?")
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (expand
                                                 "subset_algebra_empty?")
                                                (("4"
                                                  (expand "member")
                                                  (("4"
                                                    (hide -2 -3 -5 -6)
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        (("4"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2"
                  (lemma "y_section_integrable"
                   ("nu" "nu!1" "mu" "mu!1" "M" "M!2"))
                  (("2" (propax) nil nil)) nil))
                nil)
               ("3" (skosimp)
                (("3" (skosimp)
                  (("3" (expand "y_section")
                    (("3"
                      (lemma "y_section_measurable[T1,T2]"
                       ("Z" "M!2" "S1" "S1" "S2" "S2" "y" "x1!1"))
                      (("3" (expand "member") (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_measure nonempty-type-eq-decl nil generalized_measure_def nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (y_section const-decl "[T2 -> set[T1]]" cross_product topology)
    (set type-eq-decl nil sets nil) (integral const-decl "real" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (monotone_finite_measures formula-decl nil monotone_classes nil)
    (generated_sigma_algebra const-decl "sigma_algebra" subset_algebra_def
     nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (fullset const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil)
    (complement_rectangle formula-decl nil product_sigma nil)
    (sequence type-eq-decl nil sequences nil)
    (finite_disjoint_union? const-decl "bool" subset_algebra_def nil)
    (member const-decl "bool" sets nil)
    (sigma_algebra_intersection formula-decl nil sigma_algebra nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (intersection const-decl "set" sets nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool" generalized_measure_def
     nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" sigma_algebra nil)
    (integral_nonneg formula-decl nil integral nil)
    (emptyset const-decl "set" sets nil)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (empty? const-decl "bool" sets nil)
    (y_section_measurable formula-decl nil product_sigma_def nil))
   shostak)))


(ln_exp_series_alt
 (noa_posreal 0
  (noa_posreal-1 nil 3477844115
   ("" (expand "not_one_element?")
    (("" (skosimp*) (("" (inst + "x!1+1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/"))
   shostak))
 (conn_posreal 0
  (conn_posreal-1 nil 3477844124
   ("" (expand "connected?")
    (("" (skosimp*) (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (connected? const-decl "bool" deriv_domain_def "analysis/"))
   shostak))
 (noa_gt_m1 0
  (noa_gt_m1-1 nil 3477844134
   ("" (expand "not_one_element?")
    (("" (skosimp*) (("" (inst + "x!1+1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/"))
   shostak))
 (conn_gt_m1 0
  (conn_gt_m1-1 nil 3477844144
   ("" (expand "connected?")
    (("" (skosimp*) (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (connected? const-decl "bool" deriv_domain_def "analysis/"))
   shostak))
 (deriv_domain_gtm1 0
  (deriv_domain_gtm1-1 nil 3477844153
   ("" (expand "deriv_domain?")
    (("" (skosimp*) (("" (inst + "e!1/2") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (nderiv_ln_TCC1 0
  (nderiv_ln_TCC1-1 nil 3279382887
   ("" (lemma "deriv_domain_posreal") (("" (propax) nil nil)) nil)
   ((deriv_domain_posreal formula-decl nil deriv_domain "analysis/"))
   shostak
   (nderiv_ln assuming "analysis@nth_derivatives[posreal]"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (nderiv_ln_TCC2 0
  (nderiv_ln_TCC2-1 nil 3279382887
   ("" (expand "not_one_element?")
    (("" (skosimp*) (("" (inst + "x!1+1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/"))
   shostak
   (nderiv_ln assuming "analysis@nth_derivatives[posreal]"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (nderiv_ln 0
  (nderiv_ln-2 nil 3445353631
   (""
    (case "FORALL (n: nat): derivable_n_times?[posreal](ln, n) & nderiv[posreal](n,ln) = IF n = 0 THEN ln ELSE (LAMBDA (x:posreal): -factorial(n-1)/(-x)^n) ENDIF")
    (("1" (skosimp*)
      (("1" (inst - "n!1") (("1" (flatten) nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (expand "derivable_n_times?") (("1" (propax) nil nil))
          nil)
         ("2" (expand "nderiv") (("2" (propax) nil nil)) nil)
         ("3" (skosimp*)
          (("3" (case-replace "j!1=0")
            (("1" (lemma "ln_derivable")
              (("1" (flatten -1)
                (("1" (expand "derivable_n_times?")
                  (("1" (expand "derivable_n_times?")
                    (("1" (expand "nderiv" 1)
                      (("1" (expand "nderiv" 1)
                        (("1"
                          (lemma "extensionality"
                           ("f" "deriv(ln)" "g"
                            "(LAMBDA (x: posreal): -factorial(1) / (-x) ^ 1)"))
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (replace -2)
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (expand "factorial")
                                    (("2"
                                      (expand "factorial")
                                      (("2"
                                        (rewrite "expt_x1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lemma "ln_derivable")
                (("2" (flatten -1)
                  (("2" (lemma "identity_derivable_fun[posreal]")
                    (("2"
                      (lemma "const_derivable_fun[posreal]"
                       ("b" "-factorial(j!1)"))
                      (("2" (lemma "deriv_id_fun[posreal]")
                        (("2"
                          (lemma "deriv_const_fun[posreal]"
                           ("b" "-factorial(j!1)"))
                          (("2" (expand "I")
                            (("2" (expand "const_fun")
                              (("2"
                                (lemma
                                 "neg_derivable_fun[posreal]"
                                 ("f" "LAMBDA (x: posreal): x"))
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "-")
                                    (("2"
                                      (lemma
                                       "deriv_neg_fun[posreal]"
                                       ("ff" "LAMBDA (x: posreal): x"))
                                      (("2"
                                        (replace -4)
                                        (("2"
                                          (expand "-" -1)
                                          (("2"
                                            (lemma
                                             "inv_derivable_fun[posreal]"
                                             ("g"
                                              "LAMBDA (x_1: posreal): -x_1"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "/")
                                                (("2"
                                                  (lemma
                                                   "deriv_inv_fun[posreal]"
                                                   ("gg"
                                                    "LAMBDA (x_1: posreal): -x_1"))
                                                  (("2"
                                                    (replace -3)
                                                    (("2"
                                                      (expand "/")
                                                      (("2"
                                                        (expand "*")
                                                        (("2"
                                                          (expand
                                                           "-"
                                                           -1)
                                                          (("2"
                                                            (lemma
                                                             "extensionality"
                                                             ("f"
                                                              "LAMBDA (x: posreal): --1 / (-x * -x)"
                                                              "g"
                                                              "LAMBDA (x: posreal): 1 / (x * x)"))
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "deriv_exp_fun[posreal]"
                                                                     ("f"
                                                                      "LAMBDA (x: posreal): 1 / -x"
                                                                      "n"
                                                                      "j!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "scal_derivable_fun[posreal]"
                                                                           ("f"
                                                                            "(LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                            "b"
                                                                            "-factorial(j!1 - 1)"))
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (lemma
                                                                               "deriv_scal_fun[posreal]"
                                                                               ("ff"
                                                                                "(LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                                "b"
                                                                                "-factorial(j!1 - 1)"))
                                                                              (("1"
                                                                                (replace
                                                                                 -4
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "extensionality"
                                                                                     ("f"
                                                                                      "-factorial(j!1 - 1) * (LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                                      "g"
                                                                                      "LAMBDA (x: posreal): -factorial(j!1 - 1) / (-x) ^ j!1"))
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         *
                                                                                         rl)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -17
                                                                                           *
                                                                                           rl)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "extensionality"
                                                                                             ("f"
                                                                                              "-factorial(j!1 - 1) *
                                        (j!1 * (LAMBDA (x: posreal): 1 / -x) ^ (j!1 - 1) *
                                          (LAMBDA (x: posreal): 1 / (x * x)))"
                                                                                              "g"
                                                                                              "LAMBDA (x: posreal): -factorial(j!1) / (-x) ^ (1 + j!1)"))
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nderiv_derivable_eqv[posreal]"
                                                                                                   ("f"
                                                                                                    "ln"
                                                                                                    "n"
                                                                                                    "j!1"))
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -18
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -5
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "nderiv_derivable_aux[posreal]"
                                                                                                           ("f"
                                                                                                            "ln"
                                                                                                            "n"
                                                                                                            "j!1"))
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -5
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "factorial"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "^"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "div_expt"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "expt_1i")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (1
                                                                                                                2))
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "expt_plus"
                                                                                                                 ("n0x"
                                                                                                                  "-x!1"
                                                                                                                  "i"
                                                                                                                  "j!1-1"
                                                                                                                  "j"
                                                                                                                  "2"))
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "(-x!1) ^ 2=x!1*x!1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^"
                                                                                               1
                                                                                               1)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "div_expt"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "expt_1i"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skosimp*) (("4" (assert) nil nil)) nil)
         ("5" (hide 1) (("5" (skosimp*) (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((const_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_const_fun formula-decl nil derivatives "analysis/")
    (neg_derivable_fun formula-decl nil derivatives "analysis/")
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (inv_derivable_fun formula-decl nil derivatives "analysis/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/ const-decl "[T -> real]" real_fun_ops "reals/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt_1i formula-decl nil exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_expt formula-decl nil exponentiation nil)
    (nderiv_derivable_aux formula-decl nil nth_derivatives "analysis/")
    (nderiv_derivable_eqv formula-decl nil nth_derivatives "analysis/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/ const-decl "[T -> real]" real_fun_ops "reals/")
    (nz_deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_inv_fun formula-decl nil derivatives "analysis/")
    (deriv_neg_fun formula-decl nil derivatives "analysis/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (ln_derivable formula-decl nil ln_exp nil)
    (extensionality formula-decl nil functions nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (expt_x1 formula-decl nil exponentiation nil)
    (factorial_1 formula-decl nil factorial "ints/")
    (factorial_0 formula-decl nil factorial "ints/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (derivable_n_times? def-decl "bool" nth_derivatives "analysis/")
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nderiv_fun type-eq-decl nil nth_derivatives "analysis/")
    (nderiv def-decl "[T -> real]" nth_derivatives "analysis/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil)
  (nderiv_ln-1 nil 3270048547
   (""
    (case "FORALL (n: nat): derivable_n_times[posreal](ln, n) & nderiv[posreal](n,ln) = IF n = 0 THEN ln ELSE (LAMBDA (x:posreal): -factorial(n-1)/(-x)^n) ENDIF")
    (("1" (skosimp*)
      (("1" (inst - "n!1") (("1" (flatten) nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (expand "derivable_n_times?") (("1" (propax) nil nil))
          nil)
         ("2" (expand "nderiv") (("2" (propax) nil nil)) nil)
         ("3" (skosimp*)
          (("3" (case-replace "j!1=0")
            (("1" (lemma "ln_derivable")
              (("1" (flatten -1)
                (("1" (expand "derivable_n_times?")
                  (("1" (expand "derivable_n_times?")
                    (("1" (expand "nderiv" 1)
                      (("1" (expand "nderiv" 1)
                        (("1"
                          (lemma "extensionality"
                           ("f" "deriv(ln)" "g"
                            "(LAMBDA (x: posreal): -factorial(1) / (-x) ^ 1)"))
                          (("1" (split -1)
                            (("1" (assert)
                              (("1"
                                (expand "factorial" -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (replace -2)
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (expand "factorial")
                                    (("2"
                                      (expand "factorial")
                                      (("2"
                                        (rewrite "expt_x1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (skosimp*)
                              (("2"
                                (inst + "x!1+1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*) (("3" (assert) nil nil))
                            nil)
                           ("4" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lemma "ln_derivable")
                (("2" (flatten -1)
                  (("2" (lemma "identity_derivable_fun[posreal]")
                    (("1"
                      (lemma "const_derivable_fun[posreal]"
                       ("b" "-factorial(j!1)"))
                      (("1" (lemma "deriv_id_fun[posreal]")
                        (("1"
                          (lemma "deriv_const_fun[posreal]"
                           ("b" "-factorial(j!1)"))
                          (("1" (expand "I")
                            (("1" (expand "const_fun")
                              (("1"
                                (lemma
                                 "neg_derivable_fun[posreal]"
                                 ("f" "LAMBDA (x: posreal): x"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (lemma
                                       "deriv_neg_fun[posreal]"
                                       ("ff" "LAMBDA (x: posreal): x"))
                                      (("1"
                                        (replace -4)
                                        (("1"
                                          (expand "-" -1)
                                          (("1"
                                            (lemma
                                             "inv_derivable_fun[posreal]"
                                             ("g"
                                              "LAMBDA (x_1: posreal): -x_1"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "/")
                                                (("1"
                                                  (lemma
                                                   "deriv_inv_fun[posreal]"
                                                   ("gg"
                                                    "LAMBDA (x_1: posreal): -x_1"))
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (expand "/")
                                                      (("1"
                                                        (expand "*")
                                                        (("1"
                                                          (expand
                                                           "-"
                                                           -1)
                                                          (("1"
                                                            (lemma
                                                             "extensionality"
                                                             ("f"
                                                              "LAMBDA (x: posreal): --1 / (-x * -x)"
                                                              "g"
                                                              "LAMBDA (x: posreal): 1 / (x * x)"))
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "deriv_exp_fun[posreal]"
                                                                     ("f"
                                                                      "LAMBDA (x: posreal): 1 / -x"
                                                                      "n"
                                                                      "j!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "scal_derivable_fun[posreal]"
                                                                           ("f"
                                                                            "(LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                            "b"
                                                                            "-factorial(j!1 - 1)"))
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (lemma
                                                                               "deriv_scal_fun[posreal]"
                                                                               ("ff"
                                                                                "(LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                                "b"
                                                                                "-factorial(j!1 - 1)"))
                                                                              (("1"
                                                                                (replace
                                                                                 -4
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "extensionality"
                                                                                     ("f"
                                                                                      "-factorial(j!1 - 1) * (LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                                      "g"
                                                                                      "LAMBDA (x: posreal): -factorial(j!1 - 1) / (-x) ^ j!1"))
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         *
                                                                                         rl)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -17
                                                                                           *
                                                                                           rl)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "extensionality"
                                                                                             ("f"
                                                                                              "-factorial(j!1 - 1) *
                       (j!1 * (LAMBDA (x: posreal): 1 / -x) ^ (j!1 - 1) *
                         (LAMBDA (x: posreal): 1 / (x * x)))"
                                                                                              "g"
                                                                                              "LAMBDA (x: posreal): -factorial(j!1) / (-x) ^ (1 + j!1)"))
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nderiv_derivable_eqv[posreal]"
                                                                                                   ("f"
                                                                                                    "ln"
                                                                                                    "n"
                                                                                                    "j!1"))
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -18
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -5
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "nderiv_derivable_aux[posreal]"
                                                                                                           ("f"
                                                                                                            "ln"
                                                                                                            "n"
                                                                                                            "j!1"))
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -5
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "factorial"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "^"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "div_expt"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "expt_1i")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (1
                                                                                                                2))
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "expt_plus"
                                                                                                                 ("n0x"
                                                                                                                  "-x!1"
                                                                                                                  "i"
                                                                                                                  "j!1-1"
                                                                                                                  "j"
                                                                                                                  "2"))
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "(-x!1) ^ 2=x!1*x!1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^"
                                                                                               1
                                                                                               1)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "div_expt"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "expt_1i"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (assert)
                        (("2" (hide 3)
                          (("2" (inst + "x!1+1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skosimp*) (("4" (assert) nil nil)) nil)
         ("5" (hide 1) (("5" (skosimp*) (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((const_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_const_fun formula-decl nil derivatives "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_neg_fun formula-decl nil derivatives "analysis/")
    (deriv_inv_fun formula-decl nil derivatives "analysis/")
    (nz_deriv_fun type-eq-decl nil derivatives "analysis/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (nderiv_derivable_eqv formula-decl nil nth_derivatives "analysis/")
    (nderiv_derivable_aux formula-decl nil nth_derivatives "analysis/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (inv_derivable_fun formula-decl nil derivatives "analysis/")
    (neg_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (ln_derivable formula-decl nil ln_exp nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (factorial_1 formula-decl nil factorial "ints/")
    (factorial_0 formula-decl nil factorial "ints/")
    (ln const-decl "real" ln_exp nil)
    (nderiv_fun type-eq-decl nil nth_derivatives "analysis/")
    (nderiv def-decl "[T -> real]" nth_derivatives "analysis/")
    (factorial def-decl "posnat" factorial "ints/"))
   shostak))
 (ln_nderiv_TCC1 0
  (ln_nderiv_TCC1-1 nil 3270048004
   ("" (lemma "nderiv_ln") (("" (propax) nil nil)) nil)
   ((nderiv_ln formula-decl nil ln_exp_series_alt nil)) shostak
   (ln_nderiv subtype "ln_exp.ln"
    "nth_derivatives[posreal].nderiv_fun(ln_exp_series_alt.n)")))
 (ln_nderiv_TCC2 0
  (ln_nderiv_TCC2-1 nil 3270047982
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (ln_nderiv subtype "(number_fields.-)(ln_exp_series_alt.n, 1)"
    "nat")))
 (ln_nderiv_TCC3 0
  (ln_nderiv_TCC3-1 nil 3270056481
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   shostak
   (ln_nderiv subtype "ln_exp_series_alt.n"
    "{i: integers.int | booleans.OR(((number_fields.-)(ln_exp_series_alt.x)) /= 0, reals.>=(i, 0))}")))
 (ln_nderiv 0
  (ln_nderiv-2 nil 3352447560
   ("" (induct "n")
    (("1" (expand "nderiv") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (lemma "nderiv_ln" ("n" "j!1+1"))
        (("2"
          (lemma "nderiv_derivable_aux[posreal]" ("f" "ln" "n" "j!1"))
          (("2" (replace -2)
            (("2" (replace -1)
              (("2" (replace -3 1)
                (("2" (hide-all-but 1)
                  (("2" (case-replace "j!1=0")
                    (("1" (lemma "ln_derivable")
                      (("1" (flatten -1)
                        (("1" (replace -2)
                          (("1" (assert)
                            (("1"
                              (lemma "extensionality"
                               ("f"
                                "(LAMBDA (t: posreal): 1 / t)"
                                "g"
                                "(LAMBDA (x: posreal): -1 / (-x) ^ 1)"))
                              (("1"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (-3 1))
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (rewrite "expt_x1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "identity_derivable_fun[posreal]")
                        (("2" (lemma "deriv_id_fun[posreal]")
                          (("2" (expand "I")
                            (("2"
                              (lemma "neg_derivable_fun[posreal]"
                               ("f" "LAMBDA (x: posreal): x"))
                              (("2"
                                (assert)
                                (("2"
                                  (expand "-")
                                  (("2"
                                    (lemma
                                     "deriv_neg_fun[posreal]"
                                     ("ff" "LAMBDA (x: posreal): x"))
                                    (("2"
                                      (replace -3)
                                      (("2"
                                        (expand "-" -1)
                                        (("2"
                                          (lemma
                                           "inv_derivable_fun[posreal]"
                                           ("g"
                                            "LAMBDA (x_1: posreal): -x_1"))
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (expand "/")
                                              (("2"
                                                (lemma
                                                 "deriv_inv_fun[posreal]"
                                                 ("gg"
                                                  "LAMBDA (x_1: posreal): -x_1"))
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (expand "/" -1)
                                                    (("1"
                                                      (expand "*" -1)
                                                      (("1"
                                                        (expand "-" -1)
                                                        (("1"
                                                          (lemma
                                                           "deriv_exp_fun[posreal]"
                                                           ("f"
                                                            "LAMBDA (x: posreal): 1 / -x"
                                                            "n"
                                                            "j!1"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (lemma
                                                                   "scal_derivable_fun[posreal]"
                                                                   ("f"
                                                                    "(LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                    "b"
                                                                    "-factorial(j!1 - 1)"))
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "deriv_scal_fun[posreal]"
                                                                       ("ff"
                                                                        "(LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                        "b"
                                                                        "-factorial(j!1 - 1)"))
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (lemma
                                                                           "extensionality"
                                                                           ("f"
                                                                            "-factorial(j!1 - 1) * (LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                            "g"
                                                                            "LAMBDA (x: posreal): -factorial(j!1 - 1) / (-x) ^ j!1"))
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "extensionality"
                                                                                 ("f"
                                                                                  "-factorial(j!1 - 1) *
                                    (j!1 * (LAMBDA (x: posreal): 1 / -x) ^ (j!1 - 1) *
                                      (LAMBDA (x: posreal): --1 / (-x * -x)))"
                                                                                  "g"
                                                                                  "LAMBDA (x: posreal): -factorial(j!1) / (-x) ^ (1 + j!1)"))
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      2))
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "factorial"
                                                                                         1
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "^"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "div_expt"
                                                                                               1)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "expt_1i")
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "expt_plus"
                                                                                                   ("n0x"
                                                                                                    "-x!1"
                                                                                                    "i"
                                                                                                    "j!1-1"
                                                                                                    "j"
                                                                                                    "2"))
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (case-replace
                                                                                                       "(-x!1) ^ 2 = -x!1 * -x!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                2))
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^"
                                                                                     1
                                                                                     1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "div_expt"
                                                                                       1)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "expt_1i")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)
     ("4" (lemma "nderiv_ln") (("4" (propax) nil nil)) nil))
    nil)
   ((nderiv_derivable_aux formula-decl nil nth_derivatives "analysis/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (neg_derivable_fun formula-decl nil derivatives "analysis/")
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (inv_derivable_fun formula-decl nil derivatives "analysis/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/ const-decl "[T -> real]" real_fun_ops "reals/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (div_expt formula-decl nil exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (expt_1i formula-decl nil exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/ const-decl "[T -> real]" real_fun_ops "reals/")
    (nz_deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_inv_fun formula-decl nil derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_neg_fun formula-decl nil derivatives "analysis/")
    (I const-decl "(bijective?[T, T])" identity nil)
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (ln_derivable formula-decl nil ln_exp nil)
    (extensionality formula-decl nil functions nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nderiv_ln formula-decl nil ln_exp_series_alt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nderiv def-decl "[T -> real]" nth_derivatives "analysis/")
    (nderiv_fun type-eq-decl nil nth_derivatives "analysis/")
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (derivable_n_times? def-decl "bool" nth_derivatives "analysis/")
    (ln const-decl "real" ln_exp nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   nil)
  (ln_nderiv-1 nil 3270056529
   ("" (induct "n")
    (("1" (expand "nderiv") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (lemma "nderiv_ln" ("n" "j!1+1"))
        (("2"
          (lemma "nderiv_derivable_aux[posreal]" ("f" "ln" "n" "j!1"))
          (("2" (replace -2)
            (("2" (replace -1)
              (("2" (replace -3 1)
                (("2" (hide-all-but 1)
                  (("2" (case-replace "j!1=0")
                    (("1" (lemma "ln_derivable")
                      (("1" (flatten -1)
                        (("1" (replace -2)
                          (("1" (assert)
                            (("1" (expand "factorial")
                              (("1"
                                (lemma
                                 "extensionality"
                                 ("f"
                                  "(LAMBDA (t: posreal): 1 / t)"
                                  "g"
                                  "(LAMBDA (x: posreal): -1 / (-x) ^ 1)"))
                                (("1"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (hide-all-but (-3 1))
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (rewrite "expt_x1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "identity_derivable_fun[posreal]")
                        (("1" (lemma "deriv_id_fun[posreal]")
                          (("1" (expand "I")
                            (("1" (expand "const_fun")
                              (("1"
                                (lemma
                                 "neg_derivable_fun"
                                 ("f" "LAMBDA (x: posreal): x"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (lemma
                                       "deriv_neg_fun"
                                       ("ff" "LAMBDA (x: posreal): x"))
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (expand "-" -1)
                                          (("1"
                                            (lemma
                                             "inv_derivable_fun"
                                             ("g"
                                              "LAMBDA (x_1: posreal): -x_1"))
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (expand "/")
                                                (("1"
                                                  (lemma
                                                   "deriv_inv_fun"
                                                   ("gg"
                                                    "LAMBDA (x_1: posreal): -x_1"))
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (expand "/" -1)
                                                      (("1"
                                                        (expand "*" -1)
                                                        (("1"
                                                          (expand
                                                           "-"
                                                           -1)
                                                          (("1"
                                                            (lemma
                                                             "deriv_exp_fun[posreal]"
                                                             ("f"
                                                              "LAMBDA (x: posreal): 1 / -x"
                                                              "n"
                                                              "j!1"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (lemma
                                                                     "scal_derivable_fun"
                                                                     ("f"
                                                                      "(LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                      "b"
                                                                      "-factorial(j!1 - 1)"))
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_scal_fun"
                                                                         ("ff"
                                                                          "(LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                          "b"
                                                                          "-factorial(j!1 - 1)"))
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (lemma
                                                                             "extensionality"
                                                                             ("f"
                                                                              "-factorial(j!1 - 1) * (LAMBDA (x: posreal): 1 / -x) ^ j!1"
                                                                              "g"
                                                                              "LAMBDA (x: posreal): -factorial(j!1 - 1) / (-x) ^ j!1"))
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "extensionality"
                                                                                   ("f"
                                                                                    "-factorial(j!1 - 1) *
                     (j!1 * (LAMBDA (x: posreal): 1 / -x) ^ (j!1 - 1) *
                       (LAMBDA (x: posreal): --1 / (-x * -x)))"
                                                                                    "g"
                                                                                    "LAMBDA (x: posreal): -factorial(j!1) / (-x) ^ (1 + j!1)"))
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (1
                                                                                        2))
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "factorial"
                                                                                           1
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^"
                                                                                               1
                                                                                               1)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "div_expt"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "expt_1i")
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "expt_plus"
                                                                                                     ("n0x"
                                                                                                      "-x!1"
                                                                                                      "i"
                                                                                                      "j!1-1"
                                                                                                      "j"
                                                                                                      "2"))
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "(-x!1) ^ 2 = -x!1 * -x!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  2))
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^"
                                                                                       1
                                                                                       1)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "div_expt"
                                                                                         1)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "expt_1i")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (inst + "x!1+1")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)
     ("4" (lemma "nderiv_ln") (("4" (propax) nil nil)) nil))
    nil)
   ((deriv_id_fun formula-decl nil derivatives "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_neg_fun formula-decl nil derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_inv_fun formula-decl nil derivatives "analysis/")
    (nz_deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (inv_derivable_fun formula-decl nil derivatives "analysis/")
    (neg_derivable_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (ln_derivable formula-decl nil ln_exp nil)
    (ln const-decl "real" ln_exp nil))
   shostak))
 (ln_estimate_TCC1 0
  (ln_estimate_TCC1-1 nil 3270048045
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak (ln_estimate subtype "0" "T_low[nat]")))
 (ln_estimate_TCC2 0
  (ln_estimate_TCC2-1 nil 3270048058
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak
   (ln_estimate subtype "ln_exp_series_alt.nn"
    "{i: integers.int | booleans.OR(((number_fields.-)(ln_exp_series_alt.x)) /= 0, reals.>=(i, 0))}")))
 (ln_estimate_TCC3 0
  (ln_estimate_TCC3-1 nil 3374506918 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil))
   nil (ln_estimate subtype "ln_exp_series_alt.nn" "nznum")))
 (ln_estimate_scaf1_TCC1 0
  (ln_estimate_scaf1_TCC1-1 nil 3309536146
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (ln_estimate_scaf1 subtype "ln_exp_series_alt.n"
    "{i: integers.int | booleans.OR(((number_fields.-)(1, ln_exp_series_alt.t)) /= 0, reals.>=(i, 0))}")))
 (ln_estimate_scaf1 0
  (ln_estimate_scaf1-2 nil 3352449073
   ("" (skosimp)
    (("" (lemma "id_fun_continuous[posreal]")
      (("" (expand "I")
        (("" (lemma "const_fun_continuous[posreal]" ("u" "1"))
          (("" (expand "const_fun")
            ((""
              (lemma "diff_fun_continuous[posreal]"
               ("h1" "LAMBDA (x: posreal): 1" "h2"
                "LAMBDA (x: posreal): x"))
              (("1" (expand "-")
                (("1"
                  (case "forall (n:nat): continuous?(LAMBDA (t: posreal): (1 - t) ^ n)")
                  (("1" (inst - "n!1")
                    (("1"
                      (lemma "div_fun_continuous[posreal]"
                       ("h" "LAMBDA (t: posreal): (1 - t) ^ n!1" "h3"
                        "LAMBDA (x: posreal): x"))
                      (("1" (expand "/") (("1" (propax) nil nil)) nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (hide -3 2)
                    (("2" (induct "n")
                      (("1" (hide -1)
                        (("1"
                          (lemma "extensionality"
                           ("f" "LAMBDA (x: posreal): 1" "g"
                            "LAMBDA (t: posreal): (1 - t) ^ 0"))
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skosimp)
                                (("2"
                                  (expand "^")
                                  (("2"
                                    (expand "expt")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2"
                          (lemma "prod_fun_continuous[posreal]"
                           ("h1" "LAMBDA (t: posreal): (1 - t) ^ j!1"
                            "h2" "LAMBDA (t: posreal): (1 - t)"))
                          (("1" (expand "*")
                            (("1"
                              (lemma "extensionality"
                               ("f"
                                "LAMBDA (x: posreal): (1 - x) ^ j!1 - x * (1 - x) ^ j!1"
                                "g"
                                "LAMBDA (t: posreal): (1 - t) ^ (j!1 + 1)"))
                              (("1"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (expand "expt" 1 3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil) ("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (id_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (const_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (diff_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous? const-decl "bool" continuous_functions "analysis/")
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (div_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nz_continuous_fun type-eq-decl nil continuous_functions
     "analysis/")
    (/ const-decl "[T -> real]" real_fun_ops "reals/")
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (extensionality formula-decl nil functions nil)
    (expt def-decl "real" exponentiation nil)
    (prod_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (I const-decl "(bijective?[T, T])" identity nil))
   nil)
  (ln_estimate_scaf1-1 nil 3309536222
   ("" (skosimp)
    (("" (lemma "id_fun_continuous[posreal]")
      (("" (expand "I")
        (("" (lemma "const_fun_continuous[posreal]" ("u" "1"))
          (("" (expand "const_fun")
            ((""
              (lemma "diff_fun_continuous"
               ("h1" "LAMBDA (x: posreal): 1" "h2"
                "LAMBDA (x: posreal): x"))
              (("1" (expand "-")
                (("1"
                  (case "forall (n:nat): continuous?(LAMBDA (t: posreal): (1 - t) ^ n)")
                  (("1" (inst - "n!1")
                    (("1"
                      (lemma "div_fun_continuous"
                       ("h" "LAMBDA (t: posreal): (1 - t) ^ n!1" "h3"
                        "LAMBDA (x: posreal): x"))
                      (("1" (expand "/") (("1" (propax) nil nil)) nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (hide -3 2)
                    (("2" (induct "n")
                      (("1" (hide -1)
                        (("1"
                          (lemma "extensionality"
                           ("f" "LAMBDA (x: posreal): 1" "g"
                            "LAMBDA (t: posreal): (1 - t) ^ 0"))
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skosimp)
                                (("2"
                                  (expand "^")
                                  (("2"
                                    (expand "expt")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2"
                          (lemma "prod_fun_continuous"
                           ("h1" "LAMBDA (t: posreal): (1 - t) ^ j!1"
                            "h2" "LAMBDA (t: posreal): (1 - t)"))
                          (("1" (expand "*")
                            (("1"
                              (lemma "extensionality"
                               ("f"
                                "LAMBDA (x: posreal): (1 - x) ^ j!1 - x * (1 - x) ^ j!1"
                                "g"
                                "LAMBDA (t: posreal): (1 - t) ^ (j!1 + 1)"))
                              (("1"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (expand "expt" 1 3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil) ("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (const_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (diff_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    (div_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (nz_continuous_fun type-eq-decl nil continuous_functions
     "analysis/")
    (prod_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/"))
   shostak))
 (ln_estimate_scaf2_TCC1 0
  (ln_estimate_scaf2_TCC1-1 nil 3471688910
   ("" (expand "connected?")
    (("" (skosimp*) (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (connected? const-decl "bool" deriv_domain_def "analysis/"))
   nil
   (ln_estimate_scaf2 assuming "analysis@integral_def[posreal]"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (ln_estimate_scaf2 0
  (ln_estimate_scaf2-1 nil 3309539006
   ("" (skosimp)
    (("" (lemma "continuous_Integrable?[posreal]")
      (("1" (inst?)
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (lemma "ln_estimate_scaf1" ("n" "n!1"))
                (("2" (expand "continuous?" -1)
                  (("2" (inst - "x!2") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "not_one_element?")
        (("2" (skosimp*)
          (("2" (inst + "x!2+1") (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand "connected?")
        (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous_Integrable? formula-decl nil integral "analysis/")
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (continuous? const-decl "bool" continuous_functions "analysis/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (Closed_interval type-eq-decl nil intervals_real "reals/")
    (ln_estimate_scaf1 formula-decl nil ln_exp_series_alt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (ln_estimate_scaf3_TCC1 0
  (ln_estimate_scaf3_TCC1-1 nil 3309546558
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (ln_estimate_scaf3 subtype "0"
    "{i: integers.int | booleans.OR(((number_fields.-)(1, ln_exp_series_alt.t)) /= 0, reals.>=(i, 0))}")))
 (ln_estimate_scaf3_TCC2 0
  (ln_estimate_scaf3_TCC2-1 nil 3309546568
   ("" (lemma "ln_estimate_scaf2" ("n" "0")) (("" (propax) nil nil))
    nil)
   ((ln_estimate_scaf2 formula-decl nil ln_exp_series_alt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak
   (ln_estimate_scaf3 subtype
    "LAMBDA (t: real_types.posreal): number_fields./(exponentiation.^(((number_fields.-)(1, t)), 0), t)"
    "integral_def[posreal].Integrable_funs(1, ln_exp_series_alt.x)")))
 (ln_estimate_scaf3 0
  (ln_estimate_scaf3-1 nil 3309540591
   ("" (skosimp)
    (("" (expand "ln")
      ((""
        (lemma "extensionality"
         ("f" "LAMBDA (t: posreal): (1 - t) ^ 0 / t" "g"
          "LAMBDA (t: posreal): 1 / t"))
        (("" (split -1)
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (expand "^")
                (("2" (expand "expt") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ln const-decl "real" ln_exp nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (expt def-decl "real" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (extensionality formula-decl nil functions nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil))
   shostak))
 (ln_estimate_scaf4_TCC1 0
  (ln_estimate_scaf4_TCC1-1 nil 3309547516
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (ln_estimate_scaf4 subtype
    "((number_fields.-)(1, ln_exp_series_alt.x))" "nznum")))
 (ln_estimate_scaf4_TCC2 0
  (ln_estimate_scaf4_TCC2-1 nil 3309547523
   ("" (skosimp) (("" (assert) nil nil)) nil) nil shostak
   (ln_estimate_scaf4 subtype "ln_exp_series_alt.i"
    "{i: integers.int | booleans.OR(ln_exp_series_alt.x /= 0, reals.>=(i, 0))}")))
 (ln_estimate_scaf4_TCC3 0
  (ln_estimate_scaf4_TCC3-1 nil 3309547541
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (ln_estimate_scaf4 subtype
    "((number_fields.+)(ln_exp_series_alt.n, 1))"
    "{i: integers.int | booleans.OR(ln_exp_series_alt.x /= 0, reals.>=(i, 0))}")))
 (ln_estimate_scaf4 0
  (ln_estimate_scaf4-1 nil 3309546853
   ("" (skosimp)
    (("" (name "SS" "sigma(0, n!1, LAMBDA (i: nat): x!1 ^ i)")
      (("" (replace -1)
        ((""
          (lemma "add_div"
           ("x" "SS" "n0x" "1" "y" "x!1^(n!1+1)" "n0y" "1-x!1"))
          (("1" (replace -1 2)
            (("1"
              (lemma "both_sides_div1"
               ("x" "1" "y" "SS * (1 - x!1) + x!1 ^ (n!1 + 1)" "n0z"
                "1-x!1"))
              (("1" (replace -1 2)
                (("1" (hide -1 -2)
                  (("1"
                    (case "forall (n:nat): 1 = sigma(0, n, LAMBDA (i: nat): x!1 ^ i) *(1-x!1) + x!1 ^ (n+1)")
                    (("1" (inst - "n!1") (("1" (assert) nil nil)) nil)
                     ("2" (hide-all-but (1 2))
                      (("2" (induct "n")
                        (("1" (expand "sigma")
                          (("1" (assert)
                            (("1" (expand "^")
                              (("1"
                                (expand "expt")
                                (("1"
                                  (expand "expt")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "sigma" 1)
                            (("2"
                              (name-replace "DRL101"
                               "sigma(0, j!1, LAMBDA (i: nat): x!1 ^ i)")
                              (("2"
                                (case-replace
                                 "(x!1 ^ (1 + j!1)) * x!1 = x!1 ^ (2 + j!1)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (expand "expt" 1 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ln_estimate_scaf5_TCC1 0
  (ln_estimate_scaf5_TCC1-1 nil 3309550054
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (ln_estimate_scaf5 subtype "ln_exp_series_alt.i"
    "{i: integers.int | booleans.OR(((number_fields.-)(1, ln_exp_series_alt.nzx)) /= 0, reals.>=(i, 0))}")))
 (ln_estimate_scaf5_TCC2 0
  (ln_estimate_scaf5_TCC2-1 nil 3309550054
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (ln_estimate_scaf5 subtype
    "((number_fields.+)(ln_exp_series_alt.n, 1))"
    "{i: integers.int | booleans.OR(((number_fields.-)(1, ln_exp_series_alt.nzx)) /= 0, reals.>=(i, 0))}")))
 (ln_estimate_scaf5 0
  (ln_estimate_scaf5-1 nil 3309548279
   ("" (skosimp)
    (("" (lemma "ln_estimate_scaf4" ("x" "1-nzx!1" "n" "n!1"))
      (("" (assert) nil nil)) nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ln_estimate_scaf4 formula-decl nil ln_exp_series_alt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (ln_estimate_scaf6 0
  (ln_estimate_scaf6-2 nil 3352449131
   ("" (induct "n")
    (("1" (expand "ln_estimate")
      (("1" (expand "sigma")
        (("1" (assert)
          (("1" (lemma "const_derivable_fun[posreal]" ("b" "0"))
            (("1" (expand "const_fun") (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "ln_estimate")
        (("2" (expand "sigma" 1)
          (("2"
            (name "F" "(LAMBDA px:
                               sigma(0, j!1,
                                     LAMBDA (nn: nat):
                                       IF nn = 0 THEN 0 ELSE -(-(px - 1)) ^ nn / nn ENDIF))")
            (("1"
              (lemma "extensionality"
               ("f" "(LAMBDA px:
                           sigma(0, j!1,
                                 LAMBDA (nn: nat):
                                   IF nn = 0 THEN 0 ELSE -(-(px - 1)) ^ nn / nn ENDIF)
                            + -(-(px - 1)) ^ (1 + j!1) / (1 + j!1))"
                "g" "F-(LAMBDA px: (1-px)^(1+j!1)/(1+j!1))"))
              (("1" (split -1)
                (("1" (replace -1)
                  (("1" (replace -2)
                    (("1" (hide -1 -2)
                      (("1" (lemma "identity_derivable_fun[posreal]")
                        (("1" (expand "I")
                          (("1"
                            (lemma "const_derivable_fun[posreal]"
                             ("b" "1"))
                            (("1"
                              (lemma "diff_derivable_fun[posreal]"
                               ("f1"
                                "LAMBDA (x: posreal): 1"
                                "f2"
                                "LAMBDA (x: posreal): x"))
                              (("1"
                                (expand "const_fun")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "-" -1)
                                    (("1"
                                      (lemma
                                       "deriv_exp_fun[posreal]"
                                       ("f"
                                        "LAMBDA (x:posreal): 1-x"
                                        "n"
                                        "1+j!1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand "^" -1)
                                              (("1"
                                                (lemma
                                                 "scal_derivable_fun[posreal]"
                                                 ("b"
                                                  "1/(1+j!1)"
                                                  "f"
                                                  "LAMBDA (t: posreal): (1 - t) ^ (1 + j!1)"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "extensionality"
                                                     ("f"
                                                      "1 / (1 + j!1) * (LAMBDA (t: posreal): (1 - t) ^ (1 + j!1))"
                                                      "g"
                                                      "(LAMBDA px: (1 - px) ^ (1 + j!1) / (1 + j!1))"))
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (lemma
                                                           "diff_derivable_fun[posreal]"
                                                           ("f1"
                                                            "F"
                                                            "f2"
                                                            "(LAMBDA px: (1 - px) ^ (1 + j!1) / (1 + j!1))"))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "*")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skosimp)
                    (("2" (expand "F")
                      (("2" (expand "-")
                        (("2" (case-replace "-(x!1 - 1) = 1-x!1")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (extensionality formula-decl nil functions nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (F skolem-const-decl "[posreal -> real]" ln_exp_series_alt nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (diff_derivable_fun formula-decl nil derivatives "analysis/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (sigma def-decl "real" sigma "reals/")
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ln_estimate const-decl "real" ln_exp_series_alt nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (ln_estimate_scaf6-1 nil 3309551069
   ("" (induct "n")
    (("1" (expand "ln_estimate")
      (("1" (expand "sigma")
        (("1" (lemma "const_derivable_fun[posreal]" ("b" "0"))
          (("1" (expand "const_fun") (("1" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "ln_estimate")
        (("2" (expand "sigma" 1)
          (("2"
            (name "F" "(LAMBDA px:
             sigma(0, j!1,
                   LAMBDA (nn: nat):
                     IF nn = 0 THEN 0 ELSE -(-(px - 1)) ^ nn / nn ENDIF))")
            (("1"
              (lemma "extensionality"
               ("f" "(LAMBDA px:
             sigma(0, j!1,
                   LAMBDA (nn: nat):
                     IF nn = 0 THEN 0 ELSE -(-(px - 1)) ^ nn / nn ENDIF)
              + -(-(px - 1)) ^ (1 + j!1) / (1 + j!1))" "g"
                "F-(LAMBDA px: (1-px)^(1+j!1)/(1+j!1))"))
              (("1" (split -1)
                (("1" (replace -1)
                  (("1" (replace -2)
                    (("1" (hide -1 -2)
                      (("1" (lemma "identity_derivable_fun[posreal]")
                        (("1" (expand "I")
                          (("1"
                            (lemma "const_derivable_fun[posreal]"
                             ("b" "1"))
                            (("1"
                              (lemma "diff_derivable_fun"
                               ("f1"
                                "LAMBDA (x: posreal): 1"
                                "f2"
                                "LAMBDA (x: posreal): x"))
                              (("1"
                                (expand "const_fun")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "-" -1)
                                    (("1"
                                      (lemma
                                       "deriv_exp_fun"
                                       ("f"
                                        "LAMBDA (x:posreal): 1-x"
                                        "n"
                                        "1+j!1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand "^" -1)
                                              (("1"
                                                (lemma
                                                 "scal_derivable_fun"
                                                 ("b"
                                                  "1/(1+j!1)"
                                                  "f"
                                                  "LAMBDA (t: posreal): (1 - t) ^ (1 + j!1)"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "extensionality"
                                                     ("f"
                                                      "1 / (1 + j!1) * (LAMBDA (t: posreal): (1 - t) ^ (1 + j!1))"
                                                      "g"
                                                      "(LAMBDA px: (1 - px) ^ (1 + j!1) / (1 + j!1))"))
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (lemma
                                                           "diff_derivable_fun"
                                                           ("f1"
                                                            "F"
                                                            "f2"
                                                            "(LAMBDA px: (1 - px) ^ (1 + j!1) / (1 + j!1))"))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "*")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skosimp)
                    (("2" (expand "F")
                      (("2" (expand "-")
                        (("2" (case-replace "-(x!1 - 1) = 1-x!1")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (sigma def-decl "real" sigma "reals/"))
   shostak))
 (ln_estimate_scaf7_TCC1 0
  (ln_estimate_scaf7_TCC1-1 nil 3309557879
   ("" (lemma "ln_estimate_scaf6")
    (("" (skosimp) (("" (inst - "n!1+1") nil nil)) nil)) nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ln_estimate_scaf6 formula-decl nil ln_exp_series_alt nil))
   shostak
   (ln_estimate_scaf7 subtype
    "LAMBDA px: ln_exp_series_alt.ln_estimate((number_fields.-)(ln_exp_series_alt.px, 1), (number_fields.+)(ln_exp_series_alt.n, 1))"
    "deriv_fun[posreal]")))
 (ln_estimate_scaf7 0
  (ln_estimate_scaf7-2 nil 3352449229
   ("" (induct "n")
    (("1" (expand "ln_estimate")
      (("1" (expand "sigma")
        (("1" (expand "sigma")
          (("1" (lemma "identity_derivable_fun[posreal]")
            (("1" (lemma "deriv_id_fun[posreal]")
              (("1" (expand "I")
                (("1" (lemma "const_derivable_fun[posreal]" ("b" "1"))
                  (("1" (lemma "deriv_const_fun[posreal]" ("b" "1"))
                    (("1" (expand "const_fun")
                      (("1"
                        (lemma "diff_derivable_fun[posreal]"
                         ("f1" "LAMBDA (x: posreal): x" "f2"
                          "LAMBDA (x: posreal): 1"))
                        (("1" (assert)
                          (("1"
                            (lemma "deriv_diff_fun[posreal]"
                             ("ff1" "LAMBDA (x: posreal): x" "ff2"
                              "LAMBDA (x: posreal): 1"))
                            (("1" (replace -3)
                              (("1"
                                (replace -5)
                                (("1"
                                  (expand "-")
                                  (("1"
                                    (lemma
                                     "extensionality"
                                     ("f"
                                      "LAMBDA px: -(-(px - 1)) ^ 1 / 1"
                                      "g"
                                      "lambda px: px-1"))
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            (("1"
                                              (expand "^" 1)
                                              (("1"
                                                (expand "expt" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (expand "expt")
                                              (("2"
                                                (expand "expt")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "ln_estimate")
        (("2" (expand "sigma" 1)
          (("2"
            (name "F" "(LAMBDA px:
                      -sigma(0, 1 + j!1,
                             LAMBDA (nn: nat):
                               IF nn = 0 THEN 0 ELSE -(-(1 - px)) ^ nn / nn ENDIF))")
            (("1"
              (lemma "extensionality"
               ("f" "F+ (lambda px: (px-1) ^ (2 + j!1) / (2 + j!1))"
                "g" "(LAMBDA px:
                    -(sigma(0, 1 + j!1,
                            LAMBDA (nn: nat):
                              IF nn = 0 THEN 0 ELSE -(-(1 - px)) ^ nn / nn ENDIF)
                       + -(-(1 - px)) ^ (2 + j!1) / (2 + j!1)))"))
              (("1" (split -1)
                (("1" (hide -1 -2)
                  (("1"
                    (name "FF" "(LAMBDA px:
                          sigma(0, 1 + j!1,
                                LAMBDA (nn: nat):
                                  IF nn = 0 THEN 0 ELSE -(-(px - 1)) ^ nn / nn ENDIF))")
                    (("1" (replace -1)
                      (("1"
                        (lemma "extensionality"
                         ("f" "(LAMBDA px:
                      sigma(0, 1 + j!1,
                            LAMBDA (nn: nat):
                              IF nn = 0 THEN 0 ELSE -(-(px - 1)) ^ nn / nn ENDIF)
                       + -(-(px - 1)) ^ (2 + j!1) / (2 + j!1))" "g"
                          "FF-(lambda px: (1-px)^(2+j!1)/(2+j!1))"))
                        (("1" (split -1)
                          (("1" (replace -1)
                            (("1"
                              (lemma "ln_estimate_scaf6" ("n" "1+j!1"))
                              (("1"
                                (expand "ln_estimate")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (hide -2 -3)
                                    (("1"
                                      (name
                                       "GG"
                                       "(LAMBDA px: sigma(0, j!1, (LAMBDA (i: nat): (1 - px) ^ i)))")
                                      (("1"
                                        (lemma
                                         "extensionality"
                                         ("f"
                                          "(LAMBDA px:
                     (1 - px) ^ (1 + j!1) +
                      sigma(0, j!1, (LAMBDA (i: nat): (1 - px) ^ i)))"
                                          "g"
                                          "GG+(LAMBDA px:
                     (1 - px) ^ (1 + j!1))"))
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (lemma
                                                   "identity_derivable_fun[posreal]")
                                                  (("1"
                                                    (lemma
                                                     "deriv_id_fun[posreal]")
                                                    (("1"
                                                      (expand "I")
                                                      (("1"
                                                        (lemma
                                                         "const_derivable_fun[posreal]"
                                                         ("b" "1"))
                                                        (("1"
                                                          (lemma
                                                           "deriv_const_fun[posreal]"
                                                           ("b" "1"))
                                                          (("1"
                                                            (expand
                                                             "const_fun")
                                                            (("1"
                                                              (lemma
                                                               "diff_derivable_fun[posreal]"
                                                               ("f1"
                                                                "LAMBDA (x: posreal): 1"
                                                                "f2"
                                                                "LAMBDA (x: posreal): x"))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "deriv_diff_fun[posreal]"
                                                                   ("ff1"
                                                                    "LAMBDA (x: posreal): 1"
                                                                    "ff2"
                                                                    "LAMBDA (x: posreal): x"))
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (replace
                                                                       -5)
                                                                      (("1"
                                                                        (expand
                                                                         "-")
                                                                        (("1"
                                                                          (lemma
                                                                           "deriv_exp_fun[posreal]"
                                                                           ("f"
                                                                            "LAMBDA (x:posreal): 1-x"
                                                                            "n"
                                                                            "2+j!1"))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 (-1
                                                                                  -2))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "scal_derivable_fun[posreal]"
                                                                                     ("b"
                                                                                      "1/(2+j!1)"
                                                                                      "f"
                                                                                      "LAMBDA (t: posreal): (1 - t) ^ (2 + j!1)"))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "deriv_scal_fun[posreal]"
                                                                                         ("b"
                                                                                          "1/(2+j!1)"
                                                                                          "ff"
                                                                                          "LAMBDA (t: posreal): (1 - t) ^ (2 + j!1)"))
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "extensionality"
                                                                                             ("f"
                                                                                              "1 / (2 + j!1) *
                     (((2 + j!1) * (LAMBDA (t: posreal): (1 - t) ^ (1 + j!1))) *
                       (LAMBDA (x_1: posreal): -1))"
                                                                                              "g"
                                                                                              "LAMBDA (t: posreal): - ((1 - t) ^ (1 + j!1))"))
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "extensionality"
                                                                                                   ("f"
                                                                                                    "(1 / (2 + j!1) * (LAMBDA (t: posreal): (1 - t) ^ (2 + j!1)))"
                                                                                                    "g"
                                                                                                    "(LAMBDA (t: posreal): (1 - t) ^ (2 + j!1)/(2+j!1))"))
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1
                                                                                                         -2
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -8
                                                                                                         -9
                                                                                                         -10
                                                                                                         -11
                                                                                                         -12)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "diff_derivable_fun[posreal]"
                                                                                                           ("f1"
                                                                                                            "FF"
                                                                                                            "f2"
                                                                                                            "(LAMBDA (t: posreal): (1 - t) ^ (2 + j!1) / (2 + j!1))"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "deriv_diff_fun[posreal]"
                                                                                                               ("ff1"
                                                                                                                "FF"
                                                                                                                "ff2"
                                                                                                                "(LAMBDA (t: posreal): (1 - t) ^ (2 + j!1) / (2 + j!1))"))
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "-"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (apply-extensionality
                                                                                                                           1
                                                                                                                           :hide?
                                                                                                                           t)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "+")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (name-replace
                                                                                                         "DRL106"
                                                                                                         "(1 - x!1) ^ (1 + j!1)")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "div_cancel3")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "2+j!1"
                                                                                                               "(-2-j!1)*DRL106"
                                                                                                               "-DRL106")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (expand "GG")
                                                (("2"
                                                  (expand "+")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (skosimp)
                              (("2"
                                (expand "FF")
                                (("2"
                                  (expand "-")
                                  (("2"
                                    (lemma "both_sides_div1")
                                    (("2"
                                      (inst
                                       -
                                       "2+j!1"
                                       "-(-(x!1 - 1)) ^ (2 + j!1)"
                                       "-1 * ((1 - x!1) ^ (2 + j!1))")
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (case-replace
                                             "-(x!1 - 1) = 1-x!1")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skosimp)
                    (("2" (expand "F")
                      (("2" (expand "+") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp)
        (("3" (lemma "ln_estimate_scaf6" ("n" "1+n!2"))
          (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (F skolem-const-decl "[posreal -> real]" ln_exp_series_alt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ln_estimate_scaf6 formula-decl nil ln_exp_series_alt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (GG skolem-const-decl "[posreal -> real]" ln_exp_series_alt nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (FF skolem-const-decl "[posreal -> real]" ln_exp_series_alt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (diff_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_diff_fun formula-decl nil derivatives "analysis/")
    (extensionality formula-decl nil functions nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_const_fun formula-decl nil derivatives "analysis/")
    (I const-decl "(bijective?[T, T])" identity nil)
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (ln_estimate const-decl "real" ln_exp_series_alt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (ln_estimate_scaf7-1 nil 3309557976
   ("" (induct "n")
    (("1" (expand "ln_estimate")
      (("1" (expand "sigma")
        (("1" (expand "sigma")
          (("1" (lemma "identity_derivable_fun[posreal]")
            (("1" (lemma "deriv_id_fun[posreal]")
              (("1" (expand "I")
                (("1" (lemma "const_derivable_fun[posreal]" ("b" "1"))
                  (("1" (lemma "deriv_const_fun[posreal]" ("b" "1"))
                    (("1" (expand "const_fun")
                      (("1"
                        (lemma "diff_derivable_fun"
                         ("f1" "LAMBDA (x: posreal): x" "f2"
                          "LAMBDA (x: posreal): 1"))
                        (("1" (assert)
                          (("1"
                            (lemma "deriv_diff_fun"
                             ("ff1" "LAMBDA (x: posreal): x" "ff2"
                              "LAMBDA (x: posreal): 1"))
                            (("1" (replace -3)
                              (("1"
                                (replace -5)
                                (("1"
                                  (expand "-")
                                  (("1"
                                    (lemma
                                     "extensionality"
                                     ("f"
                                      "LAMBDA px: -(-(px - 1)) ^ 1 / 1"
                                      "g"
                                      "lambda px: px-1"))
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            (("1"
                                              (expand "^" 1)
                                              (("1"
                                                (expand "expt" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (expand "expt")
                                              (("2"
                                                (expand "expt")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "ln_estimate")
        (("2" (expand "sigma" 1)
          (("2"
            (name "F" "(LAMBDA px:
             -sigma(0, 1 + j!1,
                    LAMBDA (nn: nat):
                      IF nn = 0 THEN 0 ELSE -(-(1 - px)) ^ nn / nn ENDIF))")
            (("1"
              (lemma "extensionality"
               ("f" "F+ (lambda px: (px-1) ^ (2 + j!1) / (2 + j!1))"
                "g" "(LAMBDA px:
             -(sigma(0, 1 + j!1,
                     LAMBDA (nn: nat):
                       IF nn = 0 THEN 0 ELSE -(-(1 - px)) ^ nn / nn ENDIF)
                + -(-(1 - px)) ^ (2 + j!1) / (2 + j!1)))"))
              (("1" (split -1)
                (("1" (hide -1 -2)
                  (("1"
                    (name "FF" "(LAMBDA px:
             sigma(0, 1 + j!1,
                   LAMBDA (nn: nat):
                     IF nn = 0 THEN 0 ELSE -(-(px - 1)) ^ nn / nn ENDIF))")
                    (("1" (replace -1)
                      (("1"
                        (lemma "extensionality"
                         ("f" "(LAMBDA px:
             sigma(0, 1 + j!1,
                   LAMBDA (nn: nat):
                     IF nn = 0 THEN 0 ELSE -(-(px - 1)) ^ nn / nn ENDIF)
              + -(-(px - 1)) ^ (2 + j!1) / (2 + j!1))" "g"
                          "FF-(lambda px: (1-px)^(2+j!1)/(2+j!1))"))
                        (("1" (split -1)
                          (("1" (replace -1)
                            (("1"
                              (lemma "ln_estimate_scaf6" ("n" "1+j!1"))
                              (("1"
                                (expand "ln_estimate")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (hide -2 -3)
                                    (("1"
                                      (name
                                       "GG"
                                       "(LAMBDA px: sigma(0, j!1, (LAMBDA (i: nat): (1 - px) ^ i)))")
                                      (("1"
                                        (lemma
                                         "extensionality"
                                         ("f"
                                          "(LAMBDA px:
          (1 - px) ^ (1 + j!1) +
           sigma(0, j!1, (LAMBDA (i: nat): (1 - px) ^ i)))"
                                          "g"
                                          "GG+(LAMBDA px:
          (1 - px) ^ (1 + j!1))"))
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (lemma
                                                   "identity_derivable_fun[posreal]")
                                                  (("1"
                                                    (lemma
                                                     "deriv_id_fun[posreal]")
                                                    (("1"
                                                      (expand "I")
                                                      (("1"
                                                        (lemma
                                                         "const_derivable_fun[posreal]"
                                                         ("b" "1"))
                                                        (("1"
                                                          (lemma
                                                           "deriv_const_fun[posreal]"
                                                           ("b" "1"))
                                                          (("1"
                                                            (expand
                                                             "const_fun")
                                                            (("1"
                                                              (lemma
                                                               "diff_derivable_fun"
                                                               ("f1"
                                                                "LAMBDA (x: posreal): 1"
                                                                "f2"
                                                                "LAMBDA (x: posreal): x"))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "deriv_diff_fun"
                                                                   ("ff1"
                                                                    "LAMBDA (x: posreal): 1"
                                                                    "ff2"
                                                                    "LAMBDA (x: posreal): x"))
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (replace
                                                                       -5)
                                                                      (("1"
                                                                        (expand
                                                                         "-")
                                                                        (("1"
                                                                          (lemma
                                                                           "deriv_exp_fun"
                                                                           ("f"
                                                                            "LAMBDA (x:posreal): 1-x"
                                                                            "n"
                                                                            "2+j!1"))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 (-1
                                                                                  -2))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "scal_derivable_fun"
                                                                                     ("b"
                                                                                      "1/(2+j!1)"
                                                                                      "f"
                                                                                      "LAMBDA (t: posreal): (1 - t) ^ (2 + j!1)"))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "deriv_scal_fun"
                                                                                         ("b"
                                                                                          "1/(2+j!1)"
                                                                                          "ff"
                                                                                          "LAMBDA (t: posreal): (1 - t) ^ (2 + j!1)"))
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "extensionality"
                                                                                             ("f"
                                                                                              "1 / (2 + j!1) *
        (((2 + j!1) * (LAMBDA (t: posreal): (1 - t) ^ (1 + j!1))) *
          (LAMBDA (x_1: posreal): -1))"
                                                                                              "g"
                                                                                              "LAMBDA (t: posreal): - ((1 - t) ^ (1 + j!1))"))
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "extensionality"
                                                                                                   ("f"
                                                                                                    "(1 / (2 + j!1) * (LAMBDA (t: posreal): (1 - t) ^ (2 + j!1)))"
                                                                                                    "g"
                                                                                                    "(LAMBDA (t: posreal): (1 - t) ^ (2 + j!1)/(2+j!1))"))
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1
                                                                                                         -2
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -8
                                                                                                         -9
                                                                                                         -10
                                                                                                         -11
                                                                                                         -12)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "diff_derivable_fun"
                                                                                                           ("f1"
                                                                                                            "FF"
                                                                                                            "f2"
                                                                                                            "(LAMBDA (t: posreal): (1 - t) ^ (2 + j!1) / (2 + j!1))"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "deriv_diff_fun"
                                                                                                               ("ff1"
                                                                                                                "FF"
                                                                                                                "ff2"
                                                                                                                "(LAMBDA (t: posreal): (1 - t) ^ (2 + j!1) / (2 + j!1))"))
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "-"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (apply-extensionality
                                                                                                                           1
                                                                                                                           :hide?
                                                                                                                           t)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "+")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (name-replace
                                                                                                         "DRL106"
                                                                                                         "(1 - x!1) ^ (1 + j!1)")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "div_cancel3")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "2+j!1"
                                                                                                               "(-2-j!1)*DRL106"
                                                                                                               "-DRL106")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (expand "GG")
                                                (("2"
                                                  (expand "+")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (skosimp)
                              (("2"
                                (expand "FF")
                                (("2"
                                  (expand "-")
                                  (("2"
                                    (lemma "both_sides_div1")
                                    (("2"
                                      (inst
                                       -
                                       "2+j!1"
                                       "-(-(x!1 - 1)) ^ (2 + j!1)"
                                       "-1 * ((1 - x!1) ^ (2 + j!1))")
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (case-replace
                                             "-(x!1 - 1) = 1-x!1")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skosimp)
                    (("2" (expand "F")
                      (("2" (expand "+") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp)
        (("3" (lemma "ln_estimate_scaf6" ("n" "1+n!2"))
          (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_diff_fun formula-decl nil derivatives "analysis/")
    (diff_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_const_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (sigma def-decl "real" sigma "reals/")
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/"))
   shostak))
 (ln_estimate_scaf8_TCC1 0
  (ln_estimate_scaf8_TCC1-1 nil 3309557879
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (ln_estimate_scaf8 subtype
    "((number_fields.+)(ln_exp_series_alt.n, 1))"
    "{i: integers.int | booleans.OR(((number_fields.-)(1, ln_exp_series_alt.t)) /= 0, reals.>=(i, 0))}")))
 (ln_estimate_scaf8_TCC2 0
  (ln_estimate_scaf8_TCC2-1 nil 3309557879
   ("" (skosimp)
    (("" (lemma "ln_estimate_scaf2" ("x" "px!1" "n" "n!1+1"))
      (("" (propax) nil nil)) nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ln_estimate_scaf2 formula-decl nil ln_exp_series_alt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (ln_estimate_scaf8 subtype
    "LAMBDA (t: real_types.posreal): number_fields./(exponentiation.^(((number_fields.-)(1, t)), ((number_fields.+)(ln_exp_series_alt.n, 1))), t)"
    "integral_def[posreal].Integrable_funs(1, ln_exp_series_alt.px)")))
 (ln_estimate_scaf8 0
  (ln_estimate_scaf8-2 nil 3352449313
   ("" (skolem 1 ("n" "_"))
    ((""
      (lemma "extensionality_postulate"
       ("f" "ln" "g" "lambda px: ln_estimate(px - 1, n + 1) +
                (-1) ^ (n + 1) *
                 Integral(1, px, LAMBDA (t: posreal): (1 - t) ^ (n + 1) / t)"))
      (("1" (hide -1)
        (("1" (rewrite "extensionality_postulate")
          (("1"
            (name "L" "LAMBDA (px: posreal):
                                ln_estimate(px - 1, 1 + n)")
            (("1"
              (name "II"
                    "LAMBDA (px: posreal): Integral(1, px, LAMBDA (t: posreal): ((1 - t) ^ (1 + n)) / t)")
              (("1"
                (lemma "extensionality"
                 ("f" "(LAMBDA (px: posreal):
                        ln_estimate(px - 1, 1 + n) +
                         Integral(1, px, LAMBDA (t: posreal): ((1 - t) ^ (1 + n)) / t))"
                  "g" "L+II"))
                (("1" (split -1)
                  (("1" (replace -1)
                    (("1" (hide -1)
                      (("1"
                        (lemma "derivs_eq[posreal]"
                         ("F" "ln" "G" "L+II"))
                        (("1" (lemma "ln_derivable")
                          (("1" (flatten)
                            (("1"
                              (lemma "ln_estimate_scaf6" ("n" "1+n"))
                              (("1"
                                (lemma "ln_estimate_scaf7" ("n" "n"))
                                (("1"
                                  (replace -7)
                                  (("1"
                                    (hide -7)
                                    (("1"
                                      (lemma
                                       "fundamental[posreal]"
                                       ("f"
                                        "LAMBDA (t: posreal): ((1 - t) ^ (1 + n)) / t"
                                        "F"
                                        "II"
                                        "a"
                                        "1"))
                                      (("1"
                                        (lemma
                                         "ln_estimate_scaf1"
                                         ("n" "1+n"))
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "II" -2 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   "sum_derivable_fun[posreal]"
                                                   ("f1"
                                                    "L"
                                                    "f2"
                                                    "II"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "deriv_sum_fun[posreal]"
                                                       ("ff1"
                                                        "L"
                                                        "ff2"
                                                        "II"))
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (replace -5)
                                                          (("1"
                                                            (split -9)
                                                            (("1"
                                                              (expand
                                                               "const_fun")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (case-replace
                                                                   "c!1=0")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (apply-extensionality
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "+")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (rewrite
                                                                       "extensionality_postulate"
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "1")
                                                                        (("2"
                                                                          (rewrite
                                                                           "ln_1")
                                                                          (("2"
                                                                            (expand
                                                                             "+")
                                                                            (("2"
                                                                              (expand
                                                                               "II")
                                                                              (("2"
                                                                                (lemma
                                                                                 "Integral_a_to_a[posreal]"
                                                                                 ("a"
                                                                                  "1"
                                                                                  "f"
                                                                                  "LAMBDA (t: posreal): ((1 - t) ^ (1 + n)) / t"))
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "L")
                                                                                      (("2"
                                                                                        (case
                                                                                         "forall (n:nat): ln_estimate(0, n) = 0")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "1+n")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "ln_estimate")
                                                                                            (("2"
                                                                                              (induct
                                                                                               "n")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sigma")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "sigma"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "^")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "expt")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skosimp*)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -8)
                                                                (("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "+")
                                                                      (("2"
                                                                        (lemma
                                                                         "ln_estimate_scaf5"
                                                                         ("nzx"
                                                                          "x!1"
                                                                          "n"
                                                                          "n"))
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (assert)
                            (("2" (expand "not_one_element?")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst + "x!1+1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (assert)
                            (("3" (expand "connected?")
                              (("3"
                                (skosimp*)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "II")
                      (("2" (expand "L")
                        (("2" (expand "+") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "ln_estimate_scaf2" ("n" "1+n"))
            (("2" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma "ln_estimate_scaf2" ("n" "1+n"))
        (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (Integral const-decl "real" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integrable? const-decl "bool" integral_def "analysis/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ln_estimate const-decl "real" ln_exp_series_alt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ln const-decl "real" ln_exp nil)
    (extensionality_postulate formula-decl nil functions nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ln_derivable formula-decl nil ln_exp nil)
    (ln_estimate_scaf6 formula-decl nil ln_exp_series_alt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (fundamental formula-decl nil fundamental_theorem "analysis/")
    (sum_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_sum_fun formula-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (ln_estimate_scaf5 formula-decl nil ln_exp_series_alt nil)
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (ln_1 formula-decl nil ln_exp nil)
    (L skolem-const-decl "[posreal -> real]" ln_exp_series_alt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (sigma_rat application-judgement "rational" sigma_nat "reals/")
    (Integral_a_to_a formula-decl nil integral "analysis/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (II skolem-const-decl "[posreal -> real]" ln_exp_series_alt nil)
    (ln_estimate_scaf1 formula-decl nil ln_exp_series_alt nil)
    (ln_estimate_scaf7 formula-decl nil ln_exp_series_alt nil)
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (derivs_eq formula-decl nil indefinite_integral "analysis/")
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (extensionality formula-decl nil functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ln_estimate_scaf2 formula-decl nil ln_exp_series_alt nil))
   nil)
  (ln_estimate_scaf8-1 nil 3309589315
   ("" (skolem 1 ("n" "_"))
    ((""
      (lemma "extensionality_postulate"
       ("f" "ln" "g" "lambda px: ln_estimate(px - 1, n + 1) +
          (-1) ^ (n + 1) *
           Integral(1, px, LAMBDA (t: posreal): (1 - t) ^ (n + 1) / t)"))
      (("1" (hide -1)
        (("1" (rewrite "extensionality_postulate")
          (("1"
            (name "L" "LAMBDA (px: posreal):
          ln_estimate(px - 1, 1 + n)")
            (("1"
              (name "II"
                    "LAMBDA (px: posreal): Integral(1, px, LAMBDA (t: posreal): ((1 - t) ^ (1 + n)) / t)")
              (("1"
                (lemma "extensionality"
                 ("f" "(LAMBDA (px: posreal):
          ln_estimate(px - 1, 1 + n) +
           Integral(1, px, LAMBDA (t: posreal): ((1 - t) ^ (1 + n)) / t))"
                  "g" "L+II"))
                (("1" (split -1)
                  (("1" (replace -1)
                    (("1" (hide -1)
                      (("1" (lemma "derivs_eq" ("F" "ln" "G" "L+II"))
                        (("1" (lemma "ln_derivable")
                          (("1" (flatten)
                            (("1"
                              (lemma "ln_estimate_scaf6" ("n" "1+n"))
                              (("1"
                                (lemma "ln_estimate_scaf7" ("n" "n"))
                                (("1"
                                  (replace -7)
                                  (("1"
                                    (hide -7)
                                    (("1"
                                      (lemma
                                       "fundamental[posreal]"
                                       ("f"
                                        "LAMBDA (t: posreal): ((1 - t) ^ (1 + n)) / t"
                                        "F"
                                        "II"
                                        "a"
                                        "1"))
                                      (("1"
                                        (lemma
                                         "ln_estimate_scaf1"
                                         ("n" "1+n"))
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "II" -2 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   "sum_derivable_fun"
                                                   ("f1"
                                                    "L"
                                                    "f2"
                                                    "II"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "deriv_sum_fun"
                                                       ("ff1"
                                                        "L"
                                                        "ff2"
                                                        "II"))
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (replace -5)
                                                          (("1"
                                                            (split -9)
                                                            (("1"
                                                              (expand
                                                               "const_fun")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (case-replace
                                                                   "c!1=0")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (apply-extensionality
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "+")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (rewrite
                                                                       "extensionality_postulate"
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "1")
                                                                        (("2"
                                                                          (rewrite
                                                                           "ln_1")
                                                                          (("2"
                                                                            (expand
                                                                             "+")
                                                                            (("2"
                                                                              (expand
                                                                               "II")
                                                                              (("2"
                                                                                (lemma
                                                                                 "Integral_a_to_a"
                                                                                 ("a"
                                                                                  "1"
                                                                                  "f"
                                                                                  "LAMBDA (t: posreal): ((1 - t) ^ (1 + n)) / t"))
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "L")
                                                                                      (("2"
                                                                                        (case
                                                                                         "forall (n:nat): ln_estimate(0, n) = 0")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "1+n")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "ln_estimate")
                                                                                            (("2"
                                                                                              (induct
                                                                                               "n")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "sigma"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "^")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "expt")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skosimp*)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -8)
                                                                (("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "+")
                                                                      (("2"
                                                                        (lemma
                                                                         "ln_estimate_scaf5"
                                                                         ("nzx"
                                                                          "x!1"
                                                                          "n"
                                                                          "n"))
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst + "x!1*2")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (skosimp)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "II")
                      (("2" (expand "L")
                        (("2" (expand "+") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "ln_estimate_scaf2" ("n" "1+n"))
            (("2" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma "ln_estimate_scaf2" ("n" "1+n"))
        (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((Integral const-decl "real" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integrable? const-decl "bool" integral_def "analysis/")
    (ln const-decl "real" ln_exp nil)
    (ln_derivable formula-decl nil ln_exp nil)
    (fundamental formula-decl nil fundamental_theorem "analysis/")
    (sum_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_sum_fun formula-decl nil derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (ln_1 formula-decl nil ln_exp nil)
    (sigma def-decl "real" sigma "reals/")
    (Integral_a_to_a formula-decl nil integral "analysis/")
    (+ const-decl "[T -> real]" real_fun_ops "reals/"))
   shostak))
 (ln_estimate_scaf9_TCC1 0
  (ln_estimate_scaf9_TCC1-1 nil 3309627736
   ("" (lemma "ln_estimate_scaf2") (("" (propax) nil nil)) nil)
   ((ln_estimate_scaf2 formula-decl nil ln_exp_series_alt nil)) shostak
   (ln_estimate_scaf9 subtype
    "LAMBDA (t: real_types.posreal): number_fields./(exponentiation.^(((number_fields.-)(1, t)), ln_exp_series_alt.n), t)"
    "integral_def[posreal].Integrable_funs(1, ln_exp_series_alt.px)")))
 (ln_estimate_scaf9 0
  (ln_estimate_scaf9-1 nil 3309629369
   ("" (skosimp)
    (("" (case-replace "n!1=0")
      (("1" (expand "ln_estimate")
        (("1" (expand "sigma")
          (("1" (expand "ln")
            (("1"
              (lemma "extensionality"
               ("f" "LAMBDA (t: posreal): (1 - t) ^ 0 / t" "g"
                "LAMBDA (t: posreal): 1 / t"))
              (("1" (split -1)
                (("1" (assert) nil nil)
                 ("2" (hide -1 2)
                  (("2" (skosimp)
                    (("2" (expand "^")
                      (("2" (expand "expt") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "ln_estimate_scaf8" ("px" "px!1" "n" "n!1-1"))
        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sigma def-decl "real" sigma "reals/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (extensionality formula-decl nil functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (ln const-decl "real" ln_exp nil)
    (ln_estimate const-decl "real" ln_exp_series_alt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ln_estimate_scaf8 formula-decl nil ln_exp_series_alt nil))
   shostak))
 (ln_estimate_scaf10_TCC1 0
  (ln_estimate_scaf10_TCC1-1 nil 3309628050
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (ln_estimate_scaf10 subtype
    "((number_fields.+)(ln_exp_series_alt.n, 1))"
    "{i: integers.int | booleans.OR(((number_fields.-)(ln_exp_series_alt.px, 1)) /= 0, reals.>=(i, 0))}")))
 (ln_estimate_scaf10 0
  (ln_estimate_scaf10-7 "" 3758852558
   ("" (stop-rewrite "abs_nat")
    ((""
      (case "forall (n:nat): continuous?[posreal](LAMBDA (t: posreal): (1 - t) ^ n)")
      (("1" (skosimp)
        (("1" (inst - "n!1")
          (("1"
            (lemma "continuous_Integrable?[posreal]"
             ("a" "1" "b" "px!1" "f"
              "LAMBDA (t: posreal): (1 - t) ^ n!1"))
            (("1" (split -1)
              (("1" (lemma "const_derivable_fun[posreal]" ("b" "1"))
                (("1" (lemma "deriv_const_fun[posreal]" ("b" "1"))
                  (("1" (lemma "identity_derivable_fun[posreal]")
                    (("1" (lemma "deriv_id_fun[posreal]")
                      (("1" (expand "I")
                        (("1"
                          (lemma "diff_derivable_fun[posreal]"
                           ("f1" "LAMBDA (x: posreal): 1" "f2"
                            "LAMBDA (x: posreal): x"))
                          (("1" (assert)
                            (("1"
                              (lemma "deriv_diff_fun[posreal]"
                               ("ff1"
                                "LAMBDA (x: posreal): 1"
                                "ff2"
                                "LAMBDA (x: posreal): x"))
                              (("1"
                                (replace -3)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (lemma
                                       "deriv_exp_fun[posreal]"
                                       ("n"
                                        "1+n!1"
                                        "f"
                                        "LAMBDA (x_1: posreal): 1 - x_1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "^" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (hide
                                                 -3
                                                 -4
                                                 -5
                                                 -6
                                                 -7
                                                 -8)
                                                (("1"
                                                  (lemma
                                                   "scal_derivable_fun[posreal]"
                                                   ("b"
                                                    "-1/(1+n!1)"
                                                    "f"
                                                    "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "deriv_scal_fun[posreal]"
                                                       ("b"
                                                        "-1/(1+n!1)"
                                                        "ff"
                                                        "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                      (("1"
                                                        (expand "*")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "extensionality"
                                                               ("f"
                                                                "(LAMBDA (x: posreal):
                                          -1 * ((1 - x) ^ n!1 * (-1 / (1 + n!1))) -
                                           (1 - x) ^ n!1 * (-1 / (1 + n!1)) * n!1)"
                                                                "g"
                                                                "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "fundamental3[posreal]"
                                                                       ("f"
                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1"
                                                                        "F"
                                                                        "LAMBDA (x: posreal): -1 / (1 + n!1) * (1 - x) ^ (1 + n!1)"
                                                                        "a"
                                                                        "1"
                                                                        "b"
                                                                        "px!1"))
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -7
                                                                             -1)
                                                                            (("1"
                                                                              (simplify
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -1
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t)) <= abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       -1)
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "DRL100"
                                                                                         "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t))")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -9
                                                                                            -10
                                                                                            1))
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "abs_mult"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "abs_div"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "<="
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "abs_expt"
                                                                                                         -2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         *
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "^")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "expt")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "zero_times1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "abs")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<="
                                                                                             -3)
                                                                                            (("2"
                                                                                              (split
                                                                                               -3)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "ln_estimate_scaf2"
                                                                                                 ("x"
                                                                                                  "px!1"
                                                                                                  "n"
                                                                                                  "n!1"))
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "F"
                                                                                                   "LAMBDA (t: posreal): (1 - t) ^ n!1 / t")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "G"
                                                                                                     "LAMBDA (t: posreal): (1 - t) ^ n!1")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "even?(n!1)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "Integral_ge_0_open[posreal]"
                                                                                                         ("a"
                                                                                                          "1"
                                                                                                          "b"
                                                                                                          "px!1"
                                                                                                          "f"
                                                                                                          "F"))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "Integral_ge_0_open[posreal]"
                                                                                                           ("a"
                                                                                                            "1"
                                                                                                            "b"
                                                                                                            "px!1"
                                                                                                            "f"
                                                                                                            "G"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "abs")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_diff[posreal]"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"
                                                                                                                        "g"
                                                                                                                        "F"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "Integral_ge_0_open[posreal]"
                                                                                                                             ("a"
                                                                                                                              "1"
                                                                                                                              "b"
                                                                                                                              "px!1"
                                                                                                                              "f"
                                                                                                                              "LAMBDA (x: posreal): G(x) - F(x)"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (1
                                                                                                                                  -7
                                                                                                                                  -5
                                                                                                                                  -10))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "even?")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "F")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "G")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "posreal_times_posreal_is_posreal"
                                                                                                                                           ("px"
                                                                                                                                            "(1 - x!1) ^ n!1"
                                                                                                                                            "py"
                                                                                                                                            "1-1/x!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "x!1")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "div_mult_pos_lt1"
                                                                                                                                                   ("py"
                                                                                                                                                    "x!1"
                                                                                                                                                    "x"
                                                                                                                                                    "1"
                                                                                                                                                    "z"
                                                                                                                                                    "1"))
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "x!1")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("3"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("3"
                                                                                                                                                (rewrite
                                                                                                                                                 "expt_times"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "sq_nz_pos"
                                                                                                                                                   ("nz"
                                                                                                                                                    "1-x!1"))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sq")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "^"
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "expt")
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "expt_pos"
                                                                                                                                                                 ("px"
                                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                                  "i"
                                                                                                                                                                  "j!1"))
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "x!1")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "x!1")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "x!1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_ge1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "even?")
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -5
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "expt_times"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "sq_nz_pos"
                                                                                                                                     ("nz"
                                                                                                                                      "1-x!1"))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "sq")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "^"
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "expt"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "expt"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "expt"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "even?")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "G")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -2
                                                                                                                         -4
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "expt_times"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "sq_nz_pos"
                                                                                                                               ("nz"
                                                                                                                                "1-x!1"))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "sq")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "^"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "expt"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "expt_pos"
                                                                                                                                           ("px"
                                                                                                                                            "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                            "i"
                                                                                                                                            "j!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "x!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "x!1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite
                                                                                                         "even_or_odd")
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "forall (x:posreal): 1 < x & x <= px!1 => G(x) < 0")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "forall (x:posreal): 1 < x & x <= px!1 => F(x) < 0")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "forall (x:posreal): 1 < x & x <= px!1 => G(x) < F(x)")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "Integral_ge_0_open[posreal]"
                                                                                                                 ("a"
                                                                                                                  "1"
                                                                                                                  "b"
                                                                                                                  "px!1"
                                                                                                                  "f"
                                                                                                                  "-F"))
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "Integral_ge_0_open[posreal]"
                                                                                                                   ("a"
                                                                                                                    "1"
                                                                                                                    "b"
                                                                                                                    "px!1"
                                                                                                                    "f"
                                                                                                                    "-G"))
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "Integral_neg[posreal]"
                                                                                                                     ("a"
                                                                                                                      "1"
                                                                                                                      "b"
                                                                                                                      "px!1"
                                                                                                                      "f"
                                                                                                                      "F"))
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_neg[posreal]"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -5)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -6)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   ">="
                                                                                                                                   (-1
                                                                                                                                    -2))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "<="
                                                                                                                                     (-1
                                                                                                                                      -2))
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "abs"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "Integral_diff[posreal]"
                                                                                                                                                 ("a"
                                                                                                                                                  "1"
                                                                                                                                                  "b"
                                                                                                                                                  "px!1"
                                                                                                                                                  "f"
                                                                                                                                                  "-G"
                                                                                                                                                  "g"
                                                                                                                                                  "-F"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "Integral_ge_0_open[posreal]"
                                                                                                                                                       ("a"
                                                                                                                                                        "1"
                                                                                                                                                        "b"
                                                                                                                                                        "px!1"
                                                                                                                                                        "f"
                                                                                                                                                        "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp)
                                                                                                                                                            (("3"
                                                                                                                                                              (expand
                                                                                                                                                               "-"
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (inst
                                                                                                                                                                 -9
                                                                                                                                                                 "x!1")
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (ground)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               *
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (case-replace
                                                                                                                                                   "Integral(1, px!1, G) = 0")
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "Integral_diff[posreal]"
                                                                                                                                                     ("a"
                                                                                                                                                      "1"
                                                                                                                                                      "b"
                                                                                                                                                      "px!1"
                                                                                                                                                      "f"
                                                                                                                                                      "-G"
                                                                                                                                                      "g"
                                                                                                                                                      "-F"))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -3
                                                                                                                                                         -1
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "Integral_ge_0_open[posreal]"
                                                                                                                                                             ("a"
                                                                                                                                                              "1"
                                                                                                                                                              "b"
                                                                                                                                                              "px!1"
                                                                                                                                                              "f"
                                                                                                                                                              "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (skosimp)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (expand
                                                                                                                                                                     "-"
                                                                                                                                                                     1)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       -10
                                                                                                                                                                       "x!1")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "x!1")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (ground)
                                                                                                                                                                            (("3"
                                                                                                                                                                              (inst?
                                                                                                                                                                               -14)
                                                                                                                                                                              (("3"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         "abs")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "-"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -7
                                                                                                                                       "x!1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "x!1")
                                                                                                                                          (("2"
                                                                                                                                            (ground)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "-"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -8
                                                                                                                                     "x!1")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (ground)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "odd?")
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "F")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "div_mult_pos_lt2"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "both_sides_times_neg_lt1"
                                                                                                                               ("nz"
                                                                                                                                "(1 - x!1) ^ n!1"
                                                                                                                                "y"
                                                                                                                                "1"
                                                                                                                                "x"
                                                                                                                                "x!1"))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -7
                                                                                                                                  -10
                                                                                                                                  1
                                                                                                                                  -5))
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "expt_plus"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "expt_x1")
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "both_sides_times_pos_lt1"
                                                                                                                                         ("pz"
                                                                                                                                          "(1 - x!1) ^ (2 * j!1)"
                                                                                                                                          "x"
                                                                                                                                          "1-x!1"
                                                                                                                                          "y"
                                                                                                                                          "0"))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "expt_times")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sq_nz_pos"
                                                                                                                                               ("nz"
                                                                                                                                                "1-x!1"))
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "sq(1 - x!1)"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "sq")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "^"
                                                                                                                                                     1
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "expt")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2
                                                                                                               -3
                                                                                                               -5
                                                                                                               -6)
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_lt1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             -2
                                                                                                             -4
                                                                                                             -5
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "odd?")
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "G")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "expt_plus")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "expt_x1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "expt_times")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "sq_nz_pos"
                                                                                                                             ("nz"
                                                                                                                              "1-x!1"))
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "sq")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "^"
                                                                                                                                 1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "expt"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "expt_pos"
                                                                                                                                         ("px"
                                                                                                                                          "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                          "i"
                                                                                                                                          "j!1"))
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "both_sides_times_pos_lt1"
                                                                                                                                           ("pz"
                                                                                                                                            "(1 - 2 * x!1 + x!1 * x!1) ^ j!1"
                                                                                                                                            "x"
                                                                                                                                            "1-x!1"
                                                                                                                                            "y"
                                                                                                                                            "0"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 *
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "Integral_a_to_a[posreal]"
                                                                                                   ("a"
                                                                                                    "1"
                                                                                                    "f"
                                                                                                    "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "Integral_a_to_a[posreal]"
                                                                                                       ("a"
                                                                                                        "1"
                                                                                                        "f"
                                                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1/t"))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "ln_estimate_scaf2"
                                                                                       ("x"
                                                                                        "px!1"
                                                                                        "n"
                                                                                        "n!1"))
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (lemma
                                                                       "div_cancel1"
                                                                       ("x"
                                                                        "(1 - x!1) ^ n!1"
                                                                        "n0z"
                                                                        "-1-n!1"))
                                                                      (("2"
                                                                        (case-replace
                                                                         "-1 / (1 + n!1) = 1/(-1-n!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skosimp)
                  (("2" (expand "continuous?" -1)
                    (("2" (inst - "x!1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "const_fun_continuous[posreal]" ("u" "1"))
          (("2" (lemma "id_fun_continuous[posreal]")
            (("2" (expand "I")
              (("2" (expand "const_fun")
                (("2"
                  (lemma "diff_fun_continuous[posreal]"
                   ("h1" "LAMBDA (x: posreal): 1" "h2"
                    "LAMBDA (x: posreal): x"))
                  (("1" (expand "-")
                    (("1" (induct "n")
                      (("1"
                        (lemma "extensionality"
                         ("f" "LAMBDA (t: posreal): (1 - t) ^ 0" "g"
                          "LAMBDA (x: posreal): 1"))
                        (("1" (split -1)
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (skosimp)
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "expt")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2"
                          (lemma "prod_fun_continuous[posreal]"
                           ("h1" "LAMBDA (x_1: posreal): 1 - x_1" "h2"
                            "LAMBDA (t: posreal): (1 - t) ^ j!1"))
                          (("1"
                            (lemma "extensionality"
                             ("f" "((LAMBDA (x_1: posreal): 1 - x_1) *
                                                              (LAMBDA (t: posreal): (1 - t) ^ j!1))"
                              "g"
                              "(LAMBDA (t: posreal): (1 - t) ^ (j!1 + 1))"))
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "*")
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (expand "expt" 1 3)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ln_estimate_scaf10-6 nil 3445353682
   ("" (stop-rewrite "abs_nat")
    ((""
      (case "forall (n:nat): continuous?[posreal](LAMBDA (t: posreal): (1 - t) ^ n)")
      (("1" (skosimp)
        (("1" (inst - "n!1")
          (("1"
            (lemma "continuous_Integrable?[posreal]"
             ("a" "1" "b" "px!1" "f"
              "LAMBDA (t: posreal): (1 - t) ^ n!1"))
            (("1" (split -1)
              (("1" (lemma "const_derivable_fun[posreal]" ("b" "1"))
                (("1" (lemma "deriv_const_fun[posreal]" ("b" "1"))
                  (("1" (lemma "identity_derivable_fun[posreal]")
                    (("1" (lemma "deriv_id_fun[posreal]")
                      (("1" (expand "I")
                        (("1"
                          (lemma "diff_derivable_fun[posreal]"
                           ("f1" "LAMBDA (x: posreal): 1" "f2"
                            "LAMBDA (x: posreal): x"))
                          (("1" (assert)
                            (("1"
                              (lemma "deriv_diff_fun[posreal]"
                               ("ff1"
                                "LAMBDA (x: posreal): 1"
                                "ff2"
                                "LAMBDA (x: posreal): x"))
                              (("1"
                                (replace -3)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (lemma
                                       "deriv_exp_fun[posreal]"
                                       ("n"
                                        "1+n!1"
                                        "f"
                                        "LAMBDA (x_1: posreal): 1 - x_1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "^" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (hide
                                                 -3
                                                 -4
                                                 -5
                                                 -6
                                                 -7
                                                 -8)
                                                (("1"
                                                  (lemma
                                                   "scal_derivable_fun[posreal]"
                                                   ("b"
                                                    "-1/(1+n!1)"
                                                    "f"
                                                    "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "deriv_scal_fun[posreal]"
                                                       ("b"
                                                        "-1/(1+n!1)"
                                                        "ff"
                                                        "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                      (("1"
                                                        (expand "*")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "extensionality"
                                                               ("f"
                                                                "(LAMBDA (x: posreal):
                                          -1 * ((1 - x) ^ n!1 * (-1 / (1 + n!1))) -
                                           (1 - x) ^ n!1 * (-1 / (1 + n!1)) * n!1)"
                                                                "g"
                                                                "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "fundamental3[posreal]"
                                                                       ("f"
                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1"
                                                                        "F"
                                                                        "LAMBDA (x: posreal): -1 / (1 + n!1) * (1 - x) ^ (1 + n!1)"
                                                                        "a"
                                                                        "1"
                                                                        "b"
                                                                        "px!1"))
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -7
                                                                             -1)
                                                                            (("1"
                                                                              (simplify
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -1
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t)) <= abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       -1)
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "DRL100"
                                                                                         "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t))")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -9
                                                                                            -10
                                                                                            1))
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "abs_mult"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "abs_div"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "<="
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "abs_expt"
                                                                                                         -2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         *
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "^")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "expt")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "zero_times1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "abs")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<="
                                                                                             -3)
                                                                                            (("2"
                                                                                              (split
                                                                                               -3)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "ln_estimate_scaf2"
                                                                                                 ("x"
                                                                                                  "px!1"
                                                                                                  "n"
                                                                                                  "n!1"))
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "F"
                                                                                                   "LAMBDA (t: posreal): (1 - t) ^ n!1 / t")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "G"
                                                                                                     "LAMBDA (t: posreal): (1 - t) ^ n!1")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "even?(n!1)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "Integral_ge_0_open[posreal]"
                                                                                                         ("a"
                                                                                                          "1"
                                                                                                          "b"
                                                                                                          "px!1"
                                                                                                          "f"
                                                                                                          "F"))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "Integral_ge_0_open[posreal]"
                                                                                                           ("a"
                                                                                                            "1"
                                                                                                            "b"
                                                                                                            "px!1"
                                                                                                            "f"
                                                                                                            "G"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "abs")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_diff[posreal]"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"
                                                                                                                        "g"
                                                                                                                        "F"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "Integral_ge_0_open[posreal]"
                                                                                                                             ("a"
                                                                                                                              "1"
                                                                                                                              "b"
                                                                                                                              "px!1"
                                                                                                                              "f"
                                                                                                                              "LAMBDA (x: posreal): G(x) - F(x)"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (1
                                                                                                                                  -7
                                                                                                                                  -5
                                                                                                                                  -10))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "even?")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "F")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "G")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "posreal_times_posreal_is_posreal"
                                                                                                                                           ("px"
                                                                                                                                            "(1 - x!1) ^ n!1"
                                                                                                                                            "py"
                                                                                                                                            "1-1/x!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "x!1")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "div_mult_pos_lt1"
                                                                                                                                                   ("py"
                                                                                                                                                    "x!1"
                                                                                                                                                    "x"
                                                                                                                                                    "1"
                                                                                                                                                    "z"
                                                                                                                                                    "1"))
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "x!1")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("3"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("3"
                                                                                                                                                (rewrite
                                                                                                                                                 "expt_times"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "sq_nz_pos"
                                                                                                                                                   ("nz"
                                                                                                                                                    "1-x!1"))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sq")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "^"
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "expt")
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "expt_pos"
                                                                                                                                                                 ("px"
                                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                                  "i"
                                                                                                                                                                  "j!1"))
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "x!1")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "x!1")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "x!1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_ge1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "even?")
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -5
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "expt_times"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "sq_nz_pos"
                                                                                                                                     ("nz"
                                                                                                                                      "1-x!1"))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "sq")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "^"
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "expt"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "expt"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "expt"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "even?")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "G")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -2
                                                                                                                         -4
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "expt_times"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "sq_nz_pos"
                                                                                                                               ("nz"
                                                                                                                                "1-x!1"))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "sq")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "^"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "expt"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "expt_pos"
                                                                                                                                           ("px"
                                                                                                                                            "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                            "i"
                                                                                                                                            "j!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "x!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "x!1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite
                                                                                                         "even_or_odd")
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "forall (x:posreal): 1 < x & x <= px!1 => G(x) < 0")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "forall (x:posreal): 1 < x & x <= px!1 => F(x) < 0")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "forall (x:posreal): 1 < x & x <= px!1 => G(x) < F(x)")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "Integral_ge_0_open[posreal]"
                                                                                                                 ("a"
                                                                                                                  "1"
                                                                                                                  "b"
                                                                                                                  "px!1"
                                                                                                                  "f"
                                                                                                                  "-F"))
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "Integral_ge_0_open[posreal]"
                                                                                                                   ("a"
                                                                                                                    "1"
                                                                                                                    "b"
                                                                                                                    "px!1"
                                                                                                                    "f"
                                                                                                                    "-G"))
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "Integral_neg[posreal]"
                                                                                                                     ("a"
                                                                                                                      "1"
                                                                                                                      "b"
                                                                                                                      "px!1"
                                                                                                                      "f"
                                                                                                                      "F"))
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_neg[posreal]"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -5)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -6)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   ">="
                                                                                                                                   (-1
                                                                                                                                    -2))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "<="
                                                                                                                                     (-1
                                                                                                                                      -2))
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "abs"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "Integral_diff[posreal]"
                                                                                                                                                 ("a"
                                                                                                                                                  "1"
                                                                                                                                                  "b"
                                                                                                                                                  "px!1"
                                                                                                                                                  "f"
                                                                                                                                                  "-G"
                                                                                                                                                  "g"
                                                                                                                                                  "-F"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "Integral_ge_0_open[posreal]"
                                                                                                                                                       ("a"
                                                                                                                                                        "1"
                                                                                                                                                        "b"
                                                                                                                                                        "px!1"
                                                                                                                                                        "f"
                                                                                                                                                        "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp)
                                                                                                                                                            (("3"
                                                                                                                                                              (expand
                                                                                                                                                               "-"
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (inst
                                                                                                                                                                 -9
                                                                                                                                                                 "x!1")
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (ground)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               *
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (case-replace
                                                                                                                                                   "Integral(1, px!1, G) = 0")
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "Integral_diff[posreal]"
                                                                                                                                                     ("a"
                                                                                                                                                      "1"
                                                                                                                                                      "b"
                                                                                                                                                      "px!1"
                                                                                                                                                      "f"
                                                                                                                                                      "-G"
                                                                                                                                                      "g"
                                                                                                                                                      "-F"))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -3
                                                                                                                                                         -1
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "Integral_ge_0_open[posreal]"
                                                                                                                                                             ("a"
                                                                                                                                                              "1"
                                                                                                                                                              "b"
                                                                                                                                                              "px!1"
                                                                                                                                                              "f"
                                                                                                                                                              "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (skosimp)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (expand
                                                                                                                                                                     "-"
                                                                                                                                                                     1)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       -10
                                                                                                                                                                       "x!1")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "x!1")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (ground)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         "abs")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "-"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -7
                                                                                                                                       "x!1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "x!1")
                                                                                                                                          (("2"
                                                                                                                                            (ground)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "-"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -8
                                                                                                                                     "x!1")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (ground)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "odd?")
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "F")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "div_mult_pos_lt2"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "both_sides_times_neg_lt1"
                                                                                                                               ("nz"
                                                                                                                                "(1 - x!1) ^ n!1"
                                                                                                                                "y"
                                                                                                                                "1"
                                                                                                                                "x"
                                                                                                                                "x!1"))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -7
                                                                                                                                  -10
                                                                                                                                  1
                                                                                                                                  -5))
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "expt_plus"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "expt_x1")
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "both_sides_times_pos_lt1"
                                                                                                                                         ("pz"
                                                                                                                                          "(1 - x!1) ^ (2 * j!1)"
                                                                                                                                          "x"
                                                                                                                                          "1-x!1"
                                                                                                                                          "y"
                                                                                                                                          "0"))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "expt_times")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sq_nz_pos"
                                                                                                                                               ("nz"
                                                                                                                                                "1-x!1"))
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "sq(1 - x!1)"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "sq")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "^"
                                                                                                                                                     1
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "expt")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2
                                                                                                               -3
                                                                                                               -5
                                                                                                               -6)
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_lt1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             -2
                                                                                                             -4
                                                                                                             -5
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "odd?")
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "G")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "expt_plus")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "expt_x1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "expt_times")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "sq_nz_pos"
                                                                                                                             ("nz"
                                                                                                                              "1-x!1"))
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "sq")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "^"
                                                                                                                                 1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "expt"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "expt_pos"
                                                                                                                                         ("px"
                                                                                                                                          "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                          "i"
                                                                                                                                          "j!1"))
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "both_sides_times_pos_lt1"
                                                                                                                                           ("pz"
                                                                                                                                            "(1 - 2 * x!1 + x!1 * x!1) ^ j!1"
                                                                                                                                            "x"
                                                                                                                                            "1-x!1"
                                                                                                                                            "y"
                                                                                                                                            "0"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 *
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "Integral_a_to_a[posreal]"
                                                                                                   ("a"
                                                                                                    "1"
                                                                                                    "f"
                                                                                                    "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "Integral_a_to_a[posreal]"
                                                                                                       ("a"
                                                                                                        "1"
                                                                                                        "f"
                                                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1/t"))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "ln_estimate_scaf2"
                                                                                       ("x"
                                                                                        "px!1"
                                                                                        "n"
                                                                                        "n!1"))
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (lemma
                                                                       "div_cancel1"
                                                                       ("x"
                                                                        "(1 - x!1) ^ n!1"
                                                                        "n0z"
                                                                        "-1-n!1"))
                                                                      (("2"
                                                                        (case-replace
                                                                         "-1 / (1 + n!1) = 1/(-1-n!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skosimp)
                  (("2" (expand "continuous?" -1)
                    (("2" (inst - "x!1") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "not_one_element?")
                (("2" (skosimp*)
                  (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (assert)
              (("3" (expand "connected?")
                (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "const_fun_continuous[posreal]" ("u" "1"))
          (("2" (lemma "id_fun_continuous[posreal]")
            (("2" (expand "I")
              (("2" (expand "const_fun")
                (("2"
                  (lemma "diff_fun_continuous[posreal]"
                   ("h1" "LAMBDA (x: posreal): 1" "h2"
                    "LAMBDA (x: posreal): x"))
                  (("1" (expand "-")
                    (("1" (induct "n")
                      (("1"
                        (lemma "extensionality"
                         ("f" "LAMBDA (t: posreal): (1 - t) ^ 0" "g"
                          "LAMBDA (x: posreal): 1"))
                        (("1" (split -1)
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (skosimp)
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "expt")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2"
                          (lemma "prod_fun_continuous[posreal]"
                           ("h1" "LAMBDA (x_1: posreal): 1 - x_1" "h2"
                            "LAMBDA (t: posreal): (1 - t) ^ j!1"))
                          (("1"
                            (lemma "extensionality"
                             ("f" "((LAMBDA (x_1: posreal): 1 - x_1) *
                                                              (LAMBDA (t: posreal): (1 - t) ^ j!1))"
                              "g"
                              "(LAMBDA (t: posreal): (1 - t) ^ (j!1 + 1))"))
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "*")
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (expand "expt" 1 3)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (prod_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    (diff_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (const_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_Integrable? formula-decl nil integral "analysis/")
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (Closed_interval type-eq-decl nil intervals_real "reals/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (I const-decl "(bijective?[T, T])" identity nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (nat_expt application-judgement "nat" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (Integrable? const-decl "bool" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integral const-decl "real" integral_def "analysis/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs_mult formula-decl nil real_props nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (zero_times1 formula-decl nil real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs_expt formula-decl nil exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_0 formula-decl nil abs_lems "reals/")
    (Integral_a_to_a formula-decl nil integral "analysis/")
    (ln_estimate_scaf2 formula-decl nil ln_exp_series_alt nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (odd? const-decl "bool" integers nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (Integral_neg formula-decl nil integral "analysis/")
    (Integral_ge_0_open formula-decl nil integral "analysis/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (G skolem-const-decl "[posreal -> real]" ln_exp_series_alt nil)
    (expt_times formula-decl nil exponentiation nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (expt_pos formula-decl nil exponentiation nil)
    (sq_nz_pos judgement-tcc nil sq "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Open_interval type-eq-decl nil intervals_real "reals/")
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (F skolem-const-decl "[posreal -> real]" ln_exp_series_alt nil)
    (Integral_diff formula-decl nil integral "analysis/")
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (even? const-decl "bool" integers nil)
    (expt def-decl "real" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (fundamental3 formula-decl nil fundamental_theorem "analysis/")
    (div_cancel1 formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (extensionality formula-decl nil functions nil)
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nprat_div_posrat_is_nprat application-judgement "nprat" rationals
     nil)
    (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_diff_fun formula-decl nil derivatives "analysis/")
    (diff_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (deriv_const_fun formula-decl nil derivatives "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" continuous_functions "analysis/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil)
  (ln_estimate_scaf10-5 nil 3413217110
   ("" (stop-rewrite "abs_nat")
    ((""
      (case "forall (n:nat): continuous[posreal](LAMBDA (t: posreal): (1 - t) ^ n)")
      (("1" (skosimp)
        (("1" (inst - "n!1")
          (("1"
            (lemma "continuous_Integrable?[posreal]"
             ("a" "1" "b" "px!1" "f"
              "LAMBDA (t: posreal): (1 - t) ^ n!1"))
            (("1" (split -1)
              (("1" (lemma "const_derivable_fun[posreal]" ("b" "1"))
                (("1" (lemma "deriv_const_fun[posreal]" ("b" "1"))
                  (("1" (lemma "identity_derivable_fun[posreal]")
                    (("1" (lemma "deriv_id_fun[posreal]")
                      (("1" (expand "I")
                        (("1" (expand "const_fun")
                          (("1"
                            (lemma "diff_derivable_fun[posreal]"
                             ("f1" "LAMBDA (x: posreal): 1" "f2"
                              "LAMBDA (x: posreal): x"))
                            (("1" (assert)
                              (("1"
                                (lemma
                                 "deriv_diff_fun[posreal]"
                                 ("ff1"
                                  "LAMBDA (x: posreal): 1"
                                  "ff2"
                                  "LAMBDA (x: posreal): x"))
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (replace -5)
                                    (("1"
                                      (expand "-")
                                      (("1"
                                        (lemma
                                         "deriv_exp_fun[posreal]"
                                         ("n"
                                          "1+n!1"
                                          "f"
                                          "LAMBDA (x_1: posreal): 1 - x_1"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "^" -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (hide
                                                   -3
                                                   -4
                                                   -5
                                                   -6
                                                   -7
                                                   -8)
                                                  (("1"
                                                    (lemma
                                                     "scal_derivable_fun[posreal]"
                                                     ("b"
                                                      "-1/(1+n!1)"
                                                      "f"
                                                      "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "deriv_scal_fun[posreal]"
                                                         ("b"
                                                          "-1/(1+n!1)"
                                                          "ff"
                                                          "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (replace
                                                             -4
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "extensionality"
                                                                 ("f"
                                                                  "(LAMBDA (x: posreal):
                                 -1 * ((1 - x) ^ n!1 * (-1 / (1 + n!1))) -
                                  (1 - x) ^ n!1 * (-1 / (1 + n!1)) * n!1)"
                                                                  "g"
                                                                  "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "fundamental3[posreal]"
                                                                         ("f"
                                                                          "LAMBDA (t: posreal): (1 - t) ^ n!1"
                                                                          "F"
                                                                          "LAMBDA (x: posreal): -1 / (1 + n!1) * (1 - x) ^ (1 + n!1)"
                                                                          "a"
                                                                          "1"
                                                                          "b"
                                                                          "px!1"))
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -7
                                                                               -1)
                                                                              (("1"
                                                                                (simplify
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "^"
                                                                                   -1
                                                                                   3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "expt"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (case
                                                                                       "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t)) <= abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1))")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         -1)
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "DRL100"
                                                                                           "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t))")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -9
                                                                                              -10
                                                                                              1))
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "abs_mult"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "abs_div"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "<="
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "abs_expt"
                                                                                                           -2
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "abs")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           *
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "^")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "expt")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "zero_times1")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "abs")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -2
                                                                                           -3
                                                                                           -4
                                                                                           -5)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "<="
                                                                                               -3)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "ln_estimate_scaf2"
                                                                                                   ("x"
                                                                                                    "px!1"
                                                                                                    "n"
                                                                                                    "n!1"))
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "F"
                                                                                                     "LAMBDA (t: posreal): (1 - t) ^ n!1 / t")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "G"
                                                                                                       "LAMBDA (t: posreal): (1 - t) ^ n!1")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "even?(n!1)")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "Integral_ge_0_open[posreal]"
                                                                                                           ("a"
                                                                                                            "1"
                                                                                                            "b"
                                                                                                            "px!1"
                                                                                                            "f"
                                                                                                            "F"))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "Integral_ge_0_open[posreal]"
                                                                                                             ("a"
                                                                                                              "1"
                                                                                                              "b"
                                                                                                              "px!1"
                                                                                                              "f"
                                                                                                              "G"))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "abs")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "Integral_diff[posreal]"
                                                                                                                         ("a"
                                                                                                                          "1"
                                                                                                                          "b"
                                                                                                                          "px!1"
                                                                                                                          "f"
                                                                                                                          "G"
                                                                                                                          "g"
                                                                                                                          "F"))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "Integral_ge_0_open[posreal]"
                                                                                                                               ("a"
                                                                                                                                "1"
                                                                                                                                "b"
                                                                                                                                "px!1"
                                                                                                                                "f"
                                                                                                                                "LAMBDA (x: posreal): G(x) - F(x)"))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (hide-all-but
                                                                                                                                   (1
                                                                                                                                    -7
                                                                                                                                    -5
                                                                                                                                    -10))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "even?")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "F")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "G")
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "posreal_times_posreal_is_posreal"
                                                                                                                                             ("px"
                                                                                                                                              "(1 - x!1) ^ n!1"
                                                                                                                                              "py"
                                                                                                                                              "1-1/x!1"))
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "x!1")
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "div_mult_pos_lt1"
                                                                                                                                                     ("py"
                                                                                                                                                      "x!1"
                                                                                                                                                      "x"
                                                                                                                                                      "1"
                                                                                                                                                      "z"
                                                                                                                                                      "1"))
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "x!1")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("3"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("3"
                                                                                                                                                  (rewrite
                                                                                                                                                   "expt_times"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "sq_nz_pos"
                                                                                                                                                     ("nz"
                                                                                                                                                      "1-x!1"))
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "sq")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "^"
                                                                                                                                                         1
                                                                                                                                                         1)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "^"
                                                                                                                                                           1
                                                                                                                                                           2)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "expt")
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "expt")
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "expt_pos"
                                                                                                                                                                   ("px"
                                                                                                                                                                    "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                                    "i"
                                                                                                                                                                    "j!1"))
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "x!1")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "x!1")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     -1
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (skosimp)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "F"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "x!1")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "div_mult_pos_ge1"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "even?")
                                                                                                                              (("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -5
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "expt_times"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "sq_nz_pos"
                                                                                                                                       ("nz"
                                                                                                                                        "1-x!1"))
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "sq")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "^"
                                                                                                                                           1
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "expt"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "expt"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "expt"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "expt_pos"
                                                                                                                                                   ("px"
                                                                                                                                                    "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                    "i"
                                                                                                                                                    "j!1"))
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "x!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "even?")
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -2
                                                                                                                           -4
                                                                                                                           -5)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "expt_times"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "sq_nz_pos"
                                                                                                                                 ("nz"
                                                                                                                                  "1-x!1"))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "sq")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "^"
                                                                                                                                     1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "expt"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "expt"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "expt_pos"
                                                                                                                                             ("px"
                                                                                                                                              "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                              "i"
                                                                                                                                              "j!1"))
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (typepred
                                                                                                                                     "x!1")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "x!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (rewrite
                                                                                                           "even_or_odd")
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "forall (x:posreal): 1 < x & x <= px!1 => G(x) < 0")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "forall (x:posreal): 1 < x & x <= px!1 => F(x) < 0")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "forall (x:posreal): 1 < x & x <= px!1 => G(x) < F(x)")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "Integral_ge_0_open[posreal]"
                                                                                                                   ("a"
                                                                                                                    "1"
                                                                                                                    "b"
                                                                                                                    "px!1"
                                                                                                                    "f"
                                                                                                                    "-F"))
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "Integral_ge_0_open[posreal]"
                                                                                                                     ("a"
                                                                                                                      "1"
                                                                                                                      "b"
                                                                                                                      "px!1"
                                                                                                                      "f"
                                                                                                                      "-G"))
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_neg[posreal]"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "F"))
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "Integral_neg[posreal]"
                                                                                                                         ("a"
                                                                                                                          "1"
                                                                                                                          "b"
                                                                                                                          "px!1"
                                                                                                                          "f"
                                                                                                                          "G"))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -5)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -6)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     ">="
                                                                                                                                     (-1
                                                                                                                                      -2))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "<="
                                                                                                                                       (-1
                                                                                                                                        -2))
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "abs"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "Integral_diff[posreal]"
                                                                                                                                                   ("a"
                                                                                                                                                    "1"
                                                                                                                                                    "b"
                                                                                                                                                    "px!1"
                                                                                                                                                    "f"
                                                                                                                                                    "-G"
                                                                                                                                                    "g"
                                                                                                                                                    "-F"))
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "Integral_ge_0_open[posreal]"
                                                                                                                                                         ("a"
                                                                                                                                                          "1"
                                                                                                                                                          "b"
                                                                                                                                                          "px!1"
                                                                                                                                                          "f"
                                                                                                                                                          "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -2)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide
                                                                                                                                                               2)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (skosimp)
                                                                                                                                                              (("3"
                                                                                                                                                                (expand
                                                                                                                                                                 "-"
                                                                                                                                                                 1)
                                                                                                                                                                (("3"
                                                                                                                                                                  (inst
                                                                                                                                                                   -9
                                                                                                                                                                   "x!1")
                                                                                                                                                                  (("3"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "x!1")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (ground)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 *
                                                                                                                                                 rl)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (case-replace
                                                                                                                                                     "Integral(1, px!1, G) = 0")
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "Integral_diff[posreal]"
                                                                                                                                                       ("a"
                                                                                                                                                        "1"
                                                                                                                                                        "b"
                                                                                                                                                        "px!1"
                                                                                                                                                        "f"
                                                                                                                                                        "-G"
                                                                                                                                                        "g"
                                                                                                                                                        "-F"))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -3
                                                                                                                                                           -1
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "Integral_ge_0_open[posreal]"
                                                                                                                                                               ("a"
                                                                                                                                                                "1"
                                                                                                                                                                "b"
                                                                                                                                                                "px!1"
                                                                                                                                                                "f"
                                                                                                                                                                "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (split
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (skosimp)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (expand
                                                                                                                                                                       "-"
                                                                                                                                                                       1)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (inst
                                                                                                                                                                         -10
                                                                                                                                                                         "x!1")
                                                                                                                                                                        (("3"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "x!1")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (ground)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (expand
                                                                                                                                           "abs")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (skosimp)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "-"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -7
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             "x!1")
                                                                                                                                            (("2"
                                                                                                                                              (ground)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "-"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -8
                                                                                                                                       "x!1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "x!1")
                                                                                                                                          (("2"
                                                                                                                                            (ground)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "odd?")
                                                                                                                      (("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "G")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "F")
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "div_mult_pos_lt2"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "both_sides_times_neg_lt1"
                                                                                                                                 ("nz"
                                                                                                                                  "(1 - x!1) ^ n!1"
                                                                                                                                  "y"
                                                                                                                                  "1"
                                                                                                                                  "x"
                                                                                                                                  "x!1"))
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   (-1
                                                                                                                                    -2
                                                                                                                                    -7
                                                                                                                                    -10
                                                                                                                                    1
                                                                                                                                    -5))
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -3)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "expt_plus"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "expt_x1")
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "both_sides_times_pos_lt1"
                                                                                                                                           ("pz"
                                                                                                                                            "(1 - x!1) ^ (2 * j!1)"
                                                                                                                                            "x"
                                                                                                                                            "1-x!1"
                                                                                                                                            "y"
                                                                                                                                            "0"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "expt_times")
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "sq_nz_pos"
                                                                                                                                                 ("nz"
                                                                                                                                                  "1-x!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "expt_pos"
                                                                                                                                                   ("px"
                                                                                                                                                    "sq(1 - x!1)"
                                                                                                                                                    "i"
                                                                                                                                                    "j!1"))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sq")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "^"
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "expt")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2
                                                                                                                 -3
                                                                                                                 -5
                                                                                                                 -6)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "x!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "F")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "G")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "div_mult_pos_lt1"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               -2
                                                                                                               -4
                                                                                                               -5
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "odd?")
                                                                                                                (("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "G")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -3)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "expt_plus")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "expt_x1")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "expt_times")
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "sq_nz_pos"
                                                                                                                               ("nz"
                                                                                                                                "1-x!1"))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "sq")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "^"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "expt"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "expt_pos"
                                                                                                                                           ("px"
                                                                                                                                            "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                            "i"
                                                                                                                                            "j!1"))
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "both_sides_times_pos_lt1"
                                                                                                                                             ("pz"
                                                                                                                                              "(1 - 2 * x!1 + x!1 * x!1) ^ j!1"
                                                                                                                                              "x"
                                                                                                                                              "1-x!1"
                                                                                                                                              "y"
                                                                                                                                              "0"))
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   *
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "Integral_a_to_a[posreal]"
                                                                                                     ("a"
                                                                                                      "1"
                                                                                                      "f"
                                                                                                      "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "Integral_a_to_a[posreal]"
                                                                                                         ("a"
                                                                                                          "1"
                                                                                                          "f"
                                                                                                          "LAMBDA (t: posreal): (1 - t) ^ n!1/t"))
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "ln_estimate_scaf2"
                                                                                         ("x"
                                                                                          "px!1"
                                                                                          "n"
                                                                                          "n!1"))
                                                                                        (("3"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (lemma
                                                                         "div_cancel1"
                                                                         ("x"
                                                                          "(1 - x!1) ^ n!1"
                                                                          "n0z"
                                                                          "-1-n!1"))
                                                                        (("2"
                                                                          (case-replace
                                                                           "-1 / (1 + n!1) = 1/(-1-n!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skosimp)
                  (("2" (expand "continuous?" -1)
                    (("2" (inst - "x!1") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil))
              nil)
             ("3" (skosimp*) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "const_fun_continuous[posreal]" ("u" "1"))
          (("2" (lemma "id_fun_continuous[posreal]")
            (("2" (expand "I")
              (("2" (expand "const_fun")
                (("2"
                  (lemma "diff_fun_continuous[posreal]"
                   ("h1" "LAMBDA (x: posreal): 1" "h2"
                    "LAMBDA (x: posreal): x"))
                  (("1" (expand "-")
                    (("1" (induct "n")
                      (("1"
                        (lemma "extensionality"
                         ("f" "LAMBDA (t: posreal): (1 - t) ^ 0" "g"
                          "LAMBDA (x: posreal): 1"))
                        (("1" (split -1)
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (skosimp)
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "expt")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2"
                          (lemma "prod_fun_continuous[posreal]"
                           ("h1" "LAMBDA (x_1: posreal): 1 - x_1" "h2"
                            "LAMBDA (t: posreal): (1 - t) ^ j!1"))
                          (("1"
                            (lemma "extensionality"
                             ("f" "((LAMBDA (x_1: posreal): 1 - x_1) *
                                                   (LAMBDA (t: posreal): (1 - t) ^ j!1))"
                              "g"
                              "(LAMBDA (t: posreal): (1 - t) ^ (j!1 + 1))"))
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "*")
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (expand "expt" 1 3)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (prod_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    (diff_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (const_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_Integrable? formula-decl nil integral "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (diff_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_diff_fun formula-decl nil derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (fundamental3 formula-decl nil fundamental_theorem "analysis/")
    (Integral_diff formula-decl nil integral "analysis/")
    (sq_nz_pos judgement-tcc nil sq "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Integral_ge_0_open formula-decl nil integral "analysis/")
    (Integral_neg formula-decl nil integral "analysis/")
    (Integral_a_to_a formula-decl nil integral "analysis/")
    (Integral const-decl "real" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integrable? const-decl "bool" integral_def "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (deriv_const_fun formula-decl nil derivatives "analysis/"))
   nil)
  (ln_estimate_scaf10-4 nil 3352453933
   (""
    (case "forall (n:nat): continuous[posreal](LAMBDA (t: posreal): (1 - t) ^ n)")
    (("1" (skosimp)
      (("1" (inst - "n!1")
        (("1"
          (lemma "continuous_Integrable?[posreal]"
           ("a" "1" "b" "px!1" "f"
            "LAMBDA (t: posreal): (1 - t) ^ n!1"))
          (("1" (split -1)
            (("1" (lemma "const_derivable_fun[posreal]" ("b" "1"))
              (("1" (lemma "deriv_const_fun[posreal]" ("b" "1"))
                (("1" (lemma "identity_derivable_fun[posreal]")
                  (("1" (lemma "deriv_id_fun[posreal]")
                    (("1" (expand "I")
                      (("1" (expand "const_fun")
                        (("1"
                          (lemma "diff_derivable_fun[posreal]"
                           ("f1" "LAMBDA (x: posreal): 1" "f2"
                            "LAMBDA (x: posreal): x"))
                          (("1" (assert)
                            (("1"
                              (lemma "deriv_diff_fun[posreal]"
                               ("ff1"
                                "LAMBDA (x: posreal): 1"
                                "ff2"
                                "LAMBDA (x: posreal): x"))
                              (("1"
                                (replace -3)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (lemma
                                       "deriv_exp_fun[posreal]"
                                       ("n"
                                        "1+n!1"
                                        "f"
                                        "LAMBDA (x_1: posreal): 1 - x_1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "^" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (hide
                                                 -3
                                                 -4
                                                 -5
                                                 -6
                                                 -7
                                                 -8)
                                                (("1"
                                                  (lemma
                                                   "scal_derivable_fun[posreal]"
                                                   ("b"
                                                    "-1/(1+n!1)"
                                                    "f"
                                                    "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "deriv_scal_fun[posreal]"
                                                       ("b"
                                                        "-1/(1+n!1)"
                                                        "ff"
                                                        "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                      (("1"
                                                        (expand "*")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "extensionality"
                                                               ("f"
                                                                "(LAMBDA (x: posreal):
                        -1 * ((1 - x) ^ n!1 * (-1 / (1 + n!1))) -
                         (1 - x) ^ n!1 * (-1 / (1 + n!1)) * n!1)"
                                                                "g"
                                                                "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "fundamental3[posreal]"
                                                                       ("f"
                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1"
                                                                        "F"
                                                                        "LAMBDA (x: posreal): -1 / (1 + n!1) * (1 - x) ^ (1 + n!1)"
                                                                        "a"
                                                                        "1"
                                                                        "b"
                                                                        "px!1"))
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -7
                                                                             -1)
                                                                            (("1"
                                                                              (simplify
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -1
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t)) <= abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       -1)
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "DRL100"
                                                                                         "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t))")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -9
                                                                                            -10
                                                                                            1))
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "abs_mult"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "abs_div"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "<="
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "abs_expt"
                                                                                                         -2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         *
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "^")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "expt")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "zero_times1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "abs")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<="
                                                                                             -3)
                                                                                            (("2"
                                                                                              (split
                                                                                               -3)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "ln_estimate_scaf2"
                                                                                                 ("x"
                                                                                                  "px!1"
                                                                                                  "n"
                                                                                                  "n!1"))
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "F"
                                                                                                   "LAMBDA (t: posreal): (1 - t) ^ n!1 / t")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "G"
                                                                                                     "LAMBDA (t: posreal): (1 - t) ^ n!1")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "even?(n!1)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "Integral_ge_0_open[posreal]"
                                                                                                         ("a"
                                                                                                          "1"
                                                                                                          "b"
                                                                                                          "px!1"
                                                                                                          "f"
                                                                                                          "F"))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "Integral_ge_0_open[posreal]"
                                                                                                           ("a"
                                                                                                            "1"
                                                                                                            "b"
                                                                                                            "px!1"
                                                                                                            "f"
                                                                                                            "G"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "abs")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_diff[posreal]"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"
                                                                                                                        "g"
                                                                                                                        "F"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "Integral_ge_0_open[posreal]"
                                                                                                                             ("a"
                                                                                                                              "1"
                                                                                                                              "b"
                                                                                                                              "px!1"
                                                                                                                              "f"
                                                                                                                              "LAMBDA (x: posreal): G(x) - F(x)"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (1
                                                                                                                                  -7
                                                                                                                                  -5
                                                                                                                                  -10))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "even?")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "F")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "G")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "posreal_times_posreal_is_posreal"
                                                                                                                                           ("px"
                                                                                                                                            "(1 - x!1) ^ n!1"
                                                                                                                                            "py"
                                                                                                                                            "1-1/x!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "x!1")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "div_mult_pos_lt1"
                                                                                                                                                   ("py"
                                                                                                                                                    "x!1"
                                                                                                                                                    "x"
                                                                                                                                                    "1"
                                                                                                                                                    "z"
                                                                                                                                                    "1"))
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "x!1")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("3"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("3"
                                                                                                                                                (rewrite
                                                                                                                                                 "expt_times"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "sq_nz_pos"
                                                                                                                                                   ("nz"
                                                                                                                                                    "1-x!1"))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sq")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "^"
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "expt")
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "expt_pos"
                                                                                                                                                                 ("px"
                                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                                  "i"
                                                                                                                                                                  "j!1"))
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "x!1")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "x!1")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "x!1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_ge1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "even?")
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -5
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "expt_times"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "sq_nz_pos"
                                                                                                                                     ("nz"
                                                                                                                                      "1-x!1"))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "sq")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "^"
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "expt"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "expt"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "expt"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "even?")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "G")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -2
                                                                                                                         -4
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "expt_times"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "sq_nz_pos"
                                                                                                                               ("nz"
                                                                                                                                "1-x!1"))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "sq")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "^"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "expt"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "expt_pos"
                                                                                                                                           ("px"
                                                                                                                                            "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                            "i"
                                                                                                                                            "j!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "x!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "x!1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite
                                                                                                         "even_or_odd")
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "forall (x:posreal): 1 < x & x <= px!1 => G(x) < 0")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "forall (x:posreal): 1 < x & x <= px!1 => F(x) < 0")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "forall (x:posreal): 1 < x & x <= px!1 => G(x) < F(x)")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "Integral_ge_0_open[posreal]"
                                                                                                                 ("a"
                                                                                                                  "1"
                                                                                                                  "b"
                                                                                                                  "px!1"
                                                                                                                  "f"
                                                                                                                  "-F"))
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "Integral_ge_0_open[posreal]"
                                                                                                                   ("a"
                                                                                                                    "1"
                                                                                                                    "b"
                                                                                                                    "px!1"
                                                                                                                    "f"
                                                                                                                    "-G"))
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "Integral_neg[posreal]"
                                                                                                                     ("a"
                                                                                                                      "1"
                                                                                                                      "b"
                                                                                                                      "px!1"
                                                                                                                      "f"
                                                                                                                      "F"))
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_neg[posreal]"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -5)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -6)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   ">="
                                                                                                                                   (-1
                                                                                                                                    -2))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "<="
                                                                                                                                     (-1
                                                                                                                                      -2))
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "abs"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "Integral_diff[posreal]"
                                                                                                                                                 ("a"
                                                                                                                                                  "1"
                                                                                                                                                  "b"
                                                                                                                                                  "px!1"
                                                                                                                                                  "f"
                                                                                                                                                  "-G"
                                                                                                                                                  "g"
                                                                                                                                                  "-F"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "Integral_ge_0_open[posreal]"
                                                                                                                                                       ("a"
                                                                                                                                                        "1"
                                                                                                                                                        "b"
                                                                                                                                                        "px!1"
                                                                                                                                                        "f"
                                                                                                                                                        "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp)
                                                                                                                                                            (("3"
                                                                                                                                                              (expand
                                                                                                                                                               "-"
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (inst
                                                                                                                                                                 -9
                                                                                                                                                                 "x!1")
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (ground)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               *
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (case-replace
                                                                                                                                                   "Integral(1, px!1, G) = 0")
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "Integral_diff[posreal]"
                                                                                                                                                     ("a"
                                                                                                                                                      "1"
                                                                                                                                                      "b"
                                                                                                                                                      "px!1"
                                                                                                                                                      "f"
                                                                                                                                                      "-G"
                                                                                                                                                      "g"
                                                                                                                                                      "-F"))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -3
                                                                                                                                                         -1
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "Integral_ge_0_open[posreal]"
                                                                                                                                                             ("a"
                                                                                                                                                              "1"
                                                                                                                                                              "b"
                                                                                                                                                              "px!1"
                                                                                                                                                              "f"
                                                                                                                                                              "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (skosimp)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (expand
                                                                                                                                                                     "-"
                                                                                                                                                                     1)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       -10
                                                                                                                                                                       "x!1")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "x!1")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (ground)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         "abs")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "-"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -7
                                                                                                                                       "x!1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "x!1")
                                                                                                                                          (("2"
                                                                                                                                            (ground)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "-"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -8
                                                                                                                                     "x!1")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (ground)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "odd?")
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "F")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "div_mult_pos_lt2"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "both_sides_times_neg_lt1"
                                                                                                                               ("nz"
                                                                                                                                "(1 - x!1) ^ n!1"
                                                                                                                                "y"
                                                                                                                                "1"
                                                                                                                                "x"
                                                                                                                                "x!1"))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -7
                                                                                                                                  -10
                                                                                                                                  1
                                                                                                                                  -5))
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "expt_plus"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "expt_x1")
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "both_sides_times_pos_lt1"
                                                                                                                                         ("pz"
                                                                                                                                          "(1 - x!1) ^ (2 * j!1)"
                                                                                                                                          "x"
                                                                                                                                          "1-x!1"
                                                                                                                                          "y"
                                                                                                                                          "0"))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "expt_times")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sq_nz_pos"
                                                                                                                                               ("nz"
                                                                                                                                                "1-x!1"))
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "sq(1 - x!1)"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "sq")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "^"
                                                                                                                                                     1
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "expt")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2
                                                                                                               -3
                                                                                                               -5
                                                                                                               -6)
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_lt1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             -2
                                                                                                             -4
                                                                                                             -5
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "odd?")
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "G")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "expt_plus")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "expt_x1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "expt_times")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "sq_nz_pos"
                                                                                                                             ("nz"
                                                                                                                              "1-x!1"))
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "sq")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "^"
                                                                                                                                 1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "expt"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "expt_pos"
                                                                                                                                         ("px"
                                                                                                                                          "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                          "i"
                                                                                                                                          "j!1"))
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "both_sides_times_pos_lt1"
                                                                                                                                           ("pz"
                                                                                                                                            "(1 - 2 * x!1 + x!1 * x!1) ^ j!1"
                                                                                                                                            "x"
                                                                                                                                            "1-x!1"
                                                                                                                                            "y"
                                                                                                                                            "0"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 *
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "Integral_a_to_a[posreal]"
                                                                                                   ("a"
                                                                                                    "1"
                                                                                                    "f"
                                                                                                    "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "Integral_a_to_a[posreal]"
                                                                                                       ("a"
                                                                                                        "1"
                                                                                                        "f"
                                                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1/t"))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "ln_estimate_scaf2"
                                                                                       ("x"
                                                                                        "px!1"
                                                                                        "n"
                                                                                        "n!1"))
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (lemma
                                                                       "div_cancel1"
                                                                       ("x"
                                                                        "(1 - x!1) ^ n!1"
                                                                        "n0z"
                                                                        "-1-n!1"))
                                                                      (("2"
                                                                        (case-replace
                                                                         "-1 / (1 + n!1) = 1/(-1-n!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (expand "continuous?" -1)
                  (("2" (inst - "x!1") nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil)) nil)
           ("3" (skosimp*) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "const_fun_continuous[posreal]" ("u" "1"))
        (("2" (lemma "id_fun_continuous[posreal]")
          (("2" (expand "I")
            (("2" (expand "const_fun")
              (("2"
                (lemma "diff_fun_continuous[posreal]"
                 ("h1" "LAMBDA (x: posreal): 1" "h2"
                  "LAMBDA (x: posreal): x"))
                (("1" (expand "-")
                  (("1" (induct "n")
                    (("1"
                      (lemma "extensionality"
                       ("f" "LAMBDA (t: posreal): (1 - t) ^ 0" "g"
                        "LAMBDA (x: posreal): 1"))
                      (("1" (split -1)
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (skosimp)
                            (("2" (expand "^")
                              (("2"
                                (expand "expt")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2"
                        (lemma "prod_fun_continuous[posreal]"
                         ("h1" "LAMBDA (x_1: posreal): 1 - x_1" "h2"
                          "LAMBDA (t: posreal): (1 - t) ^ j!1"))
                        (("1"
                          (lemma "extensionality"
                           ("f" "((LAMBDA (x_1: posreal): 1 - x_1) *
                                        (LAMBDA (t: posreal): (1 - t) ^ j!1))"
                            "g"
                            "(LAMBDA (t: posreal): (1 - t) ^ (j!1 + 1))"))
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skosimp)
                                (("2"
                                  (expand "*")
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (expand "expt" 1 3)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil) ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (prod_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    (diff_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (const_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_Integrable? formula-decl nil integral "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (diff_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_diff_fun formula-decl nil derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (fundamental3 formula-decl nil fundamental_theorem "analysis/")
    (Integral_diff formula-decl nil integral "analysis/")
    (sq_nz_pos judgement-tcc nil sq "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Integral_ge_0_open formula-decl nil integral "analysis/")
    (Integral_neg formula-decl nil integral "analysis/")
    (Integral_a_to_a formula-decl nil integral "analysis/")
    (Integral const-decl "real" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integrable? const-decl "bool" integral_def "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (deriv_const_fun formula-decl nil derivatives "analysis/"))
   nil)
  (ln_estimate_scaf10-3 nil 3352449521
   (""
    (case "forall (n:nat): continuous[posreal](LAMBDA (t: posreal): (1 - t) ^ n)")
    (("1" (skosimp)
      (("1" (inst - "n!1")
        (("1"
          (lemma "continuous_Integrable?[posreal]"
           ("a" "1" "b" "px!1" "f"
            "LAMBDA (t: posreal): (1 - t) ^ n!1"))
          (("1" (split -1)
            (("1" (lemma "const_derivable_fun[posreal]" ("b" "1"))
              (("1" (lemma "deriv_const_fun[posreal]" ("b" "1"))
                (("1" (lemma "identity_derivable_fun[posreal]")
                  (("1" (lemma "deriv_id_fun[posreal]")
                    (("1" (expand "I")
                      (("1" (expand "const_fun")
                        (("1"
                          (lemma "diff_derivable_fun[posreal]"
                           ("f1" "LAMBDA (x: posreal): 1" "f2"
                            "LAMBDA (x: posreal): x"))
                          (("1" (assert)
                            (("1"
                              (lemma "deriv_diff_fun[posreal]"
                               ("ff1"
                                "LAMBDA (x: posreal): 1"
                                "ff2"
                                "LAMBDA (x: posreal): x"))
                              (("1"
                                (replace -3)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (lemma
                                       "deriv_exp_fun[posreal]"
                                       ("n"
                                        "1+n!1"
                                        "f"
                                        "LAMBDA (x_1: posreal): 1 - x_1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "^" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (hide
                                                 -3
                                                 -4
                                                 -5
                                                 -6
                                                 -7
                                                 -8)
                                                (("1"
                                                  (lemma
                                                   "scal_derivable_fun[posreal]"
                                                   ("b"
                                                    "-1/(1+n!1)"
                                                    "f"
                                                    "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "deriv_scal_fun[posreal]"
                                                       ("b"
                                                        "-1/(1+n!1)"
                                                        "ff"
                                                        "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                      (("1"
                                                        (expand "*")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "extensionality"
                                                               ("f"
                                                                "(LAMBDA (x: posreal):
                               -1 * ((1 - x) ^ n!1 * (-1 / (1 + n!1))) -
                                (1 - x) ^ n!1 * (-1 / (1 + n!1)) * n!1)"
                                                                "g"
                                                                "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "fundamental3[posreal]"
                                                                       ("f"
                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1"
                                                                        "F"
                                                                        "LAMBDA (x: posreal): -1 / (1 + n!1) * (1 - x) ^ (1 + n!1)"
                                                                        "a"
                                                                        "1"
                                                                        "b"
                                                                        "px!1"))
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -7
                                                                             -1)
                                                                            (("1"
                                                                              (simplify
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -1
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t)) <= abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       -1)
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "DRL100"
                                                                                         "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t))")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -9
                                                                                            -10
                                                                                            1))
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "abs_mult"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "abs_div"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "<="
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "abs_expt"
                                                                                                         -2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         *
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "^")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "expt")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "zero_times1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "abs")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<="
                                                                                             -3)
                                                                                            (("2"
                                                                                              (split
                                                                                               -3)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "ln_estimate_scaf2"
                                                                                                 ("x"
                                                                                                  "px!1"
                                                                                                  "n"
                                                                                                  "n!1"))
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "F"
                                                                                                   "LAMBDA (t: posreal): (1 - t) ^ n!1 / t")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "G"
                                                                                                     "LAMBDA (t: posreal): (1 - t) ^ n!1")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "even?(n!1)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "Integral_ge_0_open[posreal]"
                                                                                                         ("a"
                                                                                                          "1"
                                                                                                          "b"
                                                                                                          "px!1"
                                                                                                          "f"
                                                                                                          "F"))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "Integral_ge_0_open[posreal]"
                                                                                                           ("a"
                                                                                                            "1"
                                                                                                            "b"
                                                                                                            "px!1"
                                                                                                            "f"
                                                                                                            "G"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "abs")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_diff[posreal]"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"
                                                                                                                        "g"
                                                                                                                        "F"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "Integral_ge_0_open[posreal]"
                                                                                                                             ("a"
                                                                                                                              "1"
                                                                                                                              "b"
                                                                                                                              "px!1"
                                                                                                                              "f"
                                                                                                                              "LAMBDA (x: posreal): G(x) - F(x)"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (1
                                                                                                                                  -7
                                                                                                                                  -5
                                                                                                                                  -10))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "even?")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "F")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "G")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "posreal_times_posreal_is_posreal"
                                                                                                                                           ("px"
                                                                                                                                            "(1 - x!1) ^ n!1"
                                                                                                                                            "py"
                                                                                                                                            "1-1/x!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "x!1")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "div_mult_pos_lt1"
                                                                                                                                                   ("py"
                                                                                                                                                    "x!1"
                                                                                                                                                    "x"
                                                                                                                                                    "1"
                                                                                                                                                    "z"
                                                                                                                                                    "1"))
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "x!1")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("3"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("3"
                                                                                                                                                (rewrite
                                                                                                                                                 "expt_times"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "sq_nz_pos"
                                                                                                                                                   ("nz"
                                                                                                                                                    "1-x!1"))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sq")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "^"
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "expt")
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "expt_pos"
                                                                                                                                                                 ("px"
                                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                                  "i"
                                                                                                                                                                  "j!1"))
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "x!1")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "x!1")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "x!1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_ge1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "even?")
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -5
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "expt_times"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "sq_nz_pos"
                                                                                                                                     ("nz"
                                                                                                                                      "1-x!1"))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "sq")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "^"
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "expt"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "expt"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "expt"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "even?")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "G")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -2
                                                                                                                         -4
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "expt_times"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "sq_nz_pos"
                                                                                                                               ("nz"
                                                                                                                                "1-x!1"))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "sq")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "^"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "expt"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "expt_pos"
                                                                                                                                           ("px"
                                                                                                                                            "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                            "i"
                                                                                                                                            "j!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "x!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "x!1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite
                                                                                                         "even_or_odd")
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "forall (x:posreal): 1 < x & x <= px!1 => G(x) < 0")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "forall (x:posreal): 1 < x & x <= px!1 => F(x) < 0")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "forall (x:posreal): 1 < x & x <= px!1 => G(x) < F(x)")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "Integral_ge_0_open[posreal]"
                                                                                                                 ("a"
                                                                                                                  "1"
                                                                                                                  "b"
                                                                                                                  "px!1"
                                                                                                                  "f"
                                                                                                                  "-F"))
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "Integral_ge_0_open[posreal]"
                                                                                                                   ("a"
                                                                                                                    "1"
                                                                                                                    "b"
                                                                                                                    "px!1"
                                                                                                                    "f"
                                                                                                                    "-G"))
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "Integral_neg[posreal]"
                                                                                                                     ("a"
                                                                                                                      "1"
                                                                                                                      "b"
                                                                                                                      "px!1"
                                                                                                                      "f"
                                                                                                                      "F"))
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_neg[posreal]"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -5)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -6)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   ">="
                                                                                                                                   (-1
                                                                                                                                    -2))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "<="
                                                                                                                                     (-1
                                                                                                                                      -2))
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "abs"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "Integral_diff[posreal]"
                                                                                                                                                 ("a"
                                                                                                                                                  "1"
                                                                                                                                                  "b"
                                                                                                                                                  "px!1"
                                                                                                                                                  "f"
                                                                                                                                                  "-G"
                                                                                                                                                  "g"
                                                                                                                                                  "-F"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "Integral_ge_0_open[posreal]"
                                                                                                                                                       ("a"
                                                                                                                                                        "1"
                                                                                                                                                        "b"
                                                                                                                                                        "px!1"
                                                                                                                                                        "f"
                                                                                                                                                        "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp)
                                                                                                                                                            (("3"
                                                                                                                                                              (expand
                                                                                                                                                               "-"
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (inst
                                                                                                                                                                 -9
                                                                                                                                                                 "x!1")
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (ground)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               *
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (case-replace
                                                                                                                                                   "Integral(1, px!1, G) = 0")
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "Integral_diff[posreal]"
                                                                                                                                                     ("a"
                                                                                                                                                      "1"
                                                                                                                                                      "b"
                                                                                                                                                      "px!1"
                                                                                                                                                      "f"
                                                                                                                                                      "-G"
                                                                                                                                                      "g"
                                                                                                                                                      "-F"))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -3
                                                                                                                                                         -1
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "Integral_ge_0_open[posreal]"
                                                                                                                                                             ("a"
                                                                                                                                                              "1"
                                                                                                                                                              "b"
                                                                                                                                                              "px!1"
                                                                                                                                                              "f"
                                                                                                                                                              "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (skosimp)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (expand
                                                                                                                                                                     "-"
                                                                                                                                                                     1)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       -10
                                                                                                                                                                       "x!1")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "x!1")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (ground)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         "abs")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "-"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -7
                                                                                                                                       "x!1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "x!1")
                                                                                                                                          (("2"
                                                                                                                                            (ground)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "-"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -8
                                                                                                                                     "x!1")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (ground)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "odd?")
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "F")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "div_mult_pos_lt2"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "both_sides_times_neg_lt1"
                                                                                                                               ("nz"
                                                                                                                                "(1 - x!1) ^ n!1"
                                                                                                                                "y"
                                                                                                                                "1"
                                                                                                                                "x"
                                                                                                                                "x!1"))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -7
                                                                                                                                  -10
                                                                                                                                  1
                                                                                                                                  -5))
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "expt_plus"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "expt_x1")
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "both_sides_times_pos_lt1"
                                                                                                                                         ("pz"
                                                                                                                                          "(1 - x!1) ^ (2 * j!1)"
                                                                                                                                          "x"
                                                                                                                                          "1-x!1"
                                                                                                                                          "y"
                                                                                                                                          "0"))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "expt_times")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sq_nz_pos"
                                                                                                                                               ("nz"
                                                                                                                                                "1-x!1"))
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "sq(1 - x!1)"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "sq")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "^"
                                                                                                                                                     1
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "expt")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2
                                                                                                               -3
                                                                                                               -5
                                                                                                               -6)
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_lt1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             -2
                                                                                                             -4
                                                                                                             -5
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "odd?")
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "G")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "expt_plus")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "expt_x1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "expt_times")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "sq_nz_pos"
                                                                                                                             ("nz"
                                                                                                                              "1-x!1"))
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "sq")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "^"
                                                                                                                                 1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "expt"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "expt_pos"
                                                                                                                                         ("px"
                                                                                                                                          "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                          "i"
                                                                                                                                          "j!1"))
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "both_sides_times_pos_lt1"
                                                                                                                                           ("pz"
                                                                                                                                            "(1 - 2 * x!1 + x!1 * x!1) ^ j!1"
                                                                                                                                            "x"
                                                                                                                                            "1-x!1"
                                                                                                                                            "y"
                                                                                                                                            "0"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 *
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "Integral_a_to_a[posreal]"
                                                                                                   ("a"
                                                                                                    "1"
                                                                                                    "f"
                                                                                                    "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "Integral_a_to_a[posreal]"
                                                                                                       ("a"
                                                                                                        "1"
                                                                                                        "f"
                                                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1/t"))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "ln_estimate_scaf2"
                                                                                       ("x"
                                                                                        "px!1"
                                                                                        "n"
                                                                                        "n!1"))
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "div_cancel1"
                                                                         ("x"
                                                                          "(1 - x!1) ^ n!1"
                                                                          "n0z"
                                                                          "-1-n!1"))
                                                                        (("2"
                                                                          (case-replace
                                                                           "-1 / (1 + n!1) = 1/(-1-n!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (expand "continuous?" -1)
                  (("2" (inst - "x!1") nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "const_fun_continuous[posreal]" ("u" "1"))
              (("2" (lemma "id_fun_continuous[posreal]")
                (("2" (expand "I")
                  (("2" (expand "const_fun")
                    (("2"
                      (lemma "diff_fun_continuous[posreal]"
                       ("h1" "LAMBDA (x: posreal): 1" "h2"
                        "LAMBDA (x: posreal): x"))
                      (("1" (expand "-")
                        (("1"
                          (lemma "extensionality"
                           ("f" "LAMBDA (t: posreal): (1 - t) ^ 0" "g"
                            "LAMBDA (x: posreal): 1"))
                          (("1" (split -1)
                            (("1" (assert)
                              (("1"
                                (hide-all-but 1)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst + "x!1+1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (assert)
                                (("2"
                                  (inst + "x!2+1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil) ("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp*) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (skosimp*) (("2" (postpone) nil nil)) nil))
      nil))
    nil)
   nil nil)
  (ln_estimate_scaf10-2 nil 3322385986
   (""
    (case "forall (n:nat): continuous[posreal](LAMBDA (t: posreal): (1 - t) ^ n)")
    (("1" (skosimp)
      (("1" (inst - "n!1")
        (("1"
          (lemma "continuous_Integrable?"
           ("a" "1" "b" "px!1" "f"
            "LAMBDA (t: posreal): (1 - t) ^ n!1"))
          (("1" (split -1)
            (("1" (lemma "const_derivable_fun[posreal]" ("b" "1"))
              (("1" (lemma "deriv_const_fun[posreal]" ("b" "1"))
                (("1" (lemma "identity_derivable_fun[posreal]")
                  (("1" (lemma "deriv_id_fun[posreal]")
                    (("1" (expand "I")
                      (("1" (expand "const_fun")
                        (("1"
                          (lemma "diff_derivable_fun"
                           ("f1" "LAMBDA (x: posreal): 1" "f2"
                            "LAMBDA (x: posreal): x"))
                          (("1" (assert)
                            (("1"
                              (lemma "deriv_diff_fun"
                               ("ff1"
                                "LAMBDA (x: posreal): 1"
                                "ff2"
                                "LAMBDA (x: posreal): x"))
                              (("1"
                                (replace -3)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (lemma
                                       "deriv_exp_fun"
                                       ("n"
                                        "1+n!1"
                                        "f"
                                        "LAMBDA (x_1: posreal): 1 - x_1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "^" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (hide
                                                 -3
                                                 -4
                                                 -5
                                                 -6
                                                 -7
                                                 -8)
                                                (("1"
                                                  (lemma
                                                   "scal_derivable_fun"
                                                   ("b"
                                                    "-1/(1+n!1)"
                                                    "f"
                                                    "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "deriv_scal_fun"
                                                       ("b"
                                                        "-1/(1+n!1)"
                                                        "ff"
                                                        "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                      (("1"
                                                        (expand "*")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "extensionality"
                                                               ("f"
                                                                "(LAMBDA (x: posreal):
                 -1 * ((1 - x) ^ n!1 * (-1 / (1 + n!1))) -
                  (1 - x) ^ n!1 * (-1 / (1 + n!1)) * n!1)"
                                                                "g"
                                                                "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "fundamental3[posreal]"
                                                                       ("f"
                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1"
                                                                        "F"
                                                                        "LAMBDA (x: posreal): -1 / (1 + n!1) * (1 - x) ^ (1 + n!1)"
                                                                        "a"
                                                                        "1"
                                                                        "b"
                                                                        "px!1"))
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -7
                                                                             -1)
                                                                            (("1"
                                                                              (simplify
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -1
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t)) <= abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       -1)
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "DRL100"
                                                                                         "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t))")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -9
                                                                                            -10
                                                                                            1))
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "abs_mult"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "abs_div"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "<="
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "abs_expt"
                                                                                                         -2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         *
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "^")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "expt")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "zero_times1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "abs")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<="
                                                                                             -3)
                                                                                            (("2"
                                                                                              (split
                                                                                               -3)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "ln_estimate_scaf2"
                                                                                                 ("x"
                                                                                                  "px!1"
                                                                                                  "n"
                                                                                                  "n!1"))
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "F"
                                                                                                   "LAMBDA (t: posreal): (1 - t) ^ n!1 / t")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "G"
                                                                                                     "LAMBDA (t: posreal): (1 - t) ^ n!1")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "even?(n!1)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "Integral_ge_0_open"
                                                                                                         ("a"
                                                                                                          "1"
                                                                                                          "b"
                                                                                                          "px!1"
                                                                                                          "f"
                                                                                                          "F"))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "Integral_ge_0_open"
                                                                                                           ("a"
                                                                                                            "1"
                                                                                                            "b"
                                                                                                            "px!1"
                                                                                                            "f"
                                                                                                            "G"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "abs")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_diff"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"
                                                                                                                        "g"
                                                                                                                        "F"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "Integral_ge_0_open"
                                                                                                                             ("a"
                                                                                                                              "1"
                                                                                                                              "b"
                                                                                                                              "px!1"
                                                                                                                              "f"
                                                                                                                              "LAMBDA (x: posreal): G(x) - F(x)"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (1
                                                                                                                                  -7
                                                                                                                                  -5
                                                                                                                                  -10))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "even?")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "F")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "G")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "posreal_times_posreal_is_posreal"
                                                                                                                                           ("px"
                                                                                                                                            "(1 - x!1) ^ n!1"
                                                                                                                                            "py"
                                                                                                                                            "1-1/x!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "x!1")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "div_mult_pos_lt1"
                                                                                                                                                   ("py"
                                                                                                                                                    "x!1"
                                                                                                                                                    "x"
                                                                                                                                                    "1"
                                                                                                                                                    "z"
                                                                                                                                                    "1"))
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "x!1")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("3"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("3"
                                                                                                                                                (rewrite
                                                                                                                                                 "expt_times"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "sq_nz_pos"
                                                                                                                                                   ("nz"
                                                                                                                                                    "1-x!1"))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sq")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "^"
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "expt")
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "expt_pos"
                                                                                                                                                                 ("px"
                                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                                  "i"
                                                                                                                                                                  "j!1"))
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "x!1")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "x!1")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "x!1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_ge1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "even?")
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -5
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "expt_times"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "sq_nz_pos"
                                                                                                                                     ("nz"
                                                                                                                                      "1-x!1"))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "sq")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "^"
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "expt"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "expt"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "expt"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "even?")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "G")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -2
                                                                                                                         -4
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "expt_times"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "sq_nz_pos"
                                                                                                                               ("nz"
                                                                                                                                "1-x!1"))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "sq")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "^"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "expt"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "expt_pos"
                                                                                                                                           ("px"
                                                                                                                                            "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                            "i"
                                                                                                                                            "j!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "x!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "x!1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite
                                                                                                         "even_or_odd")
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "forall (x:posreal): 1 < x & x <= px!1 => G(x) < 0")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "forall (x:posreal): 1 < x & x <= px!1 => F(x) < 0")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "forall (x:posreal): 1 < x & x <= px!1 => G(x) < F(x)")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "Integral_ge_0_open"
                                                                                                                 ("a"
                                                                                                                  "1"
                                                                                                                  "b"
                                                                                                                  "px!1"
                                                                                                                  "f"
                                                                                                                  "-F"))
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "Integral_ge_0_open"
                                                                                                                   ("a"
                                                                                                                    "1"
                                                                                                                    "b"
                                                                                                                    "px!1"
                                                                                                                    "f"
                                                                                                                    "-G"))
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "Integral_neg"
                                                                                                                     ("a"
                                                                                                                      "1"
                                                                                                                      "b"
                                                                                                                      "px!1"
                                                                                                                      "f"
                                                                                                                      "F"))
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_neg"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -5)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -6)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   ">="
                                                                                                                                   (-1
                                                                                                                                    -2))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "<="
                                                                                                                                     (-1
                                                                                                                                      -2))
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "abs"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "Integral_diff"
                                                                                                                                                 ("a"
                                                                                                                                                  "1"
                                                                                                                                                  "b"
                                                                                                                                                  "px!1"
                                                                                                                                                  "f"
                                                                                                                                                  "-G"
                                                                                                                                                  "g"
                                                                                                                                                  "-F"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "Integral_ge_0_open"
                                                                                                                                                       ("a"
                                                                                                                                                        "1"
                                                                                                                                                        "b"
                                                                                                                                                        "px!1"
                                                                                                                                                        "f"
                                                                                                                                                        "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp)
                                                                                                                                                            (("3"
                                                                                                                                                              (expand
                                                                                                                                                               "-"
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (inst
                                                                                                                                                                 -9
                                                                                                                                                                 "x!1")
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (ground)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               *
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (case-replace
                                                                                                                                                   "Integral(1, px!1, G) = 0")
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "Integral_diff"
                                                                                                                                                     ("a"
                                                                                                                                                      "1"
                                                                                                                                                      "b"
                                                                                                                                                      "px!1"
                                                                                                                                                      "f"
                                                                                                                                                      "-G"
                                                                                                                                                      "g"
                                                                                                                                                      "-F"))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -3
                                                                                                                                                         -1
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "Integral_ge_0_open"
                                                                                                                                                             ("a"
                                                                                                                                                              "1"
                                                                                                                                                              "b"
                                                                                                                                                              "px!1"
                                                                                                                                                              "f"
                                                                                                                                                              "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (skosimp)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (expand
                                                                                                                                                                     "-"
                                                                                                                                                                     1)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       -10
                                                                                                                                                                       "x!1")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "x!1")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (ground)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         "abs")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "-"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -7
                                                                                                                                       "x!1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "x!1")
                                                                                                                                          (("2"
                                                                                                                                            (ground)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "-"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -8
                                                                                                                                     "x!1")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (ground)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "odd?")
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "F")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "div_mult_pos_lt2"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "both_sides_times_neg_lt1"
                                                                                                                               ("nz"
                                                                                                                                "(1 - x!1) ^ n!1"
                                                                                                                                "y"
                                                                                                                                "1"
                                                                                                                                "x"
                                                                                                                                "x!1"))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -7
                                                                                                                                  -10
                                                                                                                                  1
                                                                                                                                  -5))
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "expt_plus"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "expt_x1")
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "both_sides_times_pos_lt1"
                                                                                                                                         ("pz"
                                                                                                                                          "(1 - x!1) ^ (2 * j!1)"
                                                                                                                                          "x"
                                                                                                                                          "1-x!1"
                                                                                                                                          "y"
                                                                                                                                          "0"))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "expt_times")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sq_nz_pos"
                                                                                                                                               ("nz"
                                                                                                                                                "1-x!1"))
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "sq(1 - x!1)"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "sq")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "^"
                                                                                                                                                     1
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "expt")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2
                                                                                                               -3
                                                                                                               -5
                                                                                                               -6)
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_lt1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             -2
                                                                                                             -4
                                                                                                             -5
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "odd?")
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "G")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "expt_plus")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "expt_x1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "expt_times")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "sq_nz_pos"
                                                                                                                             ("nz"
                                                                                                                              "1-x!1"))
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "sq")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "^"
                                                                                                                                 1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "expt"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "expt_pos"
                                                                                                                                         ("px"
                                                                                                                                          "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                          "i"
                                                                                                                                          "j!1"))
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "both_sides_times_pos_lt1"
                                                                                                                                           ("pz"
                                                                                                                                            "(1 - 2 * x!1 + x!1 * x!1) ^ j!1"
                                                                                                                                            "x"
                                                                                                                                            "1-x!1"
                                                                                                                                            "y"
                                                                                                                                            "0"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 *
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "Integral_a_to_a"
                                                                                                   ("a"
                                                                                                    "1"
                                                                                                    "f"
                                                                                                    "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "Integral_a_to_a"
                                                                                                       ("a"
                                                                                                        "1"
                                                                                                        "f"
                                                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1/t"))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "ln_estimate_scaf2"
                                                                                       ("x"
                                                                                        "px!1"
                                                                                        "n"
                                                                                        "n!1"))
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "x!1*2")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (lemma
                                                                       "div_cancel1"
                                                                       ("x"
                                                                        "(1 - x!1) ^ n!1"
                                                                        "n0z"
                                                                        "-1-n!1"))
                                                                      (("2"
                                                                        (case-replace
                                                                         "-1 / (1 + n!1) = 1/(-1-n!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (expand "continuous?" -1)
                  (("2" (inst - "x!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "const_fun_continuous[posreal]" ("u" "1"))
        (("2" (lemma "id_fun_continuous[posreal]")
          (("2" (expand "I")
            (("2" (expand "const_fun")
              (("2"
                (lemma "diff_fun_continuous"
                 ("h1" "LAMBDA (x: posreal): 1" "h2"
                  "LAMBDA (x: posreal): x"))
                (("1" (expand "-")
                  (("1" (induct "n")
                    (("1"
                      (lemma "extensionality"
                       ("f" "LAMBDA (t: posreal): (1 - t) ^ 0" "g"
                        "LAMBDA (x: posreal): 1"))
                      (("1" (split -1)
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (skosimp)
                            (("2" (expand "^")
                              (("2"
                                (expand "expt")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2"
                        (lemma "prod_fun_continuous"
                         ("h1" "LAMBDA (x_1: posreal): 1 - x_1" "h2"
                          "LAMBDA (t: posreal): (1 - t) ^ j!1"))
                        (("1"
                          (lemma "extensionality"
                           ("f" "((LAMBDA (x_1: posreal): 1 - x_1) *
                             (LAMBDA (t: posreal): (1 - t) ^ j!1))" "g"
                            "(LAMBDA (t: posreal): (1 - t) ^ (j!1 + 1))"))
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skosimp)
                                (("2"
                                  (expand "*")
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (expand "expt" 1 3)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil) ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (prod_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    (diff_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (const_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_Integrable? formula-decl nil integral "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (diff_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_diff_fun formula-decl nil derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (fundamental3 formula-decl nil fundamental_theorem "analysis/")
    (Integral_diff formula-decl nil integral "analysis/")
    (sq_nz_pos judgement-tcc nil sq "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Integral_ge_0_open formula-decl nil integral "analysis/")
    (Integral_neg formula-decl nil integral "analysis/")
    (Integral_a_to_a formula-decl nil integral "analysis/")
    (Integral const-decl "real" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integrable? const-decl "bool" integral_def "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (deriv_const_fun formula-decl nil derivatives "analysis/"))
   nil)
  (ln_estimate_scaf10-1 nil 3309679792
   (""
    (case "forall (n:nat): continuous[posreal](LAMBDA (t: posreal): (1 - t) ^ n)")
    (("1" (skosimp)
      (("1" (inst - "n!1")
        (("1"
          (lemma "continuous_Integrable?"
           ("a" "1" "b" "px!1" "f"
            "LAMBDA (t: posreal): (1 - t) ^ n!1"))
          (("1" (split -1)
            (("1" (lemma "const_derivable_fun[posreal]" ("b" "1"))
              (("1" (lemma "deriv_const_fun[posreal]" ("b" "1"))
                (("1" (lemma "identity_derivable_fun[posreal]")
                  (("1" (lemma "deriv_id_fun[posreal]")
                    (("1" (expand "I")
                      (("1" (expand "const_fun")
                        (("1"
                          (lemma "diff_derivable_fun"
                           ("f1" "LAMBDA (x: posreal): 1" "f2"
                            "LAMBDA (x: posreal): x"))
                          (("1" (assert)
                            (("1"
                              (lemma "deriv_diff_fun"
                               ("ff1"
                                "LAMBDA (x: posreal): 1"
                                "ff2"
                                "LAMBDA (x: posreal): x"))
                              (("1"
                                (replace -3)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (lemma
                                       "deriv_exp_fun"
                                       ("n"
                                        "1+n!1"
                                        "f"
                                        "LAMBDA (x_1: posreal): 1 - x_1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "^" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (hide
                                                 -3
                                                 -4
                                                 -5
                                                 -6
                                                 -7
                                                 -8)
                                                (("1"
                                                  (lemma
                                                   "scal_derivable_fun"
                                                   ("b"
                                                    "-1/(1+n!1)"
                                                    "f"
                                                    "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "deriv_scal_fun"
                                                       ("b"
                                                        "-1/(1+n!1)"
                                                        "ff"
                                                        "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                      (("1"
                                                        (expand "*")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "extensionality"
                                                               ("f"
                                                                "(LAMBDA (x: posreal):
          -1 * ((1 - x) ^ n!1 * (-1 / (1 + n!1))) -
           (1 - x) ^ n!1 * (-1 / (1 + n!1)) * n!1)"
                                                                "g"
                                                                "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "fundamental3[posreal]"
                                                                       ("f"
                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1"
                                                                        "F"
                                                                        "LAMBDA (x: posreal): -1 / (1 + n!1) * (1 - x) ^ (1 + n!1)"
                                                                        "a"
                                                                        "1"
                                                                        "b"
                                                                        "px!1"))
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -7
                                                                             -1)
                                                                            (("1"
                                                                              (simplify
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -1
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t)) <= abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       -1)
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "DRL100"
                                                                                         "abs(Integral(1, px!1, LAMBDA (t: posreal): (1 - t) ^ n!1 / t))")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -9
                                                                                            -10
                                                                                            1))
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "abs_mult"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "abs_div"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "<="
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "abs_expt"
                                                                                                         -2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         *
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "^")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "expt")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "zero_times1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "abs")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<="
                                                                                             -3)
                                                                                            (("2"
                                                                                              (split
                                                                                               -3)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "ln_estimate_scaf2"
                                                                                                 ("x"
                                                                                                  "px!1"
                                                                                                  "n"
                                                                                                  "n!1"))
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "F"
                                                                                                   "LAMBDA (t: posreal): (1 - t) ^ n!1 / t")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "G"
                                                                                                     "LAMBDA (t: posreal): (1 - t) ^ n!1")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "even?(n!1)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "Integral_ge_0"
                                                                                                         ("a"
                                                                                                          "1"
                                                                                                          "b"
                                                                                                          "px!1"
                                                                                                          "f"
                                                                                                          "F"))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "Integral_ge_0"
                                                                                                           ("a"
                                                                                                            "1"
                                                                                                            "b"
                                                                                                            "px!1"
                                                                                                            "f"
                                                                                                            "G"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "abs")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_diff"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"
                                                                                                                        "g"
                                                                                                                        "F"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "Integral_ge_0"
                                                                                                                             ("a"
                                                                                                                              "1"
                                                                                                                              "b"
                                                                                                                              "px!1"
                                                                                                                              "f"
                                                                                                                              "LAMBDA (x: posreal): G(x) - F(x)"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (1
                                                                                                                                  -7
                                                                                                                                  -5
                                                                                                                                  -10))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "even?")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "F")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "G")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "posreal_times_posreal_is_posreal"
                                                                                                                                           ("px"
                                                                                                                                            "(1 - x!1) ^ n!1"
                                                                                                                                            "py"
                                                                                                                                            "1-1/x!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "x!1")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "div_mult_pos_lt1"
                                                                                                                                                   ("py"
                                                                                                                                                    "x!1"
                                                                                                                                                    "x"
                                                                                                                                                    "1"
                                                                                                                                                    "z"
                                                                                                                                                    "1"))
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("3"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("3"
                                                                                                                                                (rewrite
                                                                                                                                                 "expt_times"
                                                                                                                                                 1)
                                                                                                                                                (("3"
                                                                                                                                                  (lemma
                                                                                                                                                   "sq_nz_pos"
                                                                                                                                                   ("nz"
                                                                                                                                                    "1-x!1"))
                                                                                                                                                  (("3"
                                                                                                                                                    (expand
                                                                                                                                                     "sq")
                                                                                                                                                    (("3"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       1)
                                                                                                                                                      (("3"
                                                                                                                                                        (expand
                                                                                                                                                         "^"
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                        (("3"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("3"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("3"
                                                                                                                                                              (expand
                                                                                                                                                               "expt")
                                                                                                                                                              (("3"
                                                                                                                                                                (lemma
                                                                                                                                                                 "expt_pos"
                                                                                                                                                                 ("px"
                                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                                  "i"
                                                                                                                                                                  "j!1"))
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "x!1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_ge1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "even?")
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -5
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "expt_times"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "sq_nz_pos"
                                                                                                                                     ("nz"
                                                                                                                                      "1-x!1"))
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "sq")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "^"
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "expt"
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "expt"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "expt"
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "even?")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "G")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -2
                                                                                                                         -4
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "expt_times"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "sq_nz_pos"
                                                                                                                               ("nz"
                                                                                                                                "1-x!1"))
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "sq")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "^"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "expt"
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "expt_pos"
                                                                                                                                           ("px"
                                                                                                                                            "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                            "i"
                                                                                                                                            "j!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite
                                                                                                         "even_or_odd")
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "forall (x:posreal): 1 < x & x <= px!1 => G(x) < 0")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "forall (x:posreal): 1 < x & x <= px!1 => F(x) < 0")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "forall (x:posreal): 1 < x & x <= px!1 => G(x) < F(x)")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "Integral_ge_0"
                                                                                                                 ("a"
                                                                                                                  "1"
                                                                                                                  "b"
                                                                                                                  "px!1"
                                                                                                                  "f"
                                                                                                                  "-F"))
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "Integral_ge_0"
                                                                                                                   ("a"
                                                                                                                    "1"
                                                                                                                    "b"
                                                                                                                    "px!1"
                                                                                                                    "f"
                                                                                                                    "-G"))
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "Integral_opp"
                                                                                                                     ("a"
                                                                                                                      "1"
                                                                                                                      "b"
                                                                                                                      "px!1"
                                                                                                                      "f"
                                                                                                                      "F"))
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Integral_opp"
                                                                                                                       ("a"
                                                                                                                        "1"
                                                                                                                        "b"
                                                                                                                        "px!1"
                                                                                                                        "f"
                                                                                                                        "G"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -5)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -6)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   ">="
                                                                                                                                   (-1
                                                                                                                                    -2))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "<="
                                                                                                                                     (-1
                                                                                                                                      -2))
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "abs"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "Integral_diff"
                                                                                                                                                 ("a"
                                                                                                                                                  "1"
                                                                                                                                                  "b"
                                                                                                                                                  "px!1"
                                                                                                                                                  "f"
                                                                                                                                                  "-G"
                                                                                                                                                  "g"
                                                                                                                                                  "-F"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "Integral_ge_0"
                                                                                                                                                       ("a"
                                                                                                                                                        "1"
                                                                                                                                                        "b"
                                                                                                                                                        "px!1"
                                                                                                                                                        "f"
                                                                                                                                                        "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp)
                                                                                                                                                            (("3"
                                                                                                                                                              (expand
                                                                                                                                                               "-"
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (inst
                                                                                                                                                                 -9
                                                                                                                                                                 "x!1")
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               *
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (case-replace
                                                                                                                                                   "Integral(1, px!1, G) = 0")
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "Integral_diff"
                                                                                                                                                     ("a"
                                                                                                                                                      "1"
                                                                                                                                                      "b"
                                                                                                                                                      "px!1"
                                                                                                                                                      "f"
                                                                                                                                                      "-G"
                                                                                                                                                      "g"
                                                                                                                                                      "-F"))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -3
                                                                                                                                                         -1
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "Integral_ge_0"
                                                                                                                                                             ("a"
                                                                                                                                                              "1"
                                                                                                                                                              "b"
                                                                                                                                                              "px!1"
                                                                                                                                                              "f"
                                                                                                                                                              "LAMBDA (x: posreal): (-G)(x) - (-F)(x)"))
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (skosimp)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (expand
                                                                                                                                                                     "-"
                                                                                                                                                                     1)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       -10
                                                                                                                                                                       "x!1")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         "abs")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "-"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -7
                                                                                                                                       "x!1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "-"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -8
                                                                                                                                     "x!1")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "odd?")
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "F")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "div_mult_pos_lt2"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "both_sides_times_neg_lt1"
                                                                                                                               ("nz"
                                                                                                                                "(1 - x!1) ^ n!1"
                                                                                                                                "y"
                                                                                                                                "1"
                                                                                                                                "x"
                                                                                                                                "x!1"))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -7
                                                                                                                                  -10
                                                                                                                                  1
                                                                                                                                  -5))
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "expt_plus"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "expt_x1")
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "both_sides_times_pos_lt1"
                                                                                                                                         ("pz"
                                                                                                                                          "(1 - x!1) ^ (2 * j!1)"
                                                                                                                                          "x"
                                                                                                                                          "1-x!1"
                                                                                                                                          "y"
                                                                                                                                          "0"))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "expt_times")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "sq_nz_pos"
                                                                                                                                               ("nz"
                                                                                                                                                "1-x!1"))
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expt_pos"
                                                                                                                                                 ("px"
                                                                                                                                                  "sq(1 - x!1)"
                                                                                                                                                  "i"
                                                                                                                                                  "j!1"))
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "sq")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "^"
                                                                                                                                                     1
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^"
                                                                                                                                                       1
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "expt")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "expt")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2
                                                                                                               -3
                                                                                                               -5
                                                                                                               -6)
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "F")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_lt1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             -2
                                                                                                             -4
                                                                                                             -5
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "odd?")
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "G")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "expt_plus")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "expt_x1")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "expt_times")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "sq_nz_pos"
                                                                                                                             ("nz"
                                                                                                                              "1-x!1"))
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "sq")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "^"
                                                                                                                                 1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "expt"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "expt_pos"
                                                                                                                                         ("px"
                                                                                                                                          "1 - 2 * x!1 + x!1 * x!1"
                                                                                                                                          "i"
                                                                                                                                          "j!1"))
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "both_sides_times_pos_lt1"
                                                                                                                                           ("pz"
                                                                                                                                            "(1 - 2 * x!1 + x!1 * x!1) ^ j!1"
                                                                                                                                            "x"
                                                                                                                                            "1-x!1"
                                                                                                                                            "y"
                                                                                                                                            "0"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 *
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "Integral_a_to_a"
                                                                                                   ("a"
                                                                                                    "1"
                                                                                                    "f"
                                                                                                    "LAMBDA (t: posreal): (1 - t) ^ n!1"))
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "Integral_a_to_a"
                                                                                                       ("a"
                                                                                                        "1"
                                                                                                        "f"
                                                                                                        "LAMBDA (t: posreal): (1 - t) ^ n!1/t"))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "ln_estimate_scaf2"
                                                                                       ("x"
                                                                                        "px!1"
                                                                                        "n"
                                                                                        "n!1"))
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "x!1*2")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (lemma
                                                                       "div_cancel1"
                                                                       ("x"
                                                                        "(1 - x!1) ^ n!1"
                                                                        "n0z"
                                                                        "-1-n!1"))
                                                                      (("2"
                                                                        (case-replace
                                                                         "-1 / (1 + n!1) = 1/(-1-n!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (expand "continuous?" -1)
                  (("2" (inst - "x!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "const_fun_continuous[posreal]" ("u" "1"))
        (("2" (lemma "id_fun_continuous[posreal]")
          (("2" (expand "I")
            (("2" (expand "const_fun")
              (("2"
                (lemma "diff_fun_continuous"
                 ("h1" "LAMBDA (x: posreal): 1" "h2"
                  "LAMBDA (x: posreal): x"))
                (("1" (expand "-")
                  (("1" (induct "n")
                    (("1"
                      (lemma "extensionality"
                       ("f" "LAMBDA (t: posreal): (1 - t) ^ 0" "g"
                        "LAMBDA (x: posreal): 1"))
                      (("1" (split -1)
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (skosimp)
                            (("2" (expand "^")
                              (("2"
                                (expand "expt")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2"
                        (lemma "prod_fun_continuous"
                         ("h1" "LAMBDA (x_1: posreal): 1 - x_1" "h2"
                          "LAMBDA (t: posreal): (1 - t) ^ j!1"))
                        (("1"
                          (lemma "extensionality"
                           ("f" "((LAMBDA (x_1: posreal): 1 - x_1) *
                  (LAMBDA (t: posreal): (1 - t) ^ j!1))" "g"
                            "(LAMBDA (t: posreal): (1 - t) ^ (j!1 + 1))"))
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skosimp)
                                (("2"
                                  (expand "*")
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (expand "expt" 1 3)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil) ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (prod_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    (diff_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (const_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_Integrable? formula-decl nil integral "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (diff_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_diff_fun formula-decl nil derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (fundamental3 formula-decl nil fundamental_theorem "analysis/")
    (Integral_diff formula-decl nil integral "analysis/")
    (sq_nz_pos judgement-tcc nil sq "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Integral_a_to_a formula-decl nil integral "analysis/")
    (Integral const-decl "real" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integrable? const-decl "bool" integral_def "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (deriv_const_fun formula-decl nil derivatives "analysis/"))
   shostak))
 (ln_estimate_scaf11 0
  (ln_estimate_scaf11-3 nil 3352452118
   ("" (skosimp)
    (("" (lemma "ln_estimate_scaf2" ("x" "px!1" "n" "n!1"))
      (("" (name-replace "F" "LAMBDA (t: posreal): (1 - t) ^ n!1 / t")
        (("" (lemma "id_fun_continuous[posreal]")
          (("" (lemma "const_fun_continuous[posreal]" ("u" "1"))
            (("" (expand "I")
              (("" (expand "const_fun")
                ((""
                  (lemma "diff_fun_continuous[posreal]"
                   ("h1" "LAMBDA (x: posreal): 1" "h2"
                    "LAMBDA (x: posreal): x"))
                  (("1" (expand "-")
                    (("1"
                      (case "forall (n:nat): continuous?(LAMBDA (x:posreal): (1-x)^n)")
                      (("1" (inst - "n!1")
                        (("1" (hide -2 -3 -4)
                          (("1"
                            (lemma "continuous_Integrable?[posreal]"
                             ("a" "1" "b" "px!1" "f"
                              "LAMBDA (x: posreal): (1 - x) ^ n!1"))
                            (("1" (split -1)
                              (("1"
                                (case
                                 "Integral(1, px!1, LAMBDA (x: posreal): (1 - x) ^ n!1) = -(1-px!1)^(n!1+1)/(n!1+1)")
                                (("1"
                                  (lemma
                                   "Integral_scal[posreal]"
                                   ("a"
                                    "1"
                                    "b"
                                    "px!1"
                                    "f"
                                    "LAMBDA (x: posreal): (1 - x) ^ n!1"
                                    "D"
                                    "1/px!1"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "*" (-1 -2))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3 -2)
                                            (("1"
                                              (name-replace
                                               "G"
                                               "LAMBDA (x_1: posreal): 1 / px!1 * (1 - x_1) ^ n!1")
                                              (("1"
                                                (case
                                                 "abs(Integral(1, px!1, F)) <= -Integral(1, px!1, G)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -3 -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (name-replace
                                                         "DRL100"
                                                         "(1 - px!1) ^ (1 + n!1)")
                                                        (("1"
                                                          (rewrite
                                                           "div_times"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (case
                                                     "forall (x:posreal): x < 1 => G(x) > 0")
                                                    (("1"
                                                      (case
                                                       "FORALL (x: posreal): x < 1 => F(x) > 0")
                                                      (("1"
                                                        (case
                                                         "FORALL (x: posreal): px!1 < x & x < 1 => F(x) < G(x)")
                                                        (("1"
                                                          (lemma
                                                           "Integral_rev[posreal]"
                                                           ("a"
                                                            "1"
                                                            "b"
                                                            "px!1"
                                                            "f"
                                                            "F"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (lemma
                                                                 "Integral_ge_0_open[posreal]"
                                                                 ("a"
                                                                  "px!1"
                                                                  "b"
                                                                  "1"
                                                                  "f"
                                                                  "F"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "abs"
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "Integral(1, px!1, F)=0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -9
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "div_times"
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "expt_pos"
                                                                                   ("px"
                                                                                    "1-px!1"
                                                                                    "i"
                                                                                    "1+n!1"))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "posreal_times_posreal_is_posreal"
                                                                                     ("px"
                                                                                      "n!1+1"
                                                                                      "py"
                                                                                      "px!1"))
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "posreal_div_posreal_is_posreal"
                                                                                       ("px"
                                                                                        "(1 - px!1) ^ (1 + n!1)"
                                                                                        "py"
                                                                                        "(n!1+1)*px!1"))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "Integral_diff[posreal]"
                                                                               ("a"
                                                                                "px!1"
                                                                                "b"
                                                                                "1"
                                                                                "f"
                                                                                "G"
                                                                                "g"
                                                                                "F"))
                                                                              (("2"
                                                                                (lemma
                                                                                 "Integral_rev[posreal]"
                                                                                 ("a"
                                                                                  "1"
                                                                                  "b"
                                                                                  "px!1"
                                                                                  "f"
                                                                                  "G"))
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "Integral_ge_0_open[posreal]"
                                                                                           ("a"
                                                                                            "px!1"
                                                                                            "b"
                                                                                            "1"
                                                                                            "f"
                                                                                            "LAMBDA (x: posreal): G(x) - F(x)"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2
                                                                                               3)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -12
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "x!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-9 1))
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (expand
                                                               "F")
                                                              (("2"
                                                                (expand
                                                                 "G")
                                                                (("2"
                                                                  (lemma
                                                                   "both_sides_times_pos_lt1"
                                                                   ("pz"
                                                                    "(1 - x!1) ^ n!1"
                                                                    "x"
                                                                    "1/x!1"
                                                                    "y"
                                                                    "1/px!1"))
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_mult_pos_lt1"
                                                                         1)
                                                                        (("1"
                                                                          (lemma
                                                                           "div_mult_pos_lt2"
                                                                           ("py"
                                                                            "px!1"
                                                                            "z"
                                                                            "x!1"
                                                                            "x"
                                                                            "1"))
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "expt_pos"
                                                                     ("px"
                                                                      "1-x!1"
                                                                      "i"
                                                                      "n!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-8 1))
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "F")
                                                            (("2"
                                                              (typepred
                                                               "x!1")
                                                              (("2"
                                                                (lemma
                                                                 "expt_pos"
                                                                 ("px"
                                                                  "1-x!1"
                                                                  "i"
                                                                  "n!1"))
                                                                (("1"
                                                                  (rewrite
                                                                   "div_mult_pos_gt1"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand "G")
                                                          (("2"
                                                            (lemma
                                                             "div_mult_pos_gt1")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "px!1"
                                                               "0"
                                                               "(1 - x!1) ^ n!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "expt_pos"
                                                                     ("px"
                                                                      "1-x!1"
                                                                      "i"
                                                                      "n!1"))
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -3 2)
                                  (("2"
                                    (lemma
                                     "const_derivable_fun[posreal]"
                                     ("b" "1"))
                                    (("2"
                                      (lemma
                                       "deriv_const_fun[posreal]"
                                       ("b" "1"))
                                      (("2"
                                        (lemma
                                         "identity_derivable_fun[posreal]")
                                        (("2"
                                          (lemma
                                           "deriv_id_fun[posreal]")
                                          (("2"
                                            (expand "I")
                                            (("2"
                                              (lemma
                                               "diff_derivable_fun[posreal]"
                                               ("f1"
                                                "LAMBDA (x: posreal): 1"
                                                "f2"
                                                "LAMBDA (x: posreal): x"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "deriv_diff_fun[posreal]"
                                                   ("ff1"
                                                    "LAMBDA (x: posreal): 1"
                                                    "ff2"
                                                    "LAMBDA (x: posreal): x"))
                                                  (("2"
                                                    (replace -5)
                                                    (("2"
                                                      (replace -3)
                                                      (("2"
                                                        (expand "-")
                                                        (("2"
                                                          (lemma
                                                           "deriv_exp_fun[posreal]"
                                                           ("f"
                                                            "LAMBDA (x:posreal): 1 - x"
                                                            "n"
                                                            "n!1+1"))
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 (-1
                                                                  -2))
                                                                (("2"
                                                                  (replace
                                                                   -3)
                                                                  (("2"
                                                                    (lemma
                                                                     "fundamental3[posreal]"
                                                                     ("a"
                                                                      "1"
                                                                      "b"
                                                                      "px!1"
                                                                      "f"
                                                                      "LAMBDA (x: posreal): (1 - x) ^ n!1"
                                                                      "F"
                                                                      "(-1/(1 + n!1) * (LAMBDA (t: posreal): (1 - t) ^ (1+n!1)))"))
                                                                    (("2"
                                                                      (lemma
                                                                       "scal_derivable_fun[posreal]"
                                                                       ("b"
                                                                        "-1/(1+n!1)"
                                                                        "f"
                                                                        "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                                      (("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (lemma
                                                                             "deriv_scal_fun[posreal]"
                                                                             ("b"
                                                                              "-1/(1+n!1)"
                                                                              "ff"
                                                                              "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                                            (("1"
                                                                              (replace
                                                                               -5
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -13)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "extensionality"
                                                                                     ("f"
                                                                                      "(-1 / (1 + n!1) *
                                                      (((1 + n!1) * (LAMBDA (t: posreal): (1 - t) ^ n!1)) *
                                                        (LAMBDA (x_1: posreal): -1)))"
                                                                                      "g"
                                                                                      "LAMBDA (x: posreal): (1 - x) ^ n!1"))
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         -4)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4
                                                                                             1)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-15
                                                                                                1))
                                                                                              (("1"
                                                                                                (simplify
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "*")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "^"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "expt")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "div_cancel1"
                                                                                               ("n0z"
                                                                                                "-1-n!1"
                                                                                                "x"
                                                                                                "(1-x!1)^n!1"))
                                                                                              (("2"
                                                                                                (case-replace
                                                                                                 ("-1 / (1 + n!1) = 1/(-1-n!1)"))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (propax) nil nil))
                                nil)
                               ("2"
                                (hide 2 -2)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "continuous?" -1)
                                    (("2" (inst - "x!1") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand "not_one_element?")
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (inst + "x!1+1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert)
                              (("3"
                                (expand "connected?")
                                (("3"
                                  (skosimp*)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 2 -5)
                        (("2" (induct "n")
                          (("1"
                            (lemma "extensionality"
                             ("f" "LAMBDA (x: posreal): (1 - x) ^ 0"
                              "g" "LAMBDA (x: posreal): 1"))
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (expand "expt")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2"
                              (lemma "prod_fun_continuous[posreal]"
                               ("h1"
                                "LAMBDA (x: posreal): (1 - x) ^ j!1"
                                "h2"
                                "LAMBDA (x: posreal): 1 - x"))
                              (("1"
                                (lemma
                                 "extensionality"
                                 ("f"
                                  "(LAMBDA (x: posreal): (1 - x) ^ j!1) *
                                        (LAMBDA (x: posreal): 1 - x)"
                                  "g"
                                  "LAMBDA (x: posreal): (1 - x) ^ (j!1 + 1)"))
                                (("1"
                                  (split -1)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "*")
                                        (("2"
                                          (expand "^")
                                          (("2"
                                            (expand "expt" 1 3)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ln_estimate_scaf2 formula-decl nil ln_exp_series_alt nil)
    (id_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (I const-decl "(bijective?[T, T])" identity nil)
    (diff_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous? const-decl "bool" continuous_functions "analysis/")
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    (deriv_const_fun formula-decl nil derivatives "analysis/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (diff_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_diff_fun formula-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (nat_exp application-judgement "nat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (expt def-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (div_cancel1 formula-decl nil real_props nil)
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (extensionality formula-decl nil functions nil)
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (fundamental3 formula-decl nil fundamental_theorem "analysis/")
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nprat_div_posrat_is_nprat application-judgement "nprat" rationals
     nil)
    (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Integral_scal formula-decl nil integral "analysis/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (F skolem-const-decl "[posreal -> real]" ln_exp_series_alt nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (G skolem-const-decl "[posreal -> real]" ln_exp_series_alt nil)
    (Integral_rev formula-decl nil integral "analysis/")
    (expt_pos formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (Integral_diff formula-decl nil integral "analysis/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Open_interval type-eq-decl nil intervals_real "reals/")
    (Integral_ge_0_open formula-decl nil integral "analysis/")
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_times formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Integral const-decl "real" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integrable? const-decl "bool" integral_def "analysis/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Closed_interval type-eq-decl nil intervals_real "reals/")
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (continuous_Integrable? formula-decl nil integral "analysis/")
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (prod_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (const_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (ln_estimate_scaf11-2 nil 3322389206
   ("" (skosimp)
    (("" (lemma "ln_estimate_scaf2" ("x" "px!1" "n" "n!1"))
      (("" (name-replace "F" "LAMBDA (t: posreal): (1 - t) ^ n!1 / t")
        (("" (lemma "id_fun_continuous[posreal]")
          (("" (lemma "const_fun_continuous[posreal]" ("u" "1"))
            (("" (expand "I")
              (("" (expand "const_fun")
                ((""
                  (lemma "diff_fun_continuous"
                   ("h1" "LAMBDA (x: posreal): 1" "h2"
                    "LAMBDA (x: posreal): x"))
                  (("1" (expand "-")
                    (("1"
                      (case "forall (n:nat): continuous?(LAMBDA (x:posreal): (1-x)^n)")
                      (("1" (inst - "n!1")
                        (("1" (hide -2 -3 -4)
                          (("1"
                            (lemma "continuous_Integrable?"
                             ("a" "1" "b" "px!1" "f"
                              "LAMBDA (x: posreal): (1 - x) ^ n!1"))
                            (("1" (split -1)
                              (("1"
                                (case
                                 "Integral(1, px!1, LAMBDA (x: posreal): (1 - x) ^ n!1) = -(1-px!1)^(n!1+1)/(n!1+1)")
                                (("1"
                                  (lemma
                                   "Integral_scal[posreal]"
                                   ("a"
                                    "1"
                                    "b"
                                    "px!1"
                                    "f"
                                    "LAMBDA (x: posreal): (1 - x) ^ n!1"
                                    "D"
                                    "1/px!1"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "*" (-1 -2))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3 -2)
                                            (("1"
                                              (name-replace
                                               "G"
                                               "LAMBDA (x_1: posreal): 1 / px!1 * (1 - x_1) ^ n!1")
                                              (("1"
                                                (case
                                                 "abs(Integral(1, px!1, F)) <= -Integral(1, px!1, G)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -3 -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (name-replace
                                                         "DRL100"
                                                         "(1 - px!1) ^ (1 + n!1)")
                                                        (("1"
                                                          (rewrite
                                                           "div_times"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (case
                                                     "forall (x:posreal): x < 1 => G(x) > 0")
                                                    (("1"
                                                      (case
                                                       "FORALL (x: posreal): x < 1 => F(x) > 0")
                                                      (("1"
                                                        (case
                                                         "FORALL (x: posreal): px!1 < x & x < 1 => F(x) < G(x)")
                                                        (("1"
                                                          (lemma
                                                           "Integral_rev"
                                                           ("a"
                                                            "1"
                                                            "b"
                                                            "px!1"
                                                            "f"
                                                            "F"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (lemma
                                                                 "Integral_ge_0_open"
                                                                 ("a"
                                                                  "px!1"
                                                                  "b"
                                                                  "1"
                                                                  "f"
                                                                  "F"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "abs"
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "Integral(1, px!1, F)=0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -9
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "div_times"
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "expt_pos"
                                                                                   ("px"
                                                                                    "1-px!1"
                                                                                    "i"
                                                                                    "1+n!1"))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "posreal_times_posreal_is_posreal"
                                                                                     ("px"
                                                                                      "n!1+1"
                                                                                      "py"
                                                                                      "px!1"))
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "posreal_div_posreal_is_posreal"
                                                                                       ("px"
                                                                                        "(1 - px!1) ^ (1 + n!1)"
                                                                                        "py"
                                                                                        "(n!1+1)*px!1"))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "Integral_diff"
                                                                               ("a"
                                                                                "px!1"
                                                                                "b"
                                                                                "1"
                                                                                "f"
                                                                                "G"
                                                                                "g"
                                                                                "F"))
                                                                              (("2"
                                                                                (lemma
                                                                                 "Integral_rev"
                                                                                 ("a"
                                                                                  "1"
                                                                                  "b"
                                                                                  "px!1"
                                                                                  "f"
                                                                                  "G"))
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "Integral_ge_0_open"
                                                                                           ("a"
                                                                                            "px!1"
                                                                                            "b"
                                                                                            "1"
                                                                                            "f"
                                                                                            "LAMBDA (x: posreal): G(x) - F(x)"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2
                                                                                               3)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -12
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "x!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-9 1))
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (expand
                                                               "F")
                                                              (("2"
                                                                (expand
                                                                 "G")
                                                                (("2"
                                                                  (lemma
                                                                   "both_sides_times_pos_lt1"
                                                                   ("pz"
                                                                    "(1 - x!1) ^ n!1"
                                                                    "x"
                                                                    "1/x!1"
                                                                    "y"
                                                                    "1/px!1"))
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_mult_pos_lt1"
                                                                         1)
                                                                        (("1"
                                                                          (lemma
                                                                           "div_mult_pos_lt2"
                                                                           ("py"
                                                                            "px!1"
                                                                            "z"
                                                                            "x!1"
                                                                            "x"
                                                                            "1"))
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "expt_pos"
                                                                     ("px"
                                                                      "1-x!1"
                                                                      "i"
                                                                      "n!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-8 1))
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "F")
                                                            (("2"
                                                              (typepred
                                                               "x!1")
                                                              (("2"
                                                                (lemma
                                                                 "expt_pos"
                                                                 ("px"
                                                                  "1-x!1"
                                                                  "i"
                                                                  "n!1"))
                                                                (("1"
                                                                  (rewrite
                                                                   "div_mult_pos_gt1"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand "G")
                                                          (("2"
                                                            (lemma
                                                             "div_mult_pos_gt1")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "px!1"
                                                               "0"
                                                               "(1 - x!1) ^ n!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "expt_pos"
                                                                     ("px"
                                                                      "1-x!1"
                                                                      "i"
                                                                      "n!1"))
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst + "x!1*2")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (skosimp)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -3 2)
                                  (("2"
                                    (lemma
                                     "const_derivable_fun[posreal]"
                                     ("b" "1"))
                                    (("2"
                                      (lemma
                                       "deriv_const_fun[posreal]"
                                       ("b" "1"))
                                      (("2"
                                        (lemma
                                         "identity_derivable_fun[posreal]")
                                        (("2"
                                          (lemma
                                           "deriv_id_fun[posreal]")
                                          (("2"
                                            (expand "I")
                                            (("2"
                                              (expand "const_fun")
                                              (("2"
                                                (lemma
                                                 "diff_derivable_fun"
                                                 ("f1"
                                                  "LAMBDA (x: posreal): 1"
                                                  "f2"
                                                  "LAMBDA (x: posreal): x"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "deriv_diff_fun"
                                                     ("ff1"
                                                      "LAMBDA (x: posreal): 1"
                                                      "ff2"
                                                      "LAMBDA (x: posreal): x"))
                                                    (("2"
                                                      (replace -5)
                                                      (("2"
                                                        (replace -3)
                                                        (("2"
                                                          (expand "-")
                                                          (("2"
                                                            (lemma
                                                             "deriv_exp_fun"
                                                             ("f"
                                                              "LAMBDA (x:posreal): 1 - x"
                                                              "n"
                                                              "n!1+1"))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   (-1
                                                                    -2))
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (lemma
                                                                       "fundamental3[posreal]"
                                                                       ("a"
                                                                        "1"
                                                                        "b"
                                                                        "px!1"
                                                                        "f"
                                                                        "LAMBDA (x: posreal): (1 - x) ^ n!1"
                                                                        "F"
                                                                        "(-1/(1 + n!1) * (LAMBDA (t: posreal): (1 - t) ^ (1+n!1)))"))
                                                                      (("1"
                                                                        (lemma
                                                                         "scal_derivable_fun"
                                                                         ("b"
                                                                          "-1/(1+n!1)"
                                                                          "f"
                                                                          "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "deriv_scal_fun"
                                                                               ("b"
                                                                                "-1/(1+n!1)"
                                                                                "ff"
                                                                                "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                                              (("1"
                                                                                (replace
                                                                                 -5
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -13)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "extensionality"
                                                                                       ("f"
                                                                                        "(-1 / (1 + n!1) *
                                       (((1 + n!1) * (LAMBDA (t: posreal): (1 - t) ^ n!1)) *
                                         (LAMBDA (x_1: posreal): -1)))"
                                                                                        "g"
                                                                                        "LAMBDA (x: posreal): (1 - x) ^ n!1"))
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -4)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4
                                                                                               1)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-15
                                                                                                  1))
                                                                                                (("1"
                                                                                                  (simplify
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "^"
                                                                                                       1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "expt")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "*")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "div_cancel1"
                                                                                                 ("n0z"
                                                                                                  "-1-n!1"
                                                                                                  "x"
                                                                                                  "(1-x!1)^n!1"))
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   ("-1 / (1 + n!1) = 1/(-1-n!1)"))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "2*x!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (propax) nil nil))
                                nil)
                               ("2"
                                (hide 2 -2)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "continuous?" -1)
                                    (("2" (inst - "x!1") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 2 -5)
                        (("2" (induct "n")
                          (("1"
                            (lemma "extensionality"
                             ("f" "LAMBDA (x: posreal): (1 - x) ^ 0"
                              "g" "LAMBDA (x: posreal): 1"))
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (expand "expt")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2"
                              (lemma "prod_fun_continuous"
                               ("h1"
                                "LAMBDA (x: posreal): (1 - x) ^ j!1"
                                "h2"
                                "LAMBDA (x: posreal): 1 - x"))
                              (("1"
                                (lemma
                                 "extensionality"
                                 ("f"
                                  "(LAMBDA (x: posreal): (1 - x) ^ j!1) *
                             (LAMBDA (x: posreal): 1 - x)"
                                  "g"
                                  "LAMBDA (x: posreal): (1 - x) ^ (j!1 + 1)"))
                                (("1"
                                  (split -1)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "*")
                                        (("2"
                                          (expand "^")
                                          (("2"
                                            (expand "expt" 1 3)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (diff_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    (deriv_const_fun formula-decl nil derivatives "analysis/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (fundamental3 formula-decl nil fundamental_theorem "analysis/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_diff_fun formula-decl nil derivatives "analysis/")
    (diff_derivable_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (Integral_scal formula-decl nil integral "analysis/")
    (Integral_rev formula-decl nil integral "analysis/")
    (Integral_diff formula-decl nil integral "analysis/")
    (Integral_ge_0_open formula-decl nil integral "analysis/")
    (Integral const-decl "real" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integrable? const-decl "bool" integral_def "analysis/")
    (continuous_Integrable? formula-decl nil integral "analysis/")
    (prod_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (const_fun_continuous judgement-tcc nil continuous_functions
     "analysis/"))
   nil)
  (ln_estimate_scaf11-1 nil 3309686518
   ("" (skosimp)
    (("" (lemma "ln_estimate_scaf2" ("x" "px!1" "n" "n!1"))
      (("" (name-replace "F" "LAMBDA (t: posreal): (1 - t) ^ n!1 / t")
        (("" (lemma "id_fun_continuous[posreal]")
          (("" (lemma "const_fun_continuous[posreal]" ("u" "1"))
            (("" (expand "I")
              (("" (expand "const_fun")
                ((""
                  (lemma "diff_fun_continuous"
                   ("h1" "LAMBDA (x: posreal): 1" "h2"
                    "LAMBDA (x: posreal): x"))
                  (("1" (expand "-")
                    (("1"
                      (case "forall (n:nat): continuous?(LAMBDA (x:posreal): (1-x)^n)")
                      (("1" (inst - "n!1")
                        (("1" (hide -2 -3 -4)
                          (("1"
                            (lemma "continuous_Integrable?"
                             ("a" "1" "b" "px!1" "f"
                              "LAMBDA (x: posreal): (1 - x) ^ n!1"))
                            (("1" (split -1)
                              (("1"
                                (case
                                 "Integral(1, px!1, LAMBDA (x: posreal): (1 - x) ^ n!1) = -(1-px!1)^(n!1+1)/(n!1+1)")
                                (("1"
                                  (lemma
                                   "Integral_scal[posreal]"
                                   ("a"
                                    "1"
                                    "b"
                                    "px!1"
                                    "f"
                                    "LAMBDA (x: posreal): (1 - x) ^ n!1"
                                    "D"
                                    "1/px!1"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "*" (-1 -2))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3 -2)
                                            (("1"
                                              (name-replace
                                               "G"
                                               "LAMBDA (x_1: posreal): 1 / px!1 * (1 - x_1) ^ n!1")
                                              (("1"
                                                (case
                                                 "abs(Integral(1, px!1, F)) <= -Integral(1, px!1, G)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -3 -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (name-replace
                                                         "DRL100"
                                                         "(1 - px!1) ^ (1 + n!1)")
                                                        (("1"
                                                          (rewrite
                                                           "div_times"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (case
                                                     "forall (x:posreal): x < 1 => G(x) > 0")
                                                    (("1"
                                                      (case
                                                       "FORALL (x: posreal): x < 1 => F(x) > 0")
                                                      (("1"
                                                        (case
                                                         "FORALL (x: posreal): px!1 < x & x < 1 => F(x) < G(x)")
                                                        (("1"
                                                          (lemma
                                                           "Integral_rev"
                                                           ("a"
                                                            "1"
                                                            "b"
                                                            "px!1"
                                                            "f"
                                                            "F"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (lemma
                                                                 "Integral_ge_0"
                                                                 ("a"
                                                                  "px!1"
                                                                  "b"
                                                                  "1"
                                                                  "f"
                                                                  "F"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "abs"
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "Integral(1, px!1, F)=0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -9
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "div_times"
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "expt_pos"
                                                                                   ("px"
                                                                                    "1-px!1"
                                                                                    "i"
                                                                                    "1+n!1"))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "posreal_times_posreal_is_posreal"
                                                                                     ("px"
                                                                                      "n!1+1"
                                                                                      "py"
                                                                                      "px!1"))
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "posreal_div_posreal_is_posreal"
                                                                                       ("px"
                                                                                        "(1 - px!1) ^ (1 + n!1)"
                                                                                        "py"
                                                                                        "(n!1+1)*px!1"))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "Integral_diff"
                                                                               ("a"
                                                                                "px!1"
                                                                                "b"
                                                                                "1"
                                                                                "f"
                                                                                "G"
                                                                                "g"
                                                                                "F"))
                                                                              (("2"
                                                                                (lemma
                                                                                 "Integral_rev"
                                                                                 ("a"
                                                                                  "1"
                                                                                  "b"
                                                                                  "px!1"
                                                                                  "f"
                                                                                  "G"))
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "Integral_ge_0"
                                                                                           ("a"
                                                                                            "px!1"
                                                                                            "b"
                                                                                            "1"
                                                                                            "f"
                                                                                            "LAMBDA (x: posreal): G(x) - F(x)"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2
                                                                                               3)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -12
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-9 1))
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (expand
                                                               "F")
                                                              (("2"
                                                                (expand
                                                                 "G")
                                                                (("2"
                                                                  (lemma
                                                                   "both_sides_times_pos_lt1"
                                                                   ("pz"
                                                                    "(1 - x!1) ^ n!1"
                                                                    "x"
                                                                    "1/x!1"
                                                                    "y"
                                                                    "1/px!1"))
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_mult_pos_lt1"
                                                                         1)
                                                                        (("1"
                                                                          (lemma
                                                                           "div_mult_pos_lt2"
                                                                           ("py"
                                                                            "px!1"
                                                                            "z"
                                                                            "x!1"
                                                                            "x"
                                                                            "1"))
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "expt_pos"
                                                                     ("px"
                                                                      "1-x!1"
                                                                      "i"
                                                                      "n!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-8 1))
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "F")
                                                            (("2"
                                                              (typepred
                                                               "x!1")
                                                              (("2"
                                                                (lemma
                                                                 "expt_pos"
                                                                 ("px"
                                                                  "1-x!1"
                                                                  "i"
                                                                  "n!1"))
                                                                (("1"
                                                                  (rewrite
                                                                   "div_mult_pos_gt1"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand "G")
                                                          (("2"
                                                            (lemma
                                                             "div_mult_pos_gt1")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "px!1"
                                                               "0"
                                                               "(1 - x!1) ^ n!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "expt_pos"
                                                                     ("px"
                                                                      "1-x!1"
                                                                      "i"
                                                                      "n!1"))
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst + "x!1*2")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (skosimp)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -3 2)
                                  (("2"
                                    (lemma
                                     "const_derivable_fun[posreal]"
                                     ("b" "1"))
                                    (("2"
                                      (lemma
                                       "deriv_const_fun[posreal]"
                                       ("b" "1"))
                                      (("2"
                                        (lemma
                                         "identity_derivable_fun[posreal]")
                                        (("2"
                                          (lemma
                                           "deriv_id_fun[posreal]")
                                          (("2"
                                            (expand "I")
                                            (("2"
                                              (expand "const_fun")
                                              (("2"
                                                (lemma
                                                 "diff_derivable_fun"
                                                 ("f1"
                                                  "LAMBDA (x: posreal): 1"
                                                  "f2"
                                                  "LAMBDA (x: posreal): x"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "deriv_diff_fun"
                                                     ("ff1"
                                                      "LAMBDA (x: posreal): 1"
                                                      "ff2"
                                                      "LAMBDA (x: posreal): x"))
                                                    (("2"
                                                      (replace -5)
                                                      (("2"
                                                        (replace -3)
                                                        (("2"
                                                          (expand "-")
                                                          (("2"
                                                            (lemma
                                                             "deriv_exp_fun"
                                                             ("f"
                                                              "LAMBDA (x:posreal): 1 - x"
                                                              "n"
                                                              "n!1+1"))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   (-1
                                                                    -2))
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (lemma
                                                                       "fundamental3[posreal]"
                                                                       ("a"
                                                                        "1"
                                                                        "b"
                                                                        "px!1"
                                                                        "f"
                                                                        "LAMBDA (x: posreal): (1 - x) ^ n!1"
                                                                        "F"
                                                                        "(-1/(1 + n!1) * (LAMBDA (t: posreal): (1 - t) ^ (1+n!1)))"))
                                                                      (("1"
                                                                        (lemma
                                                                         "scal_derivable_fun"
                                                                         ("b"
                                                                          "-1/(1+n!1)"
                                                                          "f"
                                                                          "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "deriv_scal_fun"
                                                                               ("b"
                                                                                "-1/(1+n!1)"
                                                                                "ff"
                                                                                "LAMBDA (t: posreal): (1 - t) ^ (1 + n!1)"))
                                                                              (("1"
                                                                                (replace
                                                                                 -5
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -13)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "extensionality"
                                                                                       ("f"
                                                                                        "(-1 / (1 + n!1) *
                        (((1 + n!1) * (LAMBDA (t: posreal): (1 - t) ^ n!1)) *
                          (LAMBDA (x_1: posreal): -1)))"
                                                                                        "g"
                                                                                        "LAMBDA (x: posreal): (1 - x) ^ n!1"))
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -4)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4
                                                                                               1)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-15
                                                                                                  1))
                                                                                                (("1"
                                                                                                  (simplify
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "^"
                                                                                                       1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "expt")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "*")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "div_cancel1"
                                                                                                 ("n0z"
                                                                                                  "-1-n!1"
                                                                                                  "x"
                                                                                                  "(1-x!1)^n!1"))
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   ("-1 / (1 + n!1) = 1/(-1-n!1)"))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "2*x!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (propax) nil nil))
                                nil)
                               ("2"
                                (hide 2 -2)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "continuous?" -1)
                                    (("2" (inst - "x!1") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 2 -5)
                        (("2" (induct "n")
                          (("1"
                            (lemma "extensionality"
                             ("f" "LAMBDA (x: posreal): (1 - x) ^ 0"
                              "g" "LAMBDA (x: posreal): 1"))
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (expand "expt")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2"
                              (lemma "prod_fun_continuous"
                               ("h1"
                                "LAMBDA (x: posreal): (1 - x) ^ j!1"
                                "h2"
                                "LAMBDA (x: posreal): 1 - x"))
                              (("1"
                                (lemma
                                 "extensionality"
                                 ("f"
                                  "(LAMBDA (x: posreal): (1 - x) ^ j!1) *
                  (LAMBDA (x: posreal): 1 - x)"
                                  "g"
                                  "LAMBDA (x: posreal): (1 - x) ^ (j!1 + 1)"))
                                (("1"
                                  (split -1)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "*")
                                        (("2"
                                          (expand "^")
                                          (("2"
                                            (expand "expt" 1 3)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (diff_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    (deriv_const_fun formula-decl nil derivatives "analysis/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (fundamental3 formula-decl nil fundamental_theorem "analysis/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_diff_fun formula-decl nil derivatives "analysis/")
    (diff_derivable_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (Integral_scal formula-decl nil integral "analysis/")
    (Integral_rev formula-decl nil integral "analysis/")
    (Integral_diff formula-decl nil integral "analysis/")
    (Integral const-decl "real" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integrable? const-decl "bool" integral_def "analysis/")
    (continuous_Integrable? formula-decl nil integral "analysis/")
    (prod_fun_continuous judgement-tcc nil continuous_functions
     "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (const_fun_continuous judgement-tcc nil continuous_functions
     "analysis/"))
   shostak))
 (ln_estimate_bnd_TCC1 0
  (ln_estimate_bnd_TCC1-1 nil 3322390165 ("" (subtype-tcc) nil nil) nil
   nil
   (ln_estimate_bnd subtype "(number_fields.+)(1, ln_exp_series_alt.z)"
    "posreal")))
 (ln_estimate_bnd_TCC2 0
  (ln_estimate_bnd_TCC2-1 nil 3322390165 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (ln_estimate_bnd subtype
    "((number_fields.+)(ln_exp_series_alt.n, 1))"
    "{i: integers.int | booleans.OR(real_defs.abs(ln_exp_series_alt.z) /= 0, reals.>=(i, 0))}")))
 (ln_estimate_bnd_TCC3 0
  (ln_estimate_bnd_TCC3-1 nil 3322390165
   ("" (skosimp*)
    (("" (typepred "n!1")
      (("" (name "NP1" "n!1+1")
        (("" (replace -1)
          (("" (lift-if)
            (("" (name "zP1" "z!1+1")
              (("" (replace -1)
                (("" (ground) (("" (mult-cases -2) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_gtm1_le1 nonempty-type-eq-decl nil ln_exp_series_alt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_times3 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil))
   nil
   (ln_estimate_bnd subtype
    "(number_fields.*(IF reals.<(ln_exp_series_alt.z, 0) THEN (number_fields.+)(1, ln_exp_series_alt.z) ELSE 1 ENDIF, ((number_fields.+)(ln_exp_series_alt.n, 1))))"
    "nznum")))
 (ln_estimate_bnd 0
  (ln_estimate_bnd-1 nil 3322390178
   ("" (skosimp)
    (("" (lemma "ln_estimate_scaf9" ("px" "1+z!1" "n" "n!1"))
      (("" (replace -1)
        (("" (assert)
          (("" (hide -1)
            (("" (typepred "z!1")
              (("" (case "0 <=z!1")
                (("1" (hide -2)
                  (("1"
                    (lemma "ln_estimate_scaf10"
                     ("px" "1+z!1" "n" "n!1"))
                    (("1" (assert)
                      (("1" (expand "abs" 1 2) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (lemma "ln_estimate_scaf11" ("px" "1+z!1" "n" "n!1"))
                  (("2" (assert)
                    (("2" (expand "abs" 2 2) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gtm1_le1 nonempty-type-eq-decl nil ln_exp_series_alt nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ln_estimate_scaf9 formula-decl nil ln_exp_series_alt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ln_estimate_scaf11 formula-decl nil ln_exp_series_alt nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ln_estimate_scaf10 formula-decl nil ln_exp_series_alt nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (lnT_TCC1 0
  (lnT_TCC1-1 nil 3309361152 ("" (skosimp) (("" (assert) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak
   (lnT subtype "((number_fields.+)(ln_exp_series_alt.n, 1))"
    "{i: integers.int | booleans.OR(((number_fields.-)(ln_exp_series_alt.x)) /= 0, reals.>=(i, 0))}")))
 (lnT_TCC2 0
  (lnT_TCC2-1 nil 3309361152
   (""
    (case "forall (n:nat,x:real): -1 <= x & x <= 1 => -1 <= x^n & x^n <= 1")
    (("1" (skosimp)
      (("1" (case-replace "x!1=0")
        (("1" (expand "^" 1)
          (("1" (expand "expt" 1) (("1" (propax) nil nil)) nil)) nil)
         ("2" (case-replace "n!1=0")
          (("1" (rewrite "expt_x1") (("1" (assert) nil nil)) nil)
           ("2" (inst - "n!1+1" "-x!1")
            (("2" (assert)
              (("2" (flatten)
                (("2" (rewrite "div_mult_pos_lt2" 3)
                  (("2" (rewrite "div_mult_pos_le1" 3)
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skolem 1 ("_" "x"))
        (("2" (induct "n")
          (("1" (expand "^" 1)
            (("1" (expand "expt" 1) (("1" (propax) nil nil)) nil)) nil)
           ("2" (skosimp*)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "^")
                  (("2" (expand "expt" 1)
                    (("2" (lemma "trichotomy" ("x" "x"))
                      (("2" (split -1)
                        (("1"
                          (lemma "both_sides_times_pos_le1" ("pz" "x"))
                          (("1" (inst-cp - "-1" "expt(x, j!1)")
                            (("1" (inst - "expt(x, j!1)" "1")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (replace -1) (("2" (assert) nil nil))
                          nil)
                         ("3"
                          (lemma "both_sides_times_neg_le1" ("nz" "x"))
                          (("1" (inst-cp - "expt(x, j!1)" "-1")
                            (("1" (inst - "1" "expt(x, j!1)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (trichotomy formula-decl nil real_axioms nil)
    (both_sides_times_neg_le1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (real_gtm1_le1 nonempty-type-eq-decl nil ln_exp_series_alt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   shostak
   (lnT subtype
    "number_fields./((number_fields.-)(exponentiation.^(((number_fields.-)(ln_exp_series_alt.x)), ((number_fields.+)(ln_exp_series_alt.n, 1)))), ((number_fields.+)(ln_exp_series_alt.n, 1)))"
    "real_gtm1_le1")))
 (lnT_convergence 0
  (lnT_convergence-2 nil 3322390225
   ("" (skosimp)
    (("" (typepred "z!1")
      (("" (expand "convergence")
        (("" (skosimp*)
          ((""
            (case "forall (n:nat): ln_estimate(z!1, n+1) = series(lnT(z!1))(n)")
            (("1" (case "forall (n:nat): abs(z!1)^n <= 1")
              (("1" (lemma "ln_estimate_bnd" ("z" "z!1"))
                (("1"
                  (lemma "posreal_times_posreal_is_posreal"
                   ("px" "IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF" "py"
                    "epsilon!1"))
                  (("1"
                    (name "N"
                          "ceiling(1/(IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF*epsilon!1))")
                    (("1"
                      (lemma "ceiling_def"
                       ("x"
                        "1 / (IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF * epsilon!1)"))
                      (("1" (replace -2)
                        (("1" (flatten)
                          (("1"
                            (lemma "nonneg_ceiling_is_nat"
                             ("x"
                              "1 / (IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF * epsilon!1)"))
                            (("1" (replace -4)
                              (("1"
                                (inst + "N")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst -8 "i!1")
                                    (("1"
                                      (replace -8 1 rl)
                                      (("1"
                                        (inst -6 "i!1+1")
                                        (("1"
                                          (case-replace
                                           "abs(ln_estimate(z!1, i!1 + 1) - ln(1 + z!1)) = abs(ln(1 + z!1) - ln_estimate(z!1, i!1 + 1))")
                                          (("1"
                                            (case
                                             "abs(z!1) ^ (i!1 + 1 + 1) /
                         (IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF * (i!1 + 1 + 1)) < epsilon!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (name-replace
                                                 "DRL100"
                                                 "IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 -9 -7 -1)
                                              (("2"
                                                (name
                                                 "DRL101"
                                                 "IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (rewrite
                                                     "div_mult_pos_lt1"
                                                     1)
                                                    (("1"
                                                      (rewrite
                                                       "div_mult_pos_le1"
                                                       -3)
                                                      (("1"
                                                        (inst
                                                         -7
                                                         "2+i!1")
                                                        (("1"
                                                          (lemma
                                                           "both_sides_times_pos_lt1"
                                                           ("pz"
                                                            "DRL101 * epsilon!1"
                                                            "x"
                                                            "N"
                                                            "y"
                                                            "2+i!1"))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "posreal_times_posreal_is_posreal"
                                                         ("px"
                                                          "2+i!1"
                                                          "py"
                                                          "DRL101"))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "DRL101")
                                                            (("2"
                                                              (case-replace
                                                               "z!1<0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (lemma
                                                 "trich_lt"
                                                 ("x"
                                                  "ln_estimate(z!1, 1 + i!1)"
                                                  "y"
                                                  "ln(1 + z!1)"))
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-4 1))
                              (("2"
                                (rewrite "div_mult_pos_ge1" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "zero_times1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (expand ">=")
                                      (("2"
                                        (expand "<=")
                                        (("2"
                                          (expand ">")
                                          (("2"
                                            (replace -1 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "/=")
                      (("2" (replace -1 -2) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 -3 1))
                (("2" (induct "n")
                  (("1" (expand "^")
                    (("1" (expand "expt") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (expand "^")
                      (("2" (expand "expt" 1)
                        (("2"
                          (lemma "le_times_le_pos"
                           ("nnx" "abs(z!1)" "y" "1" "nnz"
                            "expt(abs(z!1), j!1)" "w" "1"))
                          (("2" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but (-2 -3 1))
                              (("2"
                                (expand "abs")
                                (("2"
                                  (case-replace "z!1<0")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "series")
                (("2" (expand "ln_estimate")
                  (("2" (induct "n")
                    (("1" (expand "sigma")
                      (("1" (expand "sigma")
                        (("1" (expand "lnT")
                          (("1" (expand "sigma")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "sigma" 1)
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2" (assert)
                              (("2"
                                (expand "lnT")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gtm1_le1 nonempty-type-eq-decl nil ln_exp_series_alt nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ceiling_def formula-decl nil floor_ceil nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (ln const-decl "real" ln_exp nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (DRL101 skolem-const-decl "real" ln_exp_series_alt nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (trich_lt formula-decl nil real_props nil)
    (N skolem-const-decl "{i |
   1 / (IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF * epsilon!1) <= i &
    i < 1 + 1 / (IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF * epsilon!1)}"
     ln_exp_series_alt nil)
    (epsilon!1 skolem-const-decl "posreal" ln_exp_series_alt nil)
    (z!1 skolem-const-decl "real_gtm1_le1" ln_exp_series_alt nil)
    (nonneg_ceiling_is_nat judgement-tcc nil floor_ceil nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ln_estimate_bnd formula-decl nil ln_exp_series_alt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (expt def-decl "real" exponentiation nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln_estimate const-decl "real" ln_exp_series_alt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (series const-decl "sequence[real]" series "series/")
    (lnT const-decl "real_gtm1_le1" ln_exp_series_alt nil)
    (convergence const-decl "bool" convergence_sequences "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (lnT_convergence-1 nil 3309406286
   ("" (skosimp)
    (("" (typepred "z!1")
      (("" (expand "convergence")
        (("" (skosimp*)
          ((""
            (case "forall (n:nat): ln_estimate(z!1, n+1) = series(lnT(z!1))(n)")
            (("1" (case "forall (n:nat): abs(z!1)^n <= 1")
              (("1" (lemma "ln_series" ("z" "z!1"))
                (("1"
                  (lemma "posreal_times_posreal_is_posreal"
                   ("px" "IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF" "py"
                    "epsilon!1"))
                  (("1"
                    (name "N"
                          "ceiling(1/(IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF*epsilon!1))")
                    (("1"
                      (lemma "ceiling_def"
                       ("x"
                        "1 / (IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF * epsilon!1)"))
                      (("1" (replace -2)
                        (("1" (flatten)
                          (("1"
                            (lemma "nonneg_ceiling_is_nat"
                             ("x"
                              "1 / (IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF * epsilon!1)"))
                            (("1" (replace -4)
                              (("1"
                                (inst + "N")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst -8 "i!1")
                                    (("1"
                                      (replace -8 1 rl)
                                      (("1"
                                        (inst -6 "i!1+1")
                                        (("1"
                                          (case-replace
                                           "abs(ln_estimate(z!1, i!1 + 1) - ln(1 + z!1)) = abs(ln(1 + z!1) - ln_estimate(z!1, i!1 + 1))")
                                          (("1"
                                            (case
                                             "abs(z!1) ^ (i!1 + 1 + 1) /
        (IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF * (i!1 + 1 + 1)) < epsilon!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (name-replace
                                                 "DRL100"
                                                 "IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 -9 -7 -1)
                                              (("2"
                                                (name
                                                 "DRL101"
                                                 "IF z!1 < 0 THEN 1 + z!1 ELSE 1 ENDIF")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (rewrite
                                                     "div_mult_pos_lt1"
                                                     1)
                                                    (("1"
                                                      (rewrite
                                                       "div_mult_pos_le1"
                                                       -3)
                                                      (("1"
                                                        (inst
                                                         -7
                                                         "2+i!1")
                                                        (("1"
                                                          (lemma
                                                           "both_sides_times_pos_lt1"
                                                           ("pz"
                                                            "DRL101 * epsilon!1"
                                                            "x"
                                                            "N"
                                                            "y"
                                                            "2+i!1"))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "posreal_times_posreal_is_posreal"
                                                         ("px"
                                                          "2+i!1"
                                                          "py"
                                                          "DRL101"))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "DRL101")
                                                            (("2"
                                                              (case-replace
                                                               "z!1<0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (lemma
                                                 "trich_lt"
                                                 ("x"
                                                  "ln_estimate(z!1, 1 + i!1)"
                                                  "y"
                                                  "ln(1 + z!1)"))
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-4 1))
                              (("2"
                                (rewrite "div_mult_pos_ge1" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "zero_times1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (expand ">=")
                                      (("2"
                                        (expand "<=")
                                        (("2"
                                          (expand ">")
                                          (("2"
                                            (replace -1 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "/=")
                      (("2" (replace -1 -2) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 -3 1))
                (("2" (induct "n")
                  (("1" (expand "^")
                    (("1" (expand "expt") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (expand "^")
                      (("2" (expand "expt" 1)
                        (("2"
                          (lemma "le_times_le_pos"
                           ("nnx" "abs(z!1)" "y" "1" "nnz"
                            "expt(abs(z!1), j!1)" "w" "1"))
                          (("2" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but (-2 -3 1))
                              (("2"
                                (expand "abs")
                                (("2"
                                  (case-replace "z!1<0")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "series")
                (("2" (expand "ln_estimate")
                  (("2" (induct "n")
                    (("1" (expand "sigma")
                      (("1" (expand "sigma")
                        (("1" (expand "lnT") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "sigma" 1)
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2" (assert)
                              (("2"
                                (expand "lnT")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma "reals/")
    (ln const-decl "real" ln_exp nil)
    (convergence const-decl "bool" convergence_sequences "analysis/"))
   shostak))
 (lnT_convergent 0
  (lnT_convergent-1 nil 3309363570
   ("" (skosimp)
    (("" (expand "convergent?")
      (("" (lemma "lnT_convergence" ("z" "z!1"))
        (("" (inst + "ln(1+z!1)") nil nil)) nil))
      nil))
    nil)
   ((convergent? const-decl "bool" convergence_sequences "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lnT_convergence formula-decl nil ln_exp_series_alt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_gtm1_le1 nonempty-type-eq-decl nil ln_exp_series_alt nil))
   shostak))
 (ln_series_def_TCC1 0
  (ln_series_def_TCC1-1 nil 3309361153
   ("" (skosimp)
    (("" (expand "conv_series?")
      (("" (assert)
        (("" (expand "convergent?")
          (("" (inst + "ln(1+z!1)")
            (("" (lemma "lnT_convergence" ("z" "z!1"))
              (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conv_series? const-decl "bool" series "series/")
    (convergent? const-decl "bool" convergence_sequences "analysis/")
    (lnT_convergence formula-decl nil ln_exp_series_alt nil)
    (real_gtm1_le1 nonempty-type-eq-decl nil ln_exp_series_alt nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ln const-decl "real" ln_exp nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (ln_series_def subtype "ln_exp_series_alt.lnT(ln_exp_series_alt.z)"
    "(series.conv_series?)")))
 (ln_series_def 0
  (ln_series_def-1 nil 3309405995
   ("" (skosimp)
    (("" (expand "inf_sum")
      (("" (lemma "lnT_convergence" ("z" "z!1"))
        (("" (rewrite "limit_equiv" -1)
          (("" (flatten) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((inf_sum const-decl "real" series "series/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (limit_equiv formula-decl nil convergence_ops "analysis/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (series const-decl "sequence[real]" series "series/")
    (lnT const-decl "real_gtm1_le1" ln_exp_series_alt nil)
    (lnT_convergence formula-decl nil ln_exp_series_alt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_gtm1_le1 nonempty-type-eq-decl nil ln_exp_series_alt nil))
   shostak))
 (ln_taylors_TCC1 0
  (ln_taylors_TCC1-1 nil 3270048072 ("" (assert) nil nil)
   ((conn_gt_m1 formula-decl nil ln_exp_series_alt nil)) shostak
   (ln_taylors assuming
    "analysis@taylors[{x: reals.real | reals.>(x, (number_fields.-)(1))}]"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (ln_taylors_TCC2 0
  (ln_taylors_TCC2-1 nil 3270048235
   ("" (skosimp*)
    (("" (assert)
      (("" (case "x!1=0")
        (("1" (inst + "1") (("1" (assert) nil nil)) nil)
         ("2" (inst + "0") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((noa_gt_m1 formula-decl nil ln_exp_series_alt nil)) shostak
   (ln_taylors assuming
    "analysis@taylors[{x: reals.real | reals.>(x, (number_fields.-)(1))}]"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (ln_taylors_TCC3 0
  (ln_taylors_TCC3-1 nil 3270063121
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (ln_taylors subtype "(number_fields.+)(ln_exp_series_alt.xgm1, 1)"
    "posreal")))
 (ln_taylors_TCC4 0
  (ln_taylors_TCC4-1 nil 3270063121
   ("" (skosimp*) (("" (typepred "c!1") (("" (assert) nil nil)) nil))
    nil)
   ((between type-eq-decl nil taylors "analysis/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak
   (ln_taylors subtype "(number_fields.-)(ln_exp_series_alt.c)"
    "nznum")))
 (ln_taylors_TCC5 0
  (ln_taylors_TCC5-1 nil 3270063121
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak
   (ln_taylors subtype "((number_fields.+)(ln_exp_series_alt.n, 1))"
    "{i: integers.int | booleans.OR((number_fields./(ln_exp_series_alt.xgm1, (number_fields.-)(ln_exp_series_alt.c))) /= 0, reals.>=(i, 0))}")))
 (ln_taylors 0
  (ln_taylors-1 nil 3270058061
   ("" (skosimp*)
    ((""
      (lemma "Taylors[posreal]"
       ("f" "ln" "n" "n!1" "bb" "xgm1!1+1" "aa" "1"))
      (("1" (lemma "nderiv_ln" ("n" "n!1+1"))
        (("1" (replace -1)
          (("1" (skosimp*)
            (("1" (inst + "c!1")
              (("1" (lemma "ln_nderiv" ("n" "n!1+1"))
                (("1" (simplify -1)
                  (("1" (replace -1 -3)
                    (("1" (simplify -3)
                      (("1" (rewrite "div_expt" 1)
                        (("1" (expand "ln_estimate" 1)
                          (("1"
                            (lemma "sigma_eq[nat]"
                             ("low" "0" "high" "n!1" "F"
                              "LAMBDA (nn:nat):
                        IF nn > n!1 THEN 0
                        ELSIF nn = 0 THEN ln(1)
                        ELSE nderiv(nn, ln)(1) * xgm1!1 ^ nn / factorial(nn)
                        ENDIF" "G" "LAMBDA (nn: nat):
                        IF nn = 0 THEN 0 ELSE -(-xgm1!1) ^ nn / nn ENDIF"))
                            (("1" (split -1)
                              (("1"
                                (replace -1 -4)
                                (("1"
                                  (name-replace
                                   "K1"
                                   "sigma(0, n!1,
                         LAMBDA (nn: nat):
                           IF nn = 0 THEN 0 ELSE -(-xgm1!1) ^ nn / nn ENDIF)")
                                  (("1"
                                    (replace -4 1)
                                    (("1"
                                      (hide-all-but 1)
                                      (("1"
                                        (typepred "c!1")
                                        (("1"
                                          (hide -1 -3 -4 -5)
                                          (("1"
                                            (expand "factorial" 1 2)
                                            (("1"
                                              (name-replace
                                               "K2"
                                               "factorial(n!1)")
                                              (("1"
                                                (lemma
                                                 "div_cancel1"
                                                 ("x"
                                                  "((-1/ (-c!1) ^ (1 + n!1)) * xgm1!1 ^ (1 + n!1)) / (1+n!1)"
                                                  "n0z"
                                                  "K2"))
                                                (("1"
                                                  (rewrite
                                                   "div_div2"
                                                   -1)
                                                  (("1"
                                                    (case
                                                     "K2 * (((-1 / (-c!1) ^ (1 + n!1)) * xgm1!1 ^ (1 + n!1)) / (K2 + K2 * n!1)) = ((-K2 / (-c!1) ^ (1 + n!1)) * xgm1!1 ^ (1 + n!1)) / (K2 + K2 * n!1)")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (hide -1 -2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (name-replace
                                                         "K3"
                                                         "K2 + K2 * n!1")
                                                        (("2"
                                                          (name-replace
                                                           "K4"
                                                           "xgm1!1 ^ (1 + n!1)")
                                                          (("2"
                                                            (name-replace
                                                             "K5"
                                                             "(-c!1) ^ (1 + n!1)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (typepred "n!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case "n!2=0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "ln_nderiv"
                                             ("n" "n!2"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -1 2)
                                                (("2"
                                                  (simplify 2)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (lemma
                                                       "cross_mult"
                                                       ("x"
                                                        "-factorial(n!2 - 1) / (-1) ^ n!2 * xgm1!1 ^ n!2"
                                                        "n0x"
                                                        "factorial(n!2)"
                                                        "y"
                                                        "-(-xgm1!1) ^ n!2"
                                                        "n0y"
                                                        "n!2"))
                                                      (("2"
                                                        (replace -1 2)
                                                        (("2"
                                                          (expand
                                                           "factorial"
                                                           2
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "xgm1!1=0")
                                                              (("1"
                                                                (expand
                                                                 "^"
                                                                 2
                                                                 3)
                                                                (("1"
                                                                  (expand
                                                                   "^"
                                                                   2
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "expt")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "div_expt"
                                                                 ("n0x"
                                                                  "xgm1!1"
                                                                  "n0y"
                                                                  "-1"
                                                                  "i"
                                                                  "n!2"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*) nil nil)
                             ("3" (skosimp*)
                              (("3"
                                (assert)
                                (("3" (rewrite "nderiv_ln") nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "/=" 1)
                          (("2" (replace -1)
                            (("2" (rewrite "ln_1")
                              (("2"
                                (expand "^" 1)
                                (("2"
                                  (expand "expt" 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "zero_times1")
                                      (("2"
                                        (simplify 1)
                                        (("2"
                                          (expand "ln_estimate")
                                          (("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (lemma
                                               "sigma_zero[nat]"
                                               ("low"
                                                "0"
                                                "high"
                                                "n!1"))
                                              (("2"
                                                (lemma
                                                 "sigma_eq[nat]"
                                                 ("low"
                                                  "0"
                                                  "high"
                                                  "n!1"
                                                  "F"
                                                  "LAMBDA (i: nat): 0"
                                                  "G"
                                                  "LAMBDA (nn: nat): IF nn = 0 THEN 0 ELSE -(-0) ^ nn / nn ENDIF"))
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (case "n!2=0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "^")
                                                            (("2"
                                                              (expand
                                                               "expt")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2)
                (("2" (typepred "xgm1!1")
                  (("2" (typepred "c!1")
                    (("2" (replace -3)
                      (("2" (replace -4) (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skosimp*)
          (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ln const-decl "real" ln_exp nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Taylors formula-decl nil taylors "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (xgm1!1 skolem-const-decl "{x: real | x > -1}" ln_exp_series_alt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (between type-eq-decl nil taylors "analysis/")
    (c!1 skolem-const-decl "between[posreal](1, 1 + xgm1!1)"
     ln_exp_series_alt nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (zero_times1 formula-decl nil real_props nil)
    (sigma_zero formula-decl nil sigma "reals/")
    (sigma_nat application-judgement "nat" sigma_nat "reals/")
    (sigma_rat application-judgement "rational" sigma_nat "reals/")
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (ln_estimate const-decl "real" ln_exp_series_alt nil)
    (sigma def-decl "real" sigma "reals/")
    (div_div2 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_exp application-judgement "int" exponentiation nil)
    (cross_mult formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (subrange type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nderiv def-decl "[T -> real]" nth_derivatives "analysis/")
    (nderiv_fun type-eq-decl nil nth_derivatives "analysis/")
    (derivable_n_times? def-decl "bool" nth_derivatives "analysis/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ln_1 formula-decl nil ln_exp nil)
    (div_expt formula-decl nil exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ln_nderiv formula-decl nil ln_exp_series_alt nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nderiv_ln formula-decl nil ln_exp_series_alt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (nderiv_exp_TCC1 0
  (nderiv_exp_TCC1-1 nil 3322240241
   ("" (lemma "deriv_domain_real") (("" (propax) nil nil)) nil)
   ((deriv_domain_real formula-decl nil deriv_domain "analysis/")) nil
   (nderiv_exp assuming "analysis@nth_derivatives[real]"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (nderiv_exp_TCC2 0
  (nderiv_exp_TCC2-1 nil 3322240241
   ("" (expand "not_one_element?")
    (("" (skosimp*) (("" (inst + "x!1+1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/"))
   nil
   (nderiv_exp assuming "analysis@nth_derivatives[real]"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (nderiv_exp 0
  (nderiv_exp-3 nil 3322229043
   ("" (induct "n")
    (("1" (lemma "exp_deriv")
      (("1" (flatten)
        (("1" (expand "derivable_n_times?")
          (("1" (assert)
            (("1" (expand "derivable_n_times?")
              (("1" (propax) nil)))))))))))
     ("2" (expand "nderiv" 1)
      (("2" (expand "nderiv")
        (("2" (lemma "exp_deriv") (("2" (flatten) nil)))))))
     ("3" (skosimp*)
      (("3" (lemma "exp_deriv")
        (("3" (flatten)
          (("3" (prop)
            (("1" (expand "derivable_n_times?" 1) (("1" (assert) nil)))
             ("2" (expand "nderiv" 1) (("2" (assert) nil)))))))))))
     ("4" (skosimp*) nil) ("5" (skosimp*) nil))
    nil)
   ((exp_deriv formula-decl nil ln_exp nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nderiv def-decl "[T -> real]" nth_derivatives "analysis/")
    (nderiv_fun type-eq-decl nil nth_derivatives "analysis/")
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (derivable_n_times? def-decl "bool" nth_derivatives "analysis/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (nderiv_exp-2 nil 3322229029
   ("" (induct "n")
    (("1" (lemma "exp_deriv")
      (("1" (flatten)
        (("1" (expand "derivable_n_times?")
          (("1" (assert)
            (("1" (expand "derivable_n_times?")
              (("1" (propax) nil)))))))))))
     ("2" (expand "nderiv" 1)
      (("2" (expand "nderiv")
        (("2" (lemma "exp_deriv") (("2" (flatten) nil)))))))
     ("3" (skosimp*)
      (("3" (lemma "exp_deriv")
        (("3" (flatten)
          (("3" (prop)
            (("1" (expand "derivable_n_times?" 1) (("1" (assert) nil)))
             ("2" (expand "nderiv" 1) (("2" (assert) nil)))))))))))
     ("4" (skosimp*) nil) ("5" (skosimp*) nil))
    nil)
   nil nil)
  (nderiv_exp-1 nil 3322228933 ("" (postpone) nil nil) nil shostak))
 (expT_TCC1 0
  (expT_TCC1-1 nil 3309695446
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (expT subtype "ln_exp_series_alt.n"
    "{i: integers.int | booleans.OR(ln_exp_series_alt.x /= 0, reals.>=(i, 0))}")))
 (exp_taylors_TCC1 0
  (exp_taylors_TCC1-1 nil 3269926951 ("" (grind) nil nil)
   ((connected? const-decl "bool" deriv_domain_def "analysis/"))
   shostak
   (exp_taylors assuming "analysis@taylors[real]"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (exp_taylors_TCC2 0
  (exp_taylors_TCC2-1 nil 3471688910
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (exp_taylors subtype "((number_fields.+)(ln_exp_series_alt.n, 1))"
    "{i: integers.int | booleans.OR(ln_exp_series_alt.x /= 0, reals.>=(i, 0))}")))
 (exp_taylors 0
  (exp_taylors-2 nil 3352454036
   ("" (skosimp*)
    ((""
      (lemma "Taylors[real]" ("f" "exp" "n" "n!1" "aa" "0" "bb" "x!1"))
      (("" (lemma "nderiv_exp")
        (("" (inst?)
          (("" (flatten)
            (("" (replace -1)
              (("" (skosimp*)
                (("" (inst + "c!1")
                  (("" (replace -2)
                    (("" (expand "exp_estimate")
                      ((""
                        (lemma "sigma_eq[nat]"
                         ("low" "0" "high" "n!1" "F" "LAMBDA (nn:nat):
                     IF nn > n!1 THEN 0
                     ELSIF nn = 0 THEN exp(0)
                     ELSE nderiv(nn, exp)(0) * (x!1 - 0) ^ nn / factorial(nn)
                     ENDIF" "G"
                          "LAMBDA (nn: nat): IF nn = 0 THEN 1 ELSE x!1 ^ nn / factorial(nn) ENDIF"))
                        (("1" (split -1)
                          (("1" (assert)
                            (("1" (expand "expT")
                              (("1"
                                (replace -1 1 rl)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (skosimp*)
                              (("2"
                                (typepred "n!2")
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "nderiv_exp")
                                    (("2"
                                      (inst - "n!2")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (rewrite "exp_0")
                                              (("2"
                                                (case "n!2=0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (lemma "nderiv_exp")
                                (("2"
                                  (inst?)
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Taylors formula-decl nil taylors "analysis/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (between type-eq-decl nil taylors "analysis/")
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (exp_estimate const-decl "real" ln_exp_series_alt nil)
    (expT const-decl "real" ln_exp_series_alt nil)
    (exp_0 formula-decl nil ln_exp nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subrange type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable_n_times? def-decl "bool" nth_derivatives "analysis/")
    (nderiv_fun type-eq-decl nil nth_derivatives "analysis/")
    (nderiv def-decl "[T -> real]" nth_derivatives "analysis/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nderiv_exp formula-decl nil ln_exp_series_alt nil))
   nil)
  (exp_taylors-1 nil 3269893214
   ("" (skosimp*)
    (("" (lemma "Taylors" ("f" "exp" "n" "n!1" "aa" "0" "bb" "x!1"))
      (("" (lemma "nderiv_exp")
        (("" (inst?)
          (("" (flatten)
            (("" (replace -1)
              (("" (skosimp*)
                (("" (inst + "c!1")
                  (("" (replace -2)
                    (("" (expand "exp_estimate")
                      ((""
                        (lemma "sigma_eq[nat]"
                         ("low" "0" "high" "n!1" "F" "LAMBDA (nn:nat):
                  IF nn > n!1 THEN 0
                  ELSIF nn = 0 THEN exp(0)
                  ELSE nderiv(nn, exp)(0) * (x!1 - 0) ^ nn / factorial(nn)
                  ENDIF" "G"
                          "LAMBDA (nn: nat): IF nn = 0 THEN 1 ELSE x!1 ^ nn / factorial(nn) ENDIF"))
                        (("1" (split -1)
                          (("1" (assert)
                            (("1" (expand "expT")
                              (("1"
                                (replace -1 1 rl)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (skosimp*)
                              (("2"
                                (typepred "n!2")
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "nderiv_exp")
                                    (("2"
                                      (inst - "n!2")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (rewrite "exp_0")
                                              (("2"
                                                (case "n!2=0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (lemma "nderiv_exp")
                                (("2"
                                  (inst?)
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (exp_0 formula-decl nil ln_exp nil)
    (sigma_eq formula-decl nil sigma "reals/"))
   shostak))
 (exp_estimate_bnd_TCC1 0
  (exp_estimate_bnd_TCC1-1 nil 3322390567 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (exp_estimate_bnd subtype
    "((number_fields.+)(ln_exp_series_alt.n, 1))"
    "{i: integers.int | booleans.OR(real_defs.abs(ln_exp_series_alt.x) /= 0, reals.>=(i, 0))}")))
 (exp_estimate_bnd 0
  (exp_estimate_bnd-2 nil 3413217189
   ("" (stop-rewrite "abs_nat")
    (("" (skosimp*)
      (("" (lemma "exp_taylors" ("x" "x!1" "n" "n!1"))
        (("" (skosimp*)
          (("" (typepred "c!1")
            (("" (lemma "trichotomy" ("x" "x!1"))
              ((""
                (case "exp(x!1) - exp_estimate(x!1, n!1) = exp(c!1) * x!1 ^ (n!1 + 1) / factorial(n!1 + 1)")
                (("1" (replace -1)
                  (("1" (rewrite "abs_div" 1)
                    (("1" (expand "abs" 1 2)
                      (("1"
                        (lemma "both_sides_div_pos_le1"
                         ("x" "abs(exp(c!1) * x!1 ^ (1 + n!1))" "y"
                          "max(exp(x!1),1) * x!1 ^ (1 + n!1)" "pz"
                          "factorial(1 + n!1)"))
                        (("1" (hide -1 -2 -7)
                          (("1" (rewrite "abs_mult")
                            (("1" (expand "abs" 1 1)
                              (("1"
                                (case "exp(c!1)<=max(exp(x!1),1)")
                                (("1"
                                  (split -2)
                                  (("1"
                                    (lemma
                                     "expt_pos"
                                     ("px" "x!1" "i" "1+n!1"))
                                    (("1"
                                      (expand "abs" 1)
                                      (("1"
                                        (lemma "exp_strict_increasing")
                                        (("1"
                                          (expand "strict_increasing?")
                                          (("1"
                                            (inst-cp - "0" "c!1")
                                            (("1"
                                              (inst - "c!1" "x!1")
                                              (("1"
                                                (rewrite "exp_0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten -6)
                                                    (("1"
                                                      (expand "max")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "both_sides_times_pos_lt1"
                                                           ("x"
                                                            "exp(c!1)"
                                                            "y"
                                                            "exp(x!1)"
                                                            "pz"
                                                            "x!1^(1+n!1)"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "both_sides_div_pos_lt1"
                                                               ("x"
                                                                "exp(c!1) * x!1 ^ (1 + n!1)"
                                                                "y"
                                                                "exp(x!1) * x!1 ^ (1 + n!1)"
                                                                "pz"
                                                                "factorial(1+n!1)"))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (replace -5)
                                      (("2"
                                        (rewrite "exp_0")
                                        (("2"
                                          (expand "max")
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (expand "expt")
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma "exp_strict_increasing")
                                    (("3"
                                      (expand "strict_increasing?")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide -4 -6)
                                          (("3"
                                            (flatten -4)
                                            (("3"
                                              (inst-cp - "x!1" "c!1")
                                              (("3"
                                                (inst - "c!1" "0")
                                                (("3"
                                                  (rewrite "exp_0")
                                                  (("3"
                                                    (expand "max")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (typepred
                                                         "exp(c!1)")
                                                        (("3"
                                                          (hide -1 -3)
                                                          (("3"
                                                            (case
                                                             "abs(x!1 ^ (1 + n!1)) = abs(x!1) ^ (1 + n!1)")
                                                            (("1"
                                                              (lemma
                                                               "posreal_div_posreal_is_posreal"
                                                               ("px"
                                                                "abs(x!1) ^ (1 + n!1)"
                                                                "py"
                                                                "factorial(1 + n!1)"))
                                                              (("1"
                                                                (lemma
                                                                 "both_sides_times_pos_le1"
                                                                 ("x"
                                                                  "exp(c!1)"
                                                                  "y"
                                                                  "1"
                                                                  "pz"
                                                                  "abs(x!1) ^ (1 + n!1) / factorial(1 + n!1)"))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "expt_pos"
                                                                   ("px"
                                                                    "abs(x!1)"
                                                                    "i"
                                                                    "1+n!1"))
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (case
                                                                 "FORALL (n:nat): abs(x!1^n) = abs(x!1)^n")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "1+n!1")
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-4
                                                                    1))
                                                                  (("2"
                                                                    (induct
                                                                     "n")
                                                                    (("1"
                                                                      (rewrite
                                                                       "expt_x0")
                                                                      (("1"
                                                                        (rewrite
                                                                         "expt_x0")
                                                                        (("1"
                                                                          (expand
                                                                           "abs")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "^")
                                                                        (("2"
                                                                          (expand
                                                                           "expt"
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             "abs_mult"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "max")
                                    (("2"
                                      (lemma "exp_strict_increasing")
                                      (("2"
                                        (expand "strict_increasing?")
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten -3)
                                              (("1"
                                                (inst-cp - "0" "c!1")
                                                (("1"
                                                  (inst - "c!1" "x!1")
                                                  (("1"
                                                    (rewrite "exp_0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (replace -3)
                                                (("2"
                                                  (rewrite "exp_0")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (assert)
                                            (("3"
                                              (flatten -4)
                                              (("3"
                                                (inst-cp - "x!1" "c!1")
                                                (("3"
                                                  (inst - "c!1" "0")
                                                  (("3"
                                                    (rewrite "exp_0")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (trichotomy formula-decl nil real_axioms nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_max application-judgement
     "{z: posreal | z >= x AND z >= y}" real_defs nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (exp_0 formula-decl nil ln_exp nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_pos formula-decl nil exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs_mult formula-decl nil real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (exp_estimate const-decl "real" ln_exp_series_alt nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (between type-eq-decl nil taylors "analysis/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exp_taylors formula-decl nil ln_exp_series_alt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil)
  (exp_estimate_bnd-1 nil 3269894172
   ("" (skosimp*)
    (("" (lemma "exp_taylors" ("x" "x!1" "n" "n!1"))
      (("" (skosimp*)
        (("" (typepred "c!1")
          (("" (lemma "trichotomy" ("x" "x!1"))
            ((""
              (case "exp(x!1) - exp_estimate(x!1, n!1) = exp(c!1) * x!1 ^ (n!1 + 1) / factorial(n!1 + 1)")
              (("1" (replace -1)
                (("1" (rewrite "abs_div" 1)
                  (("1" (expand "abs" 1 2)
                    (("1"
                      (lemma "both_sides_div_pos_le1"
                       ("x" "abs(exp(c!1) * x!1 ^ (1 + n!1))" "y"
                        "max(exp(x!1),1) * x!1 ^ (1 + n!1)" "pz"
                        "factorial(1 + n!1)"))
                      (("1" (hide -1 -2 -7)
                        (("1" (rewrite "abs_mult")
                          (("1" (expand "abs" 1 1)
                            (("1" (case "exp(c!1)<=max(exp(x!1),1)")
                              (("1"
                                (split -2)
                                (("1"
                                  (lemma
                                   "expt_pos"
                                   ("px" "x!1" "i" "1+n!1"))
                                  (("1"
                                    (expand "abs" 1)
                                    (("1"
                                      (lemma "exp_strict_increasing")
                                      (("1"
                                        (expand "strict_increasing?")
                                        (("1"
                                          (inst-cp - "0" "c!1")
                                          (("1"
                                            (inst - "c!1" "x!1")
                                            (("1"
                                              (rewrite "exp_0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten -6)
                                                  (("1"
                                                    (expand "max")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "both_sides_times_pos_lt1"
                                                         ("x"
                                                          "exp(c!1)"
                                                          "y"
                                                          "exp(x!1)"
                                                          "pz"
                                                          "x!1^(1+n!1)"))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "both_sides_div_pos_lt1"
                                                             ("x"
                                                              "exp(c!1) * x!1 ^ (1 + n!1)"
                                                              "y"
                                                              "exp(x!1) * x!1 ^ (1 + n!1)"
                                                              "pz"
                                                              "factorial(1+n!1)"))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (replace -5)
                                    (("2"
                                      (rewrite "exp_0")
                                      (("2"
                                        (expand "max")
                                        (("2"
                                          (expand "^")
                                          (("2"
                                            (expand "expt")
                                            (("2"
                                              (expand "abs")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma "exp_strict_increasing")
                                  (("3"
                                    (expand "strict_increasing?")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (hide -4 -6)
                                        (("3"
                                          (flatten -4)
                                          (("3"
                                            (inst-cp - "x!1" "c!1")
                                            (("3"
                                              (inst - "c!1" "0")
                                              (("3"
                                                (rewrite "exp_0")
                                                (("3"
                                                  (expand "max")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (typepred
                                                       "exp(c!1)")
                                                      (("3"
                                                        (hide -1 -3)
                                                        (("3"
                                                          (case
                                                           "abs(x!1 ^ (1 + n!1)) = abs(x!1) ^ (1 + n!1)")
                                                          (("1"
                                                            (lemma
                                                             "posreal_div_posreal_is_posreal"
                                                             ("px"
                                                              "abs(x!1) ^ (1 + n!1)"
                                                              "py"
                                                              "factorial(1 + n!1)"))
                                                            (("1"
                                                              (lemma
                                                               "both_sides_times_pos_le1"
                                                               ("x"
                                                                "exp(c!1)"
                                                                "y"
                                                                "1"
                                                                "pz"
                                                                "abs(x!1) ^ (1 + n!1) / factorial(1 + n!1)"))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (lemma
                                                                 "expt_pos"
                                                                 ("px"
                                                                  "abs(x!1)"
                                                                  "i"
                                                                  "1+n!1"))
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (case
                                                               "FORALL (n:nat): abs(x!1^n) = abs(x!1)^n")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "1+n!1")
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-4
                                                                  1))
                                                                (("2"
                                                                  (induct
                                                                   "n")
                                                                  (("1"
                                                                    (rewrite
                                                                     "expt_x0")
                                                                    (("1"
                                                                      (rewrite
                                                                       "expt_x0")
                                                                      (("1"
                                                                        (expand
                                                                         "abs")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (expand
                                                                       "^")
                                                                      (("2"
                                                                        (expand
                                                                         "expt"
                                                                         1)
                                                                        (("2"
                                                                          (rewrite
                                                                           "abs_mult"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "max")
                                  (("2"
                                    (lemma "exp_strict_increasing")
                                    (("2"
                                      (expand "strict_increasing?")
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten -3)
                                            (("1"
                                              (inst-cp - "0" "c!1")
                                              (("1"
                                                (inst - "c!1" "x!1")
                                                (("1"
                                                  (rewrite "exp_0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (rewrite "exp_0")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (flatten -4)
                                            (("3"
                                              (inst-cp - "x!1" "c!1")
                                              (("3"
                                                (inst - "c!1" "0")
                                                (("3"
                                                  (rewrite "exp_0")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((between type-eq-decl nil taylors "analysis/")
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (exp_0 formula-decl nil ln_exp nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (exp_series_scaf2_TCC1 0
  (exp_series_scaf2_TCC1-1 nil 3309781212
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (exp_series_scaf2 subtype
    "(number_fields.*(2, ln_exp_series_alt.n))"
    "{i: integers.int | booleans.OR(sqrt.sqrt(ln_exp_series_alt.n) /= 0, reals.>=(i, 0))}")))
 (exp_series_scaf2 0
  (exp_series_scaf2-1 nil 3309758630
   ("" (case "FORALL (n: nat): n^n <= factorial(2 * n)")
    (("1" (skosimp)
      (("1" (inst - "n!1")
        (("1" (rewrite "expt_times")
          (("1" (expand "^" 1 1)
            (("1" (expand "expt" 1)
              (("1" (expand "expt" 1)
                (("1" (expand "expt" 1)
                  (("1" (rewrite "sq_rew") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2"
        (case "FORALL (n, N: nat): n <= N => N ^ n <= factorial(n + N)")
        (("1" (skosimp)
          (("1" (inst - "n!1" "n!1") (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skolem 1 ("_" "N"))
            (("2" (induct "n")
              (("1" (assert)
                (("1" (expand "^")
                  (("1" (expand "expt") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (assert)
                  (("2" (rewrite "expt_plus")
                    (("2" (rewrite "expt_x1")
                      (("2" (expand "factorial" 1)
                        (("2" (lemma "le_times_le_pos")
                          (("2"
                            (inst - "N^j!1" "N" "N+j!1+1"
                             "factorial(N+j!1)")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_times formula-decl nil exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (sq_rew formula-decl nil sq "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (exp_series_scaf3_TCC1 0
  (exp_series_scaf3_TCC1-1 nil 3309781225
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (exp_series_scaf3 subtype
    "((number_fields.+)(number_fields.*(2, ln_exp_series_alt.n), 1))"
    "{i: integers.int | booleans.OR(sqrt.sqrt(ln_exp_series_alt.n) /= 0, reals.>=(i, 0))}")))
 (exp_series_scaf3 0
  (exp_series_scaf3-1 nil 3309761506
   ("" (skosimp)
    (("" (lemma "exp_series_scaf2" ("n" "n!1"))
      (("" (case-replace "n!1=0")
        (("1" (expand "factorial")
          (("1" (expand "factorial")
            (("1" (rewrite "sqrt_0")
              (("1" (expand "^")
                (("1" (expand "expt") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "expt_plus" 2)
          (("2" (expand "factorial" 2)
            (("2" (assert)
              (("2" (rewrite "expt_x1")
                (("2"
                  (lemma "le_times_le_pos"
                   ("nnx" "sqrt(n!1) ^ (2 * n!1)" "y"
                    "factorial(2 * n!1)" "nnz" "sqrt(n!1)" "w"
                    "1+2*n!1"))
                  (("2" (assert)
                    (("2" (hide-all-but (1 2))
                      (("2"
                        (lemma "sq_le"
                         ("nna" "sqrt(n!1)" "nnb" "1 + 2 * n!1"))
                        (("2" (rewrite "sq_sqrt")
                          (("2" (replace -1 1 rl)
                            (("2" (hide -1)
                              (("2"
                                (expand "sq")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_series_scaf2 formula-decl nil ln_exp_series_alt nil)
    (expt_plus formula-decl nil exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sq_le formula-decl nil sq "reals/")
    (expt_x1 formula-decl nil exponentiation nil)
    (factorial def-decl "posnat" factorial "ints/")
    (sqrt_0 formula-decl nil sqrt "reals/")
    (expt def-decl "real" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (expT_convergence 0
  (expT_convergence-1 nil 3309695467
   ("" (skosimp)
    (("" (expand "convergence")
      (("" (skosimp)
        (("" (lemma "exp_estimate_bnd" ("x" "x!1"))
          (("" (case-replace "x!1=0")
            (("1" (rewrite "exp_0")
              (("1" (inst + "0")
                (("1" (skosimp)
                  (("1" (expand "series")
                    (("1"
                      (case "forall (n:nat): sigma(0, n, expT(0)) = 1")
                      (("1" (inst - "i!1")
                        (("1" (replace -1)
                          (("1" (expand "abs") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "expT")
                          (("2" (induct "n")
                            (("1" (expand "sigma")
                              (("1"
                                (expand "sigma")
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (expand "sigma" 1)
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (expand "expt")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "max(exp(x!1),1)>0")
              (("1" (name-replace "MX" "max(exp(x!1), 1)")
                (("1"
                  (lemma "posreal_times_posreal_is_posreal"
                   ("px" "MX" "py" "abs(x!1)"))
                  (("1"
                    (lemma "posreal_times_posreal_is_posreal"
                     ("px" "MX*abs(x!1)" "py" "epsilon!1"))
                    (("1"
                      (lemma "posreal_div_posreal_is_posreal"
                       ("px" "1" "py" "MX * abs(x!1) * epsilon!1"))
                      (("1" (name "M" "ceiling(abs(x!1)+1)")
                        (("1" (lemma "ceiling_def" ("x" "abs(x!1)+1"))
                          (("1" (replace -2)
                            (("1" (flatten)
                              (("1"
                                (case "abs(x!1)<M")
                                (("1"
                                  (case "MX>=1")
                                  (("1"
                                    (case
                                     "EXISTS (n: nat):
        n > M &
         (FORALL (i: nat):
            i >= n =>
             abs(x!1)^(i+1) / factorial(i+1) < epsilon!1 / MX)")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst + "n!1")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst - "i!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst - "i!1")
                                                (("1"
                                                  (case-replace
                                                   "abs(exp(x!1) - exp_estimate(x!1, i!1)) = abs(series(expT(x!1))(i!1) - exp(x!1))")
                                                  (("1"
                                                    (rewrite
                                                     "div_mult_pos_lt2"
                                                     -3)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand
                                                       "exp_estimate")
                                                      (("2"
                                                        (expand
                                                         "series")
                                                        (("2"
                                                          (expand
                                                           "abs")
                                                          (("2"
                                                            (lemma
                                                             "trichotomy"
                                                             ("x"
                                                              "exp(x!1) - sigma(0, i!1, expT(x!1))"))
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 3 -10)
                                      (("2"
                                        (case "abs(x!1)>0")
                                        (("1"
                                          (lemma
                                           "posreal_div_posreal_is_posreal"
                                           ("px" "abs(x!1)" "py" "M"))
                                          (("1"
                                            (lemma
                                             "div_mult_pos_lt1"
                                             ("py"
                                              "M"
                                              "x"
                                              "1"
                                              "z"
                                              "abs(x!1)"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "posreal_div_posreal_is_posreal"
                                                 ("px"
                                                  "epsilon!1"
                                                  "py"
                                                  "MX"))
                                                (("1"
                                                  (name-replace
                                                   "K"
                                                   "epsilon!1/MX")
                                                  (("1"
                                                    (name-replace
                                                     "ABS"
                                                     "abs(x!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1
                                                        -2
                                                        -3
                                                        -4
                                                        -6
                                                        1
                                                        -7))
                                                      (("1"
                                                        (lemma
                                                         "trich_lt"
                                                         ("x"
                                                          "ABS"
                                                          "y"
                                                          "1"))
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (lemma
                                                             "small_expt"
                                                             ("px"
                                                              "ABS"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "K")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "max(n!1,M+1)")
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "max")
                                                                        (("1"
                                                                          (case-replace
                                                                           "n!1<=1+M")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (rewrite
                                                                           "div_mult_pos_lt1"
                                                                           1)
                                                                          (("2"
                                                                            (lemma
                                                                             "both_sides_expt_lt1_lt"
                                                                             ("lt1x"
                                                                              "ABS"
                                                                              "i"
                                                                              "i!1+1"
                                                                              "j"
                                                                              "n!1"))
                                                                            (("2"
                                                                              (expand
                                                                               "^"
                                                                               -1
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "max")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_times_pos_le1"
                                                                                   ("pz"
                                                                                    "K"
                                                                                    "x"
                                                                                    "1"
                                                                                    "y"
                                                                                    "factorial(1+i!1)"))
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "n!1 <= 1 + M")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (name
                                                               "N"
                                                               "ceiling(1/K)")
                                                              (("2"
                                                                (lemma
                                                                 "ceiling_def"
                                                                 ("x"
                                                                  "1/K"))
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "max(N,M+1)")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           "max")
                                                                          (("1"
                                                                            (case-replace
                                                                             "N<=1+M")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (rewrite
                                                                             "expt_1i")
                                                                            (("2"
                                                                              (rewrite
                                                                               "div_mult_pos_lt1")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "div_mult_pos_le1"
                                                                                 -2)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_times_pos_lt1"
                                                                                   ("pz"
                                                                                    "K"
                                                                                    "x"
                                                                                    "N"
                                                                                    "y"
                                                                                    "factorial(1 + i!1)"))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "i!1>=N")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (case
                                                                                             "forall (n:nat): n <= factorial(n)")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "N")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "forall (n:posnat): factorial(N) < factorial(N + n)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "1+i!1-N")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (induct
                                                                                                     "n")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (skosimp*)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (case
                                                                                                           "j!1>0")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "factorial"
                                                                                                               1
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "both_sides_times_pos_le1"
                                                                                                                 ("pz"
                                                                                                                  "factorial(N + j!1)"
                                                                                                                  "x"
                                                                                                                  "1"
                                                                                                                  "y"
                                                                                                                  "1+N+j!1"))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (case-replace
                                                                                                               "j!1=0")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "factorial"
                                                                                                                 2
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "both_sides_times_pos_lt1"
                                                                                                                   ("pz"
                                                                                                                    "factorial(N)"
                                                                                                                    "x"
                                                                                                                    "1"
                                                                                                                    "y"
                                                                                                                    "1+N"))
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (induct
                                                                                                 "n")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "factorial")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "factorial"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "both_sides_times_pos_le1"
                                                                                                       ("pz"
                                                                                                        "1"
                                                                                                        "x"
                                                                                                        "j!1"
                                                                                                        "y"
                                                                                                        "factorial(j!1)"))
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "both_sides_times_pos_le1"
                                                                                                         ("pz"
                                                                                                          "1+j!1"
                                                                                                          "x"
                                                                                                          "1"
                                                                                                          "y"
                                                                                                          "factorial(j!1)"))
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          -1))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max")
                                                                                          (("2"
                                                                                            (case-replace
                                                                                             "N <= 1 + M")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (name
                                                             "N"
                                                             "2*sq(M)")
                                                            (("3"
                                                              (case
                                                               "FORALL (i: nat): i > N => ABS ^ i / factorial(i) <= (ABS / M) ^ i")
                                                              (("1"
                                                                (lemma
                                                                 "small_expt"
                                                                 ("px"
                                                                  "ABS/M"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "K")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "n!1+N")
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (expand
                                                                             "sq")
                                                                            (("1"
                                                                              (lemma
                                                                               "both_sides_times_pos_lt1"
                                                                               ("pz"
                                                                                "M"
                                                                                "x"
                                                                                "1"
                                                                                "y"
                                                                                "2*M"))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "1+i!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_expt_lt1_lt"
                                                                                   ("lt1x"
                                                                                    "ABS/M"
                                                                                    "i"
                                                                                    "1+i!1"
                                                                                    "j"
                                                                                    "n!1"))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^"
                                                                                       -1
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "sq")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -3
                                                                               *
                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (case
                                                                     "M>=2")
                                                                    (("1"
                                                                      (case
                                                                       "N>=8")
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_expt"
                                                                         1)
                                                                        (("1"
                                                                          (lemma
                                                                           "both_sides_div_pos_le2"
                                                                           ("pz"
                                                                            "ABS^i!1"
                                                                            "px"
                                                                            "factorial(i!1)"
                                                                            "py"
                                                                            "M^i!1"))
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -8
                                                                               -9
                                                                               -10
                                                                               -11
                                                                               -12)
                                                                              (("1"
                                                                                (hide
                                                                                 -5)
                                                                                (("1"
                                                                                  (case
                                                                                   "even?(i!1)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "even?")
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      (("1"
                                                                                        (case
                                                                                         "j!1>=4")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "sqrt_pos"
                                                                                           ("px"
                                                                                            "j!1"))
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "exp_series_scaf2"
                                                                                             ("n"
                                                                                              "j!1"))
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4
                                                                                               *
                                                                                               rl)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "both_sides_expt_pos_le"
                                                                                                 ("px"
                                                                                                  "M"
                                                                                                  "py"
                                                                                                  "sqrt(j!1)"
                                                                                                  "pm"
                                                                                                  "i!1"))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "sq_le"
                                                                                                       ("nna"
                                                                                                        "M"
                                                                                                        "nnb"
                                                                                                        "sqrt(j!1)"))
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "sq_sqrt")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "both_sides_times_pos_le1"
                                                                                                           ("pz"
                                                                                                            "2"
                                                                                                            "x"
                                                                                                            "sq(M)"
                                                                                                            "y"
                                                                                                            "j!1"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "even_or_odd")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "odd?")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (case
                                                                                           "j!1>=4")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "sqrt_pos"
                                                                                             ("px"
                                                                                              "j!1"))
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "exp_series_scaf3"
                                                                                               ("n"
                                                                                                "j!1"))
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -4
                                                                                                 *
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "both_sides_expt_pos_le"
                                                                                                   ("px"
                                                                                                    "M"
                                                                                                    "py"
                                                                                                    "sqrt(j!1)"
                                                                                                    "pm"
                                                                                                    "i!1"))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "sq_le"
                                                                                                         ("nna"
                                                                                                          "M"
                                                                                                          "nnb"
                                                                                                          "sqrt(j!1)"))
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "sq_sqrt")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "both_sides_times_pos_le2"
                                                                                                               ("pz"
                                                                                                                "2"
                                                                                                                "x"
                                                                                                                "sq(M)"
                                                                                                                "y"
                                                                                                                "j!1"))
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -4
                                                                                                                       -7)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (case-replace
                                                                                                                             "N=2*j!1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (case-replace
                                                                                                                               "N=2*j!1+1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (case
                                                                                                                                   "N>=2+2*j!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (case-replace
                                                                                                                                       "N= 2*j!1-1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (case-replace
                                                                                                                                           "N <= 2*j!1-2")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "N")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "sq")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "M")
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "M")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "ceiling(1+abs(x!1))")
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "nonneg_ceiling_is_nat"
                                                                                                                                                             ("x"
                                                                                                                                                              "1 + abs(x!1)"))
                                                                                                                                                            (("2"
                                                                                                                                                              (case
                                                                                                                                                               "integer_pred(ceiling(1 + abs(x!1)))")
                                                                                                                                                              (("1"
                                                                                                                                                                (name-replace
                                                                                                                                                                 "ZZ"
                                                                                                                                                                 "ceiling(1 + abs(x!1))")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (case
                                                                                                                                                                     "integer_pred(2*(ZZ*ZZ))")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       (1
                                                                                                                                                                        2
                                                                                                                                                                        3
                                                                                                                                                                        4
                                                                                                                                                                        5
                                                                                                                                                                        -3
                                                                                                                                                                        -2
                                                                                                                                                                        -3))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "trich_lt"
                                                                                                                                                                         ("x"
                                                                                                                                                                          "2*(ZZ*ZZ)"
                                                                                                                                                                          "y"
                                                                                                                                                                          "2*j!1-1"))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "trich_lt"
                                                                                                                                                                             ("x"
                                                                                                                                                                              "2*(ZZ*ZZ)"
                                                                                                                                                                              "y"
                                                                                                                                                                              "2*j!1"))
                                                                                                                                                                            (("3"
                                                                                                                                                                              (split
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("3"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "trich_lt"
                                                                                                                                                                                   ("x"
                                                                                                                                                                                    "2*(ZZ*ZZ)"
                                                                                                                                                                                    "y"
                                                                                                                                                                                    "2*j!1+1"))
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (split
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "forall (i:int): NOT (2*j!1<i & i < 2*j!1+1)")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -
                                                                                                                                                                                           "2*(ZZ*ZZ)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (hide-all-but
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (skosimp)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (case
                                                                                                                                                                                                 "forall (i,j:nat): i < j => i+1 <= j")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (inst-cp
                                                                                                                                                                                                   -
                                                                                                                                                                                                   "2*j!1"
                                                                                                                                                                                                   "i!2")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst
                                                                                                                                                                                                     -
                                                                                                                                                                                                     "i!2"
                                                                                                                                                                                                     "1+2*j!1")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("3"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "expt_pos"
                                                                             ("px"
                                                                              "ABS"
                                                                              "i"
                                                                              "i!1"))
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (lemma
                                                                             "expt_pos"
                                                                             ("px"
                                                                              "M"
                                                                              "i"
                                                                              "i!1"))
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "N"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "sq")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1))
                                                                            (("2"
                                                                              (lemma
                                                                               "sq_le"
                                                                               ("nna"
                                                                                "2"
                                                                                "nnb"
                                                                                "M"))
                                                                              (("2"
                                                                                (expand
                                                                                 "sq")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (expand "abs")
                                          (("2"
                                            (case-replace "x!1<0")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (expand "MX")
                                      (("2"
                                        (expand "max")
                                        (("2"
                                          (case-replace "exp(x!1)<=1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil)
                   ("2" (expand "abs")
                    (("2" (case-replace "x!1<0")
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "max")
                (("2" (case-replace "exp(x!1) <= 1")
                  (("1" (assert)
                    (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_sequences "analysis/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_estimate_bnd formula-decl nil ln_exp_series_alt nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (ceiling_def formula-decl nil floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (both_sides_expt_lt1_lt formula-decl nil exponentiation nil)
    (M skolem-const-decl "{i | 1 + abs(x!1) <= i & i < 2 + abs(x!1)}"
     ln_exp_series_alt nil)
    (x!1 skolem-const-decl "real" ln_exp_series_alt nil)
    (n!1 skolem-const-decl "nat" ln_exp_series_alt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (small_expt formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (K skolem-const-decl "posreal" ln_exp_series_alt nil)
    (N skolem-const-decl "{i | 1 / K <= i & i < 1 + 1 / K}"
     ln_exp_series_alt nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (expt_1i formula-decl nil exponentiation nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (n!1 skolem-const-decl "nat" ln_exp_series_alt nil)
    (N skolem-const-decl "nnreal" ln_exp_series_alt nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (even? const-decl "bool" integers nil)
    (sqrt_pos judgement-tcc nil sqrt "reals/")
    (sq_le formula-decl nil sq "reals/")
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (both_sides_expt_pos_le formula-decl nil exponentiation nil)
    (exp_series_scaf2 formula-decl nil ln_exp_series_alt nil)
    (odd? const-decl "bool" integers nil)
    (exp_series_scaf3 formula-decl nil ln_exp_series_alt nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nonneg_ceiling_is_nat judgement-tcc nil floor_ceil nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (expt_pos formula-decl nil exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (div_expt formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (trich_lt formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (exp_estimate const-decl "real" ln_exp_series_alt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (trichotomy formula-decl nil real_axioms nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (MX skolem-const-decl "{z: posreal | z >= exp(x!1) AND z >= 1}"
     ln_exp_series_alt nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp_0 formula-decl nil ln_exp nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (expT const-decl "real" ln_exp_series_alt nil)
    (nzint_max application-judgement "{k: nzint | i <= k AND j <= k}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sigma_rat application-judgement "rational" sigma_nat "reals/")
    (nat_expt application-judgement "nat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (series const-decl "sequence[real]" series "series/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posreal_max application-judgement
     "{z: posreal | z >= x AND z >= y}" real_defs nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (expT_convergent 0
  (expT_convergent-1 nil 3309695541
   ("" (skosimp)
    (("" (expand "convergent?")
      (("" (inst + "exp(x!1)")
        (("" (lemma "expT_convergence" ("x" "x!1"))
          (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" convergence_sequences "analysis/")
    (expT_convergence formula-decl nil ln_exp_series_alt nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (exp_series_TCC1 0
  (exp_series_TCC1-1 nil 3322393513
   ("" (skosimp*)
    (("" (expand "conv_series?")
      (("" (rewrite "expT_convergent") nil nil)) nil))
    nil)
   ((conv_series? const-decl "bool" series "series/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expT_convergent formula-decl nil ln_exp_series_alt nil))
   nil
   (exp_series subtype "ln_exp_series_alt.expT(ln_exp_series_alt.x)"
    "(series.conv_series?)")))
 (exp_series 0
  (exp_series-1 nil 3322393498
   ("" (skosimp)
    (("" (expand "inf_sum")
      ((""
        (lemma "limit_equiv" ("s" "series(expT(x!1))" "l" "exp(x!1)"))
        (("" (lemma "expT_convergence" ("x" "x!1"))
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((inf_sum const-decl "real" series "series/")
    (expT_convergence formula-decl nil ln_exp_series_alt nil)
    (limit_equiv formula-decl nil convergence_ops "analysis/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (series const-decl "sequence[real]" series "series/")
    (expT const-decl "real" ln_exp_series_alt nil))
   nil)))


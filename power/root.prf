(root (expt_exp 0
       (expt_exp-2 nil 3722009097
        ("" (skeep)
         (("" (lemma "expt_alt_def")
           (("" (inst?) (("" (expand "^") (("" (propax) nil nil)) nil)) nil))
           nil))
         nil)
        ((expt_alt_def formula-decl nil ln_exp lnexp)
         (^ const-decl "real" exponentiation nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nat nonempty-type-eq-decl nil naturalnumbers nil)
         (>= const-decl "bool" reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer nonempty-type-from-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil))
        nil))
      (nn_root_def_TCC1 0
       (nn_root_def_TCC1-1 nil 3722009005 ("" (subtype-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        nil (nn_root_def subtype "root.nx" "posreal")))
      (nn_root_def 0
       (nn_root_def-1 nil 3722009191
        ("" (skeep)
         (("" (case-replace "nx=0")
           (("1" (rewrite "nn_root_0n") nil nil)
            ("2" (assert)
             (("2" (lemma "expt_nn_root" ("x" "nx" "pn" "pn"))
               (("2" (lemma "expt_alt_def" ("x" "exp(ln(nx) / pn)" "i" "pn"))
                 (("2" (assert)
                   (("2" (rewrite "ln_exp")
                     (("2" (lemma "div_cancel1")
                       (("2" (inst - "pn" "ln(nx)")
                         (("2" (replace -1)
                           (("2" (rewrite "exp_ln")
                             (("2" (hide -1)
                               (("2"
                                 (lemma "both_sides_nn_root"
                                  ("x" "nx" "y" "exp(ln(nx) / pn)^pn" "pn"
                                   "pn"))
                                 (("2"
                                   (lemma "nn_root_expt"
                                    ("x" "exp(ln(nx) / pn)" "pn" "pn"))
                                   (("2" (assert) nil nil)) nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (nn_root_0n formula-decl nil nn_root nil)
         (expt_nn_root formula-decl nil nn_root nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (nnreal_exp application-judgement "nnreal" exponentiation nil)
         (div_cancel1 formula-decl nil real_props nil)
         (nn_root_expt formula-decl nil nn_root nil)
         (^ const-decl "real" exponentiation nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (both_sides_nn_root formula-decl nil nn_root nil)
         (posreal_exp application-judgement "posreal" exponentiation nil)
         (exp_ln formula-decl nil ln_exp lnexp)
         (nonzero_real nonempty-type-eq-decl nil reals nil)
         (ln_exp formula-decl nil ln_exp lnexp)
         (expt_alt_def formula-decl nil ln_exp lnexp)
         (integer nonempty-type-from-decl nil integers nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (ln const-decl "real" ln_exp lnexp)
         (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (/= const-decl "boolean" notequal nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (real_div_nzreal_is_real application-judgement "real" reals nil))
        nil))
      (root_nn_TCC1 0
       (root_nn_TCC1-1 nil 3722083781
        ("" (skeep) (("" (rewrite "nn_root_def") (("" (assert) nil nil)) nil))
         nil)
        ((nn_root_def formula-decl nil root nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil))
        nil
        (root_nn subtype "0"
         "{y: real_types.nnreal | y = nn_root.nn_root(root.nx, root.pn)}")))
      (root_nn_TCC2 0
       (root_nn_TCC2-1 nil 3722083781
        ("" (skeep) (("" (rewrite "nn_root_def") (("" (assert) nil nil)) nil))
         nil)
        ((nn_root_def formula-decl nil root nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (real_div_nzreal_is_real application-judgement "real" reals nil))
        nil
        (root_nn subtype
         "ln_exp.exp(number_fields./(ln_exp.ln(root.nx), root.pn))"
         "{y: real_types.nnreal | y = nn_root.nn_root(root.nx, root.pn)}")))
      (root_nn_root_pos_rew 0
       (root_nn_root_pos_rew-3 nil 3722084679
        ("" (skeep)
         (("" (typepred "root_nn(nx,pn)")
           (("" (typepred "root_pos(nx,pn)")
             (("" (lemma "nn_root_expt")
               (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
             nil))
           nil))
         nil)
        ((root_nn const-decl "{y: nnreal | y = nn_root(nx, pn)}" root nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (nnreal type-eq-decl nil real_types nil)
         (>= const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (nn_root_expt formula-decl nil nn_root nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (nnreal_exp application-judgement "nnreal" exponentiation nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (/= const-decl "boolean" notequal nil)
         (^ const-decl "real" exponentiation nil)
         (root_pos const-decl "{nnx | nnx ^ n = nnr}" root reals))
        nil)
       (root_nn_root_pos_rew-2 nil 3722084605
        ("" (skeep)
         (("" (typepred "root_pos(nx,pn)")
           (("" (name "RR" "root_pos(nx,pn)")
             (("" (replaces -1)
               (("" (replaces -2 :dir rl) (("" (postpone) nil nil)) nil))
               nil))
             nil))
           nil))
         nil)
        nil nil)
       (root_nn_root_pos_rew-1 nil 3722084583 ("" (postpone) nil nil) nil
        shostak))
      (root_TCC1 0
       (root_TCC1-1 nil 3722009972
        ("" (skeep)
         (("" (replaces -1)
           (("" (rewrite "nn_root_def")
             (("" (case-replace "x=0")
               (("1" (assert) nil nil)
                ("2" (assert)
                 (("2" (case-replace "exp(ln(abs(x)) / 1) = exp(ln(abs(x)))")
                   (("1" (hide -1)
                     (("1" (rewrite "exp_ln") (("1" (grind) nil nil)) nil))
                     nil)
                    ("2" (assert) nil nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((TRUE const-decl "bool" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
          real_defs nil)
         (sign_nat formula-decl nil sign reals)
         (abs_nat formula-decl nil abs_lems reals)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/= const-decl "boolean" notequal nil)
         (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
         (ln const-decl "real" ln_exp lnexp)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (exp_ln formula-decl nil ln_exp lnexp)
         (minus_real_is_real application-judgement "real" reals nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (sign const-decl "Sign" sign reals)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_div_nzreal_is_real application-judgement "real" reals nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nnreal type-eq-decl nil real_types nil)
         (>= const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (nn_root_def formula-decl nil root nil))
        nil
        (root subtype "root.x"
              "{y: reals.real | y = number_fields.*(nn_root.nn_root(real_defs.abs(root.x), root.pn), sign.sign(root.x))}")))
      (root_TCC2 0
       (root_TCC2-1 nil 3722009972
        ("" (skeep)
         (("" (expand "abs")
           (("" (assert)
             (("" (expand "sign")
               (("" (typepred "root_nn(x,pn)") (("" (propax) nil nil)) nil))
               nil))
             nil))
           nil))
         nil)
        ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (sign const-decl "Sign" sign reals)
         (boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (root_nn const-decl "{y: nnreal | y = nn_root(nx, pn)}" root nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (odd? const-decl "bool" integers nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil))
        nil
        (root subtype "root.root_nn(root.x, root.pn)"
              "{y: reals.real | y = number_fields.*(nn_root.nn_root(real_defs.abs(root.x), root.pn), sign.sign(root.x))}")))
      (root_TCC3 0
       (root_TCC3-1 nil 3722009972 ("" (subtype-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (> const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (odd? const-decl "bool" integers nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (minus_real_is_real application-judgement "real" reals nil))
        nil (root subtype "(number_fields.-)(root.x)" "nnreal")))
      (root_TCC4 0
       (root_TCC4-1 nil 3722009972
        ("" (skeep)
         (("" (expand "abs")
           (("" (assert)
             (("" (expand "sign")
               (("" (typepred "root_nn(-x,pn)") (("" (assert) nil nil)) nil))
               nil))
             nil))
           nil))
         nil)
        ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (sign const-decl "Sign" sign reals)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (root_nn const-decl "{y: nnreal | y = nn_root(nx, pn)}" root nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (odd? const-decl "bool" integers nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil))
        nil
        (root subtype
              "(number_fields.-)(root.root_nn((number_fields.-)(root.x), root.pn))"
              "{y: reals.real | y = number_fields.*(nn_root.nn_root(real_defs.abs(root.x), root.pn), sign.sign(root.x))}")))
      (root_root_nn_rew_TCC1 0
       (root_root_nn_rew_TCC1-1 nil 3722085002 ("" (subtype-tcc) nil nil)
        ((odd? const-decl "bool" integers nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil))
        nil
        (root_root_nn_rew subtype "root.pn"
         "{pm | booleans.OR(reals.>=(root.nx, 0), integers.odd?(root.pm))}")))
      (root_root_nn_rew 0
       (root_root_nn_rew-1 nil 3722085007
        ("" (skeep)
         (("" (typepred "root_nn(nx,pn)")
           (("" (replaces -2)
             (("" (expand "root")
               (("" (case-replace "pn=1")
                 (("1" (rewrite "nn_root_x1") nil nil) ("2" (assert) nil nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((root_nn const-decl "{y: nnreal | y = nn_root(nx, pn)}" root nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (nnreal type-eq-decl nil real_types nil)
         (>= const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (nn_root_x1 formula-decl nil nn_root nil)
         (TRUE const-decl "bool" booleans nil))
        shostak))
      (root_0n 0
       (root_0n-1 nil 3427758277
        ("" (skeep)
         (("" (expand "root")
           (("" (expand "root_nn") (("" (propax) nil nil)) nil)) nil))
         nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (root_nn const-decl "{y: nnreal | y = nn_root(nx, pn)}" root nil))
        shostak))
      (root_1n 0
       (root_1n-1 nil 3427758449
        ("" (skeep)
         (("" (typepred "root(1,pn)")
           (("" (expand "abs")
             (("" (expand "sign") (("" (rewrite "nn_root_1n") nil nil)) nil))
             nil))
           nil))
         nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (nn_root_1n formula-decl nil nn_root nil))
        shostak))
      (root_x1_TCC1 0
       (root_x1_TCC1-1 nil 3790094223 ("" (subtype-tcc) nil nil) nil nil
        (root_x1 subtype "1"
         "{pm | booleans.OR(reals.>=(root.x, 0), integers.odd?(root.pm))}")))
      (root_x1 0
       (root_x1-1 nil 3427758482
        ("" (skosimp) (("" (expand "root") (("" (propax) nil nil)) nil)) nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil))
        shostak))
      (root_nn_root_rew 0
       (root_nn_root_rew-1 nil 3427764461
        ("" (skosimp)
         (("" (typepred "root(nx!1, pn!1)")
           (("" (replaces -1)
             (("" (expand "abs")
               (("" (case-replace "nx!1=0")
                 (("1" (rewrite "nn_root_0n") (("1" (assert) nil nil)) nil)
                  ("2" (expand "sign") (("2" (propax) nil nil)) nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (nn_root_0n formula-decl nil nn_root nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (sign_nat formula-decl nil sign reals)
         (TRUE const-decl "bool" booleans nil))
        shostak))
      (root_expt_TCC1 0
       (root_expt_TCC1-1 nil 3427758158
        ("" (skosimp) (("" (assert) nil nil)) nil)
        ((real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        nil
        (root_expt subtype "root.pn"
         "{i: integers.int | booleans.OR(root.x /= 0, reals.>=(i, 0))}")))
      (root_expt_TCC2 0
       (root_expt_TCC2-1 nil 3427758158
        ("" (skosimp)
         (("" (typepred "pn!1")
           (("" (split -2)
             (("1" (expand ">=")
               (("1" (expand "<=")
                 (("1" (flatten)
                   (("1" (split)
                     (("1" (lemma "expt_pos" ("px" "x!1" "i" "pn!1"))
                       (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
                      ("2" (replace -1 * rl)
                       (("2" (expand "^")
                         (("2" (expand "expt") (("2" (assert) nil nil)) nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ("2" (propax) nil nil))
             nil))
           nil))
         nil)
        ((odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (> const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (expt def-decl "real" exponentiation nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
          integers nil)
         (nat_expt application-judgement "nat" exponentiation nil)
         (int_minus_int_is_int application-judgement "int" integers nil)
         (^ const-decl "real" exponentiation nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (expt_pos formula-decl nil exponentiation nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (<= const-decl "bool" reals nil))
        nil
        (root_expt subtype "root.pn"
         "{pm | booleans.OR(reals.>=(exponentiation.^(root.x, root.pn), 0), integers.odd?(root.pm))}")))
      (root_expt 0
       (root_expt-1 nil 3427759297
        ("" (skosimp)
         (("" (typepred "root(x!1 ^ pn!1, pn!1)")
           (("" (replaces -1)
             (("" (rewrite "abs_hat_nat" 1 :dir rl)
               (("" (rewrite "nn_root_expt")
                 (("" (expand "sign")
                   (("" (expand "abs")
                     (("" (case-replace "x!1<0")
                       (("1" (typepred "pn!1")
                         (("1" (assert)
                           (("1" (expand "odd?")
                             (("1" (skosimp)
                               (("1" (replace -2)
                                 (("1" (rewrite "expt_plus")
                                   (("1" (rewrite "expt_x1")
                                     (("1"
                                       (rewrite "expt_times")
                                       (("1"
                                         (rewrite "expt_x2")
                                         (("1"
                                           (lemma
                                            "negreal_times_negreal_is_posreal"
                                            ("nx" "x!1" "ny" "x!1"))
                                           (("1"
                                             (lemma
                                              "expt_pos"
                                              ("px" "x!1*x!1" "i" "j!1"))
                                             (("1"
                                               (lemma
                                                "both_sides_times_pos_lt1"
                                                ("pz"
                                                 "(x!1 * x!1) ^ j!1"
                                                 "x"
                                                 "x!1"
                                                 "y"
                                                 "0"))
                                               (("1" (assert) nil nil)
                                                ("2" (assert) nil nil))
                                               nil)
                                              ("2" (propax) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (replace 1)
                         (("2" (case-replace "x!1=0")
                           (("1" (assert)
                             (("1" (expand "^")
                               (("1" (expand "expt") (("1" (propax) nil nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (lemma "expt_pos" ("px" "x!1" "i" "pn!1"))
                             (("1" (assert) nil nil) ("2" (assert) nil nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((^ const-decl "real" exponentiation nil)
         (root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (nat nonempty-type-eq-decl nil naturalnumbers nil)
         (abs_hat_nat formula-decl nil exponentiation nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (nnreal_exp application-judgement "nnreal" exponentiation nil)
         (< const-decl "bool" reals nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (nzreal nonempty-type-eq-decl nil reals nil)
         (expt_plus formula-decl nil exponentiation nil)
         (expt_times formula-decl nil exponentiation nil)
         (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
         (<= const-decl "bool" reals nil)
         (nonpos_real nonempty-type-eq-decl nil real_types nil)
         (negreal nonempty-type-eq-decl nil real_types nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (both_sides_times_pos_lt1 formula-decl nil real_props nil)
         (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (expt_pos formula-decl nil exponentiation nil)
         (expt_x2 formula-decl nil exponentiation nil)
         (expt_x1 formula-decl nil exponentiation nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (expt def-decl "real" exponentiation nil)
         (nat_expt application-judgement "nat" exponentiation nil)
         (nat_exp application-judgement "nat" exponentiation nil)
         (nn_root_expt formula-decl nil nn_root nil)
         (TRUE const-decl "bool" booleans nil))
        shostak))
      (expt_root_TCC1 0
       (expt_root_TCC1-1 nil 3427758158
        ("" (skosimp) (("" (assert) nil nil)) nil)
        ((real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        nil
        (expt_root subtype "root.pn"
         "{i: integers.int | booleans.OR(root.root(root.x, root.pn) /= 0, reals.>=(i, 0))}")))
      (expt_root 0
       (expt_root-1 nil 3427759817
        ("" (skosimp)
         (("" (typepred "root(x!1, pn!1)")
           (("" (replaces -1)
             (("" (case-replace "x!1=0")
               (("1" (expand "sign")
                 (("1" (expand "^")
                   (("1" (expand "expt")
                     (("1" (assert)
                       (("1" (rewrite "nn_root_0n") (("1" (assert) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2" (case "x!1>0")
                 (("1" (expand "abs")
                   (("1" (expand "sign")
                     (("1" (assert) (("1" (rewrite "expt_nn_root") nil nil))
                       nil))
                     nil))
                   nil)
                  ("2" (expand "sign")
                   (("2" (expand "abs")
                     (("2" (assert)
                       (("2" (typepred "pn!1")
                         (("2" (split -2)
                           (("1" (assert) nil nil)
                            ("2" (expand "odd?")
                             (("2" (skosimp)
                               (("2" (replace -1)
                                 (("2"
                                   (lemma "nn_root_pos"
                                    ("px" "-x!1" "pn" "1+2*j!1"))
                                   (("1" (rewrite "mult_expt")
                                     (("1"
                                       (rewrite "expt_nn_root")
                                       (("1"
                                         (rewrite "expt_plus")
                                         (("1"
                                           (rewrite "expt_times")
                                           (("1"
                                             (rewrite "expt_x1")
                                             (("1"
                                               (rewrite "expt_x2")
                                               (("1"
                                                 (rewrite "expt_1i")
                                                 (("1" (assert) nil nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (^ const-decl "real" exponentiation nil)
         (int_minus_int_is_int application-judgement "int" integers nil)
         (nnreal_expt application-judgement "nnreal" exponentiation nil)
         (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
          real_defs nil)
         (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
          real_types nil)
         (abs_nat formula-decl nil abs_lems reals)
         (nat_expt application-judgement "nat" exponentiation nil)
         (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
          integers nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (nn_root_0n formula-decl nil nn_root nil)
         (expt def-decl "real" exponentiation nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
         (nn_root_pos formula-decl nil nn_root nil)
         (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (expt_times formula-decl nil exponentiation nil)
         (expt_x2 formula-decl nil exponentiation nil)
         (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
         (expt_1i formula-decl nil exponentiation nil)
         (expt_x1 formula-decl nil exponentiation nil)
         (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
          nil)
         (int_exp application-judgement "int" exponentiation nil)
         (expt_plus formula-decl nil exponentiation nil)
         (nnreal_exp application-judgement "nnreal" exponentiation nil)
         (rat_exp application-judgement "rat" exponentiation nil)
         (nzreal_exp application-judgement "nzreal" exponentiation nil)
         (mult_expt formula-decl nil exponentiation nil)
         (nzreal nonempty-type-eq-decl nil reals nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (expt_nn_root formula-decl nil nn_root nil)
         (TRUE const-decl "bool" booleans nil))
        shostak))
      (root_is_0 0
       (root_is_0-1 nil 3427760275
        ("" (skosimp)
         (("" (typepred "root(x!1, pn!1)")
           (("" (replaces -1)
             (("" (rewrite "zero_times3")
               (("" (rewrite "nn_root_is_0") (("" (grind) nil nil)) nil))
               nil))
             nil))
           nil))
         nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (zero_times3 formula-decl nil real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (nn_root_is_0 formula-decl nil nn_root nil)
         (TRUE const-decl "bool" booleans nil))
        shostak))
      (root_pos 0
       (root_pos-1 nil 3427760361
        ("" (skosimp)
         (("" (typepred "root(x!1, pn!1)")
           (("" (replaces -1)
             (("" (typepred "nn_root(abs(x!1), pn!1)")
               (("" (split)
                 (("1" (flatten)
                   (("1" (expand "sign")
                     (("1" (assert)
                       (("1" (case-replace "x!1=0")
                         (("1" (assert) (("1" (rewrite "nn_root_0n") nil nil))
                           nil)
                          ("2" (assert) nil nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (flatten)
                   (("2" (expand "sign")
                     (("2" (assert) (("2" (rewrite "nn_root_pos") nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (nn_root_pos formula-decl nil nn_root nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
          real_defs nil)
         (abs_nat formula-decl nil abs_lems reals)
         (nn_root_0n formula-decl nil nn_root nil)
         (TRUE const-decl "bool" booleans nil))
        shostak))
      (root_neg 0
       (root_neg-1 nil 3427760534
        ("" (skosimp)
         (("" (typepred "root(x!1, pn!1)")
           (("" (replaces -1)
             (("" (lemma "trich_lt" ("x" "x!1" "y" "0"))
               (("" (split -1)
                 (("1" (expand "sign")
                   (("1" (expand "abs")
                     (("1" (assert)
                       (("1" (lemma "nn_root_pos" ("px" "-x!1" "pn" "pn!1"))
                         (("1" (assert) nil nil)) nil))
                       nil))
                     nil))
                   nil)
                  ("2" (expand "abs")
                   (("2" (expand "sign")
                     (("2" (assert)
                       (("2" (replace -1)
                         (("2" (rewrite "nn_root_0n") (("2" (assert) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("3" (expand "sign")
                   (("3" (expand "abs")
                     (("3" (assert)
                       (("3" (typepred "nn_root(x!1, pn!1)")
                         (("3" (assert) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (trich_lt formula-decl nil real_props nil)
         (nn_root_0n formula-decl nil nn_root nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (nn_root_pos formula-decl nil nn_root nil)
         (TRUE const-decl "bool" booleans nil))
        shostak))
      (root_gt1 0
       (root_gt1-1 nil 3427760682
        ("" (skosimp)
         (("" (typepred "root(x!1, pn!1)")
           (("" (replaces -1)
             (("" (lemma "trich_lt" ("x" "x!1" "y" "0"))
               (("" (split)
                 (("1" (expand "sign")
                   (("1" (expand "abs")
                     (("1" (assert)
                       (("1" (typepred "nn_root(-x!1, pn!1)")
                         (("1" (assert) nil nil)) nil))
                       nil))
                     nil))
                   nil)
                  ("2" (replace -1)
                   (("2" (expand "abs")
                     (("2" (expand "sign")
                       (("2" (assert)
                         (("2" (rewrite "nn_root_0n") (("2" (assert) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("3" (expand "sign")
                   (("3" (assert)
                     (("3" (rewrite "nn_root_gt1")
                       (("3" (expand "abs") (("3" (propax) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (trich_lt formula-decl nil real_props nil)
         (nn_root_gt1 formula-decl nil nn_root nil)
         (nn_root_0n formula-decl nil nn_root nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (TRUE const-decl "bool" booleans nil))
        shostak))
      (root_lt1 0
       (root_lt1-1 nil 3427763570
        ("" (skosimp)
         (("" (typepred "pn!1")
           (("" (case-replace "x!1>=0")
             (("1" (typepred "root(x!1, pn!1)")
               (("1" (replaces -1)
                 (("1" (expand ">=")
                   (("1" (expand "<=")
                     (("1" (split -1)
                       (("1" (expand "sign")
                         (("1" (assert)
                           (("1" (rewrite "nn_root_lt1")
                             (("1" (expand "abs") (("1" (propax) nil nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (expand "sign")
                         (("2" (expand "abs")
                           (("2" (assert)
                             (("2" (replace -1 * rl)
                               (("2" (rewrite "nn_root_0n")
                                 (("2" (assert) nil nil)) nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ("2" (replace 1 -2)
               (("2" (typepred "root(x!1, pn!1)")
                 (("2" (replaces -1)
                   (("2" (expand "sign")
                     (("2" (expand "abs")
                       (("2" (assert)
                         (("2" (lemma "nn_root_pos" ("px" "-x!1" "pn" "pn!1"))
                           (("2" (assert) nil nil)) nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (> const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (nn_root_pos formula-decl nil nn_root nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (nn_root_lt1 formula-decl nil nn_root nil)
         (nn_root_0n formula-decl nil nn_root nil)
         (<= const-decl "bool" reals nil)
         (TRUE const-decl "bool" booleans nil))
        shostak))
      (neg_root_TCC1 0
       (neg_root_TCC1-1 nil 3427775104 ("" (subtype-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (> const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (odd? const-decl "bool" integers nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil))
        nil
        (neg_root subtype "root.pn"
         "{pm | booleans.OR(reals.>=((number_fields.-)(root.x), 0), integers.odd?(root.pm))}")))
      (neg_root_TCC2 0
       (neg_root_TCC2-1 nil 3427775104 ("" (subtype-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (> const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (odd? const-decl "bool" integers nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil))
        nil
        (neg_root subtype "root.pn"
         "{pm | booleans.OR(reals.>=(root.x, 0), integers.odd?(root.pm))}")))
      (neg_root 0
       (neg_root-2 "" 3790094247
        ("" (skosimp)
         (("" (typepred "root(-x!1, pn!1)")
           (("" (replaces -1)
             (("" (typepred "root(x!1, pn!1)")
               (("" (replaces -1)
                 (("" (lemma "trich_lt" ("x" "x!1" "y" "0"))
                   (("" (expand "abs")
                     (("" (expand "sign")
                       (("" (split)
                         (("1" (assert) nil nil)
                          ("2" (assert)
                           (("2" (replace -1)
                             (("2" (rewrite "nn_root_0n") nil nil)) nil))
                           nil)
                          ("3" (assert) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        nil shostak)
       (neg_root-1 nil 3427775105
        ("" (skosimp)
         (("" (typepred "root(-x!1, pn!1)")
           (("" (replaces -1)
             (("" (typepred "root(x!1, pn!1)")
               (("" (replaces -1)
                 (("" (lemma "trich_lt" ("x" "x!1" "y" "0"))
                   (("" (expand "abs")
                     (("" (expand "sign")
                       (("" (split)
                         (("1" (assert) nil nil)
                          ("2" (assert)
                           (("2" (replace -1)
                             (("2" (rewrite "nn_root_0n")
                               (("2" (assert) nil nil)) nil))
                             nil))
                           nil)
                          ("3" (assert) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (trich_lt formula-decl nil real_props nil)
         (nn_root_0n formula-decl nil nn_root nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (TRUE const-decl "bool" booleans nil)
         (minus_real_is_real application-judgement "real" reals nil))
        shostak))
      (mult_root_TCC1 0
       (mult_root_TCC1-1 nil 3427758158
        ("" (skosimp)
         (("" (typepred "pn!1")
           (("" (assert)
             (("" (flatten)
               ((""
                 (lemma "le_times_le_pos"
                  ("nnx" "0" "y" "x!1" "nnz" "0" "w" "y!1"))
                 (("" (assert) nil nil)) nil))
               nil))
             nil))
           nil))
         nil)
        ((odd? const-decl "bool" integers nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (> const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (le_times_le_pos formula-decl nil real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_times_real_is_real application-judgement "real" reals nil))
        nil
        (mult_root subtype "root.pn"
         "{pm | booleans.OR(reals.>=(number_fields.*(root.x, root.y), 0), integers.odd?(root.pm))}")))
      (mult_root_TCC2 0
       (mult_root_TCC2-1 nil 3427759296
        ("" (skosimp) (("" (typepred "pn!1") (("" (assert) nil nil)) nil))
         nil)
        ((odd? const-decl "bool" integers nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (> const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        nil
        (mult_root subtype "root.pn"
         "{pm | booleans.OR(reals.>=(root.x, 0), integers.odd?(root.pm))}")))
      (mult_root_TCC3 0
       (mult_root_TCC3-1 nil 3427760995 ("" (subtype-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (> const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (odd? const-decl "bool" integers nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil))
        nil
        (mult_root subtype "root.pn"
         "{pm | booleans.OR(reals.>=(root.y, 0), integers.odd?(root.pm))}")))
      (mult_root 0
       (mult_root-1 nil 3427762524
        ("" (skosimp)
         (("" (typepred "root(x!1 * y!1, pn!1)")
           (("" (replaces -1)
             (("" (typepred "root(x!1, pn!1)")
               (("" (replaces -1)
                 (("" (typepred "root(y!1, pn!1)")
                   (("" (replaces -1)
                     (("" (expand "sign")
                       (("" (expand "abs")
                         (("" (lemma "trichotomy" ("x" "x!1"))
                           (("" (split -1)
                             (("1" (lemma "trichotomy" ("x" "y!1"))
                               (("1" (split)
                                 (("1"
                                   (lemma "posreal_times_posreal_is_posreal"
                                    ("px" "x!1" "py" "y!1"))
                                   (("1" (assert)
                                     (("1" (rewrite "mult_nn_root") nil nil))
                                     nil)
                                    ("2" (assert) nil nil)
                                    ("3" (assert) nil nil))
                                   nil)
                                  ("2" (replace -1)
                                   (("2" (assert)
                                     (("2"
                                       (rewrite "nn_root_0n")
                                       (("2" (assert) nil nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("3" (assert)
                                   (("3"
                                     (lemma "both_sides_times_pos_lt1"
                                      ("pz" "x!1" "x" "y!1" "y" "0"))
                                     (("3"
                                       (assert)
                                       (("3"
                                         (lemma
                                          "mult_nn_root"
                                          ("x" "-y!1" "y" "x!1" "pn" "pn!1"))
                                         (("3" (assert) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil)
                              ("2" (replace -1)
                               (("2" (assert)
                                 (("2" (rewrite "nn_root_0n")
                                   (("2" (assert) nil nil)) nil))
                                 nil))
                               nil)
                              ("3" (lemma "trichotomy" ("x" "y!1"))
                               (("3" (split)
                                 (("1"
                                   (lemma "both_sides_times_pos_lt1"
                                    ("pz" "y!1" "x" "x!1" "y" "0"))
                                   (("1" (assert)
                                     (("1"
                                       (lemma
                                        "mult_nn_root"
                                        ("x" "-x!1" "y" "y!1" "pn" "pn!1"))
                                       (("1" (assert) nil nil))
                                       nil))
                                     nil)
                                    ("2" (assert) nil nil))
                                   nil)
                                  ("2" (assert)
                                   (("2" (replace -1)
                                     (("2"
                                       (rewrite "nn_root_0n")
                                       (("2" (assert) nil nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("3"
                                   (lemma "negreal_times_negreal_is_posreal"
                                    ("nx" "x!1" "ny" "y!1"))
                                   (("1" (assert)
                                     (("1"
                                       (rewrite "mult_nn_root" + :dir rl)
                                       (("1" (assert) nil nil))
                                       nil))
                                     nil)
                                    ("2" (assert) nil nil)
                                    ("3" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (trichotomy formula-decl nil real_axioms nil)
         (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
         (<= const-decl "bool" reals nil)
         (nonpos_real nonempty-type-eq-decl nil real_types nil)
         (< const-decl "bool" reals nil)
         (negreal nonempty-type-eq-decl nil real_types nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (both_sides_times_pos_lt1 formula-decl nil real_props nil)
         (nn_root_0n formula-decl nil nn_root nil)
         (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (mult_nn_root formula-decl nil nn_root nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
          real_types nil)
         (TRUE const-decl "bool" booleans nil)
         (real_times_real_is_real application-judgement "real" reals nil))
        shostak))
      (inv_root_TCC1 0
       (inv_root_TCC1-1 nil 3427758158
        ("" (skosimp)
         (("" (typepred "pn!1")
           (("" (replace 2 -2)
             ((""
               (lemma "posreal_div_posreal_is_posreal"
                ("px" "1" "py" "n0x!1"))
               (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
             nil))
           nil))
         nil)
        ((odd? const-decl "bool" integers nil)
         (nzreal nonempty-type-eq-decl nil reals nil)
         (/= const-decl "boolean" notequal nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (> const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil))
        nil
        (inv_root subtype "root.pn"
         "{pm | booleans.OR(reals.>=(number_fields./(1, root.n0x), 0), integers.odd?(root.pm))}")))
      (inv_root_TCC2 0
       (inv_root_TCC2-1 nil 3427758158
        ("" (skosimp) (("" (rewrite "root_is_0") nil nil)) nil)
        ((root_is_0 formula-decl nil root nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (/= const-decl "boolean" notequal nil)
         (nzreal nonempty-type-eq-decl nil reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (odd? const-decl "bool" integers nil))
        nil (inv_root subtype "root.root(root.n0x, root.pn)" "nznum")))
      (inv_root 0
       (inv_root-1 nil 3427764733
        ("" (skosimp)
         (("" (typepred "root(1 / n0x!1, pn!1)")
           (("" (replaces -1)
             (("" (typepred "root(n0x!1, pn!1)")
               (("" (replaces -1)
                 (("" (cross-mult)
                   (("" (case-replace "sign(1 / n0x!1) = sign(n0x!1)")
                     (("1" (hide -1)
                       (("1" (rewrite "sq" :dir rl)
                         (("1" (rewrite "sq_sign")
                           (("1" (case-replace "abs(1/n0x!1) = 1/abs(n0x!1)")
                             (("1" (hide -1)
                               (("1" (rewrite "inv_nn_root")
                                 (("1" (assert) nil nil)) nil))
                               nil)
                              ("2" (hide 2)
                               (("2" (grind)
                                 (("1" (grind-reals) nil nil)
                                  ("2" (grind-reals) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil)
                      ("2" (hide-all-but 1)
                       (("2" (grind)
                         (("1" (grind-reals) nil nil)
                          ("2" (grind-reals) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((nzreal nonempty-type-eq-decl nil reals nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (div_cancel4 formula-decl nil real_props nil)
         (nonzero_real nonempty-type-eq-decl nil reals nil)
         (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
          real_defs nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (sign_mult_clos application-judgement "Sign" sign reals)
         (div_mult_pos_ge1 formula-decl nil real_props nil)
         (div_mult_neg_ge1 formula-decl nil real_props nil)
         (sq_sign formula-decl nil sign reals)
         (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
          real_types nil)
         (div_mult_neg_lt1 formula-decl nil real_props nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (div_mult_pos_lt1 formula-decl nil real_props nil)
         (zero_times1 formula-decl nil real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
          nil)
         (inv_nn_root formula-decl nil nn_root nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (sign_sq_clos application-judgement "Sign" sign reals)
         (sq_nz_pos application-judgement "posreal" sq reals)
         (sq const-decl "nonneg_real" sq reals)
         (TRUE const-decl "bool" booleans nil)
         (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil))
        shostak))
      (div_root_TCC1 0
       (div_root_TCC1-1 nil 3427758158
        ("" (skosimp)
         (("" (typepred "pn!1")
           (("" (replace 2 -2)
             (("" (flatten)
               ((""
                 (lemma "both_sides_div_pos_ge1"
                  ("pz" "n0y!1" "x" "x!1" "y" "0"))
                 (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
               nil))
             nil))
           nil))
         nil)
        ((odd? const-decl "bool" integers nil)
         (nzreal nonempty-type-eq-decl nil reals nil)
         (/= const-decl "boolean" notequal nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (> const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (real_div_nzreal_is_real application-judgement "real" reals nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (both_sides_div_pos_ge1 formula-decl nil real_props nil))
        nil
        (div_root subtype "root.pn"
         "{pm | booleans.OR(reals.>=(number_fields./(root.x, root.n0y), 0), integers.odd?(root.pm))}")))
      (div_root_TCC2 0
       (div_root_TCC2-1 nil 3427761736 ("" (subtype-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (/= const-decl "boolean" notequal nil)
         (nzreal nonempty-type-eq-decl nil reals nil)
         (> const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (odd? const-decl "bool" integers nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil))
        nil
        (div_root subtype "root.pn"
         "{pm | booleans.OR(reals.>=(root.x, 0), integers.odd?(root.pm))}")))
      (div_root_TCC3 0
       (div_root_TCC3-1 nil 3427761736 ("" (subtype-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (/= const-decl "boolean" notequal nil)
         (nzreal nonempty-type-eq-decl nil reals nil)
         (> const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (odd? const-decl "bool" integers nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil))
        nil
        (div_root subtype "root.pn"
         "{pm | booleans.OR(reals.>=(root.n0y, 0), integers.odd?(root.pm))}")))
      (div_root_TCC4 0
       (div_root_TCC4-1 nil 3427761736
        ("" (skosimp) (("" (rewrite "root_is_0") nil nil)) nil)
        ((root_is_0 formula-decl nil root nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (/= const-decl "boolean" notequal nil)
         (nzreal nonempty-type-eq-decl nil reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (odd? const-decl "bool" integers nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil))
        nil (div_root subtype "root.root(root.n0y, root.pn)" "nznum")))
      (div_root 0
       (div_root-1 nil 3427765209
        ("" (skosimp)
         (("" (lemma "inv_root" ("n0x" "n0y!1" "pn" "pn!1"))
           (("" (lemma "mult_root" ("x" "x!1" "y" "1/n0y!1" "pn" "pn!1"))
             (("1" (assert) nil nil)
              ("2" (typepred "pn!1")
               (("2" (flatten)
                 (("2" (assert)
                   (("2" (flatten)
                     (("2" (replace -2 1)
                       (("2"
                         (lemma "posreal_div_posreal_is_posreal"
                          ("px" "1" "py" "n0y!1"))
                         (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((AND const-decl "[bool, bool -> bool]" booleans nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (nzreal nonempty-type-eq-decl nil reals nil)
         (/= const-decl "boolean" notequal nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (inv_root formula-decl nil root nil)
         (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (mult_root formula-decl nil root nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (real_div_nzreal_is_real application-judgement "real" reals nil))
        shostak))
      (root_mult_TCC1 0
       (root_mult_TCC1-1 nil 3427758158
        ("" (skosimp)
         (("" (typepred "pn!1")
           (("" (typepred "pm!1")
             (("" (replace 1 *)
               (("" (hide -1 -3 1)
                 (("" (expand "odd?")
                   (("" (skosimp*)
                     (("" (replace -1)
                       (("" (replace -2)
                         (("" (hide -1 -2)
                           (("" (assert)
                             (("" (inst + "2 * (j!1 * j!2) + j!1 + j!2")
                               (("" (assert) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (> const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (int_plus_int_is_int application-judgement "int" integers nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (int_times_int_is_int application-judgement "int" integers nil)
         (even_plus_even_is_even application-judgement "even_int" integers
          nil)
         (odd_plus_even_is_odd application-judgement "odd_int" integers nil))
        nil
        (root_mult subtype "number_fields.*(root.pn, root.pm)"
         "{pm | booleans.OR(reals.>=(root.x, 0), integers.odd?(root.pm))}")))
      (root_mult_TCC2 0
       (root_mult_TCC2-1 nil 3427758158
        ("" (skosimp)
         (("" (typepred "pm!1")
           (("" (replace 2)
             (("" (rewrite "root_nn_root_rew")
               (("" (typepred "nn_root(x!1, pn!1)")
                 (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
               nil))
             nil))
           nil))
         nil)
        ((odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (> const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (root_nn_root_rew formula-decl nil root nil)
         (nnreal type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil))
        nil
        (root_mult subtype "root.pm"
         "{pm | booleans.OR(reals.>=(root.root(root.x, root.pn), 0), integers.odd?(root.pm))}")))
      (root_mult 0
       (root_mult-1 nil 3427761737
        ("" (skosimp)
         (("" (typepred "root(x!1, pn!1 * pm!1)")
           (("" (replaces -1)
             (("" (typepred "root(x!1, pn!1)")
               (("" (replaces -1)
                 ((""
                   (typepred
                    "root(nn_root(abs(x!1), pn!1) * sign(x!1), pm!1)")
                   (("" (replaces -1)
                     (("" (typepred "pn!1")
                       (("" (typepred "pm!1")
                         (("" (case-replace "x!1>=0")
                           (("1" (expand ">=" -1)
                             (("1" (expand "<=" -1)
                               (("1" (split -1)
                                 (("1" (expand "sign")
                                   (("1" (assert)
                                     (("1"
                                       (expand "abs")
                                       (("1"
                                         (assert)
                                         (("1"
                                           (typepred "nn_root(x!1, pn!1)")
                                           (("1"
                                             (assert)
                                             (("1"
                                               (lemma
                                                "nn_root_pos"
                                                ("px" "x!1" "pn" "pn!1"))
                                               (("1"
                                                 (assert)
                                                 (("1"
                                                   (rewrite "nn_root_mult")
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2" (replace -1 * rl)
                                   (("2" (expand "abs")
                                     (("2"
                                       (expand "sign")
                                       (("2"
                                         (rewrite "nn_root_0n")
                                         (("2"
                                           (rewrite "nn_root_0n")
                                           (("2"
                                             (assert)
                                             (("2"
                                               (rewrite "nn_root_0n")
                                               nil
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (replace 1)
                             (("2" (expand "sign")
                               (("2" (assert)
                                 (("2" (expand "abs")
                                   (("2" (assert)
                                     (("2"
                                       (rewrite "nn_root_mult")
                                       (("2"
                                         (lemma
                                          "nn_root_pos"
                                          ("px" "-x!1" "pn" "pn!1"))
                                         (("2" (assert) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (odd? const-decl "bool" integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (posint_times_posint_is_posint application-judgement "posint"
          integers nil)
         (<= const-decl "bool" reals nil)
         (nn_root_0n formula-decl nil nn_root nil)
         (nn_root_pos formula-decl nil nn_root nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (nn_root_mult formula-decl nil nn_root nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (TRUE const-decl "bool" booleans nil))
        shostak))
      (root_increasing_TCC1 0
       (root_increasing_TCC1-1 nil 3427758158
        ("" (skosimp)
         (("" (split)
           (("1" (flatten) (("1" (assert) nil nil)) nil)
            ("2" (flatten) nil nil))
           nil))
         nil)
        ((real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil))
        nil
        (root_increasing subtype "root.pn"
         "{pm | booleans.OR(reals.>=(root.x, 0), integers.odd?(root.pm))}")))
      (root_increasing_TCC2 0
       (root_increasing_TCC2-1 nil 3427761736
        ("" (skosimp)
         (("" (split)
           (("1" (flatten) (("1" (assert) nil nil)) nil)
            ("2" (flatten) nil nil))
           nil))
         nil)
        ((real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil))
        nil
        (root_increasing subtype "root.pm"
         "{pm | booleans.OR(reals.>=(root.x, 0), integers.odd?(root.pm))}")))
      (root_increasing 0
       (root_increasing-1 nil 3427775559
        ("" (skosimp*)
         (("" (split)
           (("1" (flatten)
             (("1" (rewrite "root_nn_root_rew")
               (("1" (rewrite "root_nn_root_rew")
                 (("1"
                   (lemma "nn_root_increasing"
                    ("pn" "pn!1" "pm" "pm!1" "x" "x!1"))
                   (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                 nil))
               nil))
             nil)
            ("2" (flatten)
             (("2" (lemma "neg_root" ("pn" "pn!1" "x" "-x!1"))
               (("2" (lemma "neg_root" ("pn" "pm!1" "x" "-x!1"))
                 (("2" (assert)
                   (("2" (replace -1)
                     (("2" (replace -2)
                       (("2" (hide -1 -2 -3 -4)
                         (("2" (rewrite "root_nn_root_rew")
                           (("2" (rewrite "root_nn_root_rew")
                             (("2"
                               (lemma "nn_root_decreasing"
                                ("pn" "pn!1" "pm" "pm!1" "x" "-x!1"))
                               (("2" (assert) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (root_nn_root_rew formula-decl nil root nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (nn_root_increasing formula-decl nil nn_root nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (neg_root formula-decl nil root nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (nn_root_decreasing formula-decl nil nn_root nil))
        shostak))
      (root_decreasing_TCC1 0
       (root_decreasing_TCC1-1 nil 3427758158
        ("" (skosimp)
         (("" (split) (("1" (assert) nil nil) ("2" (flatten) nil nil)) nil))
         nil)
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        nil
        (root_decreasing subtype "root.pn"
         "{pm | booleans.OR(reals.>=(root.x, 0), integers.odd?(root.pm))}")))
      (root_decreasing_TCC2 0
       (root_decreasing_TCC2-1 nil 3427761736
        ("" (skosimp)
         (("" (split) (("1" (assert) nil nil) ("2" (flatten) nil nil)) nil))
         nil)
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        nil
        (root_decreasing subtype "root.pm"
         "{pm | booleans.OR(reals.>=(root.x, 0), integers.odd?(root.pm))}")))
      (root_decreasing 0
       (root_decreasing-1 nil 3427775824
        ("" (skosimp)
         (("" (split)
           (("1"
             (lemma "nn_root_decreasing" ("pn" "pn!1" "pm" "pm!1" "x" "x!1"))
             (("1" (rewrite "root_nn_root_rew")
               (("1" (rewrite "root_nn_root_rew") (("1" (assert) nil nil))
                 nil))
               nil)
              ("2" (assert) nil nil))
             nil)
            ("2" (flatten)
             (("2" (lemma "neg_root" ("pn" "pn!1" "x" "-x!1"))
               (("2" (lemma "neg_root" ("pn" "pm!1" "x" "-x!1"))
                 (("2" (assert)
                   (("2" (replace -1)
                     (("2" (replace -2)
                       (("2" (hide -1 -2 -3 -4)
                         (("2" (rewrite "root_nn_root_rew")
                           (("2" (rewrite "root_nn_root_rew")
                             (("2"
                               (lemma "nn_root_increasing"
                                ("pn" "pn!1" "pm" "pm!1" "x" "-x!1"))
                               (("2" (assert) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((root_nn_root_rew formula-decl nil root nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (nn_root_decreasing formula-decl nil nn_root nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (nnreal type-eq-decl nil real_types nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (neg_root formula-decl nil root nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (nn_root_increasing formula-decl nil nn_root nil))
        shostak))
      (continuous_alt_root_TCC1 0
       (continuous_alt_root_TCC1-1 nil 3427758158 ("" (subtype-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (> const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (odd? const-decl "bool" integers nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil))
        nil
        (continuous_alt_root subtype "root.pn"
         "{pm | booleans.OR(reals.>=(root.x, 0), integers.odd?(root.pm))}")))
      (continuous_alt_root_TCC2 0
       (continuous_alt_root_TCC2-1 nil 3427767159 ("" (subtype-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (> const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (odd? const-decl "bool" integers nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil))
        nil
        (continuous_alt_root subtype "root.pn"
         "{pm | booleans.OR(reals.>=(root.y, 0), integers.odd?(root.pm))}")))
      (continuous_alt_root 0
       (continuous_alt_root-1 nil 3427766368
        ("" (skosimp*)
         ((""
           (case "EXISTS delta:
        FORALL (y: {z | z >= 0 OR odd?(pn!1)}):
          abs(x!1 - y) < delta =>
           abs(nn_root(abs(x!1), pn!1)*sign(x!1) - nn_root(abs(y), pn!1)*sign(y)) < epsilon!1")
           (("1" (skeep -1)
             (("1" (insteep 1)
               (("1" (skeep)
                 (("1" (insteep)
                   (("1" (typepred "root(x!1, pn!1)")
                     (("1" (typepred "root(y, pn!1)") (("1" (assert) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("2" (hide 2)
             (("2"
               (lemma "continuous_alt_nn_root"
                ("epsilon" "epsilon!1" "pn" "pn!1"))
               (("2" (inst - "abs(x!1)")
                 (("2" (skosimp)
                   (("2" (case-replace "x!1=0")
                     (("1" (expand "abs" -2 2)
                       (("1" (expand "abs" -2 3)
                         (("1" (expand "abs" 1 3)
                           (("1" (expand "sign" 1 1)
                             (("1" (rewrite "nn_root_0n")
                               (("1" (inst + "delta!1")
                                 (("1" (skosimp)
                                   (("1" (typepred "y!1")
                                     (("1"
                                       (inst - "abs(y!1)")
                                       (("1"
                                         (rewrite "abs_mult" -3)
                                         (("1"
                                           (rewrite "abs_abs")
                                           (("1"
                                             (rewrite "abs_mult" -4)
                                             (("1"
                                               (assert)
                                               (("1"
                                                 (rewrite "abs_mult" -3)
                                                 (("1"
                                                   (expand "sign")
                                                   (("1"
                                                     (case-replace "y!1=0")
                                                     (("1"
                                                       (expand "abs")
                                                       (("1"
                                                         (assert)
                                                         (("1"
                                                           (rewrite
                                                            "nn_root_0n")
                                                           (("1"
                                                             (assert)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (assert)
                                                       (("2"
                                                         (expand "abs" 2 1)
                                                         (("2"
                                                           (expand "abs" 2 3)
                                                           (("2"
                                                             (expand
                                                              "abs"
                                                              -3
                                                              1)
                                                             (("2"
                                                               (expand
                                                                "abs"
                                                                -4
                                                                1)
                                                               (("2"
                                                                 (case-replace
                                                                  "y!1>0")
                                                                 (("1"
                                                                   (assert)
                                                                   nil
                                                                   nil)
                                                                  ("2"
                                                                   (assert)
                                                                   (("2"
                                                                     (assert)
                                                                     (("2"
                                                                       (expand
                                                                        "abs")
                                                                       (("2"
                                                                         (assert)
                                                                         nil
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil)
                      ("2" (case "x!1>0")
                       (("1" (hide 1)
                         (("1" (expand "abs" -2 2)
                           (("1" (expand "abs" -2 3)
                             (("1" (expand "abs" 1 3)
                               (("1" (assert)
                                 (("1" (inst + "min(x!1,delta!1)")
                                   (("1" (skosimp)
                                     (("1"
                                       (case "y!1>=0")
                                       (("1"
                                         (inst - "y!1")
                                         (("1"
                                           (expand "abs" 1 2)
                                           (("1"
                                             (assert)
                                             (("1"
                                               (expand "sign")
                                               (("1" (propax) nil nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil)
                                        ("2"
                                         (hide-all-but (-1 -3 1))
                                         (("2" (grind) nil nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2" (hide -2) (("2" (grind) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (case "x!1<0")
                         (("1" (hide 1 2)
                           (("1" (expand "abs" -2 2)
                             (("1" (expand "abs" -2 3)
                               (("1" (expand "abs" 1 3)
                                 (("1" (expand "sign" 1 1)
                                   (("1" (assert)
                                     (("1"
                                       (inst + "min(delta!1,-x!1)")
                                       (("1"
                                         (skosimp)
                                         (("1"
                                           (case "y!1<0")
                                           (("1"
                                             (expand "sign")
                                             (("1"
                                               (assert)
                                               (("1"
                                                 (expand "abs" 1 2)
                                                 (("1"
                                                   (inst - "-y!1")
                                                   (("1"
                                                     (split -3)
                                                     (("1"
                                                       (lemma
                                                        "abs_mult"
                                                        ("x"
                                                         "nn_root(-x!1, pn!1) - nn_root(-y!1, pn!1)"
                                                         "y"
                                                         "-1"))
                                                       (("1"
                                                         (replace -1)
                                                         (("1"
                                                           (hide -1)
                                                           (("1"
                                                             (expand
                                                              "abs"
                                                              1
                                                              2)
                                                             (("1"
                                                               (assert)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (hide 2)
                                                       (("2" (grind) nil nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (hide-all-but (-1 -3 1))
                                             (("2" (grind) nil nil))
                                             nil))
                                           nil))
                                         nil)
                                        ("2"
                                         (hide -2)
                                         (("2" (grind) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (assert) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((sign const-decl "Sign" sign reals)
         (Sign type-eq-decl nil sign reals)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (nzint nonempty-type-eq-decl nil integers nil)
         (/= const-decl "boolean" notequal nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nnreal type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (< const-decl "bool" reals nil)
         (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (odd? const-decl "bool" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (>= const-decl "bool" reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (continuous_alt_nn_root formula-decl nil nn_root nil)
         (<= const-decl "bool" reals nil)
         (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
         (x!1 skolem-const-decl "real" root nil)
         (delta!1 skolem-const-decl "posreal" root nil)
         (y!1 skolem-const-decl "{z | z >= 0 OR odd?(pn!1)}" root nil)
         (pn!1 skolem-const-decl "{pm | x!1 >= 0 AND y1!1 >= 0 OR odd?(pm)}"
          root nil)
         (y1!1 skolem-const-decl "real" root nil)
         (nn_root_0n formula-decl nil nn_root nil)
         (abs_abs formula-decl nil real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (int_times_even_is_even application-judgement "even_int" integers
          nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
          real_types nil)
         (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
          real_defs nil)
         (abs_mult formula-decl nil real_props nil)
         (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
          real_defs nil)
         (real_minus_real_is_real application-judgement "real" reals nil))
        shostak))
      (root_root_pos_rew 0
       (root_root_pos_rew-1 nil 3722012233
        ("" (skeep)
         (("" (rewrite "root_root_nn_rew")
           (("" (rewrite "root_nn_root_pos_rew") nil nil)) nil))
         nil)
        ((root_root_nn_rew formula-decl nil root nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (root_nn_root_pos_rew formula-decl nil root nil))
        shostak))
      (root_root_real_rew 0
       (root_root_real_rew-1 nil 3722013738
        ("" (skeep)
         (("" (expand "root_real")
           (("" (case-replace "x=0")
             (("1" (grind) nil nil)
              ("2" (assert)
               (("2" (case-replace "x>0")
                 (("1" (rewrite "root_root_pos_rew") nil nil)
                  ("2" (assert)
                   (("2" (lemma "root_root_pos_rew")
                     (("2" (inst -1 "-x" "pn")
                       (("2" (replaces -1 :dir rl)
                         (("2" (typepred "pn")
                           (("2" (assert)
                             (("2" (rewrite "neg_root")
                               (("2" (assert) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((root_real const-decl "{x |
        (x = 0 IFF r = 0) AND (x > 0 IFF r > 0) AND (x < 0 IFF r < 0)
    AND (x >= 0 IFF r >= 0) AND (x <= 0 IFF r <= 0) AND (x ^ n = r)}" root
          reals)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (neg_root formula-decl nil root nil)
         (TRUE const-decl "bool" booleans nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (root_root_pos_rew formula-decl nil root nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (odd? const-decl "bool" integers nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (> const-decl "bool" reals nil)
         (root_nn const-decl "{y: nnreal | y = nn_root(nx, pn)}" root nil)
         (root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil))
        shostak))
      (root_type_TCC1 0
       (root_type_TCC1-1 nil 3722016558 ("" (subtype-tcc) nil nil)
        ((/= const-decl "boolean" notequal nil)) nil
        (root_type subtype "root.pn"
         "{i: integers.int | booleans.OR(root.y /= 0, reals.>=(i, 0))}")))
      (root_type 0
       (root_type-1 nil 3722016630
        ("" (skeep)
         (("" (skoletin 1)
           (("" (rewrite "root_root_real_rew")
             (("" (typepred "root_real(x)(pn)") (("" (ground) nil nil)) nil))
             nil))
           nil))
         nil)
        ((real_times_real_is_real application-judgement "real" reals nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (nn_root const-decl "nnreal" nn_root nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (odd? const-decl "bool" integers nil)
         (/= const-decl "boolean" notequal nil)
         (nzint nonempty-type-eq-decl nil integers nil)
         (Sign type-eq-decl nil sign reals)
         (sign const-decl "Sign" sign reals)
         (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
         (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
         (root const-decl "{y: real | y = nn_root(abs(x), pn) * sign(x)}" root
               nil)
         (TRUE const-decl "bool" booleans nil)
         (id const-decl "(bijective?[T, T])" identity nil)
         (bijective? const-decl "bool" functions nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (IFF const-decl "[bool, bool -> bool]" booleans nil)
         (^ const-decl "real" exponentiation nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (root_real const-decl "{x |
        (x = 0 IFF r = 0) AND (x > 0 IFF r > 0) AND (x < 0 IFF r < 0)
    AND (x >= 0 IFF r >= 0) AND (x <= 0 IFF r <= 0) AND (x ^ n = r)}" root
          reals)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (root_root_real_rew formula-decl nil root nil))
        shostak)))


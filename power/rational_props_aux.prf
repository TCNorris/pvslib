(rational_props_aux
 (denominator_TCC1 0
  (denominator_TCC1-1 nil 3427168375
   ("" (skosimp)
    (("" (lemma "rational_pred_ax2" ("r" "r!1"))
      (("" (skosimp)
        (("" (expand "nonempty?")
          (("" (expand "empty?")
            (("" (inst - "p!1")
              (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rational_pred_ax2 formula-decl nil rational_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nonempty? const-decl "bool" sets nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil))
   nil
   (denominator subtype
                "{p | integers.integer_pred(number_fields.*(rational_props_aux.r, rational_props_aux.p))}"
                "(sets[posnat].nonempty?)")))
 (numerator_TCC1 0
  (numerator_TCC1-1 nil 3427168375
   ("" (skosimp)
    (("" (typepred "denominator(r!1)")
      (("" (name "DOM" "denominator(r!1)")
        (("" (replace -1)
          (("" (expand "denominator")
            (("" (rewrite "min_def" -1)
              (("" (expand "minimum?") (("" (flatten) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((denominator const-decl "posnat" rational_props_aux nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (min_def formula-decl nil min_nat nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minimum? const-decl "bool" min_nat nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil
   (numerator subtype
              "number_fields.*(rational_props_aux.r, rational_props_aux.denominator(rational_props_aux.r))"
              "int")))
 (rational_def 0
  (rational_def-1 nil 3427269493
   ("" (skosimp) (("" (expand "numerator") (("" (assert) nil nil)) nil)) nil)
   ((numerator const-decl "int" rational_props_aux nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (denominator_int 0
  (denominator_int-1 nil 3427169839
   ("" (skosimp)
    (("" (expand "denominator")
      (("" (rewrite "min_def")
        (("1" (expand "minimum?") (("1" (propax) nil nil)) nil)
         ("2" (expand "nonempty?")
          (("2" (expand "empty?")
            (("2" (inst - "1")
              (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (denominator const-decl "posnat" rational_props_aux nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (minimum? const-decl "bool" min_nat nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (TRUE const-decl "bool" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (min_def formula-decl nil min_nat nil))
   shostak))
 (numerator_int 0
  (numerator_int-1 nil 3427169992
   ("" (skosimp)
    (("" (expand "numerator")
      (("" (rewrite "denominator_int") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((numerator const-decl "int" rational_props_aux nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (denominator_int formula-decl nil rational_props_aux nil))
   shostak))
 (numerator_is_zero 0
  (numerator_is_zero-1 nil 3427170016
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "numerator")
          (("1" (typepred "denominator(r!1)")
            (("1" (rewrite "zero_times3") (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (replace -1) (("2" (rewrite "numerator_int") nil nil)) nil))
        nil))
      nil))
    nil)
   ((numerator const-decl "int" rational_props_aux nil)
    (zero_times3 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (denominator const-decl "posnat" rational_props_aux nil)
    (numerator_int formula-decl nil rational_props_aux nil))
   shostak))
 (numerator_pos 0
  (numerator_pos-1 nil 3427173035
   ("" (skosimp)
    (("" (expand "numerator")
      ((""
        (lemma "both_sides_times_pos_gt1"
         ("pz" "denominator(r!1)" "x" "r!1" "y" "0"))
        (("" (rewrite "zero_times1") nil nil)) nil))
      nil))
    nil)
   ((numerator const-decl "int" rational_props_aux nil)
    (zero_times1 formula-decl nil real_props nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (denominator const-decl "posnat" rational_props_aux nil))
   shostak))
 (numerator_neg 0
  (numerator_neg-1 nil 3427172967
   ("" (skosimp)
    (("" (expand "numerator")
      (("" (typepred "denominator(r!1)")
        ((""
          (lemma "both_sides_times_pos_lt1"
           ("pz" "denominator(r!1)" "x" "r!1" "y" "0"))
          (("" (assert) (("" (rewrite "zero_times1") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((numerator const-decl "int" rational_props_aux nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (denominator const-decl "posnat" rational_props_aux nil))
   shostak)))


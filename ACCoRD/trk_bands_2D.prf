(trk_bands_2D
 (trk_band 0
  (trk_band-1 nil 3460312877
   ("" (skeep)
    (("" (expand "trk_line_eps_irt")
      (("" (expand "tangent_line")
        (("" (lift-if)
          (("" (split -1)
            (("1" (flatten)
              (("1"
                (name-replace "trk_line"
                 "trk_only_line(Qs(ss,eps),vo,vi,irt)" :hide? nil)
                (("1" (expand "trk_only_line")
                  (("1" (lift-if)
                    (("1" (split -1)
                      (("1" (flatten)
                        (("1"
                          (name-replace "rr"
                           "root2b(sqv(Qs(ss, eps)), Qs(ss, eps) * vi, sqv(vi) - sqv(vo),irt)")
                          (("1" (hide -1)
                            (("1" (replaces -1 :dir rl)
                              (("1"
                                (assert)
                                (("1"
                                  (replaces -2)
                                  (("1"
                                    (rewrite "det_add_left")
                                    (("1"
                                      (rewrite "det_scal_left")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (move-terms 1 l 1)
                                          (("1"
                                            (case-replace
                                             "eps * det(vi, ss) - det(vi, ss) * eps = 0")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (rewrite "det_asym")
                                                (("1"
                                                  (rewrite "det_s_Qs")
                                                  (("1"
                                                    (real-props
                                                     :simple?
                                                     t)
                                                    (("1"
                                                      (grind-reals)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replaces -1 :dir rl)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (typepred "nvo") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trk_line_eps_irt const-decl
     "{nvo: Vect2 | nvo /= zero => trk_only?(vo)(nvo)}" trk_line nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D "vectors/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D "vectors/")
    (root2b const-decl "real" quadratic_2b "reals/")
    (discr2b const-decl "real" quadratic_2b "reals/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (det_scal_left formula-decl nil det_2D "vectors/")
    (det const-decl "real" det_2D "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (det_s_Qs formula-decl nil tangent_line nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sign_neg_clos application-judgement "Sign" sign "reals/")
    (pos_times_ge formula-decl nil real_props nil)
    (neg_times_ge formula-decl nil real_props nil)
    (neg_mult formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (det_asym formula-decl nil det_2D "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (det_add_left formula-decl nil det_2D "vectors/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (Qs const-decl "Vect2" tangent_line nil)
    (Ss_vect2 type-eq-decl nil horizontal nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (trk_only_line const-decl "{(k: real, nvo: Vect2) |
   nvo /= zero => trk_only?(vo)(nvo) AND k * vnz = nvo - vi}" trk_only
     nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) nil
    (* const-decl "Vector" vectors_2D "vectors/")
    (trk_only? const-decl "bool" definitions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil
    (tangent_line const-decl "Nz_vect2" tangent_line nil))
   nil))
 (trk2v2_continuous 0
  (trk2v2_continuous-2 nil 3459317738
   ("" (skeep)
    (("" (expand "trk2v2")
      (("" (expand "trkgs2vect")
        (("" (rewrite "scal_scal_cont_rv")
          (("" (hide 2)
            (("" (rewrite "pair_cont_rv")
              (("1" (rewrite "cos_cont_fun") nil nil)
               ("2" (rewrite "sin_cont_fun") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (scal_scal_cont_rv formula-decl nil vect2_cont_dot
     "vect_analysis/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (sin const-decl "real" sincos_def "trig/")
    (cos const-decl "real" sincos_def "trig/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    nil (pair_cont_rv formula-decl nil vect_cont_2D "vect_analysis/")
    (cos_cont_fun formula-decl nil sincos "trig/")
    (sin_cont_fun formula-decl nil sincos "trig/")
    (trkgs2vect const-decl "Nz_vect2" track nil))
   nil
   (trk2v2_continuous subtype "bands_util.trk2v2(trk_bands_2D.vo)"
    "continuous_rv_fun[real]"))
  (trk2v2_continuous-1 nil 3459317725 ("" (judgement-tcc) nil nil) nil
   nil
   (trk2v2_continuous subtype "bands_util.trk2v2(trk_bands_2D.vo)"
    "continuous_rv_fun[real]")))
 (Vtrk_continuous 0
  (Vtrk_continuous-1 nil 3443464664
   ("" (skeep)
    (("" (expand "Vtrk")
      (("" (rewrite "sub_cont_rv")
        (("1" (hide 2) (("1" (rewrite "const_cont_rv") nil nil)) nil)
         ("2" (hide 2)
          (("2"
            (case-replace
             "(LAMBDA (trk: real): trk2v2(vo)(trk)) = trk2v2(vo)")
            (("1" (assert) nil nil)
             ("2" (decompose-equality 1) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vtrk const-decl "Vect2" bands_util nil)
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (const_cont_rv formula-decl nil vect_cont_2D "vect_analysis/")
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (trk_only? const-decl "bool" definitions nil)
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (continuous_rv_fun nonempty-type-eq-decl nil cont_real_vect2
     "vect_analysis/")
    nil (bool nonempty-type-eq-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sub_cont_rv formula-decl nil vect_cont_2D "vect_analysis/")
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil))
   shostak
   (Vtrk_continuous subtype
    "bands_util.Vtrk(trk_bands_2D.vo, trk_bands_2D.vi)"
    "continuous_rv_fun[real]")))
 (Omega_trk_spc 0
  (Omega_trk_spc-2 nil 3459203874
   ("" (skeep)
    (("" (expand "Omega_trk_spc")
      (("" (rewrite "sub_cont")
        (("1" (rewrite "const_cont") nil nil)
         ("2" (rewrite "dot_cont_rr")
          (("1"
            (case-replace "(LAMBDA(trk):trk2v2(vo)(trk))=trk2v2(vo)")
            (("1" (assert) nil nil)
             ("2" (decompose-equality 1) nil nil))
            nil)
           ("2" (rewrite "const_cont_rv") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Omega_trk_spc const-decl "real" trk_bands_2D nil)
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil) nil
    (dot_cont_rr formula-decl nil vect2_cont_dot "vect_analysis/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (const_cont_rv formula-decl nil vect_cont_2D "vect_analysis/") nil
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (trk_only? const-decl "bool" definitions nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (* const-decl "real" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (continuous_fun nonempty-type-eq-decl nil continuous_functions
     "analysis/")
    nil (bool nonempty-type-eq-decl nil booleans nil) nil
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (Omega_trk_spc subtype
    "trk_bands_2D.Omega_trk_spc(trk_bands_2D.vo, trk_bands_2D.vi, trk_bands_2D.t)"
    "(LAMBDA (frr: [real -> real]): continuous_functions[real].continuous?(trk_bands_2D.frr))"))
  (Omega_trk_spc-1 nil 3459203808 ("" (judgement-tcc) nil nil) nil nil
   (Omega_trk_spc subtype
    "trk_bands_2D.Omega_trk_spc(trk_bands_2D.vo, trk_bands_2D.vi, trk_bands_2D.t)"
    "(LAMBDA (frr: [real -> real]): continuous_functions[real].continuous?(trk_bands_2D.frr))")))
 (trk_special_case_invariant 0
  (trk_special_case_invariant-1 nil 3467987873
   ("" (skeep)
    (("" (expand "trk_special_case?")
      (("" (typepred "trk2v2(vo)(trk)")
        (("" (expand "trk_only?")
          (("" (rewrite "norms_eq_sqv")
            (("" (replaces -1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((trk_special_case? const-decl "bool" trk_only nil)
    (TRUE const-decl "bool" booleans nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D "vectors/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D "vectors/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (norms_eq_sqv formula-decl nil vectors_2D "vectors/")
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (trk_only? const-decl "bool" definitions nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil))
   nil))
 (Omega_trk_spc_separated 0
  (Omega_trk_spc_separated-2 "" 3504829738
   ("" (skeep)
    (("" (case "sqv(s)<sq(D)")
      (("1" (expand "trk_special_case?")
        (("1" (expand "Omega_trk_spc")
          (("1" (mult-by -2 "sq(t)")
            (("1" (rewrite "sq_div")
              (("1" (assert)
                (("1" (real-props)
                  (("1" (flatten)
                    (("1"
                      (case "sq(t) * (vi * trk2v2(vo)(trk)) = t*(s*trk2v2(vo)(trk))")
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (both-sides "+" "sq(D)" -1)
                            (("1" (assert)
                              (("1"
                                (lemma "sq_eq")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (rewrite "sq_times")
                                          (("1"
                                            (lemma
                                             "vectors_2D.cauchy_schwarz")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (case
                                                 "sqv(trk2v2(vo)(trk)) = sqv(vo)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (mult-by
                                                     -2
                                                     "sq(t)")
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (mult-by
                                                         -5
                                                         "sq(D)")
                                                        (("1"
                                                          (expand "sq")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (mult-by
                                                               -7
                                                               "t * t")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "trk2v2")
                                                  (("2"
                                                    (lemma "norm_id")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "norm(vo)"
                                                       "trk")
                                                      (("2"
                                                        (lemma "sq_eq")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "sq_norm")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_norm")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -3 +)
                        (("2" (expand "sq") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((D formal-const-decl "posreal" trk_bands_2D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (Omega_trk_spc const-decl "real" trk_bands_2D nil)
    (sq_div formula-decl nil sq "reals/")
    (div_cancel4 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_cancel1 formula-decl nil real_props nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D "vectors/")
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq_times formula-decl nil sq "reals/")
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (trkgs2vect const-decl "Nz_vect2" track nil)
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (norm_id formula-decl nil track nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (cauchy_schwarz formula-decl nil vectors_2D "vectors/")
    (sq_eq formula-decl nil sq "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (dot_scal_left formula-decl nil vectors_2D "vectors/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil)
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D "vectors/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (trk_only? const-decl "bool" definitions nil)
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (trk_special_case? const-decl "bool" trk_only nil)
    (Omega_trk_spc application-judgement
     "(LAMBDA (frr: [real -> real]): continuous?(frr))" trk_bands_2D
     nil))
   shostak)
  (Omega_trk_spc_separated-1 nil 3476810585
   ("" (skeep)
    (("" (case "sqv(s)<sq(D)")
      (("1" (expand "trk_special_case?")
        (("1" (expand "Omega_trk_spc")
          (("1" (mult-by -2 "sq(t)")
            (("1" (rewrite "sq_div")
              (("1" (assert)
                (("1" (real-props)
                  (("1" (flatten)
                    (("1"
                      (case "sq(t) * (vi * trk2v2(vo)(trk)) = t*(s*trk2v2(vo)(trk))")
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (both-sides "+" "sq(D)" -1)
                            (("1" (assert)
                              (("1"
                                (lemma "sq_eq")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (rewrite "sq_times")
                                          (("1"
                                            (lemma
                                             "vectors_2D.cauchy_schwarz")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (case
                                                 "sqv(trk2v2(vo)(trk)) = sqv(vo)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (mult-by
                                                     -2
                                                     "sq(t)")
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (mult-by
                                                         -5
                                                         "sq(D)")
                                                        (("1"
                                                          (expand "sq")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "trk2v2")
                                                  (("2"
                                                    (lemma "norm_id")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "norm(vo)"
                                                       "trk")
                                                      (("2"
                                                        (lemma "sq_eq")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "sq_norm")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_norm")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -3 +)
                        (("2" (expand "sq") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((trk_special_case? const-decl "bool" trk_only nil)
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (trk_only? const-decl "bool" definitions nil)
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (nz_nzv application-judgement "Nz_vector" vectors_2D "vectors/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil)
    (dot_scal_left formula-decl nil vectors_2D "vectors/")
    (sq_eq formula-decl nil sq "reals/")
    (cauchy_schwarz formula-decl nil vectors_2D "vectors/")
    (norm_id formula-decl nil track nil)
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (trkgs2vect const-decl "Nz_vect2" track nil)
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/")
    (sq_times formula-decl nil sq "reals/")
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D "vectors/")
    (sq_div formula-decl nil sq "reals/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (sq const-decl "nonneg_real" sq "reals/"))
   nil))
 (Omega_trk_spc_critical_TCC1 0
  (Omega_trk_spc_critical_TCC1-1 nil 3476809011
   ("" (skeep)
    (("" (lemma "Omega_trk_spc_separated")
      (("" (inst - "s" "t" "trk" "vi" "vo")
        (("" (split -1)
          (("1" (assert) nil nil) ("2" (propax) nil nil)
           ("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((Omega_trk_spc_separated formula-decl nil trk_bands_2D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (Omega_trk_spc application-judgement
     "(LAMBDA (frr: [real -> real]): continuous?(frr))" trk_bands_2D
     nil)
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil))
   nil
   (Omega_trk_spc_critical subtype "trk_bands_2D.s" "Sp_vect2[D]")))
 (Omega_trk_spc_critical 0
  (Omega_trk_spc_critical-2 nil 3467987851
   ("" (skeep)
    (("" (lemma "Omega_trk_spc_separated")
      (("" (inst - "s" "t" "trk" "vi" "vo")
        (("" (assert)
          (("" (lemma "trk_spc_line_solution")
            (("" (inst - "s" "t" "vi" "trk2v2(vo)(trk)")
              (("" (expand "Vtrk")
                (("" (ground)
                  (("1" (lemma "trk_special_case_invariant")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (lemma "trk_spc_dot")
                    (("2" (expand "Omega_trk_spc")
                      (("2"
                        (inst - "trk2v2(vo)(trk)" "s" "t" "vi" "vo")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Omega_trk_spc_separated formula-decl nil trk_bands_2D nil)
    (Omega_trk_spc application-judgement
     "(LAMBDA (frr: [real -> real]): continuous?(frr))" trk_bands_2D
     nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (trk_only? const-decl "bool" definitions nil)
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil)
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (trk_special_case_invariant formula-decl nil trk_bands_2D nil)
    (Omega_trk_spc const-decl "real" trk_bands_2D nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (trk_spc_dot formula-decl nil trk_only nil)
    (Vtrk const-decl "Vect2" bands_util nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (trk_spc_line_solution formula-decl nil trk_only nil)
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil))
   nil)
  (Omega_trk_spc_critical-1 nil 3459191518
   ("" (lemma "trk_spc_line_solution")
    (("" (skeep)
      (("" (expand "Vtrk")
        (("" (inst - "sp" "T" "vi" "trk2v2(vo)(trk)")
          (("" (ground)
            (("1" (postpone) nil nil)
             ("2" (expand "Omega_trk_spc")
              (("2" (lemma "trk_spc_dot")
                (("2" (inst - "trk2v2(vo)(trk)" "sp" "T" "vi" "vo")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trk_only? const-decl "bool" definitions nil)
    (Sign type-eq-decl nil sign "reals/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (sq_nz_pos application-judgement "posreal" sq "reals/"))
   shostak))
 (trk_special_case_conflict_T 0
  (trk_special_case_conflict_T-1 nil 3476631150
   ("" (skeep)
    (("" (name-replace "v" "Vtrk(vo,vi)(trk)" :hide? nil)
      (("" (case "sqv(s+T*v)=sq(D)")
        (("1" (expand "trk_special_case?")
          (("1" (flatten)
            (("1" (split)
              (("1" (flatten)
                (("1" (expand "conflict_2D?")
                  (("1" (skolem -2 "tt")
                    (("1" (typepred "tt")
                      (("1" (lemma "horizontal_entry_le")
                        (("1" (inst -1 "s" "tt" "T" "v")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (case-replace "v=zero")
                  (("1" (assert) nil nil)
                   ("2" (lemma "not_horizontal_entry_lt")
                    (("2" (inst -1 "v" "s" "T")
                      (("1" (skoletin -1)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "conflict_2D?")
                              (("1"
                                (inst 2 "max(t1,B)")
                                (("1"
                                  (expand "max" +)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (lemma
                                         "strictly_convex_btw_pt_lt")
                                        (("1"
                                          (lemma
                                           "horiz_dist_strictly_convex_scaf")
                                          (("1"
                                            (inst - "s" "v")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -
                                                 "t1"
                                                 "T"
                                                 "0"
                                                 "LAMBDA (trt: real): horiz_dist_scaf(s)(trt, v)"
                                                 "B")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "horiz_dist_scaf")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "max" +)
                                  (("2"
                                    (lift-if)
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "Vtrk")
            (("2" (lemma "trk_spc_on_D")
              (("2" (inst?)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vtrk const-decl "Vect2" bands_util nil)
    (trk_spc_on_D formula-decl nil trk_only nil)
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (trk_only? const-decl "bool" definitions nil)
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil)
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (trk_special_case? const-decl "bool" trk_only nil)
    (conflict_2D? const-decl "bool" cd2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (Vtrk_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D "vectors/")
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D "vectors/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (horizontal_entry_le formula-decl nil horizontal nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (scal_zero formula-decl nil vectors_2D "vectors/") nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (horiz_dist_strictly_convex_scaf formula-decl nil
     horizontal_dist_convexity nil)
    (horiz_dist_scaf const-decl "real" horizontal_dist_convexity nil)
    (strictly_convex_btw_pt_lt formula-decl nil convex_functions
     "reals/")
    nil nil
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (< const-decl "bool" reals nil)
    (* const-decl "real" vectors_2D "vectors/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (horizontal_tca const-decl "real" definitions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (not_horizontal_entry_lt formula-decl nil horizontal nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" trk_bands_2D nil)
    (T formal-const-decl "{AB: posreal | AB > B}" trk_bands_2D nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (D formal-const-decl "posreal" trk_bands_2D nil))
   nil))
 (trk_special_case_conflict_B 0
  (trk_special_case_conflict_B-1 nil 3476631820
   ("" (skeep)
    (("" (name-replace "v" "Vtrk(vo,vi)(trk)" :hide? nil)
      (("" (lemma "on_D_conflict")
        (("" (inst?)
          (("" (split -1)
            (("1" (replace -1)
              (("1" (hide-all-but 1) (("1" (ground) nil nil)) nil))
              nil)
             ("2" (expand "Vtrk")
              (("2" (lemma "trk_spc_on_D")
                (("2" (inst?)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vtrk const-decl "Vect2" bands_util nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (trk_only? const-decl "bool" definitions nil)
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (trk_spc_on_D formula-decl nil trk_only nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (on_D_conflict formula-decl nil cd2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" trk_bands_2D nil)
    (T formal-const-decl "{AB: posreal | AB > B}" trk_bands_2D nil))
   nil))
 (Omega_trk_spc_conflict_T 0
  (Omega_trk_spc_conflict_T-1 nil 3476636132
   ("" (skeep)
    (("" (lemma "trk_special_case_conflict_T")
      (("" (inst?)
        (("" (assert)
          (("" (split 1)
            (("1" (flatten)
              (("1" (assert)
                (("1" (hide -2)
                  (("1" (expand "Omega_trk_spc")
                    (("1" (expand "Vtrk")
                      (("1" (expand "trk_special_case?")
                        (("1" (flatten)
                          (("1" (hide 1)
                            (("1" (replace -4 :dir rl)
                              (("1"
                                (hide -4)
                                (("1"
                                  (name "w" "trk2v2(vo)(trk)")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (case "sqv(vo) = sqv(w)")
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (hide -4)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (mult-by -1 "T")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "trk2v2(vo)(trk)")
                                        (("2"
                                          (expand "trk_only?")
                                          (("2"
                                            (lemma
                                             "vectors_2D.sq_norm")
                                            (("2"
                                              (inst-cp
                                               -1
                                               "trk2v2(vo)(trk)")
                                              (("2"
                                                (inst -1 "vo")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (hide -2)
                  (("2" (expand "trk_special_case?")
                    (("2" (flatten)
                      (("2" (expand "Omega_trk_spc")
                        (("2" (replace -2)
                          (("2" (replace -3 :dir rl)
                            (("2" (name "w" "trk2v2(vo)(trk)")
                              (("2"
                                (replace -1)
                                (("2"
                                  (case "sqv(vo) = sqv(w)")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "Vtrk")
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (hide -)
                                          (("1"
                                            (mult-by 1 "T")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "trk2v2(vo)(trk)")
                                    (("2"
                                      (expand "trk_only?")
                                      (("2"
                                        (lemma "vectors_2D.sq_norm")
                                        (("2"
                                          (inst-cp
                                           -1
                                           "trk2v2(vo)(trk)")
                                          (("2"
                                            (inst -1 "vo")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trk_special_case_conflict_T formula-decl nil trk_bands_2D nil)
    (Vtrk_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (Omega_trk_spc application-judgement
     "(LAMBDA (frr: [real -> real]): continuous?(frr))" trk_bands_2D
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (Vtrk const-decl "Vect2" bands_util nil)
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (trk_only? const-decl "bool" definitions nil)
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D "vectors/")
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" trk_bands_2D nil)
    (T formal-const-decl "{AB: posreal | AB > B}" trk_bands_2D nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/") nil
    (* const-decl "Vector" vectors_2D "vectors/")
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/")
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (trk_special_case? const-decl "bool" trk_only nil)
    (Omega_trk_spc const-decl "real" trk_bands_2D nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (Omega_trk_spc_conflict_B 0
  (Omega_trk_spc_conflict_B-1 nil 3476636249
   ("" (skeep)
    (("" (lemma "trk_special_case_conflict_B")
      (("" (inst?)
        (("" (assert)
          (("" (hide -2)
            (("" (split 1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (hide -2)
                    (("1" (expand "Omega_trk_spc")
                      (("1" (expand "Vtrk")
                        (("1" (expand "trk_special_case?")
                          (("1" (flatten)
                            (("1" (hide 1)
                              (("1"
                                (replace -4 :dir rl)
                                (("1"
                                  (hide -4)
                                  (("1"
                                    (name "w" "trk2v2(vo)(trk)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case "sqv(vo) = sqv(w)")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (hide -4)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (mult-by -1 "B")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "trk2v2(vo)(trk)")
                                          (("2"
                                            (expand "trk_only?")
                                            (("2"
                                              (lemma
                                               "vectors_2D.sq_norm")
                                              (("2"
                                                (inst-cp
                                                 -1
                                                 "trk2v2(vo)(trk)")
                                                (("2"
                                                  (inst -1 "vo")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (hide -2)
                    (("2" (expand "trk_special_case?")
                      (("2" (flatten)
                        (("2" (expand "Omega_trk_spc")
                          (("2" (replace -2)
                            (("2" (replace -3 :dir rl)
                              (("2"
                                (name "w" "trk2v2(vo)(trk)")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (case "sqv(vo) = sqv(w)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "Vtrk")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (hide -)
                                            (("1"
                                              (mult-by 1 "B")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "trk2v2(vo)(trk)")
                                      (("2"
                                        (expand "trk_only?")
                                        (("2"
                                          (lemma "vectors_2D.sq_norm")
                                          (("2"
                                            (inst-cp
                                             -1
                                             "trk2v2(vo)(trk)")
                                            (("2"
                                              (inst -1 "vo")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trk_special_case_conflict_B formula-decl nil trk_bands_2D nil)
    (Vtrk_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (Omega_trk_spc application-judgement
     "(LAMBDA (frr: [real -> real]): continuous?(frr))" trk_bands_2D
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (Omega_trk_spc const-decl "real" trk_bands_2D nil)
    (trk_special_case? const-decl "bool" trk_only nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/")
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (* const-decl "Vector" vectors_2D "vectors/") nil
    (+ const-decl "Vector" vectors_2D "vectors/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (B formal-const-decl "nnreal" trk_bands_2D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D "vectors/")
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (trk_only? const-decl "bool" definitions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Vtrk const-decl "Vect2" bands_util nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (Omega_trk_TCC1 0
  (Omega_trk_TCC1-2 nil 3444144010
   ("" (skeep)
    (("" (rewrite "comp_vr_rv_cont")
      (("" (lemma "omega_v2_continuous")
        (("" (hide 2)
          (("" (inst?)
            (("" (expand "continuous_vr?")
              (("" (expand "continuous?")
                (("" (expand "continuous?")
                  (("" (expand "continuous_at?")
                    (("" (expand "continuous_vr?")
                      (("" (skeep)
                        (("" (inst - "x0")
                          (("1" (skosimp*)
                            (("1" (inst - "epsilon!1")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst + "delta!1")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst - "x!1")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (expand "ball")
                                          (("1"
                                            (expand "real_dist")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "dist_norm")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (case
                                                     "norm(x0-x!1) = norm(x!1-x0)")
                                                    (("1"
                                                      (expand "abs")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "fullset")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "fullset")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vtrk_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (comp_vr_rv_cont formula-decl nil vect2_cont_comp "vect_analysis/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (Vtrk const-decl "Vect2" bands_util nil) nil
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" trk_bands_2D nil)
    (T formal-const-decl "{AB: posreal | AB > B}" trk_bands_2D nil)
    (omega_v2 const-decl "real" omega_v2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil) nil
    (real_minus_real_is_real application-judgement "real" reals nil)
    nil (set type-eq-decl nil sets nil)
    (fullset const-decl "set" sets nil) nil nil
    (ball const-decl "set[T]" metric_spaces "analysis/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil) nil
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dist_norm formula-decl nil distance_2D "vectors/")
    (real_dist const-decl "nnreal" real_metric_space "analysis/")
    (member const-decl "bool" sets nil) nil nil
    (omega_v2_continuous formula-decl nil omega_v2 nil))
   nil
   (Omega_trk subtype
    "vect2_cont_comp[real].o(omega_v2[trk_bands_2D.D, trk_bands_2D.B, trk_bands_2D.T].omega_v2(trk_bands_2D.s), bands_util.Vtrk(trk_bands_2D.vo, trk_bands_2D.vi))"
    "(LAMBDA (frr: [real -> real]): continuous_functions[real].continuous?(trk_bands_2D.frr))"))
  (Omega_trk_TCC1-1 nil 3444143969 ("" (subtype-tcc) nil nil) nil nil
   (Omega_trk subtype
    "vect2_cont_comp[real].o(omega_v2[trk_bands_2D.D, trk_bands_2D.B, trk_bands_2D.T].omega_v2(trk_bands_2D.s), bands_util.Vtrk(trk_bands_2D.vo, trk_bands_2D.vi))"
    "(LAMBDA (frr: [real -> real]): continuous_functions[real].continuous?(trk_bands_2D.frr))")))
 (Omega_trk_critical 0
  (Omega_trk_critical-1 nil 3443205728
   ("" (skeep)
    (("" (expand "Omega_trk")
      (("" (expand "o")
        (("" (expand "Vtrk")
          (("" (lemma "omega_v2_critical_points")
            (("" (inst?)
              (("" (assert)
                (("" (expand "trk_critical?")
                  (("" (flatten)
                    (("" (split -1)
                      (("1" (flatten)
                        (("1" (skeep -2)
                          (("1" (assert)
                            (("1" (lemma "trk_line_complete")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1" (inst 1 "eps") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "trk_only_circle_complete")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (flatten)
                        (("3" (assert)
                          (("3" (lemma "trk_only_circle_complete")
                            (("3"
                              (inst - "1" "trk2v2(vo)(trk)" "s" "B"
                               "vi" "vo")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Omega_trk const-decl
     "(LAMBDA (frr: [real -> real]): continuous?(frr))" trk_bands_2D
     nil)
    (Vtrk const-decl "Vect2" bands_util nil)
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (trk_only? const-decl "bool" definitions nil)
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil) nil
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (trk_critical? const-decl "bool" trk_bands_2D nil)
    (trk_line_complete formula-decl nil trk_line nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (trk_only_circle_complete formula-decl nil trk_only nil)
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil)
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (omega_v2_critical_points formula-decl nil omega_v2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" trk_bands_2D nil)
    (T formal-const-decl "{AB: posreal | AB > B}" trk_bands_2D nil)
    (O const-decl "[T -> real]" vect2_cont_comp "vect_analysis/"))
   nil))
 (trk_line_sort_eps 0
  (trk_line_sort_eps-1 nil 3460979611
   ("" (skeep)
    (("" (lemma "trk_line_eps_irt_tangent_line")
      (("" (inst?)
        (("" (assert)
          (("" (expand "tangent_line?")
            (("" (skeep -1)
              (("" (case-replace "nnk=0")
                (("1" (assert) (("1" (rewrite "sub_eq_zero") nil nil))
                  nil)
                 ("2"
                  (case "det(nvo-vi,ss) = det(nnk * tangent_line(ss, eps),ss)")
                  (("1" (hide -2)
                    (("1" (rewrite "det_sub_left")
                      (("1" (rewrite "det_scal_left")
                        (("1" (mult-by -1 "eps")
                          (("1" (assert)
                            (("1"
                              (case "nnk*(det(tangent_line(ss, eps), ss) * eps) > 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but (1 2))
                                (("2"
                                  (mult-cases 1)
                                  (("2"
                                    (expand "tangent_line")
                                    (("2"
                                      (rewrite "det_asym")
                                      (("2"
                                        (lemma "det_s_Qs_lt_0")
                                        (("2"
                                          (inst -1 "eps" "ss")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((D formal-const-decl "posreal" trk_bands_2D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trk_line_eps_irt_tangent_line formula-decl nil trk_line nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tangent_line const-decl "Nz_vect2" tangent_line nil)
    (* const-decl "Vector" vectors_2D "vectors/") nil
    (det const-decl "real" det_2D "vectors/")
    (det_sub_left formula-decl nil det_2D "vectors/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pos_times_gt formula-decl nil real_props nil)
    (Qs const-decl "Vect2" tangent_line nil)
    (det_asym formula-decl nil det_2D "vectors/") nil
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (det_s_Qs_lt_0 formula-decl nil tangent_line nil)
    (det_scal_left formula-decl nil det_2D "vectors/")
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (sub_eq_zero formula-decl nil vectors_2D "vectors/")
    (tangent_line? const-decl "bool" tangent_line nil)
    (Ss_vect2 type-eq-decl nil horizontal nil)
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil))
   shostak))
 (trk_line_sort_eps_angle_TCC1 0
  (trk_line_sort_eps_angle_TCC1-1 nil 3460995654
   ("" (skeep)
    (("" (typepred "vo")
      (("" (typepred "ss")
        (("" (case "ss /= zero")
          (("1" (lemma "norm_eq_0")
            (("1" (inst-cp - "vo")
              (("1" (inst - "ss")
                (("1" (flatten)
                  (("1" (replace 1)
                    (("1" (replace 3) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D "vectors/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqv_zero formula-decl nil vectors_2D "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (Ss_vect2 type-eq-decl nil horizontal nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (trk_line_sort_eps_angle subtype
    "number_fields./(det_2D.det(trk_bands_2D.vi, trk_bands_2D.ss), (number_fields.*(vectors_2D.norm(trk_bands_2D.vo), vectors_2D.norm(trk_bands_2D.ss))))"
    "real_abs_le1")))
 (trk_line_sort_eps_angle_TCC2 0
  (trk_line_sort_eps_angle_TCC2-1 nil 3460995654
   ("" (skosimp*)
    (("" (expand "trk_line_eps_irt?") (("" (assert) nil nil)) nil))
    nil)
   ((trk_line_eps_irt? const-decl "bool" trk_line nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/"))
   nil
   (trk_line_sort_eps_angle subtype "trk_bands_2D.nvo1" "Nz_vect2")))
 (trk_line_sort_eps_angle_TCC3 0
  (trk_line_sort_eps_angle_TCC3-1 nil 3460995654
   ("" (skosimp*)
    (("" (expand "trk_line_eps_irt?") (("" (assert) nil nil)) nil))
    nil)
   ((trk_line_eps_irt? const-decl "bool" trk_line nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/"))
   nil
   (trk_line_sort_eps_angle subtype "trk_bands_2D.nvo2" "Nz_vect2")))
 (trk_line_sort_eps_angle 0
  (trk_line_sort_eps_angle-1 nil 3460995873
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (lemma "trk_line_sort_eps")
          (("" (inst-cp -1 "1" "irt1" "nvo1" "ss" "vi" "vo")
            (("" (assert)
              (("" (inst -1 "-1" "irt2" "nvo2" "ss" "vi" "vo")
                (("" (assert)
                  (("" (expand "trk_line_eps_irt?")
                    (("" (flatten)
                      ((""
                        (typepred
                         "trk_line_eps_irt(ss, vo, vi, 1, irt1)")
                        (("" (assert)
                          ((""
                            (typepred
                             "trk_line_eps_irt(ss, vo, vi, -1, irt2)")
                            (("" (assert)
                              ((""
                                (replaces (-6 -7) :dir rl)
                                ((""
                                  (expand "trk_only?")
                                  ((""
                                    (lemma "ordered_eps_1")
                                    ((""
                                      (inst -1 "nvo1" "ss" "vi")
                                      ((""
                                        (assert)
                                        ((""
                                          (flatten)
                                          ((""
                                            (lemma "ordered_eps_neg_1")
                                            ((""
                                              (inst
                                               -1
                                               "nvo2"
                                               "ss"
                                               "vi")
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (trk_line_sort_eps formula-decl nil trk_bands_2D nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (ordered_eps_neg_1 formula-decl nil track nil)
    (ordered_eps_1 formula-decl nil track nil)
    (TRUE const-decl "bool" booleans nil)
    (trk_line_eps_irt const-decl
     "{nvo: Vect2 | nvo /= zero => trk_only?(vo)(nvo)}" trk_line nil)
    (trk_only? const-decl "bool" definitions nil)
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (trk_line_eps_irt? const-decl "bool" trk_line nil)
    (Ss_vect2 type-eq-decl nil horizontal nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (trk_line_sort_eps_1_angle_case1_TCC1 0
  (trk_line_sort_eps_1_angle_case1_TCC1-1 nil 3461083409
   ("" (skosimp*)
    (("" (expand "trk_line_eps_irt?") (("" (flatten) nil nil)) nil))
    nil)
   ((trk_line_eps_irt? const-decl "bool" trk_line nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/"))
   nil
   (trk_line_sort_eps_1_angle_case1 subtype "trk_bands_2D.nvo1"
    "Nz_vect2")))
 (trk_line_sort_eps_1_angle_case1_TCC2 0
  (trk_line_sort_eps_1_angle_case1_TCC2-1 nil 3461083409
   ("" (skosimp*)
    (("" (expand "trk_line_eps_irt?") (("" (flatten) nil nil)) nil))
    nil)
   ((trk_line_eps_irt? const-decl "bool" trk_line nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/"))
   nil
   (trk_line_sort_eps_1_angle_case1 subtype "trk_bands_2D.nvo2"
    "Nz_vect2")))
 (trk_line_sort_eps_1_angle_case1 0
  (trk_line_sort_eps_1_angle_case1-1 nil 3461083490
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (lemma "trk_line_sort_eps")
          (("" (inst-cp -1 "1" "-1" "nvo1" "ss" "vi" "vo")
            (("" (assert)
              (("" (inst -1 "1" "1" "nvo2" "ss" "vi" "vo")
                (("" (assert)
                  (("" (lemma "trk_line_eps_irt_dot")
                    (("" (inst -1 "1" "nvo1" "nvo2" "ss" "vi" "vo")
                      (("" (assert)
                        (("" (mult-cases -5)
                          (("" (expand "trk_line_eps_irt?")
                            (("" (flatten)
                              ((""
                                (typepred
                                 "trk_line_eps_irt(ss, vo, vi, 1, -1)")
                                ((""
                                  (assert)
                                  ((""
                                    (typepred
                                     "trk_line_eps_irt(ss, vo, vi, 1, 1)")
                                    ((""
                                      (assert)
                                      ((""
                                        (expand "trk_only?")
                                        ((""
                                          (replaces (-9 -10) :dir rl)
                                          ((""
                                            (lemma
                                             " ordered_eps_1_dot_gt_0")
                                            ((""
                                              (inst
                                               -1
                                               "nvo1"
                                               "ss"
                                               "vi")
                                              ((""
                                                (replaces -3)
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (flatten)
                                                    ((""
                                                      (lemma
                                                       " ordered_eps_1_dot_lt_0")
                                                      ((""
                                                        (inst
                                                         -1
                                                         "nvo2"
                                                         "ss"
                                                         "vi")
                                                        ((""
                                                          (replace -4)
                                                          ((""
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (trk_line_sort_eps formula-decl nil trk_bands_2D nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (* const-decl "real" vectors_2D "vectors/")
    (TRUE const-decl "bool" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (ordered_eps_1_dot_lt_0 formula-decl nil track nil)
    (ordered_eps_1_dot_gt_0 formula-decl nil track nil)
    (trk_line_eps_irt const-decl
     "{nvo: Vect2 | nvo /= zero => trk_only?(vo)(nvo)}" trk_line nil)
    (trk_only? const-decl "bool" definitions nil)
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (trk_line_eps_irt? const-decl "bool" trk_line nil)
    (trk_line_eps_irt_dot formula-decl nil trk_line nil)
    (Ss_vect2 type-eq-decl nil horizontal nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (trk_line_sort_eps_1_angle_case2_TCC1 0
  (trk_line_sort_eps_1_angle_case2_TCC1-1 nil 3461087210
   ("" (skosimp*)
    (("" (expand "trk_line_eps_irt?") (("" (flatten) nil nil)) nil))
    nil)
   ((trk_line_eps_irt? const-decl "bool" trk_line nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/"))
   nil
   (trk_line_sort_eps_1_angle_case2 subtype "trk_bands_2D.nvo1"
    "Nz_vect2")))
 (trk_line_sort_eps_1_angle_case2_TCC2 0
  (trk_line_sort_eps_1_angle_case2_TCC2-1 nil 3461087210
   ("" (skosimp*)
    (("" (expand "trk_line_eps_irt?") (("" (flatten) nil nil)) nil))
    nil)
   ((trk_line_eps_irt? const-decl "bool" trk_line nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/"))
   nil
   (trk_line_sort_eps_1_angle_case2 subtype "trk_bands_2D.nvo2"
    "Nz_vect2")))
 (trk_line_sort_eps_1_angle_case2 0
  (trk_line_sort_eps_1_angle_case2-1 nil 3461087322
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (lemma "trk_line_sort_eps")
          (("" (inst-cp -1 "1" "1" "nvo2" "ss" "vi" "vo")
            (("" (inst -1 "1" "-1" "nvo1" "ss" "vi" "vo")
              (("" (assert)
                (("" (expand "trk_line_eps_irt?")
                  (("" (flatten)
                    ((""
                      (typepred "trk_line_eps_irt(ss, vo, vi, 1, -1)")
                      ((""
                        (typepred "trk_line_eps_irt(ss, vo, vi, 1, 1)")
                        (("" (replaces (-7 -8) :dir rl)
                          (("" (assert)
                            (("" (expand "trk_only?")
                              ((""
                                (name-replace
                                 "xx1"
                                 "to2pi(track(nvo1) -
                         (track(ss) + asin(det(vi, ss) / (norm(vo) * norm(ss)))))"
                                 :hide?
                                 nil)
                                ((""
                                  (name-replace
                                   "xx2"
                                   "to2pi(track(nvo2) -
                          (track(ss) + asin(det(vi, ss) / (norm(vo) * norm(ss)))))"
                                   :hide?
                                   nil)
                                  ((""
                                    (case
                                     "xx2-xx1 > -pi AND xx2-xx1 < pi")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "to2pi(xx1-xx2) = to2pi(track(nvo1)-track(nvo2))")
                                        (("1"
                                          (lemma "trkgs2vect_id")
                                          (("1"
                                            (inst-cp -1 "nvo1")
                                            (("1"
                                              (inst -1 "nvo2")
                                              (("1"
                                                (replace -1 5 :dir rl)
                                                (("1"
                                                  (replace
                                                   -2
                                                   5
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (expand
                                                     "trkgs2vect")
                                                    (("1"
                                                      (rewrite
                                                       "det_scal_left")
                                                      (("1"
                                                        (rewrite
                                                         "det_scal_right")
                                                        (("1"
                                                          (case-replace
                                                           "norm(nvo1) *
                          (norm(nvo2) *
                            det((# x := sin(track(nvo1)), y := cos(track(nvo1)) #),
                                (# x := sin(track(nvo2)), y := cos(track(nvo2)) #)))
                          < 0 IFF
                            det((# x := sin(track(nvo1)), y := cos(track(nvo1)) #),
                                (# x := sin(track(nvo2)), y := cos(track(nvo2)) #))
                          < 0")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (expand
                                                               "det"
                                                               5)
                                                              (("1"
                                                                (rewrite
                                                                 "sin_minus"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (lemma
                                                                   "sin_id_to2pi")
                                                                  (("1"
                                                                    (inst?
                                                                     -1)
                                                                    (("1"
                                                                      (replaces
                                                                       -4)
                                                                      (("1"
                                                                        (rewrite
                                                                         "sin_id_to2pi")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (case-replace
                                                                             "xx1 < xx2 IFF xx1 - xx2 < 0")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (neg-formula
                                                                                 -3)
                                                                                (("1"
                                                                                  (neg-formula
                                                                                   -4)
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "yy"
                                                                                     "xx1-xx2")
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-3
                                                                                        -4
                                                                                        5))
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "sin_ge_0")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "sin_lt_0")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "yy+2*pi")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "sin_period")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "yy"
                                                                                                     "1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 4 5))
                                                            (("2"
                                                              (lemma
                                                               "vectors_2D.norm_eq_0")
                                                              (("2"
                                                                (inst-cp
                                                                 -1
                                                                 "nvo1")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "nvo2")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (mult-cases
                                                                           -1)
                                                                          (("1"
                                                                            (mult-cases
                                                                             -1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (mult-cases
                                                                           1)
                                                                          (("2"
                                                                            (mult-cases
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-3 -4 1))
                                          (("2"
                                            (replaces - :dir rl)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "to2pi_to2pi")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "track(nvo1) - asin(det(vi, ss) / (norm(vo) * norm(ss))) -
                                     track(ss)"
                                                   "-to2pi(track(nvo2) - asin(det(vi, ss) / (norm(vo) * norm(ss)))
                                      - track(ss))")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (lemma
                                                         "to2pi_to2pi_sub")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "track(nvo2) - asin(det(vi, ss) / (norm(vo) * norm(ss)))
                                 - track(ss)"
                                                           "track(nvo1) - asin(det(vi, ss) / (norm(vo) * norm(ss)))
                         - track(ss)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (mult-cases -8)
                                      (("1"
                                        (lemma
                                         "ordered_eps_1_dot_le_0")
                                        (("1"
                                          (inst-cp -1 "nvo1" "ss" "vi")
                                          (("1"
                                            (inst -1 "nvo2" "ss" "vi")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replaces (-9 -10))
                                                  (("1"
                                                    (replaces (-7 -8))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "ordered_eps_1_dot_ge_0")
                                        (("2"
                                          (inst-cp -1 "nvo1" "ss" "vi")
                                          (("2"
                                            (inst -1 "nvo2" "ss" "vi")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces (-7 -8))
                                                (("2"
                                                  (replaces (-5 -6))
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (trk_line_sort_eps formula-decl nil trk_bands_2D nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (trk_line_eps_irt? const-decl "bool" trk_line nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (trk_only? const-decl "bool" definitions nil)
    (trk_line_eps_irt const-decl
     "{nvo: Vect2 | nvo /= zero => trk_only?(vo)(nvo)}" trk_line nil)
    (TRUE const-decl "bool" booleans nil)
    (pos_times_ge formula-decl nil real_props nil)
    (* const-decl "real" vectors_2D "vectors/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (ordered_eps_1_dot_le_0 formula-decl nil track nil)
    (ordered_eps_1_dot_ge_0 formula-decl nil track nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (to2pi_to2pi_sub formula-decl nil to2pi "trig/")
    (to2pi_to2pi formula-decl nil to2pi "trig/")
    (trkgs2vect_id formula-decl nil track nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (sin const-decl "real" sincos_def "trig/")
    (det_scal_left formula-decl nil det_2D "vectors/")
    (cos_range application-judgement "real_abs_le1" sincos "trig/")
    (sin_range application-judgement "real_abs_le1" sincos "trig/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sin_id_to2pi formula-decl nil to2pi "trig/")
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (sin_period formula-decl nil sincos "trig/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (sin_lt_0 formula-decl nil trig_ineq "trig/")
    (sin_ge_0 formula-decl nil trig_ineq "trig/")
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_neg_gt1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (sin_minus formula-decl nil sincos "trig/")
    (norm_eq_0 formula-decl nil vectors_2D "vectors/")
    (neg_times_lt formula-decl nil real_props nil)
    (det_scal_right formula-decl nil det_2D "vectors/")
    (trkgs2vect const-decl "Nz_vect2" track nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cos const-decl "real" sincos_def "trig/")
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types "trig/")
    (to2pi const-decl "nnreal_lt_2pi" to2pi "trig/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (track const-decl "nnreal_lt_2pi" track nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types "trig/")
    (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types "trig/")
    (asin const-decl "real_abs_le_pi2" asin "trig/")
    (det const-decl "real" det_2D "vectors/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (Ss_vect2 type-eq-decl nil horizontal nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (trk_line_color 0
  (trk_line_color-1 nil 3460208623
   ("" (skeep)
    (("" (expand "trk_line_eps_irt?")
      (("" (expand "trk_line_eps_irt")
        (("" (lift-if)
          (("" (assert)
            (("" (split -1)
              (("1" (flatten)
                (("1"
                  (name-replace "trko"
                   "trk_only_line(tangent_line(ss, eps), vo, vi, irt)"
                   :hide? nil)
                  (("1" (expand "trk_only_line")
                    (("1" (lift-if)
                      (("1" (split -1)
                        (("1" (flatten)
                          (("1" (decompose-equality -2)
                            (("1" (replace -1)
                              (("1"
                                (replaces -5 :dir rl)
                                (("1"
                                  (name-replace "kk" "trko`1")
                                  (("1"
                                    (expand "tangent_line")
                                    (("1"
                                      (expand "root2b")
                                      (("1"
                                        (case
                                         "discr2b(sqv(Qs(ss, eps)), Qs(ss, eps) * vi, sqv(vi) - sqv(vo)) > 0")
                                        (("1"
                                          (name-replace
                                           "dd"
                                           "discr2b(sqv(Qs(ss, eps)), Qs(ss, eps) * vi, sqv(vi) - sqv(vo))")
                                          (("1"
                                            (hide -4 -5 -6)
                                            (("1"
                                              (rewrite "sqv_Qs")
                                              (("1"
                                                (rewrite
                                                 "det_perpR"
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (replaces -3 :dir rl)
                                                  (("1"
                                                    (rewrite
                                                     "det_add_right")
                                                    (("1"
                                                      (rewrite
                                                       "det_scal_right")
                                                      (("1"
                                                        (expand
                                                         "Qs"
                                                         1
                                                         1)
                                                        (("1"
                                                          (rewrite
                                                           "det_sub_right")
                                                          (("1"
                                                            (rewrite
                                                             "det_Q_s")
                                                            (("1"
                                                              (rewrite
                                                               "Q_eq_Qs_perp")
                                                              (("1"
                                                                (rewrite
                                                                 "det_scal_left")
                                                                (("1"
                                                                  (rewrite
                                                                   "det_asym")
                                                                  (("1"
                                                                    (rewrite
                                                                     "dot_perpR"
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (name-replace
                                                                       "sD2"
                                                                       "sqv(ss)-sq(D)")
                                                                      (("1"
                                                                        (replaces
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (name-replace
                                                                             "epsirt"
                                                                             "pm*(eps*irt)")
                                                                            (("1"
                                                                              (real-props)
                                                                              (("1"
                                                                                (real-props
                                                                                 :simple?
                                                                                 t)
                                                                                (("1"
                                                                                  (expand
                                                                                   "epsirt")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "sq"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "dot_comm")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "(sqrt(sD2) > 0 AND sD2 > 0)")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "QQ"
                                                                                             "Qs(ss,eps)*vi")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "(-((((QQ * D) * eps) * pm) * sD2) -
                  sqrt(dd) * sqrt(sD2) * sqrt(sD2) * D * eps * irt * pm
                  + sD2 * QQ * D * eps * pm) = -sqrt(dd) * sqrt(sD2) * sqrt(sD2) * D * eps * irt * pm")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "-sqrt(dd) * sqrt(sD2) * sqrt(sD2) * D * eps * irt * pm > 0 IFF (sqrt(sD2)*sqrt(sD2)*D*sqrt(dd))*(pm*(eps*irt)) < 0")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "sq"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "(sD2 * D * sqrt(dd)) > 0")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (name-replace
                                                                                                             "abc"
                                                                                                             "(sD2 * D * sqrt(dd))")
                                                                                                            (("1"
                                                                                                              (real-props)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (mult-cases
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (mult-cases
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "sD2")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "sD2")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-5 1))
                                          (("2"
                                            (expand "discr2b")
                                            (("2"
                                              (rewrite "sqv_Qs")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (decompose-equality -1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trk_line_eps_irt? const-decl "bool" trk_line nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (trk_only? const-decl "bool" definitions nil)
    (* const-decl "Vector" vectors_2D "vectors/") nil
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (trk_only_line const-decl "{(k: real, nvo: Vect2) |
   nvo /= zero => trk_only?(vo)(nvo) AND k * vnz = nvo - vi}" trk_only
     nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (tangent_line const-decl "Nz_vect2" tangent_line nil)
    (Ss_vect2 type-eq-decl nil horizontal nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sqv_Qs formula-decl nil tangent_line nil)
    (det_scal_right formula-decl nil det_2D "vectors/")
    (det_sub_right formula-decl nil det_2D "vectors/")
    (det_eq_0 formula-decl nil det_2D "vectors/")
    (Q_eq_Qs_perp formula-decl nil tangent_line nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sign_neg_clos application-judgement "Sign" sign "reals/")
    (nz_nzv application-judgement "Nz_vector" vectors_2D "vectors/")
    (det_asym formula-decl nil det_2D "vectors/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (pos_div_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (minus_div1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil) nil
    (dot_comm formula-decl nil vectors_2D "vectors/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil) nil
    (neg_times_lt formula-decl nil real_props nil)
    (pos_times_lt formula-decl nil real_props nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_mult formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (dot_perpR formula-decl nil det_2D "vectors/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (det_scal_left formula-decl nil det_2D "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (perpR const-decl "Vect2" perpendicular_2D "vectors/")
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (det_Q_s formula-decl nil tangent_line nil)
    (det_add_right formula-decl nil det_2D "vectors/")
    (det_perpR formula-decl nil det_2D "vectors/")
    (Q const-decl "Vect2" tangent_line nil)
    (Qs const-decl "Vect2" tangent_line nil)
    (TRUE const-decl "bool" booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (discr2b const-decl "real" quadratic_2b "reals/")
    (root2b const-decl "real" quadratic_2b "reals/")
    (* const-decl "real" vectors_2D "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "Vector" vectors_2D "vectors/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D "vectors/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (perpR_nz application-judgement "Nz_vect2" perpendicular_2D
     "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sign_mult_clos application-judgement "Sign" sign "reals/")
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (trk_line_eps_irt const-decl
     "{nvo: Vect2 | nvo /= zero => trk_only?(vo)(nvo)}" trk_line nil))
   shostak))
 (trk_green_band 0
  (trk_green_band-2 nil 3443226487
   ("" (skeep)
    (("" (rewrite "cd2d" :dir rl)
      (("" (expand "trk_green?")
        (("" (split)
          (("1" (flatten)
            (("1" (skolem 2 "trk1")
              (("1" (case "trk_special_case?(s,vo,vi,T)")
                (("1" (lemma "trk_special_case_conflict_T")
                  (("1" (inst-cp -1 "s" "trko" "vi" "vo")
                    (("1" (inst -1 "s" "trk1" "vi" "vo")
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (hide (-3 2))
                            (("1" (lemma "IntermediateValue")
                              (("1"
                                (inst
                                 -1
                                 "band"
                                 "Omega_trk_spc(vo,vi,T)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (inst -1 "trko" "trk1")
                                      (("1"
                                        (expand "Vtrk")
                                        (("1"
                                          (lemma
                                           "trk_spc_horizontal_dir")
                                          (("1"
                                            (inst-cp
                                             -1
                                             "Entry"
                                             "trk2v2(vo)(trko)"
                                             "s"
                                             "T"
                                             "vi"
                                             "vo")
                                            (("1"
                                              (inst
                                               -1
                                               "Entry"
                                               "trk2v2(vo)(trk1)"
                                               "s"
                                               "T"
                                               "vi"
                                               "vo")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide (-3 2))
                                                  (("1"
                                                    (mult-cases -2)
                                                    (("1"
                                                      (expand
                                                       "Omega_trk_spc")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "Omega_trk_spc")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skolem 1 "x")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (lemma
                                           "Omega_trk_spc_critical")
                                          (("2"
                                            (inst
                                             -1
                                             "s"
                                             "T"
                                             "x"
                                             "vi"
                                             "vo")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "trk_band?")
                                                (("2"
                                                  (skeep -1)
                                                  (("2"
                                                    (inst - "x")
                                                    (("2"
                                                      (expand
                                                       "trk_critical?")
                                                      (("2"
                                                        (lemma
                                                         "trk_line_complete")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (lemma
                                                               "Omega_trk_spc_separated")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "s"
                                                                 "T"
                                                                 "x"
                                                                 "vi"
                                                                 "vo")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "Vtrk")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "eps")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "B>0 AND trk_special_case?(s,vo,vi,B)")
                  (("1" (flatten)
                    (("1" (lemma "trk_special_case_conflict_B")
                      (("1" (inst-cp -1 "s" "trko" "vi" "vo")
                        (("1" (inst -1 "s" "trk1" "vi" "vo")
                          (("1" (assert)
                            (("1" (lemma "IntermediateValue")
                              (("1"
                                (inst
                                 -1
                                 "band"
                                 "Omega_trk_spc(vo,vi,B)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (inst -1 "trko" "trk1")
                                      (("1"
                                        (expand "Vtrk")
                                        (("1"
                                          (lemma
                                           "trk_spc_horizontal_dir")
                                          (("1"
                                            (inst-cp
                                             -1
                                             "Exit"
                                             "trk2v2(vo)(trko)"
                                             "s"
                                             "B"
                                             "vi"
                                             "vo")
                                            (("1"
                                              (inst
                                               -1
                                               "Exit"
                                               "trk2v2(vo)(trk1)"
                                               "s"
                                               "B"
                                               "vi"
                                               "vo")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (mult-cases -2)
                                                  (("1"
                                                    (expand
                                                     "Omega_trk_spc")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "Omega_trk_spc")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skolem 1 "x")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (lemma
                                           "Omega_trk_spc_critical")
                                          (("2"
                                            (inst
                                             -1
                                             "s"
                                             "B"
                                             "x"
                                             "vi"
                                             "vo")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "trk_band?")
                                                (("2"
                                                  (skeep -1)
                                                  (("2"
                                                    (inst - "x")
                                                    (("2"
                                                      (expand
                                                       "trk_critical?")
                                                      (("2"
                                                        (lemma
                                                         "trk_line_complete")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "Omega_trk_spc_separated")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "s"
                                                                   "B"
                                                                   "x"
                                                                   "vi"
                                                                   "vo")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "Vtrk")
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "eps")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "omega_v2_conflict" :dir rl)
                    (("2" (rewrite "omega_v2_conflict" :dir rl)
                      (("2" (lemma "IntermediateValue")
                        (("2" (inst -1 "band" "Omega_trk(s,vo,vi)")
                          (("2" (assert)
                            (("2" (split -1)
                              (("1"
                                (inst -1 "trko" "trk1")
                                (("1"
                                  (expand "Omega_trk")
                                  (("1"
                                    (expand "o")
                                    (("1" (mult-cases -1) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skolem 1 "x")
                                (("2"
                                  (lemma "Omega_trk_critical")
                                  (("2"
                                    (inst -1 "s" "x" "vi" "vo")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (expand "trk_band?")
                                          (("1" (inst -3 "x") nil nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (inst? -1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cd2d formula-decl nil cd2d nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (Vtrk const-decl "Vect2" bands_util nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Connected type-eq-decl nil connected_set "reals/")
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def "trig/")
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (ConnectedGeLt type-eq-decl nil connected_set "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" trk_bands_2D nil)
    (T formal-const-decl "{AB: posreal | AB > B}" trk_bands_2D nil)
    (Vtrk_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (trk_special_case_conflict_B formula-decl nil trk_bands_2D nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (Omega_trk const-decl
     "(LAMBDA (frr: [real -> real]): continuous?(frr))" trk_bands_2D
     nil)
    nil (omega_v2 const-decl "real" omega_v2 nil)
    (O const-decl "[T -> real]" vect2_cont_comp "vect_analysis/")
    (Omega_trk_critical formula-decl nil trk_bands_2D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (omega_v2_conflict formula-decl nil omega_v2 nil)
    (trk_special_case_conflict_T formula-decl nil trk_bands_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IntermediateValue formula-decl nil interm_value_thm "analysis/")
    (Omega_trk_spc application-judgement
     "(LAMBDA (frr: [real -> real]): continuous?(frr))" trk_bands_2D
     nil)
    (Omega_trk_spc_critical formula-decl nil trk_bands_2D nil)
    (trk_critical? const-decl "bool" trk_bands_2D nil)
    (Omega_trk_spc_separated formula-decl nil trk_bands_2D nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (trk_line_complete formula-decl nil trk_line nil)
    (trk_band? const-decl "bool" trk_bands_2D nil)
    (trk_spc_horizontal_dir formula-decl nil trk_only nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil)
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (trk_only? const-decl "bool" definitions nil)
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (Omega_trk_spc const-decl "real" trk_bands_2D nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (trk_special_case? const-decl "bool" trk_only nil)
    (trk_green? const-decl "bool" trk_bands_2D nil))
   nil)
  (trk_green_band-1 nil 3443196394
   ("" (skeep)
    (("" (lemma "trk_green_two_parallel")
      (("" (inst?)
        (("" (assert)
          (("" (expand "trk_green?")
            (("" (skolem 2 "cc")
              (("" (flatten)
                (("" (case "cc < c")
                  (("1" (lemma "interm_value2")
                    (("1" (inst -1 "cc" "c" "0")
                      (("1" (assert)
                        (("1"
                          (inst -1
                           "LAMBDA (x:closed_interval(cc,c)): omega(ss,vo,vi)(x)")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1"
                                (skeep -1 :preds? t)
                                (("1"
                                  (lemma "Omega_trk_critical")
                                  (("1"
                                    (inst -1 "c_1" "ss" "vi" "vo")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (expand "trk_band?")
                                        (("1"
                                          (inst -9 "c_1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "omega" -3)
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "omega_continuous")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (lemma "cont_intv")
                                    (("2"
                                      (inst
                                       -1
                                       "cc"
                                       "c"
                                       "omega(ss,vo,vi)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "c < cc")
                    (("1" (lemma "interm_value4")
                      (("1" (inst -1 "c" "cc" "0")
                        (("1" (assert)
                          (("1"
                            (inst -1
                             "LAMBDA (x:closed_interval(c,cc)): omega(ss,vo,vi)(x)")
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1"
                                  (skeep -1 :preds? t)
                                  (("1"
                                    (lemma "Omega_trk_critical")
                                    (("1"
                                      (inst -1 "c_1" "ss" "vi" "vo")
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (expand "trk_band?")
                                          (("1"
                                            (inst -9 "c_1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "omega" -3)
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "omega_continuous")
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (lemma "cont_intv")
                                      (("2"
                                        (inst
                                         -1
                                         "c"
                                         "cc"
                                         "omega(ss,vo,vi)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cont_intv formula-decl nil interm_value_thm "analysis/")
    (interm_value2 formula-decl nil interm_value_thm "analysis/")
    (interm_value4 formula-decl nil interm_value_thm "analysis/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Ss_vect2 type-eq-decl nil horizontal nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/"))
   shostak))
 (trk_red_band 0
  (trk_red_band-4 nil 3476539631
   ("" (skeep)
    (("" (rewrite "cd2d" :dir rl)
      (("" (expand "trk_red?")
        (("" (split)
          (("1" (flatten)
            (("1" (skolem 1 "trk1")
              (("1" (case "trk_special_case?(s,vo,vi,T)")
                (("1" (lemma "trk_special_case_conflict_T")
                  (("1" (inst-cp -1 "s" "trko" "vi" "vo")
                    (("1" (inst -1 "s" "trk1" "vi" "vo")
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (hide (-3 2))
                            (("1" (lemma "IntermediateValue")
                              (("1"
                                (inst
                                 -1
                                 "band"
                                 "Omega_trk_spc(vo,vi,T)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (inst -1 "trko" "trk1")
                                      (("1"
                                        (expand "Vtrk")
                                        (("1"
                                          (lemma
                                           "trk_spc_horizontal_dir")
                                          (("1"
                                            (inst-cp
                                             -1
                                             "Entry"
                                             "trk2v2(vo)(trk1)"
                                             "s"
                                             "T"
                                             "vi"
                                             "vo")
                                            (("1"
                                              (inst
                                               -1
                                               "Entry"
                                               "trk2v2(vo)(trko)"
                                               "s"
                                               "T"
                                               "vi"
                                               "vo")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide (-3 2))
                                                  (("1"
                                                    (mult-cases -2)
                                                    (("1"
                                                      (expand
                                                       "Omega_trk_spc")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "Omega_trk_spc")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skolem 1 "x")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (lemma
                                           "Omega_trk_spc_critical")
                                          (("2"
                                            (inst
                                             -1
                                             "s"
                                             "T"
                                             "x"
                                             "vi"
                                             "vo")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "trk_band?")
                                                (("2"
                                                  (skeep -1)
                                                  (("2"
                                                    (inst - "x")
                                                    (("2"
                                                      (expand
                                                       "trk_critical?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (lemma
                                                           "trk_line_complete")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "Omega_trk_spc_separated")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "s"
                                                                   "T"
                                                                   "x"
                                                                   "vi"
                                                                   "vo")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "Vtrk")
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "eps")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "B>0 AND trk_special_case?(s,vo,vi,B)")
                  (("1" (flatten)
                    (("1" (lemma "trk_special_case_conflict_B")
                      (("1" (inst-cp -1 "s" "trko" "vi" "vo")
                        (("1" (inst -1 "s" "trk1" "vi" "vo")
                          (("1" (assert)
                            (("1" (lemma "IntermediateValue")
                              (("1"
                                (inst
                                 -1
                                 "band"
                                 "Omega_trk_spc(vo,vi,B)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (inst -1 "trko" "trk1")
                                      (("1"
                                        (expand "Vtrk")
                                        (("1"
                                          (lemma
                                           "trk_spc_horizontal_dir")
                                          (("1"
                                            (inst-cp
                                             -1
                                             "Exit"
                                             "trk2v2(vo)(trk1)"
                                             "s"
                                             "B"
                                             "vi"
                                             "vo")
                                            (("1"
                                              (inst
                                               -1
                                               "Exit"
                                               "trk2v2(vo)(trko)"
                                               "s"
                                               "B"
                                               "vi"
                                               "vo")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (mult-cases -2)
                                                  (("1"
                                                    (expand
                                                     "Omega_trk_spc")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "Omega_trk_spc")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skolem 1 "x")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (lemma
                                           "Omega_trk_spc_critical")
                                          (("2"
                                            (inst
                                             -1
                                             "s"
                                             "B"
                                             "x"
                                             "vi"
                                             "vo")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "trk_band?")
                                                (("2"
                                                  (skeep -1)
                                                  (("2"
                                                    (inst - "x")
                                                    (("2"
                                                      (expand
                                                       "trk_critical?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (lemma
                                                           "trk_line_complete")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "Omega_trk_spc_separated")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "s"
                                                                   "B"
                                                                   "x"
                                                                   "vi"
                                                                   "vo")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "Vtrk")
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "eps")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "omega_v2_conflict" :dir rl)
                    (("2" (rewrite "omega_v2_conflict" :dir rl)
                      (("2" (lemma "IntermediateValue")
                        (("2" (inst -1 "band" "Omega_trk(s,vo,vi)")
                          (("2" (assert)
                            (("2" (split -1)
                              (("1"
                                (inst -1 "trko" "trk1")
                                (("1"
                                  (expand "Omega_trk")
                                  (("1"
                                    (expand "o")
                                    (("1" (mult-cases -1) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skolem 1 "x")
                                (("2"
                                  (lemma "Omega_trk_critical")
                                  (("2"
                                    (inst -1 "s" "x" "vi" "vo")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (expand "trk_band?")
                                          (("1" (inst -3 "x") nil nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cd2d formula-decl nil cd2d nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (Vtrk const-decl "Vect2" bands_util nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Connected type-eq-decl nil connected_set "reals/")
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def "trig/")
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (ConnectedGeLt type-eq-decl nil connected_set "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" trk_bands_2D nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" trk_bands_2D nil)
    (T formal-const-decl "{AB: posreal | AB > B}" trk_bands_2D nil)
    (Vtrk_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (trk_special_case_conflict_B formula-decl nil trk_bands_2D nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (Omega_trk const-decl
     "(LAMBDA (frr: [real -> real]): continuous?(frr))" trk_bands_2D
     nil)
    nil (omega_v2 const-decl "real" omega_v2 nil)
    (O const-decl "[T -> real]" vect2_cont_comp "vect_analysis/")
    (Omega_trk_critical formula-decl nil trk_bands_2D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (omega_v2_conflict formula-decl nil omega_v2 nil)
    (trk_special_case_conflict_T formula-decl nil trk_bands_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IntermediateValue formula-decl nil interm_value_thm "analysis/")
    (Omega_trk_spc application-judgement
     "(LAMBDA (frr: [real -> real]): continuous?(frr))" trk_bands_2D
     nil)
    (Omega_trk_spc_critical formula-decl nil trk_bands_2D nil)
    (trk_critical? const-decl "bool" trk_bands_2D nil)
    (trk_line_complete formula-decl nil trk_line nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (Omega_trk_spc_separated formula-decl nil trk_bands_2D nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (trk_band? const-decl "bool" trk_bands_2D nil)
    (trk_spc_horizontal_dir formula-decl nil trk_only nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trk2v2_Nzv application-judgement "Nz_vect2" bands_util nil)
    (trk2v2_continuous application-judgement "continuous_rv_fun"
     trk_bands_2D nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (trk_only? const-decl "bool" definitions nil)
    (trk2v2 const-decl "(trk_only?(vo2))" bands_util nil)
    (Omega_trk_spc const-decl "real" trk_bands_2D nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (trk_special_case? const-decl "bool" trk_only nil)
    (trk_red? const-decl "bool" trk_bands_2D nil))
   nil)
  (trk_red_band-3 nil 3467650840
   ("" (skeep)
    (("" (rewrite "cd2d" :dir rl)
      (("" (expand "trk_red?")
        (("" (split)
          (("1" (flatten)
            (("1" (skolem 1 "trk1")
              (("1" (case "trk_special_case?(sp,vo,vi,T)")
                (("1" (lemma "trk_special_case_conflict")
                  (("1" (inst-cp -1 "sp" "trko" "vi" "vo")
                    (("1" (inst -1 "sp" "trk1" "vi" "vo")
                      (("1" (assert)
                        (("1" (hide (-3 2))
                          (("1" (lemma "IntermediateValue")
                            (("1"
                              (inst -1 "band" "Omega_trk_spc(vo,vi,T)")
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (inst -1 "trko" "trk1")
                                    (("1"
                                      (expand "Vtrk")
                                      (("1"
                                        (lemma
                                         "trk_spc_horizontal_dir")
                                        (("1"
                                          (inst-cp
                                           -1
                                           "Entry"
                                           "trk2v2(vo)(trk1)"
                                           "sp"
                                           "T"
                                           "vi"
                                           "vo")
                                          (("1"
                                            (inst
                                             -1
                                             "Entry"
                                             "trk2v2(vo)(trko)"
                                             "sp"
                                             "T"
                                             "vi"
                                             "vo")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide (-3 2))
                                                (("1"
                                                  (mult-cases -2)
                                                  (("1"
                                                    (expand
                                                     "Omega_trk_spc")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "Omega_trk_spc")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skolem 1 "x")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (lemma
                                         "Omega_trk_spc_critical")
                                        (("2"
                                          (inst
                                           -1
                                           "sp"
                                           "T"
                                           "x"
                                           "vi"
                                           "vo")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "trk_band?")
                                              (("2"
                                                (skeep -1)
                                                (("2"
                                                  (inst - "x")
                                                  (("2"
                                                    (expand
                                                     "trk_critical?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "trk_line_complete")
                                                        (("2"
                                                          (expand
                                                           "Vtrk")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "eps")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "omega_vv_conflict" :dir rl)
                  (("2" (rewrite "omega_vv_conflict" :dir rl)
                    (("2" (lemma "IntermediateValue")
                      (("2" (inst -1 "band" "Omega_trk(sp,vo,vi)")
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (inst -1 "trko" "trk1")
                              (("1"
                                (expand "Omega_trk")
                                (("1"
                                  (expand "o")
                                  (("1" (mult-cases -1) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skolem 1 "x")
                              (("2"
                                (lemma "Omega_trk_critical")
                                (("2"
                                  (inst -1 "sp" "x" "vi" "vo")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "trk_band?")
                                      (("2" (inst -3 "x") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cd2d formula-decl nil cd2d nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (Connected type-eq-decl nil connected_set "reals/")
    (ConnectedGeLt type-eq-decl nil connected_set "reals/")
    (O const-decl "[T -> real]" vect2_cont_comp "vect_analysis/")
    (trk_only? const-decl "bool" definitions nil)
    (Sign type-eq-decl nil sign "reals/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (trk_spc_horizontal_dir formula-decl nil trk_only nil)
    (trk_line_complete formula-decl nil trk_line nil)
    (IntermediateValue formula-decl nil interm_value_thm "analysis/")
    (trk_special_case? const-decl "bool" trk_only nil))
   nil)
  (trk_red_band-2 nil 3443269825
   ("" (skeep)
    (("" (rewrite "cd2d" :dir rl)
      (("" (expand "trk_red?")
        (("" (split)
          (("1" (flatten)
            (("1" (skolem 1 "trk1")
              (("1" (case "trk_special_case?(sp,vo,vi,T)")
                (("1" (lemma "trk_special_case_conflict")
                  (("1" (inst-cp -1 "sp" "trko" "vi" "vo")
                    (("1" (inst -1 "sp" "trk1" "vi" "vo")
                      (("1" (assert)
                        (("1" (hide (-3 2))
                          (("1" (lemma "IntermediateValue")
                            (("1"
                              (inst -1 "band" "Omega_trk_spc(vo,vi)")
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (inst -1 "trko" "trk1")
                                    (("1"
                                      (expand "Vtrk")
                                      (("1"
                                        (lemma
                                         "trk_spc_horizontal_dir")
                                        (("1"
                                          (inst-cp
                                           -1
                                           "Entry"
                                           "trk2v2(vo)(trk1)"
                                           "sp"
                                           "T"
                                           "vi"
                                           "vo")
                                          (("1"
                                            (inst
                                             -1
                                             "Entry"
                                             "trk2v2(vo)(trko)"
                                             "sp"
                                             "T"
                                             "vi"
                                             "vo")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide (-3 2))
                                                (("1"
                                                  (mult-cases -2)
                                                  (("1"
                                                    (expand
                                                     "Omega_trk_spc")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "Omega_trk_spc")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skolem 1 "x")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (lemma
                                         "Omega_trk_spc_critical")
                                        (("2"
                                          (inst -1 "sp" "x" "vi" "vo")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "trk_band?")
                                              (("2"
                                                (inst -5 "x")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "omega_vv_conflict" :dir rl)
                  (("2" (rewrite "omega_vv_conflict" :dir rl)
                    (("2" (lemma "IntermediateValue")
                      (("2" (inst -1 "band" "Omega_trk(sp,vo,vi)")
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (inst -1 "trko" "trk1")
                              (("1"
                                (expand "Omega_trk")
                                (("1"
                                  (expand "o")
                                  (("1" (mult-cases -1) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skolem 1 "x")
                              (("2"
                                (lemma "Omega_trk_critical")
                                (("2"
                                  (inst -1 "sp" "x" "vi" "vo")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "trk_band?")
                                      (("2" (inst -3 "x") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cd2d formula-decl nil cd2d nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (Connected type-eq-decl nil connected_set "reals/")
    (ConnectedGeLt type-eq-decl nil connected_set "reals/")
    (Sign type-eq-decl nil sign "reals/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (trk_spc_horizontal_dir formula-decl nil trk_only nil)
    (IntermediateValue formula-decl nil interm_value_thm "analysis/")
    (trk_special_case? const-decl "bool" trk_only nil))
   nil)
  (trk_red_band-1 nil 3443210630
   ("" (skeep)
    (("" (case "NOT two_parallel?(ss,vo,vi)")
      (("1" (expand "trk_red?")
        (("1" (skolem 2 "cc")
          (("1" (flatten)
            (("1" (case "cc < c")
              (("1" (lemma "interm_value4")
                (("1" (inst -1 "cc" "c" "0")
                  (("1" (assert)
                    (("1"
                      (inst -1
                       "LAMBDA (x:closed_interval(cc,c)): Omega_trk(ss,vo,vi)(x)")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (skeep -1 :preds? t)
                            (("1" (lemma "Omega_trk_critical")
                              (("1"
                                (inst -1 "c_1" "ss" "vi" "vo")
                                (("1"
                                  (split -1)
                                  (("1"
                                    (expand "trk_band?")
                                    (("1"
                                      (inst -8 "c_1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "ab")
                                          (("1"
                                            (inst -1 "cc" "c" "c_1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "Omega_trk" -3)
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "Omega_trk_continuous")
                            (("2" (inst? -1)
                              (("2"
                                (lemma "cont_intv")
                                (("2"
                                  (inst
                                   -1
                                   "cc"
                                   "c"
                                   "Omega_trk(ss,vo,vi)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "c < cc")
                (("1" (lemma "interm_value2")
                  (("1" (inst -1 "c" "cc" "0")
                    (("1" (assert)
                      (("1"
                        (inst -1
                         "LAMBDA (x:closed_interval(c,cc)): Omega_trk(ss,vo,vi)(x)")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (skeep -1 :preds? t)
                              (("1"
                                (lemma "Omega_trk_critical")
                                (("1"
                                  (inst -1 "c_1" "ss" "vi" "vo")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (expand "trk_band?")
                                      (("1"
                                        (inst -8 "c_1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "ab")
                                            (("1"
                                              (inst -1 "c" "cc" "c_1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "Omega_trk" -3)
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "Omega_trk_continuous")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (lemma "cont_intv")
                                  (("2"
                                    (inst
                                     -1
                                     "c"
                                     "cc"
                                     "Omega_trk(ss,vo,vi)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "trk_green_two_parallel")
        (("2" (inst?)
          (("2" (inst? -1)
            (("2" (assert)
              (("2" (expand "trk_green?")
                (("2" (inst -1 "c") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((interm_value2 formula-decl nil interm_value_thm "analysis/")
    (interm_value4 formula-decl nil interm_value_thm "analysis/")
    (cont_intv formula-decl nil interm_value_thm "analysis/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Ss_vect2 type-eq-decl nil horizontal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/"))
   nil)))


(cd3d_ever
 (conflict_2D_stable_TCC1 0
  (conflict_2D_stable_TCC1-1 nil 3476708029
   ("" (skeep) (("" (grind-reals) nil nil)) nil)
   ((pos_times_gt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil
   (conflict_2D_stable subtype
    "number_fields.*(cd3d_ever.D, real_defs.abs(cd3d_ever.v`z))"
    "posreal")))
 (conflict_2D_stable_TCC2 0
  (conflict_2D_stable_TCC2-1 nil 3476708029
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil
   (conflict_2D_stable subtype
    "(number_fields.-)(cd3d_ever.H, number_fields.*(sign.sign(cd3d_ever.v`z), cd3d_ever.s`z))"
    "{AB: real_types.posreal | reals.>(AB, real_defs.max((number_fields.-)((number_fields.-)(cd3d_ever.H), number_fields.*(sign.sign(cd3d_ever.v`z), cd3d_ever.s`z)), 0))}")))
 (conflict_2D_stable 0
  (conflict_2D_stable-1 nil 3476708029
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "conflict?")
          (("1" (skosimp*)
            (("1" (lemma "vertical_los_inside_Theta")
              (("1" (inst - "abs(v`z)" "sign(v`z)*s`z" "nnt!1")
                (("1" (flatten)
                  (("1" (hide -1)
                    (("1" (split -1)
                      (("1" (flatten)
                        (("1" (expand "Theta_H")
                          (("1" (case "sign(abs(v`z)) = 1")
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (cross-mult -1)
                                    (("1"
                                      (cross-mult -2)
                                      (("1"
                                        (expand "conflict_2D?")
                                        (("1"
                                          (inst + "nnt!1*abs(v`z)")
                                          (("1"
                                            (rewrite "vect2_scal")
                                            (("1"
                                              (case
                                               "abs(v`z) * vect2(s) + nnt!1 * abs(v`z) * vect2(v) = abs(v`z)*(vect2(s)+nnt!1*vect2(v))")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (rewrite
                                                     "sqv_scal")
                                                    (("1"
                                                      (rewrite
                                                       "sq_times")
                                                      (("1"
                                                        (div-by
                                                         1
                                                         "sq(v`z)")
                                                        (("1"
                                                          (lemma
                                                           "sq_eq_0")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -3)
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (hide-all-but (-1 1))
                                                (("2"
                                                  (lemma
                                                   "nnreal_times_nnreal_is_nnreal")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "nnt!1"
                                                     "abs(v`z)")
                                                    (("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "sign")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-1 1))
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2"
          (lemma "conflict_2D_on_open_interval[D *abs( v`z),
                                   max(-H - sign(v`z) * s`z, 0),
                                   H - sign(v`z) * s`z]")
          (("1" (inst?)
            (("1" (replaces -1)
              (("1" (skosimp*)
                (("1" (name "t!2" "topen!1/abs(v`z)")
                  (("1"
                    (case "max(Theta_H[H](sign(v`z)*s`z,abs(v`z),-1),0)< t!2 AND t!2 < Theta_H[H](sign(v`z)*s`z,abs(v`z),1)")
                    (("1" (flatten)
                      (("1" (expand "conflict?")
                        (("1" (inst + "t!2")
                          (("1" (split 1)
                            (("1" (lemma "vertical_los_inside_Theta")
                              (("1"
                                (inst
                                 -
                                 "abs(v`z)"
                                 "sign(v`z)*s`z"
                                 "t!2")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (hide-all-but (-1 +))
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 -2 1))
                                        (("2"
                                          (grind :exclude "Theta_H")
                                          nil
                                          nil))
                                        nil)
                                       ("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "vect2_scal")
                              (("2"
                                (case
                                 "abs(v`z) * vect2(s) + topen!1 * vect2(v) = abs(v`z)*(vect2(s) + t!2*vect2(v))")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (rewrite "sqv_scal")
                                    (("1"
                                      (rewrite "sq_times")
                                      (("1"
                                        (div-by -7 "sq(v`z)")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -3 :dir rl)
                                  (("2"
                                    (hide-all-but (1 3))
                                    (("2"
                                      (grind :exclude "abs")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 -2 1))
                            (("2" (grind :exclude "Theta_H") nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1 1 :dir rl)
                      (("2" (hide-all-but (-2 -3 -6 1 3))
                        (("2" (split)
                          (("1" (cross-mult 1)
                            (("1" (lemma "nneg_mult_max")
                              (("1"
                                (inst
                                 -
                                 "abs(v`z)"
                                 "Theta_H[H](sign(v`z) * s`z, abs(v`z), -1)"
                                 "0")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "Theta_H")
                                    (("1"
                                      (case "v`z>0")
                                      (("1"
                                        (expand "abs")
                                        (("1"
                                          (expand "sign")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "v`z < 0")
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (expand "sign")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (cross-mult 1)
                            (("2"
                              (case "H - sign(v`z) * s`z<=Theta_H[H](sign(v`z) * s`z, abs(v`z), 1) * abs(v`z)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "Theta_H")
                                  (("2"
                                    (cross-mult 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (grind-reals) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (conflict? const-decl "bool" space_3D nil)
    (H formal-const-decl "posreal" cd3d_ever nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vertical_los_inside_Theta formula-decl nil vertical nil)
    (abs_nat formula-decl nil abs_lems reals)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (Theta_H const-decl "real" vertical nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (s skolem-const-decl "Vect3" cd3d_ever nil)
    (nnt!1 skolem-const-decl "nnreal" cd3d_ever nil)
    (Lookahead type-eq-decl nil Lookahead nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (D formal-const-decl "posreal" cd3d_ever nil)
    (sq_times formula-decl nil sq reals)
    (sq_eq_0 formula-decl nil sq reals)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (sq_abs formula-decl nil sq reals)
    (sqv_scal formula-decl nil vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (conflict_2D? const-decl "bool" cd2d nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (sign const-decl "Sign" sign reals)
    (Sign type-eq-decl nil sign reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (v skolem-const-decl "Vect3" cd3d_ever nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (conflict_2D_on_open_interval formula-decl nil omega_2D nil)
    (TRUE const-decl "bool" booleans nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nneg_mult_max formula-decl nil min_max reals)
    (max_nnreal_0 formula-decl nil min_max reals)
    (sign_nat formula-decl nil sign reals)
    (div_mult_pos_neg_le2 formula-decl nil extra_real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (t!2 skolem-const-decl "real" cd3d_ever nil)
    (< const-decl "bool" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (pos_times_gt formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   shostak))
 (conflict_vz_swap 0
  (conflict_vz_swap-1 nil 3476710261
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "conflict?")
          (("1" (skosimp*)
            (("1" (inst + "nnt!1")
              (("1" (assert)
                (("1" (expand "abs")
                  (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "conflict?")
          (("2" (skosimp*)
            (("2" (inst + "nnt!1")
              (("2" (assert)
                (("2" (expand "abs")
                  (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (conflict? const-decl "bool" space_3D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (vect2_eq formula-decl nil vect_3D_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals))
   shostak))
 (conflict_on_open_interval 0
  (conflict_on_open_interval-1 nil 3476715367
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "conflict?")
          (("1" (skosimp*)
            (("1" (case "nnt!1  = 0")
              (("1" (replace -1)
                (("1" (assert)
                  (("1" (hide -1)
                    (("1"
                      (case "exists (epH:posreal): FORALL (th: real): abs(th)<epH IMPLIES abs(s`z+th*v`z)<H")
                      (("1" (skeep -1)
                        (("1"
                          (case "exists (epD:posreal): FORALL (td: real): abs(td)<epD IMPLIES sqv(vect2(s)+td*vect2(v))<sq(D)")
                          (("1" (skeep -1)
                            (("1" (name "newt" "min(epD/2,epH/2)")
                              (("1"
                                (inst + "newt")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst - "newt")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (inst - "newt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but (-2 1))
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "vect2(v) = zero")
                            (("1" (replace -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (hide -1)
                                (("2"
                                  (hide 3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "sqv_cont")
                                      (("2"
                                        (expand "continuous_vr?")
                                        (("2"
                                          (inst - "vect2(s) ")
                                          (("2"
                                            (expand "continuous_vr?")
                                            (("2"
                                              (inst
                                               -
                                               "sq(D) - sqv(vect2(s))")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   +
                                                   "delta!1/norm(vect2(v))")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "vect2(s) + td!1*vect2(v)")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (name
                                                           "const1"
                                                           "sqv(vect2(s) + td!1*vect2(v))")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (name
                                                               "const2"
                                                               "sqv(vect2(s))")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "norm_scal")
                                                            (("2"
                                                              (cross-mult
                                                               -1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "posreal_div_posreal_is_posreal")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "delta!1"
                                                       "norm(vect2(v))")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "vectors_2D.norm_eq_0")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "vectors_2D.norm_eq_0")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "v`z = 0")
                          (("1" (replace -1) (("1" (assert) nil nil))
                            nil)
                           ("2" (inst + "(H-abs(s`z))/abs(v`z)")
                            (("1" (skosimp*)
                              (("1"
                                (cross-mult -1)
                                (("1"
                                  (hide-all-but (-1 -2 2))
                                  (("1"
                                    (rewrite "abs_mult" :dir rl)
                                    (("1"
                                      (both-sides "+" "abs(s`z)" -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "triangle")
                                          (("1"
                                            (inst - "v`z * th!1" "s`z")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lemma
                                 "posreal_div_posreal_is_posreal")
                                (("2"
                                  (inst?)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (inst + "nnt!1") (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skosimp*)
          (("2" (expand "conflict?")
            (("2" (inst + "topen!1") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conflict? const-decl "bool" space_3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (H formal-const-decl "posreal" cd3d_ever nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (D formal-const-decl "posreal" cd3d_ever nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont judgement-tcc nil vect_cont_2D vect_analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (v skolem-const-decl "Vect3" cd3d_ever nil)
    (delta!1 skolem-const-decl "posreal" cd3d_ever nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (continuous_vr? const-decl "bool" cont_vect2_real vect_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous_vr? const-decl "bool" cont_vect2_real vect_analysis)
    (scal_zero formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (triangle formula-decl nil real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (s skolem-const-decl "Vect3" cd3d_ever nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cd3d_ever_rewrite_TCC1 0
  (cd3d_ever_rewrite_TCC1-1 nil 3476725629
   ("" (skeep) (("" (grind :exclude ("Theta_H")) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   nil
   (cd3d_ever_rewrite subtype
    "vertical[cd3d_ever.H].Theta_H(cd3d_ever.s`z, cd3d_ever.v`z, 1)"
    "{AB: real_types.posreal | reals.>(AB, real_defs.max(vertical[cd3d_ever.H].Theta_H(cd3d_ever.s`z, cd3d_ever.v`z, (number_fields.-)(1)), 0))}")))
 (cd3d_ever_rewrite 0
  (cd3d_ever_rewrite-1 nil 3476725629
   ("" (skeep)
    (("" (expand "cd3d_ever?")
      (("" (split)
        (("1" (flatten)
          (("1" (split -)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (split -)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (split)
                        (("1" (flatten)
                          (("1"
                            (lemma
                             "cd2d[D * abs(v`z), max(-H - sign(v`z) * s`z, 0),
                                                   H - sign(v`z) * s`z]")
                            (("1" (inst?)
                              (("1"
                                (lemma
                                 "cd2d[D, max(Theta_H(s`z, v`z, -1), 0), Theta_H(s`z, v`z, 1)]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (replaces (-1 -2) :dir rl)
                                    (("1"
                                      (expand "conflict_2D?")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst + "t!1/abs(v`z)")
                                          (("1"
                                            (rewrite "sqv_add")
                                            (("1"
                                              (rewrite "sqv_add")
                                              (("1"
                                                (rewrite "vect2_scal")
                                                (("1"
                                                  (rewrite "sqv_scal")
                                                  (("1"
                                                    (rewrite
                                                     "sqv_scal")
                                                    (("1"
                                                      (rewrite
                                                       "sqv_scal")
                                                      (("1"
                                                        (rewrite
                                                         "sq_div")
                                                        (("1"
                                                          (mult-by
                                                           1
                                                           "sq(v`z)")
                                                          (("1"
                                                            (rewrite
                                                             "sq_times")
                                                            (("1"
                                                              (expand
                                                               "sq")
                                                              (("1"
                                                                (hide-all-but
                                                                 (-3
                                                                  1))
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (split 1)
                                            (("1"
                                              (cross-mult 1)
                                              nil
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "t!1")
                                                (("2"
                                                  (cross-mult 1)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 1 3))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (cross-mult 1)
                                              (("3"
                                                (typepred "t!1")
                                                (("3"
                                                  (hide-all-but (-3 1))
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2"
                              (lemma
                               "posreal_times_posreal_is_posreal")
                              (("2" (inst - "D" "abs(v`z)") nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (mult-by 1 "abs(v`z)")
                          (("2" (hide-all-but (-1 1))
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split -1)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (split -)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (split)
                        (("1" (flatten)
                          (("1"
                            (lemma
                             "cd2d[D, max(Theta_H(s`z, v`z, -1), 0), Theta_H(s`z, v`z, 1)]")
                            (("1" (inst?)
                              (("1"
                                (lemma
                                 "cd2d[D * abs(v`z), max(-H - sign(v`z) * s`z, 0),
                                                   H - sign(v`z) * s`z]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (replaces (-1 -2) :dir rl)
                                    (("1"
                                      (expand "conflict_2D?")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst + "t!1*abs(v`z)")
                                          (("1"
                                            (mult-by -3 "sq(v`z)")
                                            (("1"
                                              (hide-all-but (-3 1))
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (lemma "sq_eq_0")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (split 1)
                                            (("1"
                                              (typepred "t!1")
                                              (("1"
                                                (mult-by -2 "abs(v`z)")
                                                (("1"
                                                  (hide-all-but (-1 1))
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (cross-mult -2)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (cross-mult -1)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (cross-mult 2)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "t!1")
                                                (("2"
                                                  (mult-by
                                                   -3
                                                   "abs(v`z)")
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 1))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (cross-mult -2)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (cross-mult 1)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (lemma
                                       "posreal_times_posreal_is_posreal")
                                      (("3"
                                        (inst - "D" "abs(v`z)")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (mult-by -1 "abs(v`z)")
                          (("2" (hide -2)
                            (("2" (lemma "nneg_mult_max")
                              (("2"
                                (inst
                                 -
                                 "abs(v`z)"
                                 "Theta_H(s`z, v`z, -1)"
                                 "0")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (hide -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cd3d_ever? const-decl "bool" cd3d_ever nil)
    (nneg_mult_max formula-decl nil min_max reals)
    (t!1 skolem-const-decl
     "Lookahead[max(Theta_H(s`z, v`z, -1), 0), Theta_H(s`z, v`z, 1)]"
     cd3d_ever nil)
    (sq_eq_0 formula-decl nil sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_mult_neg_lt1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (* const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (conflict_2D? const-decl "bool" cd2d nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (v skolem-const-decl "Vect3" cd3d_ever nil)
    (s skolem-const-decl "Vect3" cd3d_ever nil)
    (Lookahead type-eq-decl nil Lookahead nil)
    (t!1 skolem-const-decl
     "Lookahead[max(-H - sign(v`z) * s`z, 0), H - sign(v`z) * s`z]"
     cd3d_ever nil)
    (sqv_scal formula-decl nil vectors_2D vectors)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (sq const-decl "nonneg_real" sq reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (< const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sq_times formula-decl nil sq reals)
    (sq_div formula-decl nil sq reals)
    (sq_abs formula-decl nil sq reals)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (dot_scal_canon formula-decl nil vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sqv_add formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (Theta_H const-decl "real" vertical nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cd2d formula-decl nil cd2d nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" cd3d_ever nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (H formal-const-decl "posreal" cd3d_ever nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Sign type-eq-decl nil sign reals)
    (sign const-decl "Sign" sign reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (cd3d_ever_correct 0
  (cd3d_ever_correct-1 nil 3460728037
   ("" (skeep)
    (("" (expand "cd3d_ever?")
      (("" (split -1)
        (("1" (flatten)
          (("1" (rewrite "cd2d_ever_def")
            (("1" (expand "horizontal_conflict?")
              (("1" (skosimp*)
                (("1" (expand "conflict?")
                  (("1" (assert) (("1" (inst + "nnt!1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split -1)
            (("1" (flatten)
              (("1" (hide 2)
                (("1" (lemma "conflict_2D_stable")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (rewrite "cd2d")
                        (("1"
                          (lemma "posreal_times_posreal_is_posreal")
                          (("1" (inst - "D" "abs(v`z)") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cd3d_ever? const-decl "bool" cd3d_ever nil)
    (conflict_2D_stable formula-decl nil cd3d_ever nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (sign const-decl "Sign" sign reals)
    (Sign type-eq-decl nil sign reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (H formal-const-decl "posreal" cd3d_ever nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (cd2d formula-decl nil cd2d nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (horizontal_conflict? const-decl "bool" horizontal nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (conflict? const-decl "bool" space_3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (D formal-const-decl "posreal" cd3d_ever nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cd2d_ever_def formula-decl nil cd2d_ever nil))
   nil))
 (cd3d_ever_complete 0
  (cd3d_ever_complete-1 nil 3460728068
   ("" (skeep)
    (("" (expand "cd3d_ever?")
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "conflict?")
            (("1" (skosimp*)
              (("1" (rewrite "cd2d_ever_def")
                (("1" (expand "horizontal_conflict?")
                  (("1" (inst + "nnt!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split 2)
            (("1" (flatten)
              (("1" (lemma "conflict_2D_stable")
                (("1" (inst - "s" "v")
                  (("1" (assert)
                    (("1" (rewrite "cd2d")
                      (("1" (lemma "posreal_times_posreal_is_posreal")
                        (("1" (inst - "D" "abs(v`z)") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "v`z = 0")
              (("1" (assert)
                (("1" (expand "conflict?") (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (hide 3)
                (("2" (assert)
                  (("2" (lemma "conflict_on_open_interval")
                    (("2" (inst - "s" "v")
                      (("2" (assert)
                        (("2" (skosimp*)
                          (("2" (lemma "vertical_los_inside_Theta")
                            (("2"
                              (inst - "abs(v`z)" "sign(v`z)*s`z"
                               "topen!1")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "Theta_H")
                                        (("1"
                                          (cross-mult -1)
                                          (("1"
                                            (case "sign(abs(v`z)) = 1")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (cross-mult -2)
                                                    (("1"
                                                      (case
                                                       "H - sign(v`z) * s`z > 0")
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "nnreal_times_nnreal_is_nnreal")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "topen!1"
                                                           "abs(v`z)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (expand "sign")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cd3d_ever? const-decl "bool" cd3d_ever nil)
    (sign_nat formula-decl nil sign reals)
    (v skolem-const-decl "Vect3" cd3d_ever nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (Theta_H const-decl "real" vertical nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (vertical_los_inside_Theta formula-decl nil vertical nil)
    (conflict_on_open_interval formula-decl nil cd3d_ever nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cd2d formula-decl nil cd2d nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (H formal-const-decl "posreal" cd3d_ever nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Sign type-eq-decl nil sign reals)
    (sign const-decl "Sign" sign reals)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (conflict_2D_stable formula-decl nil cd3d_ever nil)
    (horizontal_conflict? const-decl "bool" horizontal nil)
    (nnreal type-eq-decl nil real_types nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (D formal-const-decl "posreal" cd3d_ever nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cd2d_ever_def formula-decl nil cd2d_ever nil)
    (conflict? const-decl "bool" space_3D nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (cd3d_ever 0
  (cd3d_ever-1 nil 3460727492
   ("" (skeep)
    (("" (lemma "cd3d_ever_correct")
      (("" (inst? -1)
        (("" (lemma "cd3d_ever_complete")
          (("" (inst?) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((cd3d_ever_correct formula-decl nil cd3d_ever nil)
    (cd3d_ever_complete formula-decl nil cd3d_ever nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil))
   shostak)))


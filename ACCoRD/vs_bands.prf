(vs_bands
 (vs_bands_vertical_dir_exclusive 0
  (vs_bands_vertical_dir_exclusive-2 "" 3790108607
   ("" (skeep)
    (("" (split +)
      (("1" (flatten)
        (("1" (split -)
          (("1" (flatten)
            (("1" (replace -1)
              (("1" (hide -1)
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (expand "abs")
                      (("1" (lift-if)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (neg-formula -2)
                              (("1" (replace -1)
                                (("1" (case "vsp - viz < 0")
                                  (("1" (case "sz + B*(vsp-viz) > -H")
                                    (("1" (copy 2)
                                      (("1"
                                        (expand "conflict_vertical?")
                                        (("1"
                                          (inst + "B")
                                          (("1"
                                            (case "sz + B*(vsp-viz) >= H")
                                            (("1"
                                              (name "newt" "-sz/(vsp-viz)")
                                              (("1"
                                                (case
                                                 "B <= newt and newt <= T")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst + "newt")
                                                    (("1"
                                                      (case
                                                       "sz + newt*(vsp-viz) = 0")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (replace -3 :dir rl)
                                                        (("2"
                                                          (name
                                                           "const3"
                                                           "vsp-viz")
                                                          (("2"
                                                            (replace -1)
                                                            (("2"
                                                              (both-sides
                                                               "-"
                                                               "sz"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (typepred "T")
                                                        (("1"
                                                          (mult-by
                                                           -3
                                                           "viz-vsp")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "abs" 2)
                                              (("2"
                                                (lift-if)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (mult-by -1 "T-B")
                                      (("2" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (mult-by 2 "H")
                                    (("2" (mult-by 1 "H")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1)
                              (("2" (case "vsp > viz")
                                (("1" (case "sz + B*(vsp-viz) < H")
                                  (("1" (hide 1)
                                    (("1" (copy 2)
                                      (("1"
                                        (expand "conflict_vertical?")
                                        (("1"
                                          (inst + "B")
                                          (("1"
                                            (case "sz + B*(vsp-viz) <= -H")
                                            (("1"
                                              (name "newt" "-sz/(vsp-viz)")
                                              (("1"
                                                (case
                                                 "B <= newt and newt <= T")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst + "newt")
                                                    (("1"
                                                      (case
                                                       "sz + newt*(vsp-viz) = 0")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (replace -3 :dir rl)
                                                        (("2"
                                                          (name
                                                           "const3"
                                                           "vsp-viz")
                                                          (("2"
                                                            (replace -1)
                                                            (("2"
                                                              (both-sides
                                                               "-"
                                                               "sz"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (typepred "T")
                                                        (("1"
                                                          (mult-by
                                                           -3
                                                           "vsp-viz")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (typepred "T")
                                                        (("2"
                                                          (mult-by
                                                           -3
                                                           "vsp-viz")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "abs" 2)
                                              (("2"
                                                (lift-if)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (typepred "T")
                                    (("2" (mult-by -3 "vsp-viz")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (mult-by 1 "H")
                                  (("2" (mult-by 3 "H")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (replace -1)
              (("2" (hide -1)
                (("2" (replace -1)
                  (("2" (hide -1)
                    (("2" (expand "abs")
                      (("2" (lift-if)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (neg-formula -2)
                              (("1" (replace -1)
                                (("1" (case "vsp>viz")
                                  (("1" (case "sz + T*(vsp-viz) > -H")
                                    (("1" (copy 2)
                                      (("1"
                                        (expand "conflict_vertical?")
                                        (("1"
                                          (inst + "T")
                                          (("1"
                                            (case "sz + T*(vsp-viz) >= H")
                                            (("1"
                                              (name "newt" "-sz/(vsp-viz)")
                                              (("1"
                                                (case
                                                 "B <= newt and newt <= T")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case
                                                     "sz + newt*(vsp-viz) = 0")
                                                    (("1"
                                                      (inst + "newt")
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (replace -3 :dir rl)
                                                      (("2"
                                                        (name
                                                         "const3"
                                                         "vsp-viz")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (both-sides
                                                             "-"
                                                             "sz"
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (split +)
                                                    (("1"
                                                      (cross-mult 1)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (typepred "T")
                                                        (("2"
                                                          (mult-by
                                                           -3
                                                           "vsp-viz")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "abs" 2)
                                              (("2"
                                                (lift-if)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "T")
                                      (("2"
                                        (mult-by -3 "vsp-viz")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (mult-by 1 "H")
                                    (("2" (mult-by 2 "H")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1)
                              (("2" (hide 1)
                                (("2" (case "vsp < viz")
                                  (("1" (case "sz + T*(vsp-viz) < H")
                                    (("1" (copy 2)
                                      (("1"
                                        (expand "conflict_vertical?")
                                        (("1"
                                          (inst + "T")
                                          (("1"
                                            (case "sz + T*(vsp-viz) <= -H")
                                            (("1"
                                              (name "newt" "-sz/(vsp-viz)")
                                              (("1"
                                                (case
                                                 "B <= newt and newt <= T")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case
                                                     "sz + newt*(vsp-viz) = 0")
                                                    (("1"
                                                      (inst + "newt")
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (replace -3 :dir rl)
                                                      (("2"
                                                        (name
                                                         "const3"
                                                         "vsp-viz")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (both-sides
                                                             "-"
                                                             "sz"
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (split +)
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (typepred "T")
                                                        (("1"
                                                          (mult-by
                                                           -3
                                                           "viz-vsp")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (typepred "T")
                                                        (("2"
                                                          (mult-by
                                                           -3
                                                           "viz-vsp")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "abs")
                                              (("2"
                                                (lift-if)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "T")
                                      (("2"
                                        (mult-by -3 "viz-vsp")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (mult-by 1 "H")
                                    (("2" (mult-by 2 "H")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (case "vsp - viz = 0")
          (("1" (replace -1) (("1" (assert) nil nil)) nil)
           ("2" (replace 1)
            (("2" (split -)
              (("1" (flatten)
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (expand "abs")
                          (("1" (lift-if)
                            (("1" (split -)
                              (("1" (flatten)
                                (("1" (expand "conflict_vertical?")
                                  (("1" (skosimp*)
                                    (("1" (neg-formula -2)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (case "vsp < viz")
                                          (("1"
                                            (mult-by -1 "H")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (mult-by 1 "T-t!1")
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (lift-if)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (replace -1)
                                  (("2" (case "vsp > viz")
                                    (("1" (mult-by -1 "H")
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (expand "conflict_vertical?")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (mult-by 1 "T-t!1")
                                          (("2"
                                            (expand "abs")
                                            (("2"
                                              (lift-if)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (replace -1)
                  (("2" (hide -1)
                    (("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (expand "abs")
                          (("2" (lift-if)
                            (("2" (split -)
                              (("1" (flatten)
                                (("1" (neg-formula -2)
                                  (("1" (replace -1)
                                    (("1" (case "vsp > viz")
                                      (("1"
                                        (mult-by -1 "H")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "conflict_vertical?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (mult-by 1 "t!1-B")
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (lift-if)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (replace -1)
                                  (("2" (case "vsp < viz")
                                    (("1" (mult-by -1 "H")
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (expand "conflict_vertical?")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (mult-by 1 "t!1-B")
                                          (("2"
                                            (expand "abs")
                                            (("2"
                                              (lift-if)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (vs_bands_vertical_dir_exclusive-1 nil 3477244353
   ("" (skeep)
    (("" (split +)
      (("1" (flatten)
        (("1" (split -)
          (("1" (flatten)
            (("1" (replace -1)
              (("1" (hide -1)
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (expand "abs")
                      (("1" (lift-if)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (neg-formula -2)
                              (("1" (replace -1)
                                (("1" (case "vsp - viz < 0")
                                  (("1" (case "sz + B*(vsp-viz) > -H")
                                    (("1" (copy 2)
                                      (("1"
                                        (expand "conflict_vertical?")
                                        (("1"
                                          (inst + "B")
                                          (("1"
                                            (case "sz + B*(vsp-viz) >= H")
                                            (("1"
                                              (name "newt" "-sz/(vsp-viz)")
                                              (("1"
                                                (case
                                                 "B <= newt and newt <= T")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst + "newt")
                                                    (("1"
                                                      (case
                                                       "sz + newt*(vsp-viz) = 0")
                                                      (("1" (assert) nil)
                                                       ("2"
                                                        (replace -3 :dir rl)
                                                        (("2"
                                                          (name
                                                           "const3"
                                                           "vsp-viz")
                                                          (("2"
                                                            (replace -1)
                                                            (("2"
                                                              (both-sides
                                                               "-"
                                                               "sz"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  nil)))
                                                               ("2"
                                                                (assert)
                                                                nil)))))))))))
                                                     ("2" (assert) nil)))))
                                                 ("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (typepred "T")
                                                        (("1"
                                                          (mult-by
                                                           -3
                                                           "viz-vsp")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (typepred "T")
                                                        (("2"
                                                          (mult-by
                                                           -3
                                                           "viz-vsp")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))
                                               ("2" (assert) nil)))
                                             ("2"
                                              (expand "abs" 2)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  nil)))))))))))))
                                     ("2" (mult-by -1 "T-B")
                                      (("2" (assert) nil)))))
                                   ("2" (mult-by 2 "H")
                                    (("2" (mult-by 1 "H")
                                      (("2" (assert) nil)))))))))))))
                           ("2" (flatten)
                            (("2" (replace -1)
                              (("2" (case "vsp > viz")
                                (("1" (case "sz + B*(vsp-viz) < H")
                                  (("1" (hide 1)
                                    (("1" (copy 2)
                                      (("1"
                                        (expand "conflict_vertical?")
                                        (("1"
                                          (inst + "B")
                                          (("1"
                                            (case "sz + B*(vsp-viz) <= -H")
                                            (("1"
                                              (name "newt" "-sz/(vsp-viz)")
                                              (("1"
                                                (case
                                                 "B <= newt and newt <= T")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst + "newt")
                                                    (("1"
                                                      (case
                                                       "sz + newt*(vsp-viz) = 0")
                                                      (("1" (assert) nil)
                                                       ("2"
                                                        (replace -3 :dir rl)
                                                        (("2"
                                                          (name
                                                           "const3"
                                                           "vsp-viz")
                                                          (("2"
                                                            (replace -1)
                                                            (("2"
                                                              (both-sides
                                                               "-"
                                                               "sz"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  nil)))
                                                               ("2"
                                                                (assert)
                                                                nil)))))))))))
                                                     ("2" (assert) nil)))))
                                                 ("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (typepred "T")
                                                        (("1"
                                                          (mult-by
                                                           -3
                                                           "vsp-viz")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (typepred "T")
                                                        (("2"
                                                          (mult-by
                                                           -3
                                                           "vsp-viz")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))
                                               ("2" (assert) nil)))
                                             ("2"
                                              (expand "abs" 2)
                                              (("2"
                                                (lift-if)
                                                (("2" (ground) nil)))))))
                                           ("2" (assert) nil)))))))))
                                   ("2" (typepred "T")
                                    (("2" (mult-by -3 "vsp-viz")
                                      (("2" (assert) nil)))))))
                                 ("2" (mult-by 1 "H")
                                  (("2" (mult-by 3 "H")
                                    (("2" (assert)
                                      nil)))))))))))))))))))))))))))
           ("2" (flatten)
            (("2" (replace -1)
              (("2" (hide -1)
                (("2" (replace -1)
                  (("2" (hide -1)
                    (("2" (expand "abs")
                      (("2" (lift-if)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (neg-formula -2)
                              (("1" (replace -1)
                                (("1" (case "vsp>viz")
                                  (("1" (case "sz + T*(vsp-viz) > -H")
                                    (("1" (copy 2)
                                      (("1"
                                        (expand "conflict_vertical?")
                                        (("1"
                                          (inst + "T")
                                          (("1"
                                            (case "sz + T*(vsp-viz) >= H")
                                            (("1"
                                              (name "newt" "-sz/(vsp-viz)")
                                              (("1"
                                                (case
                                                 "B <= newt and newt <= T")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case
                                                     "sz + newt*(vsp-viz) = 0")
                                                    (("1"
                                                      (inst + "newt")
                                                      (("1" (assert) nil)
                                                       ("2" (assert) nil)))
                                                     ("2"
                                                      (replace -3 :dir rl)
                                                      (("2"
                                                        (name
                                                         "const3"
                                                         "vsp-viz")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (both-sides
                                                             "-"
                                                             "sz"
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (cross-mult 1)
                                                                nil)))
                                                             ("2"
                                                              (assert)
                                                              nil)))))))))))))
                                                 ("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (split +)
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (typepred "T")
                                                        (("1"
                                                          (mult-by
                                                           -2
                                                           "vsp-viz")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (typepred "T")
                                                        (("2"
                                                          (mult-by
                                                           -3
                                                           "vsp-viz")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))
                                               ("2" (assert) nil)))
                                             ("2"
                                              (expand "abs" 2)
                                              (("2"
                                                (lift-if)
                                                (("2" (ground) nil)))))))
                                           ("2" (assert) nil)))))))
                                     ("2" (typepred "T")
                                      (("2"
                                        (mult-by -3 "vsp-viz")
                                        (("2" (assert) nil)))))))
                                   ("2" (mult-by 1 "H")
                                    (("2" (mult-by 2 "H")
                                      (("2" (assert) nil)))))))))))))
                           ("2" (flatten)
                            (("2" (replace -1)
                              (("2" (hide 1)
                                (("2" (case "vsp < viz")
                                  (("1" (case "sz + T*(vsp-viz) < H")
                                    (("1" (copy 2)
                                      (("1"
                                        (expand "conflict_vertical?")
                                        (("1"
                                          (inst + "T")
                                          (("1"
                                            (case "sz + T*(vsp-viz) <= -H")
                                            (("1"
                                              (name "newt" "-sz/(vsp-viz)")
                                              (("1"
                                                (case
                                                 "B <= newt and newt <= T")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case
                                                     "sz + newt*(vsp-viz) = 0")
                                                    (("1"
                                                      (inst + "newt")
                                                      (("1" (assert) nil)
                                                       ("2" (assert) nil)))
                                                     ("2"
                                                      (replace -3 :dir rl)
                                                      (("2"
                                                        (name
                                                         "const3"
                                                         "vsp-viz")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (both-sides
                                                             "-"
                                                             "sz"
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (cross-mult 1)
                                                                nil)))
                                                             ("2"
                                                              (assert)
                                                              nil)))))))))))))
                                                 ("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (split +)
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (typepred "T")
                                                        (("1"
                                                          (mult-by
                                                           -3
                                                           "viz-vsp")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (typepred "T")
                                                        (("2"
                                                          (mult-by
                                                           -3
                                                           "viz-vsp")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))
                                               ("2" (assert) nil)))
                                             ("2"
                                              (expand "abs")
                                              (("2"
                                                (lift-if)
                                                (("2" (ground) nil)))))))
                                           ("2" (assert) nil)))))))
                                     ("2" (typepred "T")
                                      (("2"
                                        (mult-by -3 "viz-vsp")
                                        (("2" (assert) nil)))))))
                                   ("2" (mult-by 1 "H")
                                    (("2" (mult-by 2 "H")
                                      (("2"
                                        (assert)
                                        nil)))))))))))))))))))))))))))))))))
       ("2" (flatten)
        (("2" (case "vsp - viz = 0")
          (("1" (replace -1) (("1" (assert) nil)))
           ("2" (replace 1)
            (("2" (split -)
              (("1" (flatten)
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (expand "abs")
                          (("1" (lift-if)
                            (("1" (split -)
                              (("1" (flatten)
                                (("1" (expand "conflict_vertical?")
                                  (("1" (skosimp*)
                                    (("1" (neg-formula -2)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (case "vsp < viz")
                                          (("1"
                                            (mult-by -1 "H")
                                            (("1" (assert) nil)))
                                           ("2"
                                            (mult-by 1 "T-t!1")
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  nil)))))))))))))))))))
                               ("2" (flatten)
                                (("2" (replace -1)
                                  (("2" (case "vsp > viz")
                                    (("1" (mult-by -1 "H")
                                      (("1" (assert) nil)))
                                     ("2" (expand "conflict_vertical?")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (mult-by 1 "T-t!1")
                                          (("2"
                                            (expand "abs")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                nil)))))))))))))))))))))))))))))))))
               ("2" (flatten)
                (("2" (replace -1)
                  (("2" (hide -1)
                    (("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (expand "abs")
                          (("2" (lift-if)
                            (("2" (split -)
                              (("1" (flatten)
                                (("1" (neg-formula -2)
                                  (("1" (replace -1)
                                    (("1" (case "vsp > viz")
                                      (("1"
                                        (mult-by -1 "H")
                                        (("1" (assert) nil)))
                                       ("2"
                                        (expand "conflict_vertical?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (mult-by 1 "t!1-B")
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  nil)))))))))))))))))))
                               ("2" (flatten)
                                (("2" (replace -1)
                                  (("2" (case "vsp < viz")
                                    (("1" (mult-by -1 "H")
                                      (("1" (assert) nil)))
                                     ("2" (expand "conflict_vertical?")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (mult-by 1 "t!1-B")
                                          (("2"
                                            (expand "abs")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                nil))))))))))))))))))))))))))))))))))))))))))))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (H formal-const-decl "posreal" vs_bands nil)
    (T formal-const-decl "{AB: posreal | AB > B}" vs_bands nil)
    (B formal-const-decl "nnreal" vs_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (< const-decl "bool" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Lookahead type-eq-decl nil Lookahead nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (div_mult_neg_le2 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (viz skolem-const-decl "real" vs_bands nil)
    (vsp skolem-const-decl "real" vs_bands nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_nat formula-decl nil abs_lems reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (newt skolem-const-decl "real" vs_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (conflict_vertical? const-decl "bool" cd_vertical nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (newt skolem-const-decl "real" vs_bands nil)
    (newt skolem-const-decl "real" vs_bands nil)
    (newt skolem-const-decl "real" vs_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (band_critical_on_H 0
  (band_critical_on_H-3 "stop infinite loop on mult-by -1" 3508591107
   ("" (skeep)
    (("" (case "B = 0")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (hide -1)
            (("1" (expand "sign" -3)
              (("1" (case "T * vsp1 - T * viz + sz >= 0")
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (expand "abs" (-1 -2 -3 -4))
                        (("1" (hide -1)
                          (("1" (hide -1)
                            (("1" (case "sz + tlh*(vsp2-viz) < H")
                              (("1" (hide -4)
                                (("1" (name "newt" "(H-sz+T*viz)/T")
                                  (("1" (case "sz + T*(newt-viz) = H")
                                    (("1" (inst + "newt")
                                      (("1"
                                        (expand "abs" +)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "vs_bands_vertical_dir_exclusive")
                                            (("1"
                                              (inst
                                               -
                                               "T"
                                               "1"
                                               "sz"
                                               "viz"
                                               "newt")
                                              (("1"
                                                (expand "abs" -1)
                                                (("1"
                                                  (expand
                                                   "conflict_vertical?")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (case
                                                       "newt-viz = (H-sz)/T")
                                                      (("1"
                                                        (mult-by -1 "t!1")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (case
                                                               "sz + ((H-sz)/T)*t!1<H")
                                                              (("1"
                                                                (hide -2)
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "T")
                                                                  (("1"
                                                                    (mult-by
                                                                     -5
                                                                     "T-t!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "abs"
                                                                 -1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -3 :dir rl)
                                                        (("2"
                                                          (mult-by 1 "T")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "vsp2 < viz")
                                        (("1"
                                          (case "sz + T*(vsp2-viz) < H")
                                          (("1"
                                            (typepred "band")
                                            (("1"
                                              (inst - "vsp2" "vsp1" "newt")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -4 :dir rl)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (cross-mult 1)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (mult-by -1 "T-tlh")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (mult-by 1 "tlh")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace -1 :dir rl)
                                      (("2"
                                        (mult-by 1 "T")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "abs")
                                (("2" (lift-if) (("2" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (ground)
                  (("2" (expand "abs" (-1 -2))
                    (("2" (neg-formula -1)
                      (("2" (neg-formula -2)
                        (("2" (case "sz + tlh*(vsp2-viz) > -H")
                          (("1" (assert)
                            (("1" (case "sz >= 0")
                              (("1" (assert) nil nil)
                               ("2" (assert)
                                (("2" (hide -4)
                                  (("2" (name "newt" "(-H-sz+T*viz)/T")
                                    (("2" (case "sz + T*(newt-viz) = -H")
                                      (("1"
                                        (inst + "newt")
                                        (("1"
                                          (expand "abs" +)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "vs_bands_vertical_dir_exclusive")
                                              (("1"
                                                (inst
                                                 -
                                                 "T"
                                                 "1"
                                                 "sz"
                                                 "viz"
                                                 "newt")
                                                (("1"
                                                  (expand "abs" -1)
                                                  (("1"
                                                    (expand
                                                     "conflict_vertical?")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (case
                                                         "newt-viz = (-H-sz)/T")
                                                        (("1"
                                                          (case
                                                           "newt*t!1 - viz*t!1 = (-H - sz) / T*t!1")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (case
                                                                 "sz + ((-H-sz)/T)*t!1>-H")
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (case
                                                                     " sz*T  + ((-H - sz)) * t!1 > -H*T")
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (mult-by
                                                                         -6
                                                                         "T-t!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1 1))
                                                                      (("2"
                                                                        (name-replace
                                                                         "div_T"
                                                                         "(-H - sz) / T")
                                                                        (("2"
                                                                          (mult-by
                                                                           -1
                                                                           "T")
                                                                          (("2"
                                                                            (expand
                                                                             "div_T")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 3 4)
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     :dir
                                                                     rl
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (grind-reals)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (cross-mult 1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "vsp2 > viz")
                                          (("1"
                                            (case "sz + T*(vsp2-viz) > -H")
                                            (("1"
                                              (typepred "band")
                                              (("1"
                                                (inst - "vsp1" "vsp2" "newt")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -4 :dir rl)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (cross-mult 1)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (mult-by -1 "T-tlh")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (mult-by 1 "tlh")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 :dir rl)
                                        (("2"
                                          (mult-by 1 "T")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "abs" -)
                            (("2" (lift-if) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (expand "sign" -)
          (("2" (lift-if)
            (("2" (lift-if)
              (("2" (ground)
                (("1" (expand "abs" (-1 -2 -3 -4))
                  (("1" (hide -1)
                    (("1" (hide -1)
                      (("1" (case "sz + tlh*(vsp2-viz) < H")
                        (("1" (hide -4)
                          (("1" (name "newtb" "(H-sz+B*viz)/B")
                            (("1" (label "newtbname" -1)
                              (("1" (case "sz + B*(newtb-viz) = H")
                                (("1" (name "newtt" "(H-sz+T*viz)/T")
                                  (("1" (label "newttname" -1)
                                    (("1" (case "sz + T*(newtt-viz) = H")
                                      (("1"
                                        (case "vsp2 >= viz")
                                        (("1"
                                          (case "sz + B*(vsp2-viz) < H")
                                          (("1"
                                            (inst + "newtb")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 3)
                                                (("1"
                                                  (expand "abs" +)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "vs_bands_vertical_dir_exclusive")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "B"
                                                         "-1"
                                                         "sz"
                                                         "viz"
                                                         "newtb")
                                                        (("1"
                                                          (expand "abs" -1)
                                                          (("1"
                                                            (expand
                                                             "conflict_vertical?")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (case
                                                                 "sz + t!1*(newtb - viz) < H")
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (case
                                                                     "newtb - viz = (H-sz)/B")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (both-sides
                                                                           "-"
                                                                           "sz"
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (cross-mult
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "H < sz")
                                                                                (("1"
                                                                                  (mult-by
                                                                                   -4
                                                                                   "B")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (mult-by
                                                                                   1
                                                                                   "(t!1-B)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       "newtbname"
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (mult-by
                                                                         1
                                                                         "B")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "abs"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "band")
                                              (("2"
                                                (inst - "vsp2" "vsp1" "newtb")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace
                                                     "newtbname"
                                                     +
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (cross-mult 1)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (mult-by -1 "tlh-B")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "vsp2 < viz")
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (case "H>sz")
                                              (("1"
                                                (case "sz + B*(vsp2-viz) < H")
                                                (("1"
                                                  (inst + "newtb")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (expand "abs" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "vs_bands_vertical_dir_exclusive")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "B"
                                                               "-1"
                                                               "sz"
                                                               "viz"
                                                               "newtb")
                                                              (("1"
                                                                (expand
                                                                 "abs"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "conflict_vertical?")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (case
                                                                       "sz + t!1*(newtb - viz) < H")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (case
                                                                           "newtb - viz = (H-sz)/B")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (both-sides
                                                                                 "-"
                                                                                 "sz"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     -1)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -3
                                                                                       "t!1-B")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             "newtbname"
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (mult-by
                                                                               1
                                                                               "B")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "abs"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "band")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "vsp2"
                                                       "vsp1"
                                                       "newtb")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           "newtbname"
                                                           +
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (cross-mult 1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (cross-mult 1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (mult-by -2 "B")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "sz + T*(vsp2-viz) < H")
                                                (("1"
                                                  (inst + "newtt")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (expand "abs" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "vs_bands_vertical_dir_exclusive")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "T"
                                                               "1"
                                                               "sz"
                                                               "viz"
                                                               "newtt")
                                                              (("1"
                                                                (expand
                                                                 "abs"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "conflict_vertical?")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (case
                                                                       "sz + t!1*(newtt-viz) < H")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (case
                                                                           "newtt - viz = (H-sz)/T")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "t!1 * ((H - sz) / T) + sz - sz < H - sz")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         1
                                                                                         "T-t!1")
                                                                                        (("1"
                                                                                          (cross-mult
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "abs"
                                                                         -1)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "band")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "vsp2"
                                                       "vsp1"
                                                       "newtt")
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           "newttname"
                                                           +
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (cross-mult 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (replace
                                                           "newttname"
                                                           +
                                                           :dir
                                                           rl)
                                                          (("3"
                                                            (cross-mult 1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (mult-by -1 "T-tlh")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace "newttname" + :dir rl)
                                        (("2"
                                          (mult-by 1 "T")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replace "newtbname" + :dir rl)
                                  (("2" (mult-by 1 "B")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "abs" -)
                          (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lift-if)
                  (("2" (ground)
                    (("2" (expand "abs" (-1 -2))
                      (("2" (neg-formula -1)
                        (("2" (neg-formula -2)
                          (("2" (hide 1)
                            (("2" (hide 1)
                              (("2" (case "sz + tlh*(vsp2-viz) > -H")
                                (("1" (hide -4)
                                  (("1" (name "newtb" "(-H-sz+B*viz)/B")
                                    (("1" (label "newtbname" -1)
                                      (("1"
                                        (case "sz + B*(newtb-viz) = -H")
                                        (("1"
                                          (name "newtt" "(-H-sz+T*viz)/T")
                                          (("1"
                                            (label "newttname" -1)
                                            (("1"
                                              (case "sz + T*(newtt-viz) = -H")
                                              (("1"
                                                (case "vsp2 <= viz")
                                                (("1"
                                                  (case
                                                   "sz + B*(vsp2-viz) > -H")
                                                  (("1"
                                                    (inst + "newtb")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (expand "abs" +)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "vs_bands_vertical_dir_exclusive")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "B"
                                                                 "-1"
                                                                 "sz"
                                                                 "viz"
                                                                 "newtb")
                                                                (("1"
                                                                  (expand
                                                                   "abs"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "conflict_vertical?")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (case
                                                                         "sz + t!1*(newtb - viz) > -H")
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (case
                                                                             "newtb - viz = (-H-sz)/B")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (both-sides
                                                                                   "-"
                                                                                   "sz"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (cross-mult
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case
                                                                                         "-H > sz")
                                                                                        (("1"
                                                                                          (mult-by
                                                                                           -4
                                                                                           "B")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (mult-by
                                                                                           1
                                                                                           "(t!1-B)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               "newtbname"
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (mult-by
                                                                                 1
                                                                                 "B")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "abs"
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "band")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "vsp1"
                                                         "vsp2"
                                                         "newtb")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             "newtbname"
                                                             +
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (cross-mult 1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (mult-by -1 "tlh-B")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "vsp2 > viz")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (case "-H < sz")
                                                      (("1"
                                                        (case
                                                         "sz + B*(vsp2-viz) > -H")
                                                        (("1"
                                                          (inst + "newtb")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 3)
                                                              (("1"
                                                                (expand
                                                                 "abs"
                                                                 +)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "vs_bands_vertical_dir_exclusive")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "B"
                                                                       "-1"
                                                                       "sz"
                                                                       "viz"
                                                                       "newtb")
                                                                      (("1"
                                                                        (expand
                                                                         "abs"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "conflict_vertical?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (case
                                                                               "sz + t!1*(newtb - viz) > -H")
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (case
                                                                                   "newtb - viz = (-H-sz)/B")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case
                                                                                         "sz + t!1 * ((-H - sz) / B) - sz > -H - sz")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (cross-mult
                                                                                               -1)
                                                                                              (("1"
                                                                                                (mult-by
                                                                                                 -3
                                                                                                 "t!1-B")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     "newtbname"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (mult-by
                                                                                       1
                                                                                       "B")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "abs"
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred "band")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "vsp1"
                                                               "vsp2"
                                                               "newtb")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   "newtbname"
                                                                   +
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (split 1)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (mult-by -2 "B")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "sz + T*(vsp2-viz) > -H")
                                                        (("1"
                                                          (inst + "newtt")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 3)
                                                              (("1"
                                                                (expand
                                                                 "abs"
                                                                 +)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "vs_bands_vertical_dir_exclusive")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "T"
                                                                       "1"
                                                                       "sz"
                                                                       "viz"
                                                                       "newtt")
                                                                      (("1"
                                                                        (expand
                                                                         "abs"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "conflict_vertical?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (case
                                                                               "sz + t!1*(newtt-viz) > -H")
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (case
                                                                                   "newtt - viz = (-H-sz)/T")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case
                                                                                         "sz + t!1 * ((-H - sz) / T) - sz > -H - sz")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (mult-by
                                                                                               1
                                                                                               "T-t!1")
                                                                                              (("1"
                                                                                                (cross-mult
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     "newttname"
                                                                                     +
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (mult-by
                                                                                       1
                                                                                       "T")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "abs"
                                                                                 -1)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred "band")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "vsp1"
                                                               "vsp2"
                                                               "newtt")
                                                              (("2"
                                                                (split -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   "newttname"
                                                                   +
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (replace
                                                                   "newttname"
                                                                   +
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (cross-mult
                                                                     1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (mult-by
                                                             -1
                                                             "T-tlh")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace
                                                 "newttname"
                                                 +
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (mult-by 1 "T")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace "newtbname" + :dir rl)
                                          (("2"
                                            (mult-by 1 "B")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "abs" -)
                                  (("2" (lift-if) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((B formal-const-decl "nnreal" vs_bands nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sign const-decl "Sign" sign reals)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (both_sides_times_neg_ge1_imp formula-decl nil extra_real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (div_T skolem-const-decl "real" vs_bands nil)
    (newt skolem-const-decl "real" vs_bands nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (< const-decl "bool" reals nil) (Lookahead type-eq-decl nil Lookahead nil)
    (H formal-const-decl "posreal" vs_bands nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (band skolem-const-decl "Connected" vs_bands nil)
    (newt skolem-const-decl "real" vs_bands nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (conflict_vertical? const-decl "bool" cd_vertical nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (vs_bands_vertical_dir_exclusive formula-decl nil vs_bands nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tlh skolem-const-decl "Lookahead[B, T]" vs_bands nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (T formal-const-decl "{AB: posreal | AB > B}" vs_bands nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Connected type-eq-decl nil connected_set reals)
    (newtt skolem-const-decl "real" vs_bands nil)
    (both_sides_minus_gt1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (newtb skolem-const-decl "real" vs_bands nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (newtt skolem-const-decl "real" vs_bands nil)
    (both_sides_minus_lt1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (newtb skolem-const-decl "real" vs_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil)
  (rwb "stop infinite loop on mult-by -1" 3508523193
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak)
  (band_critical_on_H-2 "" 3504767507
   ("" (skeep)
    (("" (case "B = 0")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (hide -1)
            (("1" (expand "sign" -3)
              (("1" (lift-if)
                (("1" (lift-if)
                  (("1" (lift-if)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (ground)
                              (("1" (expand "abs" (-1 -2 -3 -4))
                                (("1" (hide -1)
                                  (("1" (hide -1)
                                    (("1" (case "sz + tlh*(vsp2-viz) < H")
                                      (("1"
                                        (hide -4)
                                        (("1"
                                          (name "newt" "(H-sz+T*viz)/T")
                                          (("1"
                                            (case "sz + T*(newt-viz) = H")
                                            (("1"
                                              (inst + "newt")
                                              (("1"
                                                (expand "abs" +)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "vs_bands_vertical_dir_exclusive")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "T"
                                                       "1"
                                                       "sz"
                                                       "viz"
                                                       "newt")
                                                      (("1"
                                                        (expand "abs" -1)
                                                        (("1"
                                                          (expand
                                                           "conflict_vertical?")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (case
                                                               "newt-viz = (H-sz)/T")
                                                              (("1"
                                                                (mult-by
                                                                 -1
                                                                 "t!1")
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (hide -1)
                                                                    (("1"
                                                                      (case
                                                                       "sz + ((H-sz)/T)*t!1<H")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (mult-by
                                                                           -1
                                                                           "T")
                                                                          (("1"
                                                                            (mult-by
                                                                             -5
                                                                             "T-t!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "abs"
                                                                         -1)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -3
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (mult-by
                                                                   1
                                                                   "T")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "vsp2 < viz")
                                                (("1"
                                                  (case
                                                   "sz + T*(vsp2-viz) < H")
                                                  (("1"
                                                    (typepred "band")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "vsp2"
                                                       "vsp1"
                                                       "newt")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -4 :dir rl)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (cross-mult 1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (cross-mult 1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (mult-by -1 "T-tlh")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (mult-by 1 "tlh")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 :dir rl)
                                              (("2"
                                                (mult-by 1 "T")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "abs")
                                        (("2"
                                          (lift-if)
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (ground)
                          (("2" (expand "abs" (-1 -2))
                            (("2" (neg-formula -1)
                              (("2" (neg-formula -2)
                                (("2" (case "sz + tlh*(vsp2-viz) > -H")
                                  (("1" (hide -4)
                                    (("1" (name "newt" "(-H-sz+T*viz)/T")
                                      (("1"
                                        (case "sz + T*(newt-viz) = -H")
                                        (("1"
                                          (inst + "newt")
                                          (("1"
                                            (expand "abs" +)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "vs_bands_vertical_dir_exclusive")
                                                (("1"
                                                  (inst
                                                   -
                                                   "T"
                                                   "1"
                                                   "sz"
                                                   "viz"
                                                   "newt")
                                                  (("1"
                                                    (expand "abs" -1)
                                                    (("1"
                                                      (expand
                                                       "conflict_vertical?")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (case
                                                           "newt-viz = (-H-sz)/T")
                                                          (("1"
                                                            (mult-by -1 "t!1")
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (case
                                                                   "sz + ((-H-sz)/T)*t!1>-H")
                                                                  (("1"
                                                                    (hide -2)
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "T")
                                                                      (("1"
                                                                        (mult-by
                                                                         -6
                                                                         "T-t!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "abs"
                                                                     -1)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -3
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (mult-by 1 "T")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "vsp2 > viz")
                                            (("1"
                                              (case "sz + T*(vsp2-viz) > -H")
                                              (("1"
                                                (typepred "band")
                                                (("1"
                                                  (inst
                                                   -
                                                   "vsp1"
                                                   "vsp2"
                                                   "newt")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -4 :dir rl)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (cross-mult 1)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (cross-mult 1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (mult-by -1 "T-tlh")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (mult-by 1 "tlh")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1 :dir rl)
                                          (("2"
                                            (mult-by 1 "T")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "abs" -)
                                    (("2" (lift-if) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (expand "sign" -)
          (("2" (lift-if)
            (("2" (lift-if)
              (("2" (ground)
                (("1" (expand "abs" (-1 -2 -3 -4))
                  (("1" (hide -1)
                    (("1" (hide -1)
                      (("1" (case "sz + tlh*(vsp2-viz) < H")
                        (("1" (hide -4)
                          (("1" (name "newtb" "(H-sz+B*viz)/B")
                            (("1" (label "newtbname" -1)
                              (("1" (case "sz + B*(newtb-viz) = H")
                                (("1" (name "newtt" "(H-sz+T*viz)/T")
                                  (("1" (label "newttname" -1)
                                    (("1" (case "sz + T*(newtt-viz) = H")
                                      (("1"
                                        (case "vsp2 >= viz")
                                        (("1"
                                          (case "sz + B*(vsp2-viz) < H")
                                          (("1"
                                            (inst + "newtb")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 3)
                                                (("1"
                                                  (expand "abs" +)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "vs_bands_vertical_dir_exclusive")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "B"
                                                         "-1"
                                                         "sz"
                                                         "viz"
                                                         "newtb")
                                                        (("1"
                                                          (expand "abs" -1)
                                                          (("1"
                                                            (expand
                                                             "conflict_vertical?")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (case
                                                                 "sz + t!1*(newtb - viz) < H")
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (case
                                                                     "newtb - viz = (H-sz)/B")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (both-sides
                                                                           "-"
                                                                           "sz"
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (cross-mult
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "H < sz")
                                                                                (("1"
                                                                                  (mult-by
                                                                                   -4
                                                                                   "B")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (mult-by
                                                                                   1
                                                                                   "(t!1-B)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       "newtbname"
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (mult-by
                                                                         1
                                                                         "B")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "abs"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "band")
                                              (("2"
                                                (inst - "vsp2" "vsp1" "newtb")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace
                                                     "newtbname"
                                                     +
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (cross-mult 1)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (mult-by -1 "tlh-B")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "vsp2 < viz")
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (case "H>sz")
                                              (("1"
                                                (case "sz + B*(vsp2-viz) < H")
                                                (("1"
                                                  (inst + "newtb")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (expand "abs" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "vs_bands_vertical_dir_exclusive")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "B"
                                                               "-1"
                                                               "sz"
                                                               "viz"
                                                               "newtb")
                                                              (("1"
                                                                (expand
                                                                 "abs"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "conflict_vertical?")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (case
                                                                       "sz + t!1*(newtb - viz) < H")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (case
                                                                           "newtb - viz = (H-sz)/B")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (both-sides
                                                                                 "-"
                                                                                 "sz"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     -1)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -3
                                                                                       "t!1-B")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             "newtbname"
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (mult-by
                                                                               1
                                                                               "B")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "abs"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "band")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "vsp2"
                                                       "vsp1"
                                                       "newtb")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           "newtbname"
                                                           +
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (cross-mult 1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (cross-mult 1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (mult-by -2 "B")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "sz + T*(vsp2-viz) < H")
                                                (("1"
                                                  (inst + "newtt")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (expand "abs" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "vs_bands_vertical_dir_exclusive")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "T"
                                                               "1"
                                                               "sz"
                                                               "viz"
                                                               "newtt")
                                                              (("1"
                                                                (expand
                                                                 "abs"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "conflict_vertical?")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (case
                                                                       "sz + t!1*(newtt-viz) < H")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (case
                                                                           "newtt - viz = (H-sz)/T")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "t!1 * ((H - sz) / T) + sz - sz < H - sz")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         1
                                                                                         "T-t!1")
                                                                                        (("1"
                                                                                          (cross-mult
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "abs"
                                                                         -1)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "band")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "vsp2"
                                                       "vsp1"
                                                       "newtt")
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           "newttname"
                                                           +
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (cross-mult 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (replace
                                                           "newttname"
                                                           +
                                                           :dir
                                                           rl)
                                                          (("3"
                                                            (cross-mult 1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (mult-by -1 "T-tlh")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace "newttname" + :dir rl)
                                        (("2"
                                          (mult-by 1 "T")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replace "newtbname" + :dir rl)
                                  (("2" (mult-by 1 "B")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "abs" -)
                          (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lift-if)
                  (("2" (ground)
                    (("2" (expand "abs" (-1 -2))
                      (("2" (neg-formula -1)
                        (("2" (neg-formula -2)
                          (("2" (hide 1)
                            (("2" (hide 1)
                              (("2" (case "sz + tlh*(vsp2-viz) > -H")
                                (("1" (hide -4)
                                  (("1" (name "newtb" "(-H-sz+B*viz)/B")
                                    (("1" (label "newtbname" -1)
                                      (("1"
                                        (case "sz + B*(newtb-viz) = -H")
                                        (("1"
                                          (name "newtt" "(-H-sz+T*viz)/T")
                                          (("1"
                                            (label "newttname" -1)
                                            (("1"
                                              (case "sz + T*(newtt-viz) = -H")
                                              (("1"
                                                (case "vsp2 <= viz")
                                                (("1"
                                                  (case
                                                   "sz + B*(vsp2-viz) > -H")
                                                  (("1"
                                                    (inst + "newtb")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (expand "abs" +)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "vs_bands_vertical_dir_exclusive")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "B"
                                                                 "-1"
                                                                 "sz"
                                                                 "viz"
                                                                 "newtb")
                                                                (("1"
                                                                  (expand
                                                                   "abs"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "conflict_vertical?")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (case
                                                                         "sz + t!1*(newtb - viz) > -H")
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (case
                                                                             "newtb - viz = (-H-sz)/B")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (both-sides
                                                                                   "-"
                                                                                   "sz"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (cross-mult
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case
                                                                                         "-H > sz")
                                                                                        (("1"
                                                                                          (mult-by
                                                                                           -4
                                                                                           "B")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (mult-by
                                                                                           1
                                                                                           "(t!1-B)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               "newtbname"
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (mult-by
                                                                                 1
                                                                                 "B")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "abs"
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "band")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "vsp1"
                                                         "vsp2"
                                                         "newtb")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             "newtbname"
                                                             +
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (cross-mult 1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (mult-by -1 "tlh-B")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "vsp2 > viz")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (case "-H < sz")
                                                      (("1"
                                                        (case
                                                         "sz + B*(vsp2-viz) > -H")
                                                        (("1"
                                                          (inst + "newtb")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 3)
                                                              (("1"
                                                                (expand
                                                                 "abs"
                                                                 +)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "vs_bands_vertical_dir_exclusive")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "B"
                                                                       "-1"
                                                                       "sz"
                                                                       "viz"
                                                                       "newtb")
                                                                      (("1"
                                                                        (expand
                                                                         "abs"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "conflict_vertical?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (case
                                                                               "sz + t!1*(newtb - viz) > -H")
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (case
                                                                                   "newtb - viz = (-H-sz)/B")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case
                                                                                         "sz + t!1 * ((-H - sz) / B) - sz > -H - sz")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (cross-mult
                                                                                               -1)
                                                                                              (("1"
                                                                                                (mult-by
                                                                                                 -3
                                                                                                 "t!1-B")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     "newtbname"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (mult-by
                                                                                       1
                                                                                       "B")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "abs"
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred "band")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "vsp1"
                                                               "vsp2"
                                                               "newtb")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   "newtbname"
                                                                   +
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (split 1)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (mult-by -2 "B")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "sz + T*(vsp2-viz) > -H")
                                                        (("1"
                                                          (inst + "newtt")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 3)
                                                              (("1"
                                                                (expand
                                                                 "abs"
                                                                 +)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "vs_bands_vertical_dir_exclusive")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "T"
                                                                       "1"
                                                                       "sz"
                                                                       "viz"
                                                                       "newtt")
                                                                      (("1"
                                                                        (expand
                                                                         "abs"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "conflict_vertical?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (case
                                                                               "sz + t!1*(newtt-viz) > -H")
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (case
                                                                                   "newtt - viz = (-H-sz)/T")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case
                                                                                         "sz + t!1 * ((-H - sz) / T) - sz > -H - sz")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (mult-by
                                                                                               1
                                                                                               "T-t!1")
                                                                                              (("1"
                                                                                                (cross-mult
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     "newttname"
                                                                                     +
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (mult-by
                                                                                       1
                                                                                       "T")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "abs"
                                                                                 -1)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred "band")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "vsp1"
                                                               "vsp2"
                                                               "newtt")
                                                              (("2"
                                                                (split -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   "newttname"
                                                                   +
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (replace
                                                                   "newttname"
                                                                   +
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (cross-mult
                                                                     1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (mult-by
                                                             -1
                                                             "T-tlh")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace
                                                 "newttname"
                                                 +
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (mult-by 1 "T")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace "newtbname" + :dir rl)
                                          (("2"
                                            (mult-by 1 "B")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "abs" -)
                                  (("2" (lift-if) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sign const-decl "Sign" sign reals)
    (Connected type-eq-decl nil connected_set reals)
    (Lookahead type-eq-decl nil Lookahead nil)
    (Sign type-eq-decl nil sign reals)
    (conflict_vertical? const-decl "bool" cd_vertical nil))
   shostak)
  (band_critical_on_H-1 nil 3477244369
   ("" (skeep)
    (("" (case "B = 0")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (hide -1)
            (("1" (expand "sign" -3)
              (("1" (lift-if)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (ground)
                        (("1" (expand "abs" (-1 -2 -3 -4))
                          (("1" (hide -2)
                            (("1" (hide -1)
                              (("1" (case "sz + tlh*(vsp2-viz) < H")
                                (("1" (hide -4)
                                  (("1" (name "newt" "(H-sz+T*viz)/T")
                                    (("1" (case "sz + T*(newt-viz) = H")
                                      (("1"
                                        (inst + "newt")
                                        (("1"
                                          (expand "abs" +)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "vs_bands_vertical_dir_exclusive")
                                              (("1"
                                                (inst
                                                 -
                                                 "T"
                                                 "1"
                                                 "sz"
                                                 "viz"
                                                 "newt")
                                                (("1"
                                                  (expand "abs" -1)
                                                  (("1"
                                                    (expand
                                                     "conflict_vertical?")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (case
                                                         "newt-viz = (H-sz)/T")
                                                        (("1"
                                                          (mult-by -1 "t!1")
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (case
                                                                 "sz + ((H-sz)/T)*t!1<H")
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (mult-by
                                                                     -1
                                                                     "T")
                                                                    (("1"
                                                                      (mult-by
                                                                       -5
                                                                       "T-t!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "abs"
                                                                   -1)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -3 :dir rl)
                                                          (("2"
                                                            (mult-by 1 "T")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "vsp2 < viz")
                                          (("1"
                                            (case "sz + T*(vsp2-viz) < H")
                                            (("1"
                                              (typepred "band")
                                              (("1"
                                                (inst - "vsp2" "vsp1" "newt")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -4 :dir rl)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (cross-mult 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (mult-by -1 "T-tlh")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (mult-by 1 "tlh")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 :dir rl)
                                        (("2"
                                          (mult-by 1 "T")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "abs")
                                  (("2" (lift-if) (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (ground)
                        (("2" (expand "abs" (-1 -2))
                          (("2" (neg-formula -1)
                            (("2" (neg-formula -2)
                              (("2" (case "sz + tlh*(vsp2-viz) > -H")
                                (("1" (hide -4)
                                  (("1" (name "newt" "(-H-sz+T*viz)/T")
                                    (("1" (case "sz + T*(newt-viz) = -H")
                                      (("1"
                                        (inst + "newt")
                                        (("1"
                                          (expand "abs" +)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "vs_bands_vertical_dir_exclusive")
                                              (("1"
                                                (inst
                                                 -
                                                 "T"
                                                 "1"
                                                 "sz"
                                                 "viz"
                                                 "newt")
                                                (("1"
                                                  (expand "abs" -1)
                                                  (("1"
                                                    (expand
                                                     "conflict_vertical?")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (case
                                                         "newt-viz = (-H-sz)/T")
                                                        (("1"
                                                          (mult-by -1 "t!1")
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (case
                                                                 "sz + ((-H-sz)/T)*t!1>-H")
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (mult-by
                                                                     -1
                                                                     "T")
                                                                    (("1"
                                                                      (mult-by
                                                                       -6
                                                                       "T-t!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "abs"
                                                                   -1)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -3 :dir rl)
                                                          (("2"
                                                            (mult-by 1 "T")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "vsp2 > viz")
                                          (("1"
                                            (case "sz + T*(vsp2-viz) > -H")
                                            (("1"
                                              (typepred "band")
                                              (("1"
                                                (inst - "vsp1" "vsp2" "newt")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -4 :dir rl)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (cross-mult 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (mult-by -1 "T-tlh")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (mult-by 1 "tlh")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 :dir rl)
                                        (("2"
                                          (mult-by 1 "T")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "abs" -)
                                  (("2" (lift-if) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (expand "sign" -)
          (("2" (lift-if)
            (("2" (lift-if)
              (("2" (ground)
                (("1" (expand "abs" (-1 -2 -3 -4))
                  (("1" (hide -1)
                    (("1" (hide -1)
                      (("1" (case "sz + tlh*(vsp2-viz) < H")
                        (("1" (hide -4)
                          (("1" (name "newtb" "(H-sz+B*viz)/B")
                            (("1" (label "newtbname" -1)
                              (("1" (case "sz + B*(newtb-viz) = H")
                                (("1" (name "newtt" "(H-sz+T*viz)/T")
                                  (("1" (label "newttname" -1)
                                    (("1" (case "sz + T*(newtt-viz) = H")
                                      (("1"
                                        (case "vsp2 >= viz")
                                        (("1"
                                          (case "sz + B*(vsp2-viz) < H")
                                          (("1"
                                            (inst + "newtb")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 3)
                                                (("1"
                                                  (expand "abs" +)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "vs_bands_vertical_dir_exclusive")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "B"
                                                         "-1"
                                                         "sz"
                                                         "viz"
                                                         "newtb")
                                                        (("1"
                                                          (expand "abs" -1)
                                                          (("1"
                                                            (expand
                                                             "conflict_vertical?")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (case
                                                                 "sz + t!1*(newtb - viz) < H")
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (case
                                                                     "newtb - viz = (H-sz)/B")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (both-sides
                                                                           "-"
                                                                           "sz"
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (cross-mult
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "H < sz")
                                                                                (("1"
                                                                                  (mult-by
                                                                                   -4
                                                                                   "B")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (mult-by
                                                                                   1
                                                                                   "(t!1-B)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       "newtbname"
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (mult-by
                                                                         1
                                                                         "B")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "abs"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "band")
                                              (("2"
                                                (inst - "vsp2" "vsp1" "newtb")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace
                                                     "newtbname"
                                                     +
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (cross-mult 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (mult-by -1 "tlh-B")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "vsp2 < viz")
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (case "H>sz")
                                              (("1"
                                                (case "sz + B*(vsp2-viz) < H")
                                                (("1"
                                                  (inst + "newtb")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (expand "abs" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "vs_bands_vertical_dir_exclusive")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "B"
                                                               "-1"
                                                               "sz"
                                                               "viz"
                                                               "newtb")
                                                              (("1"
                                                                (expand
                                                                 "abs"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "conflict_vertical?")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (case
                                                                       "sz + t!1*(newtb - viz) < H")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (case
                                                                           "newtb - viz = (H-sz)/B")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (both-sides
                                                                                 "-"
                                                                                 "sz"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     -1)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -3
                                                                                       "t!1-B")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             "newtbname"
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (mult-by
                                                                               1
                                                                               "B")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "abs"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "band")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "vsp2"
                                                       "vsp1"
                                                       "newtb")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           "newtbname"
                                                           +
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (cross-mult 1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (cross-mult 1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (mult-by -2 "B")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "sz + T*(vsp2-viz) < H")
                                                (("1"
                                                  (inst + "newtt")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (expand "abs" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "vs_bands_vertical_dir_exclusive")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "T"
                                                               "1"
                                                               "sz"
                                                               "viz"
                                                               "newtt")
                                                              (("1"
                                                                (expand
                                                                 "abs"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "conflict_vertical?")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (case
                                                                       "sz + t!1*(newtt-viz) < H")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (case
                                                                           "newtt - viz = (H-sz)/T")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (both-sides
                                                                                 "-"
                                                                                 "sz"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (mult-by
                                                                                     1
                                                                                     "T-t!1")
                                                                                    (("1"
                                                                                      (cross-mult
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             "newttname"
                                                                             +
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (mult-by
                                                                               1
                                                                               "T")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "abs"
                                                                         -1)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "band")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "vsp2"
                                                       "vsp1"
                                                       "newtt")
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           "newttname"
                                                           +
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (cross-mult 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (replace
                                                           "newttname"
                                                           +
                                                           :dir
                                                           rl)
                                                          (("3"
                                                            (cross-mult 1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (mult-by -1 "T-tlh")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace "newttname" + :dir rl)
                                        (("2"
                                          (mult-by 1 "T")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replace "newtbname" + :dir rl)
                                  (("2" (mult-by 1 "B")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "abs" -)
                          (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "abs" (-1 -2))
                  (("2" (neg-formula -1)
                    (("2" (neg-formula -2)
                      (("2" (hide 1)
                        (("2" (hide 1)
                          (("2" (case "sz + tlh*(vsp2-viz) > -H")
                            (("1" (hide -4)
                              (("1" (name "newtb" "(-H-sz+B*viz)/B")
                                (("1" (label "newtbname" -1)
                                  (("1" (case "sz + B*(newtb-viz) = -H")
                                    (("1" (name "newtt" "(-H-sz+T*viz)/T")
                                      (("1"
                                        (label "newttname" -1)
                                        (("1"
                                          (case "sz + T*(newtt-viz) = -H")
                                          (("1"
                                            (case "vsp2 <= viz")
                                            (("1"
                                              (case "sz + B*(vsp2-viz) > -H")
                                              (("1"
                                                (inst + "newtb")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (expand "abs" +)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "vs_bands_vertical_dir_exclusive")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "B"
                                                             "-1"
                                                             "sz"
                                                             "viz"
                                                             "newtb")
                                                            (("1"
                                                              (expand
                                                               "abs"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "conflict_vertical?")
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (case
                                                                     "sz + t!1*(newtb - viz) > -H")
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (case
                                                                         "newtb - viz = (-H-sz)/B")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (both-sides
                                                                               "-"
                                                                               "sz"
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (cross-mult
                                                                                   -1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "-H > sz")
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -4
                                                                                       "B")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (mult-by
                                                                                       1
                                                                                       "(t!1-B)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           "newtbname"
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (mult-by
                                                                             1
                                                                             "B")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "abs"
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "band")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "vsp1"
                                                     "vsp2"
                                                     "newtb")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace
                                                         "newtbname"
                                                         +
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (cross-mult 1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (cross-mult 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (mult-by -1 "tlh-B")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "vsp2 > viz")
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (case "-H < sz")
                                                  (("1"
                                                    (case
                                                     "sz + B*(vsp2-viz) > -H")
                                                    (("1"
                                                      (inst + "newtb")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide 3)
                                                          (("1"
                                                            (expand "abs" +)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "vs_bands_vertical_dir_exclusive")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "B"
                                                                   "-1"
                                                                   "sz"
                                                                   "viz"
                                                                   "newtb")
                                                                  (("1"
                                                                    (expand
                                                                     "abs"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "conflict_vertical?")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (case
                                                                           "sz + t!1*(newtb - viz) > -H")
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (case
                                                                               "newtb - viz = (-H-sz)/B")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (both-sides
                                                                                     "-"
                                                                                     "sz"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (cross-mult
                                                                                         -1)
                                                                                        (("1"
                                                                                          (mult-by
                                                                                           -3
                                                                                           "t!1-B")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 "newtbname"
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (mult-by
                                                                                   1
                                                                                   "B")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "abs"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "band")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "vsp1"
                                                           "vsp2"
                                                           "newtb")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               "newtbname"
                                                               +
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (split 1)
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (cross-mult
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (mult-by -2 "B")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "sz + T*(vsp2-viz) > -H")
                                                    (("1"
                                                      (inst + "newtt")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide 3)
                                                          (("1"
                                                            (expand "abs" +)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "vs_bands_vertical_dir_exclusive")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "T"
                                                                   "1"
                                                                   "sz"
                                                                   "viz"
                                                                   "newtt")
                                                                  (("1"
                                                                    (expand
                                                                     "abs"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "conflict_vertical?")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (case
                                                                           "sz + t!1*(newtt-viz) > -H")
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (case
                                                                               "newtt - viz = (-H-sz)/T")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (both-sides
                                                                                     "-"
                                                                                     "sz"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         1
                                                                                         "T-t!1")
                                                                                        (("1"
                                                                                          (cross-mult
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 "newttname"
                                                                                 +
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (mult-by
                                                                                   1
                                                                                   "T")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "abs"
                                                                             -1)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "band")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "vsp1"
                                                           "vsp2"
                                                           "newtt")
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               "newttname"
                                                               +
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (cross-mult 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (replace
                                                               "newttname"
                                                               +
                                                               :dir
                                                               rl)
                                                              (("3"
                                                                (cross-mult 1)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (mult-by -1 "T-tlh")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace "newttname" + :dir rl)
                                            (("2"
                                              (mult-by 1 "T")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace "newtbname" + :dir rl)
                                      (("2"
                                        (mult-by 1 "B")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "abs" -)
                              (("2" (lift-if) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sign const-decl "Sign" sign reals)
    (Connected type-eq-decl nil connected_set reals)
    (Lookahead type-eq-decl nil Lookahead nil)
    (Sign type-eq-decl nil sign reals)
    (conflict_vertical? const-decl "bool" cd_vertical nil))
   nil))
 (vs_band_critical_B_sz_sign 0
  (vs_band_critical_B_sz_sign-1 nil 3477244741
   ("" (skeep)
    (("" (expand "sign" +)
      (("" (lift-if)
        (("" (split +)
          (("1" (flatten)
            (("1" (expand "abs")
              (("1" (assert)
                (("1" (hide -1)
                  (("1" (copy -1)
                    (("1" (mult-by -1 "(vsp-viz)")
                      (("1" (assert)
                        (("1" (replace -1)
                          (("1" (case "vsp >= viz")
                            (("1" (copy -1)
                              (("1" (mult-by -1 "B")
                                (("1" (mult-by -2 "H")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (copy 1)
                              (("2" (mult-by 1 "B")
                                (("2" (mult-by 2 "H") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "abs")
              (("2" (assert)
                (("2" (neg-formula -1)
                  (("2" (copy -1)
                    (("2" (mult-by -1 "vsp-viz")
                      (("2" (assert)
                        (("2" (replace -1)
                          (("2" (case "vsp <= viz")
                            (("1" (copy -1)
                              (("1" (mult-by -1 "B")
                                (("1" (mult-by -2 "H")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (copy 1)
                              (("2" (mult-by 1 "B")
                                (("2" (mult-by 2 "H") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sign const-decl "Sign" sign reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (H formal-const-decl "posreal" vs_bands nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" vs_bands nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (<= const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (vs_band_critical_T_sz_sign 0
  (vs_band_critical_T_sz_sign-1 nil 3477244755
   ("" (skeep)
    (("" (expand "sign" 1)
      (("" (lift-if)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "abs")
              (("1" (assert)
                (("1" (hide -1)
                  (("1" (copy -1)
                    (("1" (mult-by -1 "viz-vsp")
                      (("1" (assert)
                        (("1" (replace -1)
                          (("1" (case "viz >= vsp")
                            (("1" (copy -1)
                              (("1" (mult-by -1 "T")
                                (("1" (mult-by -2 "H")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (copy 1)
                              (("2" (mult-by 1 "T")
                                (("2" (mult-by 2 "H") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "abs")
              (("2" (assert)
                (("2" (copy -1)
                  (("2" (mult-by -1 "vsp-viz")
                    (("2" (assert)
                      (("2" (replace -1)
                        (("2" (case "vsp >= viz")
                          (("1" (copy -1)
                            (("1" (mult-by -1 "T")
                              (("1" (mult-by -2 "H") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (copy 1)
                            (("2" (mult-by 1 "T")
                              (("2" (mult-by 2 "H") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sign const-decl "Sign" sign reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (H formal-const-decl "posreal" vs_bands nil)
    (T formal-const-decl "{AB: posreal | AB > B}" vs_bands nil)
    (B formal-const-decl "nnreal" vs_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (vs_green_band 0
  (vs_green_band-2 "" 3790108648
   ("" (skosimp*)
    (("" (expand "vs_band?")
      (("" (split)
        (("1" (flatten)
          (("1" (expand "vs_green?")
            (("1" (skosimp*)
              (("1"
                (case "sign(sz!1 + B*(vsp!1-viz!1)) = sign(sz!1 + T*(vsp!1-viz!1))")
                (("1" (lemma "cd_vertical")
                  (("1" (inst-cp - "sz!1" "vsp!1-viz!1")
                    (("1" (inst - "sz!1" "vsp!2-viz!1")
                      (("1" (assert)
                        (("1" (copy 1)
                          (("1" (copy 1)
                            (("1" (expand "conflict_vertical?" 1)
                              (("1" (expand "conflict_vertical?" 2)
                                (("1" (inst + "B")
                                  (("1" (inst + "T")
                                    (("1" (expand "conflict_vertical?" -)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (lemma "band_critical_on_H")
                                          (("1"
                                            (inst
                                             -
                                             "band!1"
                                             "sz!1"
                                             "viz!1"
                                             "vsp!1"
                                             "vsp!2"
                                             "t!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "vsp!3")
                                                  (("1"
                                                    (expand "vs_critical?")
                                                    (("1"
                                                      (lemma
                                                       "vs_circle_at_complete")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (copy 1)
                                                              (("1"
                                                                (inst + "-1")
                                                                (("1"
                                                                  (inst + "1")
                                                                  (("1"
                                                                    (lemma
                                                                     "vs_at_complete")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -1
                                                                       "-1"
                                                                       "T"
                                                                       "sz!1"
                                                                       "vsp!3-viz!1")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "1"
                                                                         "T"
                                                                         "sz!1"
                                                                         "vsp!3-viz!1")
                                                                        (("1"
                                                                          (case
                                                                           "B = 0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "abs"
                                                                               -4)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split
                                                                                   -4)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "vs_at_complete")
                                                                            (("2"
                                                                              (inst-cp
                                                                               -1
                                                                               "-1"
                                                                               "B"
                                                                               "sz!1"
                                                                               "vsp!3-viz!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "1"
                                                                                 "B"
                                                                                 "sz!1"
                                                                                 "vsp!3-viz!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (copy
                                                                                     4)
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "-1")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs"
                                                                                           -5)
                                                                                          (("1"
                                                                                            (split
                                                                                             -5)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "cd_vertical")
                  (("2" (inst - "sz!1" "vsp!1-viz!1")
                    (("2" (assert)
                      (("2" (hide 3)
                        (("2" (expand "conflict_vertical?" +)
                          (("2" (case "vsp!1-viz!1 = 0")
                            (("1" (copy -1)
                              (("1" (mult-by -1 "B")
                                (("1" (mult-by -2 "T")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (name "newt" "-sz!1/(vsp!1-viz!1)")
                              (("2" (case "sz!1 + newt*(vsp!1-viz!1) = 0")
                                (("1" (inst + "newt")
                                  (("1" (assert) nil nil)
                                   ("2" (case "B <= newt AND newt <= T")
                                    (("1" (flatten) (("1" (assert) nil nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (replace -2 + :dir rl)
                                        (("2"
                                          (split +)
                                          (("1"
                                            (case "vsp!1 > viz!1")
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (expand "sign" +)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (typepred "T")
                                                      (("1"
                                                        (mult-by
                                                         -3
                                                         "vsp!1-viz!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cross-mult 2)
                                              (("2"
                                                (expand "sign" +)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (typepred "T")
                                                      (("2"
                                                        (mult-by
                                                         -3
                                                         "viz!1-vsp!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "vsp!1 > viz!1")
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (expand "sign" +)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (typepred "T")
                                                      (("1"
                                                        (mult-by
                                                         -3
                                                         "vsp!1-viz!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cross-mult 2)
                                              (("2"
                                                (expand "sign" +)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (typepred "T")
                                                      (("2"
                                                        (mult-by
                                                         -3
                                                         "viz!1-vsp!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replace -1 :dir rl)
                                  (("2" (name "const1" "vsp!1-viz!1")
                                    (("2" (replace -1)
                                      (("2"
                                        (both-sides "-" "sz!1" 1)
                                        (("1"
                                          (assert)
                                          (("1" (cross-mult 1) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "cd_vertical")
            (("2" (inst - "sz!1" "vsp!1-viz!1")
              (("2" (assert)
                (("2" (expand "vs_green?") (("2" (inst - "vsp!1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (vs_green_band-1 nil 3477244772
   ("" (skosimp*)
    (("" (expand "vs_band?")
      (("" (split)
        (("1" (flatten)
          (("1" (expand "vs_green?")
            (("1" (skosimp*)
              (("1"
                (case "sign(sz!1 + B*(vsp!1-viz!1)) = sign(sz!1 + T*(vsp!1-viz!1))")
                (("1" (lemma "cd_vertical")
                  (("1" (inst-cp - "sz!1" "vsp!1-viz!1")
                    (("1" (inst - "sz!1" "vsp!2-viz!1")
                      (("1" (assert)
                        (("1" (copy 1)
                          (("1" (copy 1)
                            (("1" (expand "conflict_vertical?" 1)
                              (("1" (expand "conflict_vertical?" 2)
                                (("1" (inst + "B")
                                  (("1" (inst + "T")
                                    (("1" (expand "conflict_vertical?" -)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (lemma "band_critical_on_H")
                                          (("1"
                                            (inst
                                             -
                                             "band!1"
                                             "sz!1"
                                             "viz!1"
                                             "vsp!1"
                                             "vsp!2"
                                             "t!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "vsp!3")
                                                  (("1"
                                                    (expand "vs_critical?")
                                                    (("1"
                                                      (lemma
                                                       "vs_circle_at_complete")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (copy 1)
                                                              (("1"
                                                                (inst + "-1")
                                                                (("1"
                                                                  (inst + "1")
                                                                  (("1"
                                                                    (lemma
                                                                     "vs_at_complete")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -1
                                                                       "-1"
                                                                       "T"
                                                                       "sz!1"
                                                                       "vsp!3-viz!1")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "1"
                                                                         "T"
                                                                         "sz!1"
                                                                         "vsp!3-viz!1")
                                                                        (("1"
                                                                          (case
                                                                           "B = 0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "abs"
                                                                               -4)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split
                                                                                   -4)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "vs_at_complete")
                                                                            (("2"
                                                                              (inst-cp
                                                                               -1
                                                                               "-1"
                                                                               "B"
                                                                               "sz!1"
                                                                               "vsp!3-viz!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "1"
                                                                                 "B"
                                                                                 "sz!1"
                                                                                 "vsp!3-viz!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (copy
                                                                                     4)
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "-1")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs"
                                                                                           -5)
                                                                                          (("1"
                                                                                            (split
                                                                                             -5)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "cd_vertical")
                  (("2" (inst - "sz!1" "vsp!1-viz!1")
                    (("2" (assert)
                      (("2" (hide 3)
                        (("2" (expand "conflict_vertical?" +)
                          (("2" (case "vsp!1-viz!1 = 0")
                            (("1" (copy -1)
                              (("1" (mult-by -1 "B")
                                (("1" (mult-by -2 "T")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (name "newt" "-sz!1/(vsp!1-viz!1)")
                              (("2" (case "sz!1 + newt*(vsp!1-viz!1) = 0")
                                (("1" (inst + "newt")
                                  (("1" (assert) nil nil)
                                   ("2" (case "B <= newt AND newt <= T")
                                    (("1" (flatten) (("1" (assert) nil nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (replace -2 + :dir rl)
                                        (("2"
                                          (split +)
                                          (("1"
                                            (case "vsp!1 > viz!1")
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (expand "sign" +)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (typepred "T")
                                                        (("1"
                                                          (mult-by
                                                           -3
                                                           "vsp!1-viz!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cross-mult 2)
                                              (("2"
                                                (expand "sign" +)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (typepred "T")
                                                        (("2"
                                                          (mult-by
                                                           -3
                                                           "viz!1-vsp!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "vsp!1 > viz!1")
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (expand "sign" +)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (typepred "T")
                                                        (("1"
                                                          (mult-by
                                                           -3
                                                           "vsp!1-viz!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cross-mult 2)
                                              (("2"
                                                (expand "sign" +)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (typepred "T")
                                                        (("2"
                                                          (mult-by
                                                           -3
                                                           "viz!1-vsp!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replace -1 :dir rl)
                                  (("2" (name "const1" "vsp!1-viz!1")
                                    (("2" (replace -1)
                                      (("2"
                                        (both-sides "-" "sz!1" 1)
                                        (("1"
                                          (assert)
                                          (("1" (cross-mult 1) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "cd_vertical")
            (("2" (inst - "sz!1" "vsp!1-viz!1")
              (("2" (assert)
                (("2" (expand "vs_green?") (("2" (inst - "vsp!1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vs_band? const-decl "bool" vs_bands nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (newt skolem-const-decl "real" vs_bands nil)
    (abs_nat formula-decl nil abs_lems reals)
    (div_mult_neg_le2 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (viz!1 skolem-const-decl "real" vs_bands nil)
    (vsp!1 skolem-const-decl "(band!1)" vs_bands nil)
    (band!1 skolem-const-decl "Connected" vs_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (cd_vertical formula-decl nil cd_vertical nil)
    (H formal-const-decl "posreal" vs_bands nil)
    (conflict_vertical? const-decl "bool" cd_vertical nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Lookahead type-eq-decl nil Lookahead nil)
    (band_critical_on_H formula-decl nil vs_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vs_circle_at_complete formula-decl nil vertical nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (vs_at_complete formula-decl nil vertical nil)
    (vs_critical? const-decl "bool" vs_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals) (sign const-decl "Sign" sign reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" vs_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Connected type-eq-decl nil connected_set reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (T formal-const-decl "{AB: posreal | AB > B}" vs_bands nil)
    (vs_green? const-decl "bool" vs_bands nil))
   nil))
 (vs_red_band 0
  (vs_red_band-2 "" 3790108654
   ("" (skosimp*)
    (("" (expand "vs_band?")
      (("" (split)
        (("1" (flatten)
          (("1" (expand "vs_red?")
            (("1" (skosimp*)
              (("1"
                (case "sign(sz!1 + B*(vsp!2-viz!1)) = sign(sz!1 + T*(vsp!2-viz!1))")
                (("1" (lemma "cd_vertical")
                  (("1" (inst-cp - "sz!1" "vsp!1-viz!1")
                    (("1" (inst - "sz!1" "vsp!2-viz!1")
                      (("1" (assert)
                        (("1" (hide 1)
                          (("1" (hide -3)
                            (("1" (copy 1)
                              (("1" (copy 1)
                                (("1" (expand "conflict_vertical?" 1)
                                  (("1" (expand "conflict_vertical?" 2)
                                    (("1" (inst + "B")
                                      (("1"
                                        (inst + "T")
                                        (("1"
                                          (expand "conflict_vertical?" -)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (lemma "band_critical_on_H")
                                              (("1"
                                                (inst
                                                 -
                                                 "band!1"
                                                 "sz!1"
                                                 "viz!1"
                                                 "vsp!2"
                                                 "vsp!1"
                                                 "t!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "vsp!3")
                                                      (("1"
                                                        (expand
                                                         "vs_critical?")
                                                        (("1"
                                                          (lemma
                                                           "vs_circle_at_complete")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (copy 1)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "-1")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "1")
                                                                      (("1"
                                                                        (lemma
                                                                         "vs_at_complete")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -1
                                                                           "-1"
                                                                           "T"
                                                                           "sz!1"
                                                                           "vsp!3-viz!1")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "1"
                                                                             "T"
                                                                             "sz!1"
                                                                             "vsp!3-viz!1")
                                                                            (("1"
                                                                              (case
                                                                               "B = 0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs"
                                                                                   -4)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (split
                                                                                         -4)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "vs_at_complete")
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "-1"
                                                                                   "B"
                                                                                   "sz!1"
                                                                                   "vsp!3-viz!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "1"
                                                                                     "B"
                                                                                     "sz!1"
                                                                                     "vsp!3-viz!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (copy
                                                                                         4)
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "-1")
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs"
                                                                                               -5)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "cd_vertical")
                  (("2" (inst - "sz!1" "vsp!2-viz!1")
                    (("2" (assert)
                      (("2" (hide 3)
                        (("2" (case "vsp!2-viz!1 = 0")
                          (("1" (copy -1)
                            (("1" (mult-by -1 "B")
                              (("1" (mult-by -2 "T") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (name "newt" "-sz!1/(vsp!2-viz!1)")
                            (("2" (case "sz!1 + newt*(vsp!2-viz!1) = 0")
                              (("1" (lemma "cd_vertical")
                                (("1" (inst - "sz!1" "vsp!2-viz!1")
                                  (("1" (replace -1 :dir rl)
                                    (("1" (hide -1)
                                      (("1"
                                        (expand "conflict_vertical?")
                                        (("1"
                                          (inst + "newt")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (case "B <= newt AND newt <= T")
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (replace -2 + :dir rl)
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (case "vsp!2 > viz!1")
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (expand "sign" +)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (typepred "T")
                                                              (("1"
                                                                (mult-by
                                                                 -3
                                                                 "vsp!2-viz!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 2)
                                                      (("2"
                                                        (expand "sign" +)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (typepred "T")
                                                              (("2"
                                                                (mult-by
                                                                 -3
                                                                 "viz!1-vsp!2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "vsp!2 > viz!1")
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (expand "sign" +)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (typepred "T")
                                                              (("1"
                                                                (mult-by
                                                                 -3
                                                                 "vsp!2-viz!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 2)
                                                      (("2"
                                                        (expand "sign" +)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (typepred "T")
                                                              (("2"
                                                                (mult-by
                                                                 -3
                                                                 "viz!1-vsp!2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (replace -1 :dir rl)
                                (("2" (name "const1" "vsp!2-viz!1")
                                  (("2" (replace -1)
                                    (("2" (both-sides "-" "sz!1" 1)
                                      (("1"
                                        (assert)
                                        (("1" (cross-mult 1) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "cd_vertical")
            (("2" (inst - "sz!1" "vsp!1-viz!1")
              (("2" (assert)
                (("2" (expand "vs_red?") (("2" (inst - "vsp!1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (vs_red_band-1 nil 3477244803
   ("" (skosimp*)
    (("" (expand "vs_band?")
      (("" (split)
        (("1" (flatten)
          (("1" (expand "vs_red?")
            (("1" (skosimp*)
              (("1"
                (case "sign(sz!1 + B*(vsp!2-viz!1)) = sign(sz!1 + T*(vsp!2-viz!1))")
                (("1" (lemma "cd_vertical")
                  (("1" (inst-cp - "sz!1" "vsp!1-viz!1")
                    (("1" (inst - "sz!1" "vsp!2-viz!1")
                      (("1" (assert)
                        (("1" (hide 1)
                          (("1" (hide -3)
                            (("1" (copy 1)
                              (("1" (copy 1)
                                (("1" (expand "conflict_vertical?" 1)
                                  (("1" (expand "conflict_vertical?" 2)
                                    (("1" (inst + "B")
                                      (("1"
                                        (inst + "T")
                                        (("1"
                                          (expand "conflict_vertical?" -)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (lemma "band_critical_on_H")
                                              (("1"
                                                (inst
                                                 -
                                                 "band!1"
                                                 "sz!1"
                                                 "viz!1"
                                                 "vsp!2"
                                                 "vsp!1"
                                                 "t!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "vsp!3")
                                                      (("1"
                                                        (expand
                                                         "vs_critical?")
                                                        (("1"
                                                          (lemma
                                                           "vs_circle_at_complete")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (copy 1)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "-1")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "1")
                                                                      (("1"
                                                                        (lemma
                                                                         "vs_at_complete")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -1
                                                                           "-1"
                                                                           "T"
                                                                           "sz!1"
                                                                           "vsp!3-viz!1")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "1"
                                                                             "T"
                                                                             "sz!1"
                                                                             "vsp!3-viz!1")
                                                                            (("1"
                                                                              (case
                                                                               "B = 0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs"
                                                                                   -4)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (split
                                                                                         -4)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "vs_at_complete")
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "-1"
                                                                                   "B"
                                                                                   "sz!1"
                                                                                   "vsp!3-viz!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "1"
                                                                                     "B"
                                                                                     "sz!1"
                                                                                     "vsp!3-viz!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (copy
                                                                                         4)
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "-1")
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs"
                                                                                               -5)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "cd_vertical")
                  (("2" (inst - "sz!1" "vsp!2-viz!1")
                    (("2" (assert)
                      (("2" (hide 3)
                        (("2" (case "vsp!2-viz!1 = 0")
                          (("1" (copy -1)
                            (("1" (mult-by -1 "B")
                              (("1" (mult-by -2 "T") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (name "newt" "-sz!1/(vsp!2-viz!1)")
                            (("2" (case "sz!1 + newt*(vsp!2-viz!1) = 0")
                              (("1" (lemma "cd_vertical")
                                (("1" (inst - "sz!1" "vsp!2-viz!1")
                                  (("1" (replace -1 :dir rl)
                                    (("1" (hide -1)
                                      (("1"
                                        (expand "conflict_vertical?")
                                        (("1"
                                          (inst + "newt")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (case "B <= newt AND newt <= T")
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (replace -2 + :dir rl)
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (case "vsp!2 > viz!1")
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (expand "sign" +)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (typepred "T")
                                                                (("1"
                                                                  (mult-by
                                                                   -3
                                                                   "vsp!2-viz!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 2)
                                                      (("2"
                                                        (expand "sign" +)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (typepred "T")
                                                                (("2"
                                                                  (mult-by
                                                                   -3
                                                                   "viz!1-vsp!2")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "vsp!2 > viz!1")
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (expand "sign" +)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (typepred "T")
                                                                (("1"
                                                                  (mult-by
                                                                   -3
                                                                   "vsp!2-viz!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 2)
                                                      (("2"
                                                        (expand "sign" +)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (typepred "T")
                                                                (("2"
                                                                  (mult-by
                                                                   -3
                                                                   "viz!1-vsp!2")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (replace -1 :dir rl)
                                (("2" (name "const1" "vsp!2-viz!1")
                                  (("2" (replace -1)
                                    (("2" (both-sides "-" "sz!1" 1)
                                      (("1"
                                        (assert)
                                        (("1" (cross-mult 1) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "cd_vertical")
            (("2" (inst - "sz!1" "vsp!1-viz!1")
              (("2" (assert)
                (("2" (expand "vs_red?") (("2" (inst - "vsp!1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vs_band? const-decl "bool" vs_bands nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (newt skolem-const-decl "real" vs_bands nil)
    (abs_nat formula-decl nil abs_lems reals)
    (div_mult_neg_le2 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (viz!1 skolem-const-decl "real" vs_bands nil)
    (vsp!2 skolem-const-decl "(band!1)" vs_bands nil)
    (band!1 skolem-const-decl "Connected" vs_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cd_vertical formula-decl nil cd_vertical nil)
    (H formal-const-decl "posreal" vs_bands nil)
    (conflict_vertical? const-decl "bool" cd_vertical nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Lookahead type-eq-decl nil Lookahead nil)
    (band_critical_on_H formula-decl nil vs_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vs_circle_at_complete formula-decl nil vertical nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (vs_at_complete formula-decl nil vertical nil)
    (vs_critical? const-decl "bool" vs_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals) (sign const-decl "Sign" sign reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" vs_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Connected type-eq-decl nil connected_set reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (T formal-const-decl "{AB: posreal | AB > B}" vs_bands nil)
    (vs_red? const-decl "bool" vs_bands nil))
   nil)))


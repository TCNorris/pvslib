(repulsive_vertical_it
 (man_pos_seq_v3_TCC1 0
  (man_pos_seq_v3_TCC1-1 nil 3631278954 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (man_pos_seq_v3 subtype
    "(number_fields.-)(repulsive_vertical_it.i, 1)" "posnat")))
 (man_pos_seq_v3_TCC2 0
  (man_pos_seq_v3_TCC2-1 nil 3574766784 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (man_pos_seq_v3 subtype
    "(number_fields.-)(repulsive_vertical_it.i, 1)" "posnat")))
 (man_pos_seq_v3_TCC3 0
  (man_pos_seq_v3_TCC3-1 nil 3574766784 ("" (termination-tcc) nil nil)
   nil nil
   (man_pos_seq_v3 termination
    "repulsive_vertical_it.man_pos_seq_v3(repulsive_vertical_it.so, repulsive_vertical_it.timestep, repulsive_vertical_it.velseqo)((number_fields.-)(repulsive_vertical_it.i, 1))"
    "nil")))
 (man_pos_seq_v3_test 0
  (man_pos_seq_v3_test-1 nil 3574766788 ("" (grind) nil nil)
   ((man_pos_seq_v3 def-decl "Vect3" repulsive_vertical_it nil)
    (* const-decl "Vector" vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (manuever_position_at_def 0
  (manuever_position_at_def-1 nil 3575022941
   ("" (induct "m")
    (("1" (assert)
      (("1" (skeep)
        (("1" (expand "maneuver_position_v3_at")
          (("1" (name "iz" "floor(0)")
            (("1" (case "NOT iz = 0")
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (replaces -2)
                (("2" (replace -1)
                  (("2" (grind) (("2" (decompose-equality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst?)
          (("2" (expand "man_pos_seq_v3" +)
            (("2" (assert)
              (("2" (replace -1 :dir rl)
                (("2" (hide -1)
                  (("2" (assert)
                    (("2" (expand "maneuver_position_v3_at")
                      (("2"
                        (case "floor((j * timestep + timestep) / timestep) = floor(j * timestep / timestep)+1")
                        (("1" (replaces -1)
                          (("1" (assert)
                            (("1" (expand "man_pos_seq_v3" + 1)
                              (("1"
                                (grind
                                 :exclude
                                 ("man_pos_seq_v3" "floor"))
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (* const-decl "Vector" vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (TRUE const-decl "bool" booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (man_pos_seq_v3 def-decl "Vect3" repulsive_vertical_it nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (maneuver_position_v3_at const-decl "Vect3" repulsive_vertical_it
     nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (VelSeq type-eq-decl nil repulsive_vertical_it nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (vertical_repulsive_crit_iterative_TCC1 0
  (vertical_repulsive_crit_iterative_TCC1-1 nil 3575207629
   ("" (subtype-tcc) nil nil)
   ((vertical_repulsive_crit const-decl "bool" repulsive_vertical_it
     nil))
   nil
   (vertical_repulsive_crit_iterative subtype
    "(number_fields.+)(repulsive_vertical_it.m, 1)" "posnat")))
 (vertical_repulsive_crit_iterative_TCC2 0
  (vertical_repulsive_crit_iterative_TCC2-1 nil 3575207629
   ("" (subtype-tcc) nil nil)
   ((vertical_repulsive_crit const-decl "bool" repulsive_vertical_it
     nil))
   nil
   (vertical_repulsive_crit_iterative subtype "repulsive_vertical_it.m"
    "posnat")))
 (vertical_repulsive_crit_iterative_reduces_seq 0
  (vertical_repulsive_crit_iterative_reduces_seq-2 "" 3756494267
   ("" (skeep)
    (("" (induct "m")
      (("1" (expand " vertical_repulsive_crit_iterative")
        (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (flatten)
          (("2"
            (expand " vertical_repulsive_crit_iterative" :assert? none)
            (("2" (flatten)
              (("2" (assert)
                (("2" (expand "man_pos_seq_v3")
                  (("2" (expand "man_pos_seq_v3")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (assert)
          (("3" (assert)
            (("3" (expand " vertical_repulsive_crit_iterative")
              (("3" (flatten)
                (("3" (inst - "k")
                  (("3" (assert)
                    (("3" (split +)
                      (("1" (assert)
                        (("1" (hide -5)
                          (("1" (expand "man_pos_seq_v3")
                            (("1" (assert)
                              (("1"
                                (name
                                 "mps"
                                 "man_pos_seq_v3(s, timestep, velseq)(k)")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand " vertical_repulsive_crit")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2"
                            (name "mps"
                                  "man_pos_seq_v3(s, timestep, velseq)(1+k)")
                            (("2" (replace -1)
                              (("2"
                                (expand "man_pos_seq_v3" +)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (hide -6)
                                    (("2"
                                      (hide (-1 -2))
                                      (("2"
                                        (expand
                                         " vertical_repulsive_crit")
                                        (("2"
                                          (grind)
                                          (("2"
                                            (name "vz" "velseq(1+k)`z")
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (hide (-3 -4))
                                                (("2"
                                                  (name
                                                   "vzz"
                                                   "velseq(k)`z")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (name
                                                       "A"
                                                       "mps`z  * eps -
       s`z  * eps
       + vz  * eps * timestep")
                                                      (("2"
                                                        (mult-by
                                                         -1
                                                         "(1 / (k * timestep + timestep))")
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (cross-mult
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "A")
                                                              (("2"
                                                                (name
                                                                 "B"
                                                                 "mps`z  * eps - s`z  * eps")
                                                                (("2"
                                                                  (mult-by
                                                                   -1
                                                                   "1/(k*timestep)")
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (cross-mult
                                                                       -2)
                                                                      (("2"
                                                                        (expand
                                                                         "B")
                                                                        (("2"
                                                                          (typepred
                                                                           "eps")
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (typepred
                                                                               "timestep")
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "mpss"
                                                                                         "mps`z - s`z")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "vkt"
                                                                                           "v`z * k * timestep")
                                                                                          (("1"
                                                                                            (expand
                                                                                             ">=")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "v`z <= vz")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "v`z * timestep <= timestep * vz")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "both_sides_times_pos_le1")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "timestep"
                                                                                                           "v`z"
                                                                                                           "vz")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "mps`z - s`z <= v`z * k * timestep")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -4)
                                                                                          (("1"
                                                                                            (case
                                                                                             "mps`z - s`z + timestep * vz <=
       (v`z * timestep) + v`z * k * timestep")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "v`z >= vz")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "mpss"
                                                                                                   "mps`z - s`z")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "vkt"
                                                                                                     "v`z * k * timestep")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "timestep * vz <= v`z * timestep")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "both_sides_times_pos_le1")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "timestep"
                                                                                                               "vz"
                                                                                                               "v`z")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (vertical_repulsive_crit_iterative_reduces_seq-1 nil 3576335586
   ("" (skeep)
    (("" (induct "m")
      (("1" (expand " vertical_repulsive_crit_iterative")
        (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (flatten)
          (("2"
            (expand " vertical_repulsive_crit_iterative" :assert? none)
            (("2" (flatten)
              (("2" (assert)
                (("2" (expand "man_pos_seq_v3")
                  (("2" (expand "man_pos_seq_v3")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (assert)
          (("3" (assert)
            (("3" (expand " vertical_repulsive_crit_iterative")
              (("3" (flatten)
                (("3" (inst - "k")
                  (("3" (assert)
                    (("3" (split +)
                      (("1" (assert)
                        (("1" (hide -5)
                          (("1" (expand "man_pos_seq_v3")
                            (("1" (assert)
                              (("1"
                                (name
                                 "mps"
                                 "man_pos_seq_v3(s, timestep, velseq)(k)")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand " vertical_repulsive_crit")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2"
                            (name "mps"
                                  "man_pos_seq_v3(s, timestep, velseq)(1+k)")
                            (("2" (replace -1)
                              (("2"
                                (expand "man_pos_seq_v3" +)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (hide -6)
                                    (("2"
                                      (hide (-1 -2))
                                      (("2"
                                        (expand
                                         " vertical_repulsive_crit")
                                        (("2"
                                          (grind)
                                          (("2"
                                            (name "vz" "velseq(1+k)`z")
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (hide (-3 -4))
                                                (("2"
                                                  (name
                                                   "vzz"
                                                   "velseq(k)`z")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (name
                                                       "A"
                                                       "mps`z  * eps -
       s`z  * eps
       + vz  * eps * timestep")
                                                      (("2"
                                                        (mult-by
                                                         -1
                                                         "(1 / (k * timestep + timestep))")
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (cross-mult
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "A")
                                                              (("2"
                                                                (name
                                                                 "B"
                                                                 "mps`z  * eps - s`z  * eps")
                                                                (("2"
                                                                  (mult-by
                                                                   -1
                                                                   "1/(k*timestep)")
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (cross-mult
                                                                       -2)
                                                                      (("2"
                                                                        (expand
                                                                         "B")
                                                                        (("2"
                                                                          (typepred
                                                                           "eps")
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (typepred
                                                                               "timestep")
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (metit
                                                                                         *)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (metit
                                                                                       *)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((both_sides_times1_imp formula-decl nil extra_real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (B skolem-const-decl "real" repulsive_vertical_it nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (A skolem-const-decl "real" repulsive_vertical_it nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (vs_only? const-decl "bool" repulsive_vertical_it nil)
    (vs_only? const-decl "bool" definitions_3D nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scal_assoc formula-decl nil vectors_3D "vectors/")
    (scal_1 formula-decl nil vectors_3D "vectors/")
    (add_cancel formula-decl nil vectors_3D "vectors/")
    (vertical_repulsive_crit_iterative const-decl "bool"
     repulsive_vertical_it nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (man_pos_seq_v3 def-decl "Vect3" repulsive_vertical_it nil)
    (- const-decl "Vector" vectors_3D "vectors/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "Vector" vectors_3D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (VelSeq type-eq-decl nil repulsive_vertical_it nil)
    (vertical_repulsive_crit const-decl "bool" repulsive_vertical_it
     nil)
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (pred type-eq-decl nil defined_types nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (vertical_repulsive_crit_iterative_coordinated 0
  (vertical_repulsive_crit_iterative_coordinated-1 nil 3575277143
   ("" (skeep)
    (("" (lemma "vertical_repulsive_crit_iterative_reduces_seq")
      ((""
        (inst - "Nsteps" "eps" "so-si" "timestep" "vo-vi"
         "relative_velseq_vel(velseqo, vi)")
        (("" (assert)
          (("" (split -)
            (("1"
              (lemma "vertical_repulsive_crit_iterative_reduces_seq")
              (("1"
                (inst - "Nsteps" "-eps" "si-so" "timestep" "vi-vo"
                 "relative_velseq_vel(velseqi, vo)")
                (("1" (assert)
                  (("1" (split -)
                    (("1" (skeep)
                      (("1" (inst - "m")
                        (("1" (inst - "m")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (split +)
                                (("1"
                                  (hide-all-but (-1 -3 1))
                                  (("1"
                                    (expand "relative_velseq_vel")
                                    (("1"
                                      (typepred "eps")
                                      (("1"
                                        (hide -1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide (-1 -2 -4 -6 -7 -8 -9))
                                      (("2"
                                        (expand
                                         "vertical_repulsive_crit")
                                        (("2"
                                          (case
                                           "NOT FORALL (z:nat): z<=m IMPLIES man_pos_seq_v3(si - so, timestep, relative_velseq_vel(velseqi, vo))
                     (1 + z) = man_pos_seq_v3(si, timestep, velseqi)
                     (1 + z) - (so+(z*timestep)*vo)")
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (induct "z")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "man_pos_seq_v3")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skolem 1 "z")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "man_pos_seq_v3"
                                                         +)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "relative_velseq_vel")
                                                              (("2"
                                                                (grind
                                                                 :exclude
                                                                 "man_pos_seq_v3")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst - "m")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (case
                                                   "NOT FORALL (z:nat): z<=m IMPLIES man_pos_seq_v3(so - si, timestep, relative_velseq_vel(velseqo, vi))
                     (1 + z)=man_pos_seq_v3(so , timestep, velseqo)
                     (1 + z) - (si+(z*timestep)*vi)")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (induct "z")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skolem 1 "z")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "man_pos_seq_v3"
                                                               +)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "relative_velseq_vel")
                                                                    (("2"
                                                                      (grind
                                                                       :exclude
                                                                       "man_pos_seq_v3")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst - "m")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (case
                                                           "NOT FORALL (z:nat): z<=m IMPLIES man_pos_seq_v3(so - si, timestep, relative_velseq(velseqo, velseqi))
                     (1 + z)=man_pos_seq_v3(so , timestep, velseqo)
                     (1 + z) - man_pos_seq_v3(si , timestep, velseqi)(1+z)")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (induct
                                                               "z")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skolem
                                                                 1
                                                                 "z")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "man_pos_seq_v3"
                                                                       +)
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "relative_velseq")
                                                                            (("2"
                                                                              (grind
                                                                               :exclude
                                                                               "man_pos_seq_v3")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -
                                                             "m")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (name
                                                                   "msi"
                                                                   "man_pos_seq_v3(si, timestep, velseqi)(1 + m)")
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (name
                                                                       "mso"
                                                                       "man_pos_seq_v3(so, timestep, velseqo)(1 + m)")
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "vs_only?")
                      (("2" (skeep)
                        (("2" (inst -3 "jp")
                          (("2" (hide-all-but (-3 1))
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertical_repulsive_crit_iterative_reduces_seq formula-decl nil
     repulsive_vertical_it nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sign_neg_clos application-judgement "Sign" sign "reals/")
    (vs_only? const-decl "bool" repulsive_vertical_it nil)
    (vs_only? const-decl "bool" definitions_3D nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (man_pos_seq_v3 def-decl "Vect3" repulsive_vertical_it nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "Vector" vectors_3D "vectors/")
    (* const-decl "Vector" vectors_3D "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (add_zero_right formula-decl nil vectors_3D "vectors/")
    (scal_0 formula-decl nil vectors_3D "vectors/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (vertical_repulsive_crit const-decl "bool" repulsive_vertical_it
     nil)
    (relative_velseq const-decl "Vect3" repulsive_vertical_it nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (relative_velseq_vel const-decl "Vect3" repulsive_vertical_it nil)
    (VelSeq type-eq-decl nil repulsive_vertical_it nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "Vector" vectors_3D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))


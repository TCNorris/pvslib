(vs_circle
 (vs_circle_TCC1 0
  (vs_circle_TCC1-2 nil 3451136094
   ("" (skeep) (("" (expand "vs_only?") (("" (assert) nil nil)) nil)) nil)
   ((vs_only? const-decl "bool" definitions_3D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzv2 application-judgement "Nz_vect2" definitions_3D nil)
    (vect2_eq formula-decl nil vect_3D_2D vectors))
   nil
   (vs_circle subtype "vs_circle.vo WITH [z := vs_circle.vi`z]"
    "{nvo | booleans.IMPLIES(vect_3D_2D.vect2(vs_circle.nvo) /= vectors_2D.zero, definitions_3D.vs_only?(vs_circle.vo)(vs_circle.nvo))}"))
  (vs_circle_TCC1-1 nil 3451065822
   ("" (skosimp :preds? t)
    (("" (assert)
      (("" (lemma "horizontal_conflict")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (horizontal_conflict formula-decl nil horizontal nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (horizontal_conflict? const-decl "bool" horizontal nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Sign type-eq-decl nil sign reals))
   nil
   (vs_circle subtype "vs_circle.vo WITH [z := vs_circle.vi`z]"
    "{nvo | booleans.IMPLIES(vect_3D_2D.vect2(vs_circle.nvo) /= vectors_2D.zero, definitions_3D.vs_only?(vs_circle.vo)(vs_circle.nvo))}")))
 (vs_circle_TCC2 0
  (vs_circle_TCC2-2 nil 3451136002
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (lemma "Delta_gt_0_nzv")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (D formal-const-decl "posreal" vs_circle nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Delta_gt_0_nzv formula-decl nil horizontal nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors))
   nil
   (vs_circle subtype "vect_3D_2D.vect2(vs_circle.v)"
    "{nzv | reals.>=(horizontal[vs_circle.D].Delta(vect_3D_2D.vect2(vs_circle.s), horizontal.nzv), 0)}"))
  (vs_circle_TCC2-1 nil 3451065822
   ("" (skosimp :preds? t) (("" (assert) nil nil)) nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (horizontal_conflict? const-decl "bool" horizontal nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Sign type-eq-decl nil sign reals))
   nil
   (vs_circle subtype "vect_3D_2D.vect2(vs_circle.v)"
    "{nzv | reals.>=(horizontal[vs_circle.D].Delta(vect_3D_2D.vect2(vs_circle.s), horizontal.nzv), 0)}")))
 (vs_circle_TCC3 0
  (vs_circle_TCC3-2 nil 3466271730
   ("" (skeep)
    (("" (skeep 2) (("" (expand "vs_only?") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((vect2_eq formula-decl nil vect_3D_2D vectors)
    (nzv2 application-judgement "Nz_vect2" definitions_3D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vs_only? const-decl "bool" definitions_3D nil))
   nil
   (vs_circle subtype
    "vs_circle.vo WITH [z := (number_fields.+)(vs_circle.vi`z, vs_circle.vz)]"
    "{nvo | booleans.IMPLIES(vect_3D_2D.vect2(vs_circle.nvo) /= vectors_2D.zero, definitions_3D.vs_only?(vs_circle.vo)(vs_circle.nvo))}"))
  (vs_circle_TCC3-1 nil 3466260271
   ("" (skeep)
    (("" (lemma "Theta_D_exit_gt_0")
      (("" (inst?) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((Theta_D_exit_gt_0 formula-decl nil horizontal nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors))
   nil
   (vs_circle subtype
    "vs_circle.vo WITH [z := (number_fields.+)(vs_circle.vi`z, vs_circle.vz)]"
    "{nvo | booleans.IMPLIES(vect_3D_2D.vect2(vs_circle.nvo) /= vectors_2D.zero, definitions_3D.vs_only?(vs_circle.vo)(vs_circle.nvo))}")))
 (vs_circle_TCC4 0
  (vs_circle_TCC4-1 nil 3466260271 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vect2_zero formula-decl nil vect_3D_2D vectors))
   nil
   (vs_circle subtype "vectors_3D.zero"
    "{nvo | booleans.IMPLIES(vect_3D_2D.vect2(vs_circle.nvo) /= vectors_2D.zero, definitions_3D.vs_only?(vs_circle.vo)(vs_circle.nvo))}")))
 (vs_circle_TCC5 0
  (vs_circle_TCC5-1 nil 3466260271 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vect2_zero formula-decl nil vect_3D_2D vectors))
   nil
   (vs_circle subtype "vectors_3D.zero"
    "{nvo | booleans.IMPLIES(vect_3D_2D.vect2(vs_circle.nvo) /= vectors_2D.zero, definitions_3D.vs_only?(vs_circle.vo)(vs_circle.nvo))}")))
 (vs_circle_meets_vertical_criterion 0
  (vs_circle_meets_vertical_criterion-1 nil 3471192910
   ("" (skeep)
    (("" (expand "vs_circle?")
      (("" (flatten)
        (("" (expand "vs_circle")
          (("" (lift-if)
            (("" (split -)
              (("1" (flatten)
                (("1" (expand "vertical_criterion?")
                  (("1" (flatten)
                    (("1" (hide 3)
                      (("1" (assert)
                        (("1" (rewrite "vect2_sub")
                          (("1" (rewrite "vz_distr_sub")
                            (("1" (replace -1)
                              (("1" (expand "horizontal_conflict?")
                                (("1" (skosimp*)
                                  (("1" (replace -3)
                                    (("1" (assert)
                                      (("1"
                                        (typepred "sp")
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "vertical_criterion?")
                  (("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (split -)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1" (lemma "Delta_gt_0_nzv")
                                (("1" (inst?)
                                  (("1" (assert)
                                    (("1" (hide 1)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (name-replace
                                             "vso"
                                             "vs_only(sp, vect2(vo - vi), Theta_D(vect2(sp), vect2(vo - vi), 1),
                                                                                                                                                                                                                eps)"
                                             :hide?
                                             nil)
                                            (("1"
                                              (label "vsoname" -1)
                                              (("1"
                                                (name
                                                 "ddir"
                                                 "IF abs(sp`z) >= H THEN eps * sign(sp`z)
                                                                                                                                                                  ELSE -1
                                                                                                                                                                  ENDIF")
                                                (("1"
                                                  (label "ddirname" -1)
                                                  (("1"
                                                    (case
                                                     "ddir = 1 or ddir = -1")
                                                    (("1"
                                                      (label "ddirtp" -1)
                                                      (("1"
                                                        (replace "ddirname")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (replaces -5)
                                                            (("1"
                                                              (expand
                                                               "closed_region_3D")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "vect2_sub")
                                                                  (("1"
                                                                    (rewrite
                                                                     "vect2_sub")
                                                                    (("1"
                                                                      (rewrite
                                                                       "vect2_add")
                                                                      (("1"
                                                                        (rewrite
                                                                         "vect2_scal")
                                                                        (("1"
                                                                          (rewrite
                                                                           "vz_distr_sub")
                                                                          (("1"
                                                                            (case
                                                                             "eps*(eps*H) = H")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (name
                                                                                 "thetad"
                                                                                 "Theta_D(vect2(sp), vect2(vo) - vect2(vi), ddir)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (label
                                                                                     "thetadname"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (name
                                                                                       "ppoint"
                                                                                       "vect2(sp) + thetad * vect2(vo - vi)")
                                                                                      (("1"
                                                                                        (label
                                                                                         "ppointname"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "sqv(ppoint) = sq(D)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT (vect2(vo) - vect2(vi)) * ppoint = 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "Theta_D_line_intersection")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "ddir"
                                                                                                       "sp"
                                                                                                       "vect2(vo)-vect2(vi)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           "thetadname")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "vect2_sub")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               "ppointname")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "Theta_D_positive_conflict")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "sp"
                                                                                                                       "vect2(vo)-vect2(vi)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (label
                                                                                                                           "td1pos"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "sign((vect2(vo) - vect2(vi)) * ppoint) = ddir")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "vs_only")
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     "vsoname")
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -3
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -3
                                                                                                                                             -13)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               "ddirtp")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       "ddirname")
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "vs_at_H")
                                                                                                                                                            (("1"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               (-2
                                                                                                                                                                -3
                                                                                                                                                                -4))
                                                                                                                                                              (("1"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (split
                                                                                                                                                     "ddirname")
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "Theta_D_entry_gt_0")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -
                                                                                                                                                             "vect2(vo)-vect2(vi)"
                                                                                                                                                             "sp")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "vs_at_H")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -
                                                                                                                                                                   "eps"
                                                                                                                                                                   "thetad"
                                                                                                                                                                   "sp`z")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (mult-by
                                                                                                                                                                     -1
                                                                                                                                                                     "eps")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "Theta_D_entry_gt_0")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -
                                                                                                                                                           "vect2(vo)-vect2(vi)"
                                                                                                                                                           "sp")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "vs_at_H")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -
                                                                                                                                                                 "eps"
                                                                                                                                                                 "thetad"
                                                                                                                                                                 "sp`z")
                                                                                                                                                                (("2"
                                                                                                                                                                  (mult-by
                                                                                                                                                                   -1
                                                                                                                                                                   "eps")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -2
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -2
                                                                                                                                                 -12
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (case-replace
                                                                                                                                                   "eps*sp`z = abs(sp`z)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (case
                                                                                                                                                       "ddir = 1")
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "vs_at_H")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("1"
                                                                                                                                                                  (mult-by
                                                                                                                                                                   -1
                                                                                                                                                                   "eps")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         (-1
                                                                                                                                                          "ddirtp"
                                                                                                                                                          "ddirname"
                                                                                                                                                          1))
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (-1
                                                                                                                                                      1))
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "eps")
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -1
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (lemma
                                                                                                                               "Theta_D_horizontal_dir")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "ddir"
                                                                                                                                 "sp"
                                                                                                                                 "vect2(vo)-vect2(vi)")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     "thetadname")
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       "ppointname")
                                                                                                                                      (("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (-1
                                                                                                                                          "ddirtp"
                                                                                                                                          1
                                                                                                                                          2))
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "on_D_line")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "ppoint"
                                                                                                       "vo-vi")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "vect2_sub")
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "vectors_2D.dot_comm")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "line_solution_Delta")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "ppoint"
                                                                                                                       "vect2(vo)-vect2(vi)")
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -2)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 "ppointname"
                                                                                                                                 -1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "Delta_eq")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "sp"
                                                                                                                                     "thetad"
                                                                                                                                     "vect2(vo)-vect2(vi)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (inst
                                                                                                                               +
                                                                                                                               "eps!1")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "Theta_D_on_D")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "vect2_sub")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   4)
                                                                                  (("2"
                                                                                    (split
                                                                                     "ddirtp")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (typepred
                                                                                 "eps")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           4)
                                                                          (("2"
                                                                            (split
                                                                             "ddirtp")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         4)
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       ("ddirname" 1))
                                                      (("2"
                                                        (typepred "eps")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replace -1) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vs_circle? const-decl "bool" vs_circle nil)
    (vs_circle const-decl
     "{nvo | vect2(nvo) /= zero IMPLIES vs_only?(vo)(nvo)}" vs_circle nil)
    (vertical_criterion? const-decl "SignedCrit" vertical_criterion nil)
    (vect2_sub formula-decl nil vect_3D_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nzv2_vect3 type-eq-decl nil definitions_3D nil)
    (nzv2 application-judgement "Nz_vect2" definitions_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (vect2_eq formula-decl nil vect_3D_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (sign const-decl "Sign" sign reals)
    (- const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (H formal-const-decl "posreal" vs_circle nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (D formal-const-decl "posreal" vs_circle nil)
    (Sp_vect3 type-eq-decl nil space_3D nil)
    (horizontal_conflict? const-decl "bool" horizontal nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (vz_distr_sub formula-decl nil vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_3D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (closed_region_3D const-decl "bool" vertical_criterion nil)
    (* const-decl "Vector" vectors_3D vectors)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (Theta_D_on_D formula-decl nil horizontal nil)
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (Delta_eq formula-decl nil horizontal nil)
    (line_solution_Delta formula-decl nil line_solutions nil)
    (dot_comm formula-decl nil vectors_2D vectors)
    (on_D_line formula-decl nil line_solutions nil)
    (Theta_D_horizontal_dir formula-decl nil horizontal nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (vs_at_H formula-decl nil vertical nil)
    (Theta_D_entry_gt_0 formula-decl nil horizontal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (vs_at const-decl "real" vertical nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (Ss_vect2 type-eq-decl nil horizontal nil)
    (Theta_D_positive_conflict formula-decl nil horizontal nil)
    (Theta_D_line_intersection formula-decl nil horizontal nil)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (TRUE const-decl "bool" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sign_mult_clos application-judgement "Sign" sign reals)
    (Theta_D const-decl "real" horizontal nil)
    (Delta const-decl "real" horizontal nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (vs_only const-decl "[bool, real]" vs_only nil)
    (Sign type-eq-decl nil sign reals)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Delta_gt_0_nzv formula-decl nil horizontal nil)
    (vect2_zero formula-decl nil vect_3D_2D vectors))
   nil))
 (vs_only_vs_criterion_ge_vz 0
  (vs_only_vs_criterion_ge_vz-1 nil 3471104915
   ("" (skeep)
    (("" (label "vso" -2)
      (("" (label "epsge" -3)
        (("" (expand "vertical_criterion?")
          ((""
            (name "ddir" "IF abs(s`z) >= H THEN eps * sign(s`z)
                                                      ELSE -1
                                                      ENDIF")
            (("" (replace -1)
              (("" (label "ddirname" -1)
                (("" (flatten)
                  (("" (split -2)
                    (("1" (hide 2)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (rewrite "vz_distr_sub")
                            (("1" (rewrite "vz_distr_sub")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 1)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "closed_region_3D")
                            (("2" (assert)
                              (("2" (flatten)
                                (("2" (assert)
                                  (("2" (expand "vs_only?")
                                    (("2" (rewrite "vect2_sub")
                                      (("2"
                                        (rewrite "vect2_sub")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (rewrite "vect2_add")
                                              (("1"
                                                (rewrite "vect2_scal")
                                                (("1"
                                                  (name
                                                   "ppoint"
                                                   "vect2(s) + Theta_D(vect2(s), vect2(v), ddir) * vect2(v)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (replace "vso" :dir rl)
                                                      (("1"
                                                        (name
                                                         "tt"
                                                         "(sq(D) - vect2(s) * ppoint) / ((vect2(nvo1) - vect2(vi)) * ppoint)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (case
                                                             "(nvo2 - vi)`z = (nvo2`z - nvo1`z) + (nvo1 - vi)`z")
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (copy "epsge")
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "tt")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "vz_distr_sub")
                                                              (("2"
                                                                (rewrite
                                                                 "vz_distr_sub")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertical_criterion? const-decl "SignedCrit" vertical_criterion nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vect2_eq formula-decl nil vect_3D_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (vect2_sub formula-decl nil vect_3D_2D vectors)
    (nzv2 application-judgement "Nz_vect2" definitions_3D nil)
    (Theta_D const-decl "real" horizontal nil)
    (Delta const-decl "real" horizontal nil)
    (D formal-const-decl "posreal" vs_circle nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (tt skolem-const-decl "real" vs_circle nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "Vector" vectors_3D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (vs_only? const-decl "bool" definitions_3D nil)
    (closed_region_3D const-decl "bool" vertical_criterion nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (vz_distr_sub formula-decl nil vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nzv2_vect3 type-eq-decl nil definitions_3D nil)
    (sign_mult_clos application-judgement "Sign" sign reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (H formal-const-decl "posreal" vs_circle nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Sign type-eq-decl nil sign reals) (sign const-decl "Sign" sign reals))
   nil))
 (vs_circle_independence 0
  (vs_circle_independence-1 nil 3451908601
   ("" (skeep)
    (("" (lemma "vs_circle_meets_vertical_criterion")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "vertical_criterion_independence")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((vs_circle_meets_vertical_criterion formula-decl nil vs_circle nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (vertical_criterion_independence formula-decl nil vertical_criterion nil)
    (Nzv2_vect3 type-eq-decl nil definitions_3D nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Sp_vect3 type-eq-decl nil space_3D nil)
    (D formal-const-decl "posreal" vs_circle nil)
    (sq const-decl "nonneg_real" sq reals)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (H formal-const-decl "posreal" vs_circle nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (vs_circle_coordination 0
  (vs_circle_coordination-2 nil 3470079373
   ("" (skeep)
    (("" (lemma "vs_circle_meets_vertical_criterion")
      (("" (inst-cp -1 "eps" "nvo" "sp" "vi" "vo")
        (("" (inst -1 "-eps" "nvi" "-sp" "vo" "vi")
          (("" (assert)
            (("" (rewrite "vect2_neg")
              (("" (lemma "horizontal_conflict_symm")
                (("" (inst? -1)
                  (("" (assert)
                    (("" (replaces -1 :dir rl)
                      (("" (case-replace "-vect2(vi-vo) = vect2(vo-vi)")
                        (("1" (hide -1)
                          (("1"
                            (case "horizontal_conflict?(vect2(sp), vect2(vo - vi))")
                            (("1" (assert)
                              (("1" (expand "vs_circle?")
                                (("1" (flatten)
                                  (("1"
                                    (typepred "vs_circle(sp, vo, vi, eps)")
                                    (("1" (assert)
                                      (("1"
                                        (typepred
                                         "vs_circle(-sp, vi, vo, -eps)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replaces (-7 -8) :dir rl)
                                            (("1"
                                              (lemma
                                               "vertical_criterion_coordination")
                                              (("1"
                                                (inst
                                                 -
                                                 "eps"
                                                 "nvi"
                                                 "nvo"
                                                 "sp"
                                                 "vi"
                                                 "vo")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "conflict?")
                              (("2" (expand "horizontal_conflict?")
                                (("2" (skosimp*)
                                  (("2" (inst + "nnt!1") nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vs_circle_meets_vertical_criterion formula-decl nil vs_circle nil)
    (neg_sp application-judgement "Sp_vect3[D, H]" vs_circle nil)
    (sign_neg_clos application-judgement "Sign" sign reals)
    (- const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (vect2_neg formula-decl nil vect_3D_2D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (conflict? const-decl "bool" space_3D nil)
    (vertical_criterion_coordination formula-decl nil vertical_criterion nil)
    (vs_circle const-decl
     "{nvo | vect2(nvo) /= zero IMPLIES vs_only?(vo)(nvo)}" vs_circle nil)
    (vs_only? const-decl "bool" definitions_3D nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vs_circle? const-decl "bool" vs_circle nil)
    (horizontal_conflict? const-decl "bool" horizontal nil)
    (neg_neg formula-decl nil vectors_2D vectors)
    (horizontal_conflict_symm formula-decl nil horizontal nil)
    (Nzv2_vect3 type-eq-decl nil definitions_3D nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Sp_vect3 type-eq-decl nil space_3D nil)
    (D formal-const-decl "posreal" vs_circle nil)
    (sq const-decl "nonneg_real" sq reals)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (H formal-const-decl "posreal" vs_circle nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (vs_circle_coordination-1 nil 3451923945
   ("" (skeep)
    (("" (lemma "vs_circle_satisfies_vertical_criterion")
      (("" (inst -1 "eps" "nvo" "sp" "vi" "vo")
        (("" (lemma "vertical_horizontal_conflict")
          (("" (inst?)
            (("" (assert)
              (("" (flatten)
                (("" (assert)
                  (("" (hide -5)
                    (("" (lemma "vs_circle_satisfies_vertical_criterion")
                      (("" (inst -1 "-eps" "nvi" "-sp" "vo" "vi")
                        (("" (assert)
                          (("" (rewrite "vect2_neg")
                            (("" (split -1)
                              (("1" (hide -6) (("1" (postpone) nil nil)) nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (Sp_vect3 type-eq-decl nil space_3D nil)
    (vect2_sub formula-decl nil vect_3D_2D vectors)
    (vect2_eq formula-decl nil vect_3D_2D vectors)
    (neg_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (sign_neg_clos application-judgement "Sign" sign reals)
    (vz_distr_sub formula-decl nil vectors_3D vectors)
    (Zv2_vect3 type-eq-decl nil definitions_3D nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (neg_zero formula-decl nil vectors_2D vectors)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (sqv_neg formula-decl nil vectors_2D vectors)
    (vect2_neg formula-decl nil vect_3D_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (Sign type-eq-decl nil sign reals)
    (Theta_D_symm formula-decl nil horizontal nil)
    (Theta_D const-decl "real" horizontal nil)
    (Delta const-decl "real" horizontal nil)
    (vect2_zero formula-decl nil vect_3D_2D vectors)
    (Nzv2_vect3 type-eq-decl nil definitions_3D nil)
    (Delta_gt_0_nzv formula-decl nil horizontal nil)
    (Delta_symm formula-decl nil horizontal nil)
    (break_symmetry_neg formula-decl nil definitions_3D nil))
   shostak)))


(cd3d_si
 (j_TCC1 0
  (j_TCC1-1 nil 3472912840 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (j subtype "(number_fields.-)(cd3d_si.N, 1)" "nat")))
 (FlightPlanRelevant_TCC1 0
  (FlightPlanRelevant_TCC1-1 nil 3473066751 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (FlightPlanRelevant subtype "0" "below[N]")))
 (FlightPlanRelevant_TCC2 0
  (FlightPlanRelevant_TCC2-1 nil 3473066751 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (FlightPlanRelevant subtype "(number_fields.-)(cd3d_si.N, 1)" "below[N]")))
 (FlightPlanRelevant_TCC3 0
  (FlightPlanRelevant_TCC3-2 "" 3790109035
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (FlightPlanRelevant subtype "(number_fields.-)(cd3d_si.i, 1)" "below[N]"))
  (FlightPlanRelevant_TCC3-1 nil 3473066751
   ("" (skeep)
    ((""
      (inst +
       "lambda (jj: below[N]): (# time:=(to+B) + (T-B)/2 + jj,position:=zero #)")
      (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (FlightPlanRelevant subtype "(number_fields.-)(cd3d_si.i, 1)" "below[N]")))
 (FlightPlanRelevant_TCC4 0
  (FlightPlanRelevant_TCC4-1 nil 3482764106
   ("" (skeep)
    (("" (assert)
      ((""
        (inst +
         "lambda (jj: below[N]): (# time:=(to+B) + (T-B)/2 + jj,position:=zero #)")
        (("" (assert)
          (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((to skolem-const-decl "real" cd3d_si nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (below type-eq-decl nil nat_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (FlightPlanRelevant existence ""
    "{flp: flightplan[cd3d_si.N].FlightPlan | booleans.AND(reals.<(flp(0)`time, (number_fields.+)(cd3d_si.to, cd3d_si.T)), reals.<((number_fields.+)(cd3d_si.to, cd3d_si.B), flp((number_fields.-)(cd3d_si.N, 1))`time))}")))
 (seg_lh_top_TCC1 0
  (seg_lh_top_TCC1-1 nil 3482764106 ("" (subtype-tcc) nil nil) nil nil
   (seg_lh_top subtype "(number_fields.+)(cd3d_si.j, 1)" "below[N]")))
 (seg_lh_top_TCC2 0
  (seg_lh_top_TCC2-1 nil 3482764106 ("" (subtype-tcc) nil nil) nil nil
   (seg_lh_top subtype "cd3d_si.j" "below[N]")))
 (seg_lh_bottom_TCC1 0
  (seg_lh_bottom_TCC1-1 nil 3477825885 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (seg_lh_bottom subtype
    "(number_fields.-)(real_defs.max(cd3d_si.flp(cd3d_si.j)`time, (number_fields.+)(cd3d_si.to, cd3d_si.B)), cd3d_si.flp(cd3d_si.j)`time)"
    "nnreal")))
 (seg_lh_top_positive 0
  (seg_lh_top_positive-1 nil 3477826332
   ("" (skeep)
    (("" (typepred "flpl") (("" (inst - "j+1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (nontrivial_lookahead_TCC1 0
  (nontrivial_lookahead_TCC1-1 nil 3473002468 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (seg_lh_top const-decl "real" cd3d_si nil)
    (seg_lh_bottom const-decl "nnreal" cd3d_si nil))
   nil
   (nontrivial_lookahead subtype "(number_fields.-)(cd3d_si.k, 1)"
    "below[N - 1]")))
 (nontrivial_lookahead 0
  (nontrivial_lookahead-1 nil 3473002469
   ("" (skeep)
    (("" (typepred "flpl")
      (("" (expand "seg_lh_top")
        (("" (expand "seg_lh_bottom")
          (("" (case "k = N-1")
            (("1" (replace -1)
              (("1" (hide 1)
                (("1" (assert)
                  (("1" (expand "min")
                    (("1" (expand "max")
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (inst - "N-1") (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "k = 0")
              (("1" (replace -1)
                (("1" (hide 3)
                  (("1" (assert)
                    (("1" (expand "max")
                      (("1" (expand "min")
                        (("1" (lift-if)
                          (("1" (ground)
                            (("1" (inst - "1") (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "max" 3)
                  (("2" (expand "min" 4)
                    (("2" (case "flpl(k)`time = to+T")
                      (("1" (inst - "k")
                        (("1" (expand "max")
                          (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
                        nil)
                       ("2" (inst - "k+1")
                        (("2" (expand "min")
                          (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seg_lh_bottom const-decl "nnreal" cd3d_si nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (seg_lh_top const-decl "real" cd3d_si nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conflict_3D_rew_TCC1 0
  (conflict_3D_rew_TCC1-1 nil 3473074224 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (seg_lh_bottom const-decl "nnreal" cd3d_si nil)
    (seg_lh_top const-decl "real" cd3d_si nil))
   nil
   (conflict_3D_rew subtype
    "cd3d_si.seg_lh_top(cd3d_si.flpl, cd3d_si.to)(cd3d_si.j)"
    "{AB: real_types.posreal | reals.>(AB, cd3d_si.seg_lh_bottom(cd3d_si.flpl, cd3d_si.to)(cd3d_si.j))}")))
 (conflict_3D_rew 0
  (conflict_3D_rew-5 nil 3475844668
   ("" (skeep)
    (("" (ground)
      (("1" (expand "conflict_3D?")
        (("1" (skosimp*)
          (("1" (typepred "tt!1")
            (("1" (expand "end_time")
              (("1" (expand "start_time")
                (("1" (case "EXISTS (kk: below[N]): tt!1 = flpl(kk)`time")
                  (("1" (skosimp*)
                    (("1" (lemma "nontrivial_lookahead")
                      (("1" (inst - "kk!1" "to" "flpl")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1" (inst + "kk!1")
                                (("1" (assert)
                                  (("1"
                                    (inst + "seg_lh_bottom(flpl, to)(kk!1)")
                                    (("1" (lemma "location_at_check")
                                      (("1"
                                        (inst - "flpl" "kk!1")
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (case
                                               "seg_lh_bottom(flpl,to)(kk!1) = 0")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite "vz_distr_sub")
                                                    (("1"
                                                      (rewrite "vz_distr_add")
                                                      (("1"
                                                        (rewrite "vz_scal")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "seg_lh_bottom")
                                                (("2"
                                                  (expand "max")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (inst + "kk!1-1")
                                (("1" (assert)
                                  (("1"
                                    (inst + "seg_lh_top(flpl, to)(kk!1 - 1)")
                                    (("1" (lemma "location_at_check")
                                      (("1"
                                        (inst - "flpl" "kk!1")
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (name
                                                 "cv1"
                                                 "(so + (flpl(kk!1 - 1)`time - to) * vo) -
                                                  flpl(kk!1 - 1)`position
                                            +
                                            seg_lh_top(flpl, to)(kk!1 - 1) *
                                             (vo - velocity(flpl)(kk!1 - 1))")
                                                (("1"
                                                  (name
                                                   "cv2"
                                                   "(so + (tt!1 - to) * vo) - flpl(kk!1)`position")
                                                  (("1"
                                                    (case "cv1 = cv2")
                                                    (("1"
                                                      (case
                                                       "vect2(cv1) = vect2(cv2) AND cv1`z = cv2`z")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace -4 :dir rl)
                                                          (("1"
                                                            (replace
                                                             -5
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "vect2_sub")
                                                              (("1"
                                                                (rewrite
                                                                 "vect2_add")
                                                                (("1"
                                                                  (rewrite
                                                                   "vect2_sub")
                                                                  (("1"
                                                                    (rewrite
                                                                     "vect2_scal")
                                                                    (("1"
                                                                      (rewrite
                                                                       "vect2_add")
                                                                      (("1"
                                                                        (rewrite
                                                                         "vect2_sub")
                                                                        (("1"
                                                                          (rewrite
                                                                           "vect2_scal")
                                                                          (("1"
                                                                            (rewrite
                                                                             "vect2_add")
                                                                            (("1"
                                                                              (rewrite
                                                                               "vect2_scal")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "vz_distr_sub")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "vz_distr_add")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "vz_distr_sub")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "vz_scal")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "vz_distr_add")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "vz_distr_sub")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "vz_scal")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "vz_distr_add")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "vz_scal")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1 :dir rl)
                                                      (("2"
                                                        (replace -2 :dir rl)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "velocity_def")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "flpl"
                                                               "kk!1-1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "seg_lh_top")
                                                                  (("2"
                                                                    (expand
                                                                     "min")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-1 1))
                                                                      (("2"
                                                                        (grind
                                                                         :exclude
                                                                         "velocity")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (name "jj" "segment(flpl)(tt!1)")
                    (("2" (label "jjname" -1)
                      (("2" (inst 2 "jj")
                        (("1" (lemma "segment_def")
                          (("1" (inst - "flpl" "tt!1")
                            (("1" (flatten)
                              (("1" (case "jj < N-1")
                                (("1" (assert)
                                  (("1" (case "flpl(jj)`time < tt!1")
                                    (("1"
                                      (case
                                       "seg_lh_bottom(flpl,to)(jj) < seg_lh_top(flpl,to)(jj)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (name "newt" "tt!1-flpl(jj)`time")
                                          (("1"
                                            (inst 2 "newt")
                                            (("1"
                                              (name
                                               "cv1"
                                               "(so + (flpl(jj)`time - to) * vo) - flpl(jj)`position +
                                                      newt * (vo - velocity(flpl)(jj))")
                                              (("1"
                                                (name
                                                 "cv2"
                                                 "(so + (tt!1 - to) * vo) - location_at(flpl)(tt!1)")
                                                (("1"
                                                  (case "cv1 = cv2")
                                                  (("1"
                                                    (case
                                                     "vect2(cv1) = vect2(cv2) AND cv1`z = cv2`z")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -4 :dir rl)
                                                        (("1"
                                                          (replace -5 :dir rl)
                                                          (("1"
                                                            (rewrite
                                                             "vect2_sub")
                                                            (("1"
                                                              (rewrite
                                                               "vect2_add")
                                                              (("1"
                                                                (rewrite
                                                                 "vect2_sub")
                                                                (("1"
                                                                  (rewrite
                                                                   "vect2_scal")
                                                                  (("1"
                                                                    (rewrite
                                                                     "vect2_add")
                                                                    (("1"
                                                                      (rewrite
                                                                       "vect2_sub")
                                                                      (("1"
                                                                        (rewrite
                                                                         "vect2_scal")
                                                                        (("1"
                                                                          (rewrite
                                                                           "vect2_add")
                                                                          (("1"
                                                                            (rewrite
                                                                             "vect2_scal")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "vz_distr_sub")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "vz_distr_add")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "vz_distr_sub")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "vz_scal")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "vz_distr_add")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "vz_distr_sub")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "vz_scal")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "vz_distr_add")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "vz_scal")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (hide 3)
                                                    (("2"
                                                      (replace -1 :dir rl)
                                                      (("2"
                                                        (replace -2 :dir rl)
                                                        (("2"
                                                          (expand
                                                           "location_at")
                                                          (("2"
                                                            (replace "jjname")
                                                            (("2"
                                                              (hide "jjname")
                                                              (("2"
                                                                (hide -13)
                                                                (("2"
                                                                  (hide -13)
                                                                  (("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "seg_lh_bottom")
                                                (("2"
                                                  (expand "max")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "seg_lh_top")
                                                        (("2"
                                                          (expand "min")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (expand "seg_lh_bottom")
                                          (("2"
                                            (expand "seg_lh_top")
                                            (("2"
                                              (expand "max")
                                              (("2"
                                                (expand "min")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (ground)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (inst 2 "jj")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (case "jj = N-1")
                                  (("1" (replace -1)
                                    (("1" (hide -3)
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (inst + "N-1")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst + "N-1")
                          (("1" (expand "segment")
                            (("1"
                              (typepred
                               "segment_max(extend[nat, below[N], bool, FALSE]
                                          ({j: below[N] | tt!1 >= flpl(j)`time}))")
                              (("1" (replace "jjname")
                                (("1" (expand "extend")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (rewrite "conflict_3D_on_open_interval")
          (("2" (skosimp*)
            (("2" (name "t!1" "topen!1")
              (("2" (replace -1)
                (("2" (hide -1)
                  (("2" (name "newt" "flpl(j!1)`time+t!1")
                    (("2"
                      (name "cv1"
                            "(so + (newt - to) * vo) - location_at(flpl)(newt)")
                      (("1"
                        (name "cv2"
                              "(so + (flpl(j!1)`time - to) * vo) - flpl(j!1)`position +
                                   t!1 * (vo - velocity(flpl)(j!1))")
                        (("1" (case "NOT cv1 = cv2")
                          (("1" (hide 2)
                            (("1" (replace -1 :dir rl)
                              (("1" (replace -2 :dir rl)
                                (("1" (hide -1)
                                  (("1" (hide -1)
                                    (("1" (case "segment(flpl)(newt) = j!1")
                                      (("1"
                                        (replace -2 :dir rl)
                                        (("1"
                                          (expand "location_at")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (name "pj" "segment(flpl)(newt)")
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (case
                                               "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (copy -3)
                                                  (("1"
                                                    (expand "segment" -1)
                                                    (("1"
                                                      (typepred
                                                       "segment_max(extend[nat, below[N], bool, FALSE]
                                                ({j: below[N] | newt >= flpl(j)`time}))")
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand "extend")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "pj < 1+j!1")
                                                              (("1"
                                                                (inst - "j!1")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "flight_plan_ascending_time")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "flpl"
                                                                   "pj"
                                                                   "1+j!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "seg_lh_bottom")
                                                (("2"
                                                  (expand "seg_lh_top")
                                                  (("2"
                                                    (expand "min")
                                                    (("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "conflict_3D?")
                            (("2" (inst + "newt")
                              (("1"
                                (case "vect2(cv1) = vect2(cv2) AND cv1`z = cv2`z")
                                (("1" (flatten)
                                  (("1" (replace -4 :dir rl)
                                    (("1" (replace -5 :dir rl)
                                      (("1"
                                        (rewrite "vect2_sub")
                                        (("1"
                                          (rewrite "vect2_add")
                                          (("1"
                                            (rewrite "vect2_sub")
                                            (("1"
                                              (rewrite "vect2_scal")
                                              (("1"
                                                (rewrite "vect2_add")
                                                (("1"
                                                  (rewrite "vect2_sub")
                                                  (("1"
                                                    (rewrite "vect2_scal")
                                                    (("1"
                                                      (rewrite "vect2_add")
                                                      (("1"
                                                        (rewrite "vect2_sub")
                                                        (("1"
                                                          (rewrite
                                                           "vect2_scal")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "vz_distr_sub")
                                                              (("1"
                                                                (rewrite
                                                                 "vz_distr_add")
                                                                (("1"
                                                                  (rewrite
                                                                   "vz_distr_sub")
                                                                  (("1"
                                                                    (rewrite
                                                                     "vz_scal")
                                                                    (("1"
                                                                      (rewrite
                                                                       "vz_distr_add")
                                                                      (("1"
                                                                        (rewrite
                                                                         "vz_distr_sub")
                                                                        (("1"
                                                                          (rewrite
                                                                           "vz_scal")
                                                                          (("1"
                                                                            (rewrite
                                                                             "vz_distr_add")
                                                                            (("1"
                                                                              (rewrite
                                                                               "vz_distr_sub")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "vz_scal")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (expand "seg_lh_bottom")
                                (("2" (expand "seg_lh_top")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "start_time")
                        (("2" (expand "end_time")
                          (("2" (expand "seg_lh_bottom")
                            (("2" (expand "seg_lh_top")
                              (("2" (lemma "flight_plan_ascending_time")
                                (("2" (inst-cp - "flpl" "j!1" "0")
                                  (("2" (inst - "flpl" "N-1" "j!1+1")
                                    (("2" (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -2)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "min")
                                            (("2"
                                              (lift-if)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (nontrivial_lookahead formula-decl nil cd3d_si nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D vect_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (velocity_def formula-decl nil flightplan nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (vect2_sub formula-decl nil vect_3D_2D vectors)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (velocity const-decl "Vect3" flightplan nil)
    (- const-decl "Vector" vectors_3D vectors)
    (kk!1 skolem-const-decl "below[N]" cd3d_si nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (location_at_check formula-decl nil flightplan nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (vz_distr_add formula-decl nil vectors_3D vectors)
    (vz_scal formula-decl nil vectors_3D vectors)
    (vz_distr_sub formula-decl nil vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (seg_lh_bottom const-decl "nnreal" cd3d_si nil)
    (seg_lh_top const-decl "real" cd3d_si nil)
    (Lookahead type-eq-decl nil Lookahead nil)
    (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (segment_max const-decl "[SS: non_empty_finite_set[nat] ->
   {a: nat | SS(a) AND (FORALL (x: nat): SS(x) IMPLIES x <= a)}]" flightplan
     nil)
    (segment_def formula-decl nil flightplan nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (location_at const-decl "Vect3" flightplan nil)
    (flpl skolem-const-decl "FlightPlanRelevant(to)" cd3d_si nil)
    (to skolem-const-decl "real" cd3d_si nil)
    (newt skolem-const-decl "real" cd3d_si nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (jj skolem-const-decl "below[N]" cd3d_si nil)
    (segment const-decl "below[N]" flightplan nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (below type-eq-decl nil nat_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (start_time const-decl "real" flightplan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (end_time const-decl "real" flightplan nil)
    (FlightTimes nonempty-type-eq-decl nil flightplan nil)
    (FlightTimesRelevant type-eq-decl nil cd3d_si nil)
    (conflict_3D? const-decl "bool" cd3d_si nil)
    (conflict_3D? const-decl "bool" cd3d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (conflict_3D_on_open_interval formula-decl nil cd3d nil)
    (D formal-const-decl "posreal" cd3d_si nil)
    (H formal-const-decl "posreal" cd3d_si nil)
    (flight_plan_ascending_time formula-decl nil flightplan nil)
    (newt skolem-const-decl "real" cd3d_si nil))
   nil)
  (conflict_3D_rew-4 nil 3475844455
   ("" (skeep)
    (("" (ground)
      (("1" (expand "conflict_3D?")
        (("1" (skosimp*)
          (("1" (typepred "tt!1")
            (("1" (expand "end_time")
              (("1" (expand "start_time")
                (("1" (case "EXISTS (kk: below[N]): tt!1 = flpl(kk)`time")
                  (("1" (skosimp*)
                    (("1" (lemma "nontrivial_lookahead")
                      (("1" (inst - "T" "kk!1" "to" "flpl")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1" (inst + "kk!1")
                                (("1" (assert)
                                  (("1" (inst + "0")
                                    (("1" (assert)
                                      (("1"
                                        (lemma "location_at_check")
                                        (("1"
                                          (inst - "flpl" "kk!1")
                                          (("1"
                                            (replace -4 :dir rl)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (case
                                                 "seg_lh_bottom(flpl,to,T)(kk!1) = tt!1")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case
                                                     "flpl(kk!1)`position = lh_start_position(flpl,to,T)(kk!1)")
                                                    (("1"
                                                      (rewrite "vz_distr_sub")
                                                      (("1"
                                                        (rewrite
                                                         "vz_distr_add")
                                                        (("1"
                                                          (rewrite "vz_scal")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "lh_start_position")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (replace
                                                             -5
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "seg_lh_bottom" 1)
                                                    (("2"
                                                      (expand "max")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))
                             ("2" (flatten)
                              (("2" (inst + "kk!1-1")
                                (("1" (assert)
                                  (("1"
                                    (inst + "seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                      seg_lh_bottom(flpl,to,T)(kk!1 - 1)")
                                    (("1" (lemma "location_at_check")
                                      (("1"
                                        (inst - "flpl" "kk!1")
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (case
                                                 "(so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                                          lh_start_position(flpl,to,T)(kk!1 - 1)
                                                                                                                                    +
                                                                                                                                    (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                                      seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                                     * (vo - velocity(flpl)(kk!1 - 1)) = (so + (tt!1 - to) * vo) - flpl(kk!1)`position")
                                                (("1"
                                                  (case
                                                   "((so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                                                    lh_start_position(flpl,to,T)(kk!1 - 1))`z
                                                                                                                                                   +
                                                                                                                                                   (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                                                     seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                                                    * (vo - velocity(flpl)(kk!1 - 1))`z = so`z - flpl(kk!1)`position`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                                                          lh_start_position(flpl,to,T)(kk!1 - 1))
                                                                                                                                                    +
                                                                                                                                                    (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                                                      seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                                                     * vect2(vo - velocity(flpl)(kk!1 - 1)) = vect2((so + (tt!1 - to) * vo) - flpl(kk!1)`position)")
                                                  (("1"
                                                    (flatten)
                                                    (("1" (assert) nil)))
                                                   ("2"
                                                    (hide-all-but (-1 1))
                                                    (("2"
                                                      (name
                                                       "lsp"
                                                       "lh_start_position(flpl,to,T)(kk!1 - 1)")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (name
                                                           "slb"
                                                           "seg_lh_bottom(flpl,to,T)(kk!1 - 1)")
                                                          (("2"
                                                            (replace -1)
                                                            (("2"
                                                              (name
                                                               "slt"
                                                               "seg_lh_top(flpl,to,T)(kk!1 - 1)")
                                                              (("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (name
                                                                   "velc"
                                                                   "velocity(flpl)(kk!1-1)")
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))))))))))))))))
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma "velocity_def")
                                                    (("2"
                                                      (inst - "flpl" "kk!1-1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "flpl(kk!1-1)`time >= to")
                                                          (("1"
                                                            (case
                                                             "seg_lh_bottom(flpl,to,T)(kk!1-1) = flpl(kk!1-1)`time")
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (case
                                                                 "flpl(kk!1)`time <= to+T")
                                                                (("1"
                                                                  (case
                                                                   "seg_lh_top(flpl,to,T)(kk!1-1) = flpl(kk!1)`time")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "lh_start_position")
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -8)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-5
                                                                                1))
                                                                              (("1"
                                                                                (grind)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1 1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))
                                                                 ("2"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "seg_lh_bottom")
                                                                (("2"
                                                                  (expand
                                                                   "max")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))))))))
                                                           ("2"
                                                            (case
                                                             "NOT seg_lh_bottom(flpl,to,T)(kk!1-1) = to")
                                                            (("1"
                                                              (expand
                                                               "seg_lh_bottom"
                                                               1)
                                                              (("1"
                                                                (expand "max")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil)))))))
                                                             ("2"
                                                              (expand
                                                               "lh_start_position")
                                                              (("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "seg_lh_top")
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-2
                                                                          2
                                                                          1))
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2" (assert) nil)))))))))))))))
                   ("2" (name "jj" "segment(flpl)(tt!1)")
                    (("2" (label "jjname" -1)
                      (("2" (name "jjname" -1)
                        (("2" (inst 2 "jj")
                          (("1" (lemma "segment_def")
                            (("1" (inst - "flpl" "tt!1")
                              (("1" (flatten)
                                (("1" (case "jj < N-1")
                                  (("1" (assert)
                                    (("1" (case "flpl(jj)`time < tt!1")
                                      (("1"
                                        (case
                                         "seg_lh_bottom(flpl,to,T)(jj) < seg_lh_top(flpl,to,T)(jj)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (name
                                             "newt"
                                             "tt!1-seg_lh_bottom(flpl,to,T)(jj)")
                                            (("1"
                                              (inst 2 "newt")
                                              (("1"
                                                (case
                                                 "(so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                                     lh_start_position(flpl,to,T)(jj)
                                                                                                                                                               + newt *(vo - velocity(flpl)(jj)) = (so + (tt!1 - to) * vo) - location_at(flpl)(tt!1)")
                                                (("1"
                                                  (case
                                                   "((so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                                             lh_start_position(flpl,to,T)(jj))`z
                                                                                                                                                                            + newt * (vo - velocity(flpl)(jj))`z = so`z - location_at(flpl)(tt!1)`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                                                   lh_start_position(flpl,to,T)(jj))
                                                                                                                                                                             + newt * vect2(vo - velocity(flpl)(jj)) = vect2((so + (tt!1 - to) * vo) - location_at(flpl)(tt!1))")
                                                  (("1"
                                                    (flatten)
                                                    (("1" (assert) nil)))
                                                   ("2"
                                                    (hide-all-but (-1 1))
                                                    (("2"
                                                      (name
                                                       "slb1"
                                                       "seg_lh_bottom(flpl,to,T)(jj)")
                                                      (("2"
                                                        (name
                                                         "lsp"
                                                         "lh_start_position(flpl,to,T)(jj)")
                                                        (("2"
                                                          (name
                                                           "lal"
                                                           "location_at(flpl)(tt!1)")
                                                          (("2"
                                                            (name
                                                             "v1"
                                                             "velocity(flpl)(jj)")
                                                            (("2"
                                                              (replace -1)
                                                              (("2"
                                                                (hide -1)
                                                                (("2"
                                                                  (replace -1)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))))))))))))))))
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "location_at")
                                                    (("2"
                                                      (replace "jjname")
                                                      (("2"
                                                        (hide "jjname")
                                                        (("2"
                                                          (hide -12)
                                                          (("2"
                                                            (hide -12)
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))
                                               ("2"
                                                (case
                                                 "seg_lh_bottom(flpl,to,T)(jj) <= tt!1 AND tt!1 <= seg_lh_top(flpl,to,T)(jj)")
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "seg_lh_bottom" 1)
                                                    (("2"
                                                      (expand "seg_lh_top" 1)
                                                      (("2"
                                                        (expand "max")
                                                        (("2"
                                                          (expand "min")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                nil)))))))))))))))))))))))
                                         ("2"
                                          (hide 3)
                                          (("2"
                                            (expand "seg_lh_bottom")
                                            (("2"
                                              (expand "seg_lh_top")
                                              (("2"
                                                (expand "max")
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (inst 2 "jj")
                                        (("2" (assert) nil)))))))
                                   ("2" (case "jj = N-1")
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (inst + "N-1")
                                            (("1" (assert) nil)
                                             ("2" (assert) nil)))))))))
                                     ("2" (assert) nil)))))))))))
                           ("2" (inst + "N-1")
                            (("1" (expand "segment")
                              (("1"
                                (typepred
                                 "max(extend[nat, below[N], bool, FALSE]
                                                                ({j: below[N] | tt!1 >= flpl(j)`time}))")
                                (("1" (replace "jjname")
                                  (("1" (expand "extend")
                                    (("1" (assert) nil)))))))))
                             ("2" (assert) nil)))))))))))))))))))))))
       ("2" (skosimp*)
        (("2" (expand "conflict_3D?")
          (("2" (skosimp*)
            (("2" (typepred "t!1")
              (("2" (name "newt" "seg_lh_bottom(flpl,to,T)(j!1) + t!1")
                (("2" (case "to<=newt AND newt<=to+T")
                  (("1" (flatten)
                    (("1" (inst + "newt")
                      (("1"
                        (case "(so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                                lh_start_position(flpl,to,T)(j!1)
                                                                          + t!1 * (vo - velocity(flpl)(j!1)) = (so + (newt - to) * vo) - location_at(flpl)(newt)")
                        (("1"
                          (case "((so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                                     lh_start_position(flpl,to,T)(j!1))`z
                                                                                    + t!1 * (vo - velocity(flpl)(j!1))`z = so`z + newt * vo`z - location_at(flpl)(newt)`z - vo`z * to AND vect2((so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                                          lh_start_position(flpl,to,T)(j!1))
                                                                                    + t!1 * vect2(vo - velocity(flpl)(j!1)) = vect2((so + (newt - to) * vo) - location_at(flpl)(newt))")
                          (("1" (flatten) (("1" (assert) nil)))
                           ("2" (hide 2)
                            (("2" (hide-all-but (-1 1))
                              (("2"
                                (name "slb1" "seg_lh_bottom(flpl,to,T)(j!1)")
                                (("2"
                                  (name "lsp"
                                        "lh_start_position(flpl,to,T)(j!1)")
                                  (("2"
                                    (name "sltop"
                                          "seg_lh_top(flpl,to,T)(j!1)")
                                    (("2"
                                      (name "loc1" "location_at(flpl)(newt)")
                                      (("2"
                                        (name "velc" "velocity(flpl)(j!1)")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))))))))))))
                         ("2" (hide 2)
                          (("2" (hide -7)
                            (("2" (hide -7)
                              (("2"
                                (case "t!1 < seg_lh_top(flpl,to,T)(j!1) - seg_lh_bottom(flpl,to,T)(j!1)")
                                (("1" (case "segment(flpl)(newt) = j!1")
                                  (("1" (expand "location_at")
                                    (("1" (replace -1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1)
                                            (("1" (grind) nil)))))))))))
                                   ("2" (hide 2)
                                    (("2" (name "pj" "segment(flpl)(newt)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (case
                                           "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (copy -3)
                                              (("1"
                                                (expand "segment" -1)
                                                (("1"
                                                  (typepred
                                                   "max(extend[nat, below[N], bool, FALSE]
                                                              ({j: below[N] | newt >= flpl(j)`time}))")
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (expand "extend")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case "pj < 1+j!1")
                                                          (("1"
                                                            (inst - "j!1")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                nil)))))
                                                           ("2"
                                                            (lemma
                                                             "flight_plan_ascending_time")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "flpl"
                                                               "pj"
                                                               "1+j!1")
                                                              (("2"
                                                                (assert)
                                                                nil)))))))))))))))))))))
                                           ("2"
                                            (case
                                             "seg_lh_top(flpl,to,T)(j!1) <= flpl(j!1+1)`time AND seg_lh_bottom(flpl,to,T)(j!1) >= flpl(j!1)`time")
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil)))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "seg_lh_top" 1)
                                                (("2"
                                                  (expand "seg_lh_bottom" 1)
                                                  (("2"
                                                    (expand "min")
                                                    (("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))))))))))))))
                                 ("2"
                                  (case "newt = seg_lh_top(flpl,to,T)(j!1)")
                                  (("1" (case "to+T < flpl(j!1+1)`time")
                                    (("1" (case "segment(flpl)(newt) = j!1")
                                      (("1"
                                        (expand "location_at")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "seg_lh_top(flpl,to,T)(j!1) = to+T")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1" (grind) nil)))))))
                                                 ("2"
                                                  (expand "seg_lh_top" 1)
                                                  (("2"
                                                    (expand "min")
                                                    (("2"
                                                      (propax)
                                                      nil)))))))))))))))
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (name "pj" "segment(flpl)(newt)")
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (case
                                               "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (copy -3)
                                                  (("1"
                                                    (expand "segment" -1)
                                                    (("1"
                                                      (typepred
                                                       "max(extend[nat, below[N], bool, FALSE]
                                                                      ({j: below[N] | newt >= flpl(j)`time}))")
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand "extend")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "pj < 1+j!1")
                                                              (("1"
                                                                (inst - "j!1")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))
                                                               ("2"
                                                                (lemma
                                                                 "flight_plan_ascending_time")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "flpl"
                                                                   "pj"
                                                                   "1+j!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil)))))))))))))))))))))
                                               ("2"
                                                (hide -1)
                                                (("2"
                                                  (hide 3)
                                                  (("2"
                                                    (grind)
                                                    nil)))))))))))))))
                                     ("2" (case "newt = flpl(j!1+1)`time")
                                      (("1"
                                        (lemma "location_at_check")
                                        (("1"
                                          (inst - "flpl" "j!1+1")
                                          (("1"
                                            (replace -2 :dir rl)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand
                                                     "lh_start_position")
                                                    (("1"
                                                      (lemma "velocity_def")
                                                      (("1"
                                                        (inst - "flpl" "j!1")
                                                        (("1"
                                                          (name
                                                           "vel11"
                                                           "velocity(flpl)(j!1)")
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (grind)
                                                                nil)))))))))))))))))))))))))
                                       ("2"
                                        (hide 4)
                                        (("2"
                                          (expand "seg_lh_top" -1)
                                          (("2"
                                            (expand "min")
                                            (("2"
                                              (lift-if)
                                              (("2" (ground) nil)))))))))))))
                                   ("2" (assert) nil)))))))))))
                         ("3" (hide 2)
                          (("3"
                            (case "seg_lh_bottom(flpl,to,T)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to,T)(j!1) <= end_time(flpl)")
                            (("1" (flatten) (("1" (assert) nil)))
                             ("2" (hide 2)
                              (("2" (expand "seg_lh_bottom")
                                (("2" (expand "start_time")
                                  (("2" (expand "end_time")
                                    (("2" (expand "seg_lh_top")
                                      (("2"
                                        (lemma "flight_plan_ascending_time")
                                        (("2"
                                          (inst-cp - "flpl" "N-1" "1+j!1")
                                          (("2"
                                            (inst - "flpl" "j!1" "0")
                                            (("2"
                                              (expand "max")
                                              (("2"
                                                (expand "min")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil)))))))))))))))))))))))))))))))
                       ("2" (assert)
                        (("2"
                          (case "seg_lh_bottom(flpl,to,T)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to,T)(j!1) <= end_time(flpl)")
                          (("1" (flatten) (("1" (assert) nil)))
                           ("2" (hide 2)
                            (("2" (expand "seg_lh_bottom")
                              (("2" (expand "start_time")
                                (("2" (expand "end_time")
                                  (("2" (expand "seg_lh_top")
                                    (("2" (lemma "flight_plan_ascending_time")
                                      (("2"
                                        (inst-cp - "flpl" "N-1" "1+j!1")
                                        (("2"
                                          (inst - "flpl" "j!1" "0")
                                          (("2"
                                            (expand "max")
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    nil)))))))))))))))))))))))))))))))))
                   ("2"
                    (case "seg_lh_bottom(flpl,to,T)(j!1) >= to AND seg_lh_top(flpl,to,T)(j!1) <= to+T")
                    (("1" (flatten) (("1" (assert) nil)))
                     ("2" (hide 3)
                      (("2" (hide-all-but 1)
                        (("2" (grind) nil))))))))))))))))))))))
    nil)
   nil nil)
  (conflict_3D_rew-3 nil 3475844390
   ("" (skeep)
    (("" (ground)
      (("1" (expand "conflict_3D?")
        (("1" (skosimp*)
          (("1" (typepred "tt!1")
            (("1" (expand "end_time")
              (("1" (expand "start_time")
                (("1" (case "EXISTS (kk: below[N]): tt!1 = flpl(kk)`time")
                  (("1" (skosimp*)
                    (("1" (lemma "nontrivial_lookahead")
                      (("1" (inst - "T" "kk!1" "to" "flpl")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1" (inst + "kk!1")
                                (("1" (assert)
                                  (("1" (inst + "0")
                                    (("1" (assert)
                                      (("1"
                                        (lemma "location_at_check")
                                        (("1"
                                          (inst - "flpl" "kk!1")
                                          (("1"
                                            (replace -4 :dir rl)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (case
                                                 "seg_lh_bottom(flpl,to)(kk!1) = tt!1")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case
                                                     "flpl(kk!1)`position = lh_start_position(flpl,to)(kk!1)")
                                                    (("1"
                                                      (rewrite "vz_distr_sub")
                                                      (("1"
                                                        (rewrite
                                                         "vz_distr_add")
                                                        (("1"
                                                          (rewrite "vz_scal")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "lh_start_position")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (replace
                                                             -5
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "seg_lh_bottom" 1)
                                                    (("2"
                                                      (expand "max")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))
                             ("2" (flatten)
                              (("2" (inst + "kk!1-1")
                                (("1" (assert)
                                  (("1"
                                    (inst + "seg_lh_top(flpl,to)(kk!1 - 1) -
                                                                                                      seg_lh_bottom(flpl,to)(kk!1 - 1)")
                                    (("1" (lemma "location_at_check")
                                      (("1"
                                        (inst - "flpl" "kk!1")
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (case
                                                 "(so + (seg_lh_bottom(flpl,to)(kk!1 - 1) - to) * vo) -
                                                                                                                                          lh_start_position(flpl,to)(kk!1 - 1)
                                                                                                                                    +
                                                                                                                                    (seg_lh_top(flpl,to)(kk!1 - 1) -
                                                                                                                                      seg_lh_bottom(flpl,to)(kk!1 - 1))
                                                                                                                                     * (vo - velocity(flpl)(kk!1 - 1)) = (so + (tt!1 - to) * vo) - flpl(kk!1)`position")
                                                (("1"
                                                  (case
                                                   "((so + (seg_lh_bottom(flpl,to)(kk!1 - 1) - to) * vo) -
                                                                                                                                                    lh_start_position(flpl,to)(kk!1 - 1))`z
                                                                                                                                                   +
                                                                                                                                                   (seg_lh_top(flpl,to)(kk!1 - 1) -
                                                                                                                                                     seg_lh_bottom(flpl,to)(kk!1 - 1))
                                                                                                                                                    * (vo - velocity(flpl)(kk!1 - 1))`z = so`z - flpl(kk!1)`position`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to)(kk!1 - 1) - to) * vo) -
                                                                                                                                                          lh_start_position(flpl,to)(kk!1 - 1))
                                                                                                                                                    +
                                                                                                                                                    (seg_lh_top(flpl,to)(kk!1 - 1) -
                                                                                                                                                      seg_lh_bottom(flpl,to)(kk!1 - 1))
                                                                                                                                                     * vect2(vo - velocity(flpl)(kk!1 - 1)) = vect2((so + (tt!1 - to) * vo) - flpl(kk!1)`position)")
                                                  (("1"
                                                    (flatten)
                                                    (("1" (assert) nil)))
                                                   ("2"
                                                    (hide-all-but (-1 1))
                                                    (("2"
                                                      (name
                                                       "lsp"
                                                       "lh_start_position(flpl,to)(kk!1 - 1)")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (name
                                                           "slb"
                                                           "seg_lh_bottom(flpl,to)(kk!1 - 1)")
                                                          (("2"
                                                            (replace -1)
                                                            (("2"
                                                              (name
                                                               "slt"
                                                               "seg_lh_top(flpl,to)(kk!1 - 1)")
                                                              (("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (name
                                                                   "velc"
                                                                   "velocity(flpl)(kk!1-1)")
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))))))))))))))))
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma "velocity_def")
                                                    (("2"
                                                      (inst - "flpl" "kk!1-1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "flpl(kk!1-1)`time >= to")
                                                          (("1"
                                                            (case
                                                             "seg_lh_bottom(flpl,to)(kk!1-1) = flpl(kk!1-1)`time")
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (case
                                                                 "flpl(kk!1)`time <= to+T")
                                                                (("1"
                                                                  (case
                                                                   "seg_lh_top(flpl,to)(kk!1-1) = flpl(kk!1)`time")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "lh_start_position")
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -8)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-5
                                                                                1))
                                                                              (("1"
                                                                                (grind)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1 1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))
                                                                 ("2"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "seg_lh_bottom")
                                                                (("2"
                                                                  (expand
                                                                   "max")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))))))))
                                                           ("2"
                                                            (case
                                                             "NOT seg_lh_bottom(flpl,to)(kk!1-1) = to")
                                                            (("1"
                                                              (expand
                                                               "seg_lh_bottom"
                                                               1)
                                                              (("1"
                                                                (expand "max")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil)))))))
                                                             ("2"
                                                              (expand
                                                               "lh_start_position")
                                                              (("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "seg_lh_top")
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-2
                                                                          2
                                                                          1))
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                 ("2" (assert) nil)))))))))))))))
                   ("2" (name "jj" "segment(flpl)(tt!1)")
                    (("2" (label "jjname" -1)
                      (("2" (name "jjname" -1)
                        (("2" (inst 2 "jj")
                          (("1" (lemma "segment_def")
                            (("1" (inst - "flpl" "tt!1")
                              (("1" (flatten)
                                (("1" (case "jj < N-1")
                                  (("1" (assert)
                                    (("1" (case "flpl(jj)`time < tt!1")
                                      (("1"
                                        (case
                                         "seg_lh_bottom(flpl,to)(jj) < seg_lh_top(flpl,to)(jj)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (name
                                             "newt"
                                             "tt!1-seg_lh_bottom(flpl,to)(jj)")
                                            (("1"
                                              (inst 2 "newt")
                                              (("1"
                                                (case
                                                 "(so + (seg_lh_bottom(flpl,to)(jj) - to) * vo) -
                                                                                                                                                                     lh_start_position(flpl,to)(jj)
                                                                                                                                                               + newt *(vo - velocity(flpl)(jj)) = (so + (tt!1 - to) * vo) - location_at(flpl)(tt!1)")
                                                (("1"
                                                  (case
                                                   "((so + (seg_lh_bottom(flpl,to)(jj) - to) * vo) -
                                                                                                                                                                             lh_start_position(flpl,to)(jj))`z
                                                                                                                                                                            + newt * (vo - velocity(flpl)(jj))`z = so`z - location_at(flpl)(tt!1)`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to)(jj) - to) * vo) -
                                                                                                                                                                                   lh_start_position(flpl,to)(jj))
                                                                                                                                                                             + newt * vect2(vo - velocity(flpl)(jj)) = vect2((so + (tt!1 - to) * vo) - location_at(flpl)(tt!1))")
                                                  (("1"
                                                    (flatten)
                                                    (("1" (assert) nil)))
                                                   ("2"
                                                    (hide-all-but (-1 1))
                                                    (("2"
                                                      (name
                                                       "slb1"
                                                       "seg_lh_bottom(flpl,to)(jj)")
                                                      (("2"
                                                        (name
                                                         "lsp"
                                                         "lh_start_position(flpl,to)(jj)")
                                                        (("2"
                                                          (name
                                                           "lal"
                                                           "location_at(flpl)(tt!1)")
                                                          (("2"
                                                            (name
                                                             "v1"
                                                             "velocity(flpl)(jj)")
                                                            (("2"
                                                              (replace -1)
                                                              (("2"
                                                                (hide -1)
                                                                (("2"
                                                                  (replace -1)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))))))))))))))))
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "location_at")
                                                    (("2"
                                                      (replace "jjname")
                                                      (("2"
                                                        (hide "jjname")
                                                        (("2"
                                                          (hide -12)
                                                          (("2"
                                                            (hide -12)
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))
                                               ("2"
                                                (case
                                                 "seg_lh_bottom(flpl,to)(jj) <= tt!1 AND tt!1 <= seg_lh_top(flpl,to)(jj)")
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "seg_lh_bottom" 1)
                                                    (("2"
                                                      (expand "seg_lh_top" 1)
                                                      (("2"
                                                        (expand "max")
                                                        (("2"
                                                          (expand "min")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                nil)))))))))))))))))))))))
                                         ("2"
                                          (hide 3)
                                          (("2"
                                            (expand "seg_lh_bottom")
                                            (("2"
                                              (expand "seg_lh_top")
                                              (("2"
                                                (expand "max")
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (inst 2 "jj")
                                        (("2" (assert) nil)))))))
                                   ("2" (case "jj = N-1")
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (inst + "N-1")
                                            (("1" (assert) nil)
                                             ("2" (assert) nil)))))))))
                                     ("2" (assert) nil)))))))))))
                           ("2" (inst + "N-1")
                            (("1" (expand "segment")
                              (("1"
                                (typepred
                                 "max(extend[nat, below[N], bool, FALSE]
                                                                ({j: below[N] | tt!1 >= flpl(j)`time}))")
                                (("1" (replace "jjname")
                                  (("1" (expand "extend")
                                    (("1" (assert) nil)))))))))
                             ("2" (assert) nil)))))))))))))))))))))))
       ("2" (skosimp*)
        (("2" (expand "conflict_3D?")
          (("2" (skosimp*)
            (("2" (typepred "t!1")
              (("2" (name "newt" "seg_lh_bottom(flpl,to)(j!1) + t!1")
                (("2" (case "to<=newt AND newt<=to+T")
                  (("1" (flatten)
                    (("1" (inst + "newt")
                      (("1"
                        (case "(so + (seg_lh_bottom(flpl,to)(j!1) - to) * vo) -
                                                                                lh_start_position(flpl,to)(j!1)
                                                                          + t!1 * (vo - velocity(flpl)(j!1)) = (so + (newt - to) * vo) - location_at(flpl)(newt)")
                        (("1"
                          (case "((so + (seg_lh_bottom(flpl,to)(j!1) - to) * vo) -
                                                                                     lh_start_position(flpl,to)(j!1))`z
                                                                                    + t!1 * (vo - velocity(flpl)(j!1))`z = so`z + newt * vo`z - location_at(flpl)(newt)`z - vo`z * to AND vect2((so + (seg_lh_bottom(flpl,to)(j!1) - to) * vo) -
                                                                                          lh_start_position(flpl,to)(j!1))
                                                                                    + t!1 * vect2(vo - velocity(flpl)(j!1)) = vect2((so + (newt - to) * vo) - location_at(flpl)(newt))")
                          (("1" (flatten) (("1" (assert) nil)))
                           ("2" (hide 2)
                            (("2" (hide-all-but (-1 1))
                              (("2"
                                (name "slb1" "seg_lh_bottom(flpl,to)(j!1)")
                                (("2"
                                  (name "lsp"
                                        "lh_start_position(flpl,to)(j!1)")
                                  (("2"
                                    (name "sltop" "seg_lh_top(flpl,to)(j!1)")
                                    (("2"
                                      (name "loc1" "location_at(flpl)(newt)")
                                      (("2"
                                        (name "velc" "velocity(flpl)(j!1)")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))))))))))))
                         ("2" (hide 2)
                          (("2" (hide -7)
                            (("2" (hide -7)
                              (("2"
                                (case "t!1 < seg_lh_top(flpl,to)(j!1) - seg_lh_bottom(flpl,to)(j!1)")
                                (("1" (case "segment(flpl)(newt) = j!1")
                                  (("1" (expand "location_at")
                                    (("1" (replace -1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1)
                                            (("1" (grind) nil)))))))))))
                                   ("2" (hide 2)
                                    (("2" (name "pj" "segment(flpl)(newt)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (case
                                           "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (copy -3)
                                              (("1"
                                                (expand "segment" -1)
                                                (("1"
                                                  (typepred
                                                   "max(extend[nat, below[N], bool, FALSE]
                                                              ({j: below[N] | newt >= flpl(j)`time}))")
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (expand "extend")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case "pj < 1+j!1")
                                                          (("1"
                                                            (inst - "j!1")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                nil)))))
                                                           ("2"
                                                            (lemma
                                                             "flight_plan_ascending_time")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "flpl"
                                                               "pj"
                                                               "1+j!1")
                                                              (("2"
                                                                (assert)
                                                                nil)))))))))))))))))))))
                                           ("2"
                                            (case
                                             "seg_lh_top(flpl,to)(j!1) <= flpl(j!1+1)`time AND seg_lh_bottom(flpl,to)(j!1) >= flpl(j!1)`time")
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil)))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "seg_lh_top" 1)
                                                (("2"
                                                  (expand "seg_lh_bottom" 1)
                                                  (("2"
                                                    (expand "min")
                                                    (("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))))))))))))))
                                 ("2" (case "newt = seg_lh_top(flpl,to)(j!1)")
                                  (("1" (case "to+T < flpl(j!1+1)`time")
                                    (("1" (case "segment(flpl)(newt) = j!1")
                                      (("1"
                                        (expand "location_at")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "seg_lh_top(flpl,to)(j!1) = to+T")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1" (grind) nil)))))))
                                                 ("2"
                                                  (expand "seg_lh_top" 1)
                                                  (("2"
                                                    (expand "min")
                                                    (("2"
                                                      (propax)
                                                      nil)))))))))))))))
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (name "pj" "segment(flpl)(newt)")
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (case
                                               "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (copy -3)
                                                  (("1"
                                                    (expand "segment" -1)
                                                    (("1"
                                                      (typepred
                                                       "max(extend[nat, below[N], bool, FALSE]
                                                                      ({j: below[N] | newt >= flpl(j)`time}))")
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand "extend")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "pj < 1+j!1")
                                                              (("1"
                                                                (inst - "j!1")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))
                                                               ("2"
                                                                (lemma
                                                                 "flight_plan_ascending_time")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "flpl"
                                                                   "pj"
                                                                   "1+j!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil)))))))))))))))))))))
                                               ("2"
                                                (hide -1)
                                                (("2"
                                                  (hide 3)
                                                  (("2"
                                                    (grind)
                                                    nil)))))))))))))))
                                     ("2" (case "newt = flpl(j!1+1)`time")
                                      (("1"
                                        (lemma "location_at_check")
                                        (("1"
                                          (inst - "flpl" "j!1+1")
                                          (("1"
                                            (replace -2 :dir rl)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand
                                                     "lh_start_position")
                                                    (("1"
                                                      (lemma "velocity_def")
                                                      (("1"
                                                        (inst - "flpl" "j!1")
                                                        (("1"
                                                          (name
                                                           "vel11"
                                                           "velocity(flpl)(j!1)")
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (grind)
                                                                nil)))))))))))))))))))))))))
                                       ("2"
                                        (hide 4)
                                        (("2"
                                          (expand "seg_lh_top" -1)
                                          (("2"
                                            (expand "min")
                                            (("2"
                                              (lift-if)
                                              (("2" (ground) nil)))))))))))))
                                   ("2" (assert) nil)))))))))))
                         ("3" (hide 2)
                          (("3"
                            (case "seg_lh_bottom(flpl,to)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to)(j!1) <= end_time(flpl)")
                            (("1" (flatten) (("1" (assert) nil)))
                             ("2" (hide 2)
                              (("2" (expand "seg_lh_bottom")
                                (("2" (expand "start_time")
                                  (("2" (expand "end_time")
                                    (("2" (expand "seg_lh_top")
                                      (("2"
                                        (lemma "flight_plan_ascending_time")
                                        (("2"
                                          (inst-cp - "flpl" "N-1" "1+j!1")
                                          (("2"
                                            (inst - "flpl" "j!1" "0")
                                            (("2"
                                              (expand "max")
                                              (("2"
                                                (expand "min")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil)))))))))))))))))))))))))))))))
                       ("2" (assert)
                        (("2"
                          (case "seg_lh_bottom(flpl,to)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to)(j!1) <= end_time(flpl)")
                          (("1" (flatten) (("1" (assert) nil)))
                           ("2" (hide 2)
                            (("2" (expand "seg_lh_bottom")
                              (("2" (expand "start_time")
                                (("2" (expand "end_time")
                                  (("2" (expand "seg_lh_top")
                                    (("2" (lemma "flight_plan_ascending_time")
                                      (("2"
                                        (inst-cp - "flpl" "N-1" "1+j!1")
                                        (("2"
                                          (inst - "flpl" "j!1" "0")
                                          (("2"
                                            (expand "max")
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    nil)))))))))))))))))))))))))))))))))
                   ("2"
                    (case "seg_lh_bottom(flpl,to)(j!1) >= to AND seg_lh_top(flpl,to)(j!1) <= to+T")
                    (("1" (flatten) (("1" (assert) nil)))
                     ("2" (hide 3)
                      (("2" (hide-all-but 1)
                        (("2" (grind) nil))))))))))))))))))))))
    nil)
   nil nil)
  (conflict_3D_rew-2 nil 3473074365
   ("" (skeep)
    (("" (ground)
      (("1" (expand "conflict_3D?")
        (("1" (skosimp*)
          (("1" (typepred "tt!1")
            (("1" (expand "end_time")
              (("1" (expand "start_time")
                (("1" (case "EXISTS (kk: below[N]): tt!1 = flpl(kk)`time")
                  (("1" (skosimp*)
                    (("1" (lemma "nontrivial_lookahead")
                      (("1" (inst - "T" "kk!1" "to" "flpl")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1" (inst + "kk!1")
                                (("1" (assert)
                                  (("1" (inst + "0")
                                    (("1" (assert)
                                      (("1"
                                        (lemma "location_at_check")
                                        (("1"
                                          (inst - "flpl" "kk!1")
                                          (("1"
                                            (replace -4 :dir rl)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (case
                                                 "seg_lh_bottom(flpl,to,T)(kk!1) = tt!1")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case
                                                     "flpl(kk!1)`position = lh_start_position(flpl,to,T)(kk!1)")
                                                    (("1"
                                                      (rewrite "vz_distr_sub")
                                                      (("1"
                                                        (rewrite
                                                         "vz_distr_add")
                                                        (("1"
                                                          (rewrite "vz_scal")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "lh_start_position")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (replace
                                                             -5
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "seg_lh_bottom" 1)
                                                    (("2"
                                                      (expand "max")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (inst + "kk!1-1")
                                (("1" (assert)
                                  (("1"
                                    (inst + "seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                            seg_lh_bottom(flpl,to,T)(kk!1 - 1)")
                                    (("1" (lemma "location_at_check")
                                      (("1"
                                        (inst - "flpl" "kk!1")
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (case
                                                 "(so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                           lh_start_position(flpl,to,T)(kk!1 - 1)
                                                                                                                     +
                                                                                                                     (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                       seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                      * (vo - velocity(flpl)(kk!1 - 1)) = (so + (tt!1 - to) * vo) - flpl(kk!1)`position")
                                                (("1"
                                                  (case
                                                   "((so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                                   lh_start_position(flpl,to,T)(kk!1 - 1))`z
                                                                                                                                  +
                                                                                                                                  (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                                    seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                                   * (vo - velocity(flpl)(kk!1 - 1))`z = so`z - flpl(kk!1)`position`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                                         lh_start_position(flpl,to,T)(kk!1 - 1))
                                                                                                                                   +
                                                                                                                                   (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                                     seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                                    * vect2(vo - velocity(flpl)(kk!1 - 1)) = vect2((so + (tt!1 - to) * vo) - flpl(kk!1)`position)")
                                                  (("1"
                                                    (flatten)
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but (-1 1))
                                                    (("2"
                                                      (name
                                                       "lsp"
                                                       "lh_start_position(flpl,to,T)(kk!1 - 1)")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (name
                                                           "slb"
                                                           "seg_lh_bottom(flpl,to,T)(kk!1 - 1)")
                                                          (("2"
                                                            (replace -1)
                                                            (("2"
                                                              (name
                                                               "slt"
                                                               "seg_lh_top(flpl,to,T)(kk!1 - 1)")
                                                              (("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (name
                                                                   "velc"
                                                                   "velocity(flpl)(kk!1-1)")
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma "velocity_def")
                                                    (("2"
                                                      (inst - "flpl" "kk!1-1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "flpl(kk!1-1)`time >= to")
                                                          (("1"
                                                            (case
                                                             "seg_lh_bottom(flpl,to,T)(kk!1-1) = flpl(kk!1-1)`time")
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (case
                                                                 "flpl(kk!1)`time <= to+T")
                                                                (("1"
                                                                  (case
                                                                   "seg_lh_top(flpl,to,T)(kk!1-1) = flpl(kk!1)`time")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "lh_start_position")
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -8)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-5
                                                                                1))
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1 1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "seg_lh_bottom")
                                                                (("2"
                                                                  (expand
                                                                   "max")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "NOT seg_lh_bottom(flpl,to,T)(kk!1-1) = to")
                                                            (("1"
                                                              (expand
                                                               "seg_lh_bottom"
                                                               1)
                                                              (("1"
                                                                (expand "max")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "lh_start_position")
                                                              (("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "seg_lh_top")
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-2
                                                                          2
                                                                          1))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (name "jj" "segment(flpl)(tt!1)")
                    (("2" (label "jjname" -1)
                      (("2" (name "jjname" -1)
                        (("2" (inst 2 "jj")
                          (("1" (lemma "segment_def")
                            (("1" (inst - "flpl" "tt!1")
                              (("1" (flatten)
                                (("1" (case "jj < N-1")
                                  (("1" (assert)
                                    (("1" (case "flpl(jj)`time < tt!1")
                                      (("1"
                                        (case
                                         "seg_lh_bottom(flpl,to,T)(jj) < seg_lh_top(flpl,to,T)(jj)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (name
                                             "newt"
                                             "tt!1-seg_lh_bottom(flpl,to,T)(jj)")
                                            (("1"
                                              (inst 2 "newt")
                                              (("1"
                                                (case
                                                 "(so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                lh_start_position(flpl,to,T)(jj)
                                                                                                                                          + newt *(vo - velocity(flpl)(jj)) = (so + (tt!1 - to) * vo) - location_at(flpl)(tt!1)")
                                                (("1"
                                                  (case
                                                   "((so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                      lh_start_position(flpl,to,T)(jj))`z
                                                                                                                                                     + newt * (vo - velocity(flpl)(jj))`z = so`z - location_at(flpl)(tt!1)`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                            lh_start_position(flpl,to,T)(jj))
                                                                                                                                                      + newt * vect2(vo - velocity(flpl)(jj)) = vect2((so + (tt!1 - to) * vo) - location_at(flpl)(tt!1))")
                                                  (("1"
                                                    (flatten)
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but (-1 1))
                                                    (("2"
                                                      (name
                                                       "slb1"
                                                       "seg_lh_bottom(flpl,to,T)(jj)")
                                                      (("2"
                                                        (name
                                                         "lsp"
                                                         "lh_start_position(flpl,to,T)(jj)")
                                                        (("2"
                                                          (name
                                                           "lal"
                                                           "location_at(flpl)(tt!1)")
                                                          (("2"
                                                            (name
                                                             "v1"
                                                             "velocity(flpl)(jj)")
                                                            (("2"
                                                              (replace -1)
                                                              (("2"
                                                                (hide -1)
                                                                (("2"
                                                                  (replace -1)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "location_at")
                                                    (("2"
                                                      (replace "jjname")
                                                      (("2"
                                                        (hide "jjname")
                                                        (("2"
                                                          (hide -12)
                                                          (("2"
                                                            (hide -12)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "seg_lh_bottom(flpl,to,T)(jj) <= tt!1 AND tt!1 <= seg_lh_top(flpl,to,T)(jj)")
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "seg_lh_bottom" 1)
                                                    (("2"
                                                      (expand "seg_lh_top" 1)
                                                      (("2"
                                                        (expand "max")
                                                        (("2"
                                                          (expand "min")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 3)
                                          (("2"
                                            (expand "seg_lh_bottom")
                                            (("2"
                                              (expand "seg_lh_top")
                                              (("2"
                                                (expand "max")
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (lift-if)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst 2 "jj")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "jj = N-1")
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (inst + "N-1")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst + "N-1")
                            (("1" (expand "segment")
                              (("1"
                                (typepred
                                 "max(extend[nat, below[N], bool, FALSE]
                                                      ({j: below[N] | tt!1 >= flpl(j)`time}))")
                                (("1" (replace "jjname")
                                  (("1" (expand "extend")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "conflict_3D?")
          (("2" (skosimp*)
            (("2" (typepred "t!1")
              (("2" (name "newt" "seg_lh_bottom(flpl,to,T)(j!1) + t!1")
                (("2" (case "to<=newt AND newt<=to+T")
                  (("1" (flatten)
                    (("1" (inst + "newt")
                      (("1"
                        (case "(so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                   lh_start_position(flpl,to,T)(j!1)
                                                             + t!1 * (vo - velocity(flpl)(j!1)) = (so + (newt - to) * vo) - location_at(flpl)(newt)")
                        (("1"
                          (case "((so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                      lh_start_position(flpl,to,T)(j!1))`z
                                                                     + t!1 * (vo - velocity(flpl)(j!1))`z = so`z + newt * vo`z - location_at(flpl)(newt)`z - vo`z * to AND vect2((so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                           lh_start_position(flpl,to,T)(j!1))
                                                                     + t!1 * vect2(vo - velocity(flpl)(j!1)) = vect2((so + (newt - to) * vo) - location_at(flpl)(newt))")
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (hide 2)
                            (("2" (hide-all-but (-1 1))
                              (("2"
                                (name "slb1" "seg_lh_bottom(flpl,to,T)(j!1)")
                                (("2"
                                  (name "lsp"
                                        "lh_start_position(flpl,to,T)(j!1)")
                                  (("2"
                                    (name "sltop"
                                          "seg_lh_top(flpl,to,T)(j!1)")
                                    (("2"
                                      (name "loc1" "location_at(flpl)(newt)")
                                      (("2"
                                        (name "velc" "velocity(flpl)(j!1)")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (hide -7)
                            (("2" (hide -7)
                              (("2"
                                (case "t!1 < seg_lh_top(flpl,to,T)(j!1) - seg_lh_bottom(flpl,to,T)(j!1)")
                                (("1" (case "segment(flpl)(newt) = j!1")
                                  (("1" (expand "location_at")
                                    (("1" (replace -1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (name "pj" "segment(flpl)(newt)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (case
                                           "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (copy -3)
                                              (("1"
                                                (expand "segment" -1)
                                                (("1"
                                                  (typepred
                                                   "max(extend[nat, below[N], bool, FALSE]
                                              ({j: below[N] | newt >= flpl(j)`time}))")
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (expand "extend")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case "pj < 1+j!1")
                                                          (("1"
                                                            (inst - "j!1")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "flight_plan_ascending_time")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "flpl"
                                                               "pj"
                                                               "1+j!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "seg_lh_top(flpl,to,T)(j!1) <= flpl(j!1+1)`time AND seg_lh_bottom(flpl,to,T)(j!1) >= flpl(j!1)`time")
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "seg_lh_top" 1)
                                                (("2"
                                                  (expand "seg_lh_bottom" 1)
                                                  (("2"
                                                    (expand "min")
                                                    (("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "newt = seg_lh_top(flpl,to,T)(j!1)")
                                  (("1" (case "to+T < flpl(j!1+1)`time")
                                    (("1" (case "segment(flpl)(newt) = j!1")
                                      (("1"
                                        (expand "location_at")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "seg_lh_top(flpl,to,T)(j!1) = to+T")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "seg_lh_top" 1)
                                                  (("2"
                                                    (expand "min")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (name "pj" "segment(flpl)(newt)")
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (case
                                               "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (copy -3)
                                                  (("1"
                                                    (expand "segment" -1)
                                                    (("1"
                                                      (typepred
                                                       "max(extend[nat, below[N], bool, FALSE]
                                                  ({j: below[N] | newt >= flpl(j)`time}))")
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand "extend")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "pj < 1+j!1")
                                                              (("1"
                                                                (inst - "j!1")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "flight_plan_ascending_time")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "flpl"
                                                                   "pj"
                                                                   "1+j!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1)
                                                (("2"
                                                  (hide 3)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "newt = flpl(j!1+1)`time")
                                      (("1"
                                        (lemma "location_at_check")
                                        (("1"
                                          (inst - "flpl" "j!1+1")
                                          (("1"
                                            (replace -2 :dir rl)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand
                                                     "lh_start_position")
                                                    (("1"
                                                      (lemma "velocity_def")
                                                      (("1"
                                                        (inst - "flpl" "j!1")
                                                        (("1"
                                                          (name
                                                           "vel11"
                                                           "velocity(flpl)(j!1)")
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 4)
                                        (("2"
                                          (expand "seg_lh_top" -1)
                                          (("2"
                                            (expand "min")
                                            (("2"
                                              (lift-if)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3"
                            (case "seg_lh_bottom(flpl,to,T)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to,T)(j!1) <= end_time(flpl)")
                            (("1" (flatten) (("1" (assert) nil nil)) nil)
                             ("2" (hide 2)
                              (("2" (expand "seg_lh_bottom")
                                (("2" (expand "start_time")
                                  (("2" (expand "end_time")
                                    (("2" (expand "seg_lh_top")
                                      (("2"
                                        (lemma "flight_plan_ascending_time")
                                        (("2"
                                          (inst-cp - "flpl" "N-1" "1+j!1")
                                          (("2"
                                            (inst - "flpl" "j!1" "0")
                                            (("2"
                                              (expand "max")
                                              (("2"
                                                (expand "min")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (lift-if)
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2"
                          (case "seg_lh_bottom(flpl,to,T)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to,T)(j!1) <= end_time(flpl)")
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (hide 2)
                            (("2" (expand "seg_lh_bottom")
                              (("2" (expand "start_time")
                                (("2" (expand "end_time")
                                  (("2" (expand "seg_lh_top")
                                    (("2" (lemma "flight_plan_ascending_time")
                                      (("2"
                                        (inst-cp - "flpl" "N-1" "1+j!1")
                                        (("2"
                                          (inst - "flpl" "j!1" "0")
                                          (("2"
                                            (expand "max")
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (lift-if)
                                                  (("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (case "seg_lh_bottom(flpl,to,T)(j!1) >= to AND seg_lh_top(flpl,to,T)(j!1) <= to+T")
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (hide 3)
                      (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D vect_analysis)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (vz_distr_sub formula-decl nil vectors_3D vectors)
    (vz_scal formula-decl nil vectors_3D vectors)
    (vz_distr_add formula-decl nil vectors_3D vectors)
    (max const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}"
         finite_sets_minmax finite_sets)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (conflict_3D? const-decl "bool" cd3d nil))
   nil)
  (conflict_3D_rew-1 nil 3473074224 ("" (postpone) nil nil) nil shostak))
 (conflict_3D_flightplan_open_interval_TCC1 0
  (conflict_3D_flightplan_open_interval_TCC1-1 nil 3483460389
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (<= const-decl "bool" reals nil)
    (start_time const-decl "real" flightplan nil)
    (end_time const-decl "real" flightplan nil)
    (FlightTimes nonempty-type-eq-decl nil flightplan nil)
    (FlightTimesRelevant type-eq-decl nil cd3d_si nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (conflict_3D_flightplan_open_interval subtype
    "(number_fields.-)(cd3d_si.N, 1)" "below[N]")))
 (conflict_3D_flightplan_open_interval 0
  (conflict_3D_flightplan_open_interval-1 nil 3483369488
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "conflict_3D_rew")
          (("1" (inst?)
            (("1" (assert)
              (("1" (skosimp*)
                (("1" (name "lhb" "seg_lh_bottom(flpl, to)(j!1)")
                  (("1" (replace -1)
                    (("1" (name "lht" "seg_lh_top(flpl, to)(j!1)")
                      (("1" (replace -1)
                        (("1"
                          (lemma
                           "conflict_3D_on_open_interval[D, H, seg_lh_bottom(flpl, to)(j!1), seg_lh_top(flpl, to)(j!1)]")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1" (replace -2)
                                (("1" (replace -3)
                                  (("1" (skosimp*)
                                    (("1"
                                      (name "ttp" "topen!1 + flpl(j!1)`time")
                                      (("1"
                                        (case
                                         "NOT (start_time[N](flpl) <= flpl(j!1)`time + topen!1 AND
       flpl(j!1)`time + topen!1 <= end_time[N](flpl))")
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (case "topen!1 > 0")
                                            (("1"
                                              (expand "start_time")
                                              (("1"
                                                (lemma
                                                 "flight_plan_ascending_time")
                                                (("1"
                                                  (inst - "flpl" "j!1" "0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case "j!1 /= 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "end_time")
                                                          (("1"
                                                            (case
                                                             "flpl(j!1)`time + topen!1 < flpl(j!1+1)`time")
                                                            (("1"
                                                              (lemma
                                                               "flight_plan_ascending_time")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "flpl"
                                                                 "N-1"
                                                                 "j!1+1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "lht"
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "seg_lh_top"
                                                                   -6)
                                                                  (("2"
                                                                    (expand
                                                                     "min")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "end_time")
                                                            (("2"
                                                              (case
                                                               "flpl(j!1)`time + topen!1 < flpl(j!1+1)`time")
                                                              (("1"
                                                                (case
                                                                 "j!1+1 = N-1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "flight_plan_ascending_time")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "flpl"
                                                                     "N-1"
                                                                     "j!1+1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (expand
                                                                   "lht"
                                                                   -6)
                                                                  (("2"
                                                                    (expand
                                                                     "seg_lh_top"
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "lhb" -2)
                                                (("2"
                                                  (expand "seg_lh_bottom" -2)
                                                  (("2"
                                                    (expand "max")
                                                    (("2"
                                                      (lift-if)
                                                      (("2" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst + "ttp")
                                            (("1"
                                              (case "NOT B+to<ttp")
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (hide (-1 -2))
                                                  (("1"
                                                    (replace -1 1 :dir rl)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (expand "lht" -2)
                                                        (("1"
                                                          (expand "lhb" -1)
                                                          (("1"
                                                            (expand
                                                             "seg_lh_bottom"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "max"
                                                               -1)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case "NOT ttp < T+to")
                                                  (("1"
                                                    (hide (-2 -3))
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (expand "lht" -4)
                                                        (("1"
                                                          (expand
                                                           "seg_lh_top"
                                                           -4)
                                                          (("1"
                                                            (expand "min")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "(so + (flpl(j!1)`time - to) * vo) - flpl(j!1)`position +
                                             topen!1 * (vo - velocity(flpl)(j!1)) = (so + (ttp - to) * vo) - location_at(flpl)(ttp)")
                                                      (("1"
                                                        (case
                                                         "vect2((so + (flpl(j!1)`time - to) * vo) - flpl(j!1)`position) +
                                                 topen!1 * vect2(vo - velocity(flpl)(j!1)) = vect2((so + (ttp - to) * vo) - location_at(flpl)(ttp)) AND ((so + (flpl(j!1)`time - to) * vo) - flpl(j!1)`position)`z +
                                                 topen!1 * (vo - velocity(flpl)(j!1))`z = so`z - location_at(flpl)(ttp)`z - vo`z * to + ttp * vo`z")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               -11
                                                               -12
                                                               -16
                                                               -17)
                                                              (("1"
                                                                (expand
                                                                 "end_time")
                                                                (("1"
                                                                  (expand
                                                                   "start_time")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "flpl(j!1)`time + lht <= flpl(j!1+1)`time")
                                                                      (("1"
                                                                        (lemma
                                                                         flight_plan_ascending_time[N])
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           flpl
                                                                           "N-1"
                                                                           "j!1+1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "seg_lh_top")
                                                                        (("2"
                                                                          (expand
                                                                           "seg_lh_bottom")
                                                                          (("2"
                                                                            (expand
                                                                             "min")
                                                                            (("2"
                                                                              (expand
                                                                               "max")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (hide (-4 -5))
                                                            (("2"
                                                              (replace
                                                               -4
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (hide-all-but
                                                                 (-1 1))
                                                                (("2"
                                                                  (grind
                                                                   :exclude
                                                                   ("flpl"
                                                                    "position"
                                                                    "velocity"
                                                                    "location_at"
                                                                    "ttp"))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (replace -5 :dir rl)
                                                          (("2"
                                                            (expand
                                                             "location_at")
                                                            (("2"
                                                              (case
                                                               "segment(flpl)(flpl(j!1)`time + topen!1) = j!1")
                                                              (("1"
                                                                (replace -1)
                                                                (("1"
                                                                  (case
                                                                   "j!1 < N-1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (grind
                                                                         :exclude
                                                                         "velocity")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (lemma
                                                                   "segment_index")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "flpl"
                                                                     "j!1"
                                                                     "flpl(j!1)`time + topen!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "lht"
                                                                           -7)
                                                                          (("2"
                                                                            (expand
                                                                             "seg_lh_top"
                                                                             -7)
                                                                            (("2"
                                                                              (expand
                                                                               "min")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (replace -3 + :dir rl)
                                                (("2"
                                                  (expand "lhb" -4)
                                                  (("2"
                                                    (expand "lht" -5)
                                                    (("2"
                                                      (expand
                                                       "seg_lh_bottom"
                                                       -4)
                                                      (("2"
                                                        (expand
                                                         "seg_lh_top"
                                                         -5)
                                                        (("2"
                                                          (expand "max")
                                                          (("2"
                                                            (expand "min")
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "conflict_3D?")
          (("2" (inst + "tt!1") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((conflict_3D_rew formula-decl nil cd3d_si nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (seg_lh_bottom const-decl "nnreal" cd3d_si nil)
    (seg_lh_top const-decl "real" cd3d_si nil)
    (conflict_3D_on_open_interval formula-decl nil cd3d nil)
    (D formal-const-decl "posreal" cd3d_si nil)
    (H formal-const-decl "posreal" cd3d_si nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead nil)
    (location_at const-decl "Vect3" flightplan nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (segment const-decl "below[N]" flightplan nil)
    (segment_index formula-decl nil flightplan nil)
    (FlightTimes nonempty-type-eq-decl nil flightplan nil)
    (FlightTimesRelevant type-eq-decl nil cd3d_si nil)
    (ttp skolem-const-decl "real" cd3d_si nil)
    (flpl skolem-const-decl "FlightPlanRelevant(to)" cd3d_si nil)
    (to skolem-const-decl "real" cd3d_si nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (lhb skolem-const-decl "nnreal" cd3d_si nil)
    (/= const-decl "boolean" notequal nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (lht skolem-const-decl "real" cd3d_si nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (flight_plan_ascending_time formula-decl nil flightplan nil)
    (end_time const-decl "real" flightplan nil)
    (start_time const-decl "real" flightplan nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (velocity const-decl "Vect3" flightplan nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (conflict_3D? const-decl "bool" cd3d_si nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conflict_3D_rew_absolute_time_TCC1 0
  (conflict_3D_rew_absolute_time_TCC1-1 nil 3481469113
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (seg_lh_bottom const-decl "nnreal" cd3d_si nil)
    (seg_lh_top const-decl "real" cd3d_si nil))
   nil (conflict_3D_rew_absolute_time subtype "cd3d_si.lb" "nnreal")))
 (conflict_3D_rew_absolute_time_TCC2 0
  (conflict_3D_rew_absolute_time_TCC2-1 nil 3481469113
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (seg_lh_bottom const-decl "nnreal" cd3d_si nil)
    (seg_lh_top const-decl "real" cd3d_si nil))
   nil
   (conflict_3D_rew_absolute_time subtype "cd3d_si.ub"
    "{AB: real_types.posreal | reals.>(AB, cd3d_si.lb)}")))
 (conflict_3D_rew_absolute_time 0
  (conflict_3D_rew_absolute_time-1 nil 3481469114
   ("" (skeep)
    (("" (lemma "conflict_3D_rew")
      (("" (inst?)
        (("" (replace -1)
          (("" (hide -1)
            (("" (ground)
              (("1" (skeep -1)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (expand conflict_3D?)
                      (("1" (skeep -2)
                        (("1" (inst + "t+flpl(j)`time-to")
                          (("1" (assert)
                            (("1"
                              (case "NOT vect2(so -
                  (flpl(j)`position -
                    (flpl(j)`time - to) * velocity(flpl)(j)))
            + (flpl(j)`time - to + t) * vect2(vo - velocity(flpl)(j)) = vect2((so + (flpl(j)`time - to) * vo) - flpl(j)`position) +
           t * vect2(vo - velocity(flpl)(j))")
                              (("1" (hide-all-but 1)
                                (("1" (grind :exclude ("velocity")) nil nil))
                                nil)
                               ("2" (assert)
                                (("2"
                                  (case "NOT (so -
            (flpl(j)`position - (flpl(j)`time - to) * velocity(flpl)(j)))`z
           + flpl(j)`time * (vo - velocity(flpl)(j))`z
           + (vo - velocity(flpl)(j))`z * t
           - (vo - velocity(flpl)(j))`z * to=((so + (flpl(j)`time - to) * vo) - flpl(j)`position)`z +
           t * (vo - velocity(flpl)(j))`z")
                                  (("1" (hide-all-but 1)
                                    (("1" (grind :exclude ("velocity")) nil
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (typepred t)
                              (("2" (assert)
                                (("2" (expand "seg_lh_bottom")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep -1)
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (expand "conflict_3D?")
                      (("2" (skeep -2)
                        (("2" (inst + "t+to-flpl(j)`time")
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (grind :exclude ("velocity" "abs" "sqv" "sq"))
                                nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conflict_3D_rew formula-decl nil cd3d_si nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (conflict_3D? const-decl "bool" cd3d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (t skolem-const-decl
     "Lookahead[seg_lh_bottom(flpl, to)(j), seg_lh_top(flpl, to)(j)]" cd3d_si
     nil)
    (Lookahead type-eq-decl nil Lookahead nil)
    (seg_lh_top const-decl "real" cd3d_si nil)
    (seg_lh_bottom const-decl "nnreal" cd3d_si nil)
    (<= const-decl "bool" reals nil)
    (j skolem-const-decl "below[N - 1]" cd3d_si nil)
    (flpl skolem-const-decl "FlightPlanRelevant(to)" cd3d_si nil)
    (to skolem-const-decl "real" cd3d_si nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (velocity const-decl "Vect3" flightplan nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (cd3d_ind?_TCC1 0
  (cd3d_ind?_TCC1-1 nil 3472981403 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (seg_lh_bottom const-decl "nnreal" cd3d_si nil)
    (seg_lh_top const-decl "real" cd3d_si nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (velocity const-decl "Vect3" flightplan nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   nil (cd3d_ind? subtype "(number_fields.-)(cd3d_si.j, 1)" "below[N - 1]")))
 (cd3d_si?_TCC1 0
  (cd3d_si?_TCC1-1 nil 3472981403 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (cd3d_si? subtype "(number_fields.-)(cd3d_si.N, 2)" "below[N - 1]")))
 (cd3d_ind_correct 0
  (cd3d_ind_correct-1 nil 3473095354
   ("" (skeep)
    (("" (induct "i")
      (("1" (flatten)
        (("1" (inst + "0")
          (("1" (assert)
            (("1" (expand "cd3d_ind?")
              (("1" (flatten)
                (("1" (assert) (("1" (rewrite "cd3d") nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "cd3d_ind?" -3)
          (("2" (split -3)
            (("1" (flatten)
              (("1" (inst + "1+jb")
                (("1" (assert) (("1" (rewrite "cd3d") nil nil)) nil)) nil))
              nil)
             ("2" (assert)
              (("2" (skosimp*)
                (("2" (inst + "j!1") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (skeep) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
        nil)
       ("4" (assert) nil nil) ("5" (assert) nil nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (seg_lh_top const-decl "real" cd3d_si nil)
    (seg_lh_bottom const-decl "nnreal" cd3d_si nil)
    (flpl skolem-const-decl "FlightPlanRelevant(to)" cd3d_si nil)
    (to skolem-const-decl "real" cd3d_si nil)
    (vo skolem-const-decl "Vect3" cd3d_si nil)
    (so skolem-const-decl "Vect3" cd3d_si nil)
    (cd3d_ind? inductive-decl "bool" cd3d_si nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (D formal-const-decl "posreal" cd3d_si nil)
    (H formal-const-decl "posreal" cd3d_si nil)
    (conflict_3D? const-decl "bool" cd3d nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (velocity const-decl "Vect3" flightplan nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (>= const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cd3d formula-decl nil cd3d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   shostak))
 (cd3d_ind_complete 0
  (cd3d_ind_complete-1 nil 3473096278
   ("" (skeep)
    (("" (induct "i")
      (("1" (ground)
        (("1" (skolem -2 "jjj")
          (("1" (ground)
            (("1" (expand "cd3d_ind?")
              (("1" (rewrite "cd3d" :dir rl)
                (("1" (expand "conflict_3D?")
                  (("1" (skosimp*)
                    (("1" (inst + "t!1") (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (skosimp*)
          (("2" (expand "cd3d_ind?" 1)
            (("2" (flatten)
              (("2" (assert)
                (("2" (inst + "j!1")
                  (("2" (assert)
                    (("2" (case "j!1 = 1+jb")
                      (("1" (replace -1)
                        (("1" (rewrite "cd3d" :dir rl)
                          (("1" (expand "conflict_3D?")
                            (("1" (skosimp*)
                              (("1" (inst + "t!1") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skosimp*) (("3" (assert) nil nil)) nil) ("4" (assert) nil nil)
       ("5" (assert) nil nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (seg_lh_top const-decl "real" cd3d_si nil)
    (flpl skolem-const-decl "FlightPlanRelevant(to)" cd3d_si nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (to skolem-const-decl "real" cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (seg_lh_bottom const-decl "nnreal" cd3d_si nil)
    (nnreal type-eq-decl nil real_types nil)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (D formal-const-decl "posreal" cd3d_si nil)
    (H formal-const-decl "posreal" cd3d_si nil)
    (conflict_3D? const-decl "bool" cd3d nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (velocity const-decl "Vect3" flightplan nil)
    (cd3d_ind? inductive-decl "bool" cd3d_si nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (>= const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Lookahead type-eq-decl nil Lookahead nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (cd3d formula-decl nil cd3d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   shostak))
 (cd3d_si_correct 0
  (cd3d_si_correct-1 nil 3473096044
   ("" (skeep)
    (("" (expand "cd3d_si?")
      (("" (lemma "cd3d_ind_correct")
        (("" (inst - "so" "vo" "to" "flpl" "N-2")
          (("1" (assert)
            (("1" (lemma "conflict_3D_rew")
              (("1" (inst - "so" "vo" "to" "flpl") (("1" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((cd3d_si? const-decl "bool" cd3d_si nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (conflict_3D_rew formula-decl nil cd3d_si nil)
    (cd3d_ind_correct formula-decl nil cd3d_si nil))
   shostak))
 (cd3d_si_complete 0
  (cd3d_si_complete-1 nil 3473097139
   ("" (skeep)
    (("" (expand "cd3d_si?")
      (("" (lemma "cd3d_ind_complete")
        (("" (inst - "so" "vo" "to" "flpl" "N-2")
          (("1" (assert)
            (("1" (lemma "conflict_3D_rew")
              (("1" (inst - "so" "vo" "to" "flpl") (("1" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (cd3d_si? const-decl "bool" cd3d_si nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (N formal-const-decl "above[1]" cd3d_si nil)
    (above nonempty-type-eq-decl nil int_types nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FlightPlan nonempty-type-eq-decl nil flightplan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" cd3d_si nil)
    (T formal-const-decl "{AB: posreal | AB > B}" cd3d_si nil)
    (FlightPlanRelevant nonempty-type-eq-decl nil cd3d_si nil)
    (conflict_3D_rew formula-decl nil cd3d_si nil)
    (cd3d_ind_complete formula-decl nil cd3d_si nil))
   shostak)))


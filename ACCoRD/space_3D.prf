(space_3D
 (conflict_symm 0
  (conflict_symm-1 nil 3471198645
   ("" (skeep)
    (("" (case "FORALL (s,v) : conflict?(s,v) IMPLIES conflict?(-s,-v)")
      (("1" (split)
        (("1" (flatten)
          (("1" (inst -2 "-s" "-v") (("1" (assert) nil nil)) nil)) nil)
         ("2" (inst? -1) nil nil))
        nil)
       ("2" (hide 2)
        (("2" (skolem 1 ("sp" "vp"))
          (("2" (flatten)
            (("2" (expand "conflict?")
              (("2" (skeep -1)
                (("2" (inst 1 "nnt")
                  (("2" (split 1)
                    (("1" (hide -2) (("1" (grind) nil nil)) nil)
                     ("2" (hide -1) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (conflict? const-decl "bool" space_3D nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (neg_neg formula-decl nil vectors_3D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conflict_ever 0
  (conflict_ever-1 nil 3470158403
   ("" (skeep)
    (("" (expand* "conflict?" "conflict_ever?")
      (("" (skeep -1) (("" (inst? 1) (("" (assert) nil nil)) nil)) nil)) nil))
    nil)
   ((conflict_ever? const-decl "bool" space_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (conflict? const-decl "bool" space_3D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_nz_pos application-judgement "posreal" sq reals))
   nil))
 (conflict_ever_shift 0
  (conflict_ever_shift-1 nil 3470158447
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "conflict_ever?")
          (("1" (skolem -1 "tt")
            (("1" (inst 1 "tt-t")
              (("1" (flatten)
                (("1" (split)
                  (("1" (hide -2)
                    (("1" (expand* "+" "*") (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (rewrite "vect2_add")
                      (("2" (rewrite "vect2_scal")
                        (("2"
                          (case-replace
                           "vect2(s) + tt * vect2(v) = vect2(s) + t * vect2(v) + (tt - t) * vect2(v)")
                          (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "conflict_ever?")
          (("2" (skolem -1 "tt")
            (("2" (inst 1 "tt+t")
              (("2" (flatten)
                (("2" (split)
                  (("1" (hide -2)
                    (("1" (expand* "+" "*") (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (hide -1)
                    (("2"
                      (case-replace
                       "vect2(s + t * v) + tt * vect2(v) = vect2(s) + (tt + t) * vect2(v)")
                      (("2" (hide-all-but 1)
                        (("2" (rewrite "vect2_add")
                          (("2" (rewrite "vect2_scal") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (conflict_ever? const-decl "bool" space_3D nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
   nil))
 (conflict_sum_closed 0
  (conflict_sum_closed-3 "" 3790108099
   ("" (skeep)
    (("" (expand "conflict?")
      (("" (skosimp*)
        (("" (case "nnt!1 = 0 and nnt!2 = 0")
          (("1" (flatten)
            (("1" (inst + "0")
              (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (name "tt" "nnt!2/(nnt!1 + nnt!2)")
            (("1" (label "ttname" -1)
              (("1" (case "0<=tt AND tt<=1")
                (("1" (flatten)
                  (("1" (name "newt" "(nnt!1*nnt!2)/(nnt!1 + nnt!2)")
                    (("1" (label "newtname" -1)
                      (("1" (case "tt*nnt!1 = newt AND (1-tt)*nnt!2 = newt")
                        (("1" (flatten)
                          (("1" (label "newttt" -1)
                            (("1" (label "newtomtt" -2)
                              (("1" (inst + "newt")
                                (("1"
                                  (name "VV" "vect2(s) + nnt!1 * vect2(v)")
                                  (("1" (label "vvname" -1)
                                    (("1"
                                      (name
                                       "WW"
                                       "vect2(s) + nnt!2 * vect2(w)")
                                      (("1"
                                        (label "wwname" -1)
                                        (("1"
                                          (name "VVz" "s`z + nnt!1 * v`z")
                                          (("1"
                                            (label "vvzname" -1)
                                            (("1"
                                              (name "WWz" "s`z + nnt!2 * w`z")
                                              (("1"
                                                (label "wwzname" -1)
                                                (("1"
                                                  (name "VVt" "s+nnt!1*v")
                                                  (("1"
                                                    (label "vvtname" -1)
                                                    (("1"
                                                      (name "WWt" "s+nnt!2*w")
                                                      (("1"
                                                        (label "wwtname" -1)
                                                        (("1"
                                                          (replace "wwzname")
                                                          (("1"
                                                            (replace
                                                             "vvzname")
                                                            (("1"
                                                              (replace
                                                               "wwname")
                                                              (("1"
                                                                (replace
                                                                 "vvname")
                                                                (("1"
                                                                  (lemma
                                                                   "horiz_dist_convex_scaf")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "VVt"
                                                                     "WWt-VVt")
                                                                    (("1"
                                                                      (case
                                                                       "s`z + newt * (v + w)`z = tt*VVz + (1-tt)*WWz AND vect2(s) + newt * vect2(v + w) = tt*VV+(1-tt)*WW")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (label
                                                                           "zfin"
                                                                           -1)
                                                                          (("1"
                                                                            (label
                                                                             "vectfin"
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               "zfin")
                                                                              (("1"
                                                                                (replace
                                                                                 "vectfin")
                                                                                (("1"
                                                                                  (case
                                                                                   "convex?(LAMBDA (t): abs(t)-H)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "convex_wtd_av_lt")
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -
                                                                                         "0"
                                                                                         "LAMBDA (t): abs(t) - H"
                                                                                         "VVz"
                                                                                         "WWz")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "0"
                                                                                           "LAMBDA (t): horiz_dist_scaf(VVt)(t, WWt - VVt)"
                                                                                           "0"
                                                                                           "1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "horiz_dist_scaf"
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "horiz_dist_scaf"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "vect2(VVt) = VV AND vect2(VVt)+vect2(WWt-VVt) = WW")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "tt")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "tt")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "horiz_dist_scaf")
                                                                                                                (("1"
                                                                                                                  (case-replace
                                                                                                                   "vect2(VVt) + (1 - tt) * vect2(WWt - VVt) = tt * VV + (1 - tt) * WW")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       ("vvtname"
                                                                                                        "vvname"
                                                                                                        "wwtname"
                                                                                                        "wwname"
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         "wwtname"
                                                                                                         +
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           "vvtname"
                                                                                                           +
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             "vvname"
                                                                                                             +
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               "wwname"
                                                                                                               +
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "vect2_add")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "vect2_sub")
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "vect2_add")
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "vect2_add")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "vect2_scal")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "vect2_scal")
                                                                                                                          (("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "abs_linear_convex")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "H"
                                                                                       "0"
                                                                                       "1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         "vvname"
                                                                         +
                                                                         rl)
                                                                        (("2"
                                                                          (replace
                                                                           "wwname"
                                                                           +
                                                                           rl)
                                                                          (("2"
                                                                            (replace
                                                                             "vvzname"
                                                                             +
                                                                             rl)
                                                                            (("2"
                                                                              (replace
                                                                               "wwzname"
                                                                               +
                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   (2
                                                                                    3
                                                                                    4
                                                                                    5))
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (copy
                                                                                       "newtomtt")
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -1
                                                                                         "w`z")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 "newttt"
                                                                                                 +
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "vz_distr_add")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       ("newttt"
                                                                                        "newtomtt"
                                                                                        1))
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lemma "nnreal_div_posreal_is_nnreal")
                                  (("2"
                                    (inst - "(nnt!1*nnt!2)" "nnt!1 + nnt!2")
                                    (("1" (hide-all-but (-1 "newtname" 1))
                                      (("1" (grind) nil nil)) nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace "newtname" + rl)
                          (("2" (replace "ttname" + rl)
                            (("2" (hide-all-but (1 2))
                              (("2" (ground) (("2" (field 2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "nnreal_div_posreal_is_nnreal")
                  (("2" (inst - "nnt!2" "nnt!1 + nnt!2")
                    (("1" (replace "ttname" -)
                      (("1" (assert)
                        (("1" (replace "ttname" + rl)
                          (("1" (cross-mult 1) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (conflict_sum_closed-2 nil 3467454344
   ("" (skeep)
    (("" (expand "conflict?")
      (("" (skosimp*)
        (("" (case "nnt!1 = 0 and nnt!2 = 0")
          (("1" (flatten)
            (("1" (inst + "0")
              (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (name "tt" "nnt!2/(nnt!1 + nnt!2)")
            (("1" (label "ttname" -1)
              (("1" (case "0<=tt AND tt<=1")
                (("1" (flatten)
                  (("1" (name "newt" "(nnt!1*nnt!2)/(nnt!1 + nnt!2)")
                    (("1" (label "newtname" -1)
                      (("1" (case "tt*nnt!1 = newt AND (1-tt)*nnt!2 = newt")
                        (("1" (flatten)
                          (("1" (label "newttt" -1)
                            (("1" (label "newtomtt" -2)
                              (("1" (inst + "newt")
                                (("1"
                                  (name "VV" "vect2(s) + nnt!1 * vect2(v)")
                                  (("1" (label "vvname" -1)
                                    (("1"
                                      (name
                                       "WW"
                                       "vect2(s) + nnt!2 * vect2(w)")
                                      (("1"
                                        (label "wwname" -1)
                                        (("1"
                                          (name "VVz" "s`z + nnt!1 * v`z")
                                          (("1"
                                            (label "vvzname" -1)
                                            (("1"
                                              (name "WWz" "s`z + nnt!2 * w`z")
                                              (("1"
                                                (label "wwzname" -1)
                                                (("1"
                                                  (name "VVt" "s+nnt!1*v")
                                                  (("1"
                                                    (label "vvtname" -1)
                                                    (("1"
                                                      (name "WWt" "s+nnt!2*w")
                                                      (("1"
                                                        (label "wwtname" -1)
                                                        (("1"
                                                          (replace "wwzname")
                                                          (("1"
                                                            (replace
                                                             "vvzname")
                                                            (("1"
                                                              (replace
                                                               "wwname")
                                                              (("1"
                                                                (replace
                                                                 "vvname")
                                                                (("1"
                                                                  (lemma
                                                                   "horiz_dist_convex_scaf")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "VVt"
                                                                     "WWt-VVt")
                                                                    (("1"
                                                                      (case
                                                                       "s`z + newt * (v + w)`z = tt*VVz + (1-tt)*WWz AND vect2(s) + newt * vect2(v + w) = tt*VV+(1-tt)*WW")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (label
                                                                           "zfin"
                                                                           -1)
                                                                          (("1"
                                                                            (label
                                                                             "vectfin"
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               "zfin")
                                                                              (("1"
                                                                                (replace
                                                                                 "vectfin")
                                                                                (("1"
                                                                                  (case
                                                                                   "convex?(LAMBDA (t): abs(t)-H)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "convex_wtd_av_lt")
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -
                                                                                         "0"
                                                                                         "LAMBDA (t): abs(t) - H"
                                                                                         "VVz"
                                                                                         "WWz")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "0"
                                                                                           "LAMBDA (t): horiz_dist_scaf(VVt)(t, WWt - VVt)"
                                                                                           "0"
                                                                                           "1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "horiz_dist_scaf"
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "horiz_dist_scaf"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "vect2(VVt) = VV AND vect2(VVt)+vect2(WWt-VVt) = WW")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "tt")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "tt")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "horiz_dist_scaf")
                                                                                                                (("1"
                                                                                                                  (case-replace
                                                                                                                   "vect2(VVt) + (1 - tt) * vect2(WWt - VVt) = tt * VV + (1 - tt) * WW")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       ("vvtname"
                                                                                                        "vvname"
                                                                                                        "wwtname"
                                                                                                        "wwname"
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         "wwtname"
                                                                                                         +
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           "vvtname"
                                                                                                           +
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             "vvname"
                                                                                                             +
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               "wwname"
                                                                                                               +
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "vect2_add")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "vect2_sub")
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "vect2_add")
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "vect2_add")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "vect2_scal")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "vect2_scal")
                                                                                                                          (("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "abs_linear_convex")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "H"
                                                                                       "0"
                                                                                       "1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         "vvname"
                                                                         +
                                                                         rl)
                                                                        (("2"
                                                                          (replace
                                                                           "wwname"
                                                                           +
                                                                           rl)
                                                                          (("2"
                                                                            (replace
                                                                             "vvzname"
                                                                             +
                                                                             rl)
                                                                            (("2"
                                                                              (replace
                                                                               "wwzname"
                                                                               +
                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   (2
                                                                                    3
                                                                                    4
                                                                                    5))
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (copy
                                                                                       "newtomtt")
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -1
                                                                                         "w`z")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 "newttt"
                                                                                                 +
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "vz_distr_add")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       ("newttt"
                                                                                        "newtomtt"
                                                                                        1))
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lemma "nnreal_div_posreal_is_nnreal")
                                  (("2"
                                    (inst - "(nnt!1*nnt!2)" "nnt!1 + nnt!2")
                                    (("1" (hide-all-but (-1 "newtname" 1))
                                      (("1" (grind) nil nil)) nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace "newtname" + rl)
                          (("2" (replace "ttname" + rl)
                            (("2" (hide-all-but (1 2))
                              (("2" (ground) (("2" (field 2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "nnreal_div_posreal_is_nnreal")
                  (("2" (inst - "nnt!2" "nnt!1 + nnt!2")
                    (("1" (replace "ttname" -)
                      (("1" (assert)
                        (("1" (replace "ttname" + rl)
                          (("1" (cross-mult 1) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (conflict? const-decl "bool" space_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_div_posreal_is_nnreal judgement-tcc nil real_types nil)
    (nnt!2 skolem-const-decl "nnreal" space_3D nil)
    (nnt!1 skolem-const-decl "nnreal" space_3D nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (horiz_dist_convex_scaf formula-decl nil horizontal_dist_convexity nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" space_3D nil)
    (convex? const-decl "bool" convex_functions reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (H formal-const-decl "posreal" space_3D nil)
    (convex_wtd_av_lt formula-decl nil convex_functions reals)
    (horiz_dist_scaf const-decl "real" horizontal_dist_convexity nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (vect2_sub formula-decl nil vect_3D_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs_linear_convex formula-decl nil convex_functions reals)
    (vz_distr_add formula-decl nil vectors_3D vectors)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (- const-decl "Vector" vectors_3D vectors)
    (newt skolem-const-decl "real" space_3D nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil)
  (conflict_sum_closed-1 nil 3467382877
   ("" (skeep)
    (("" (expand "conflict?")
      (("" (skolem -1 "ntt1")
        (("" (skolem -2 "ntt2")
          (("" (flatten)
            (("" (rewrite "vect2_add") (("" (postpone) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (conflict_is_an_open_set 0
  (conflict_is_an_open_set-1 nil 3566319824
   ("" (skeep)
    (("" (expand "conflict?" -1)
      (("" (skosimp*)
        (("" (label "underH" -1)
          (("" (label "underD" -2)
            (("" (case "nnt!1 /= 0")
              (("1" (flatten)
                (("1" (name "del1" "H - abs(ss`z + nnt!1 * vv`z)")
                  (("1" (label "del1name" -1)
                    (("1"
                      (name "del2" "D - norm(vect2(ss) + nnt!1 * vect2(vv))")
                      (("1" (label "del2name" -1)
                        (("1" (case "del2 > 0")
                          (("1" (label "del2pos" -1)
                            (("1" (hide "del2pos")
                              (("1" (name "delta" "min(del1,del2)")
                                (("1" (label "deltaname" -1)
                                  (("1" (inst + "delta/(2*nnt!1)")
                                    (("1" (skeep 2)
                                      (("1"
                                        (case
                                         "norm(ww) >= abs(ww`z) AND norm(ww) >= norm(vect2(ww))")
                                        (("1"
                                          (label "normlem" -1)
                                          (("1"
                                            (hide "normlem")
                                            (("1"
                                              (expand "conflict?")
                                              (("1"
                                                (inst + "nnt!1")
                                                (("1"
                                                  (split 2)
                                                  (("1"
                                                    (lemma "triangle")
                                                    (("1"
                                                      (rewrite "vz_distr_add")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "ss`z + vv`z*nnt!1"
                                                           "ww`z*nnt!1")
                                                          (("1"
                                                            (case
                                                             "abs(ww`z*nnt!1) < del1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (rewrite
                                                                 "abs_mult")
                                                                (("2"
                                                                  (case
                                                                   "abs(nnt!1) = nnt!1")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (reveal
                                                                       "normlem")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (div-by
                                                                           1
                                                                           "nnt!1")
                                                                          (("1"
                                                                            (case
                                                                             "del1 / nnt!1 >= delta / (2 * nnt!1)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                (("2"
                                                                                  (div-by
                                                                                   1
                                                                                   "nnt!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "norm(vect2(ss) + nnt!1 * vect2(vv + ww)) < D")
                                                    (("1"
                                                      (lemma "sq_lt")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "vectors_2D.sqrt_sqv_norm")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "vect2_add")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (rewrite "vect2_add")
                                                        (("2"
                                                          (lemma
                                                           "vectors_2D.norm_add_le")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "vect2(ss) + nnt!1*vect2(vv)"
                                                             "nnt!1*vect2(ww)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "norm(nnt!1 * vect2(ww)) + norm(vect2(ss) + nnt!1 * vect2(vv)) < D")
                                                                (("1"
                                                                  (case
                                                                   "vect2(ss) + nnt!1 * vect2(vv) + nnt!1 * vect2(ww) = vect2(ss) + nnt!1 * (vect2(vv) + vect2(ww))")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "norm(nnt!1*vect2(ww)) < del2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "norm_scal")
                                                                        (("2"
                                                                          (case
                                                                           "abs(nnt!1) = nnt!1")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (div-by
                                                                               1
                                                                               "nnt!1")
                                                                              (("1"
                                                                                (case
                                                                                 "del2 / nnt!1 >= delta/(2*nnt!1)")
                                                                                (("1"
                                                                                  (reveal
                                                                                   "normlem")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    (("2"
                                                                                      (div-by
                                                                                       1
                                                                                       "nnt!1")
                                                                                      (("2"
                                                                                        (case
                                                                                         "2*del2 >= delta")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "del2 > 0")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              "deltaname"
                                                                                              1))
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             "del2name"
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               ("underD"
                                                                                                1))
                                                                                              (("2"
                                                                                                (case
                                                                                                 "sqv(vect2(ss) + nnt!1 * vect2(vv)) = sq(norm(vect2(ss) + nnt!1 * vect2(vv)))")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "sq_lt")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (name
                                                                                                     "cvect1"
                                                                                                     "vect2(ss) + nnt!1 * vect2(vv)")
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "norm")
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "sq_sqrt")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "abs")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "norm")
                                              (("1"
                                                (expand "sqv")
                                                (("1"
                                                  (lemma "sq_ge")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (expand "sq" 1 2)
                                                            (("1"
                                                              (lemma
                                                               "sqrt_ge")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "ww`x * ww`x + ww`y * ww`y + ww`z * ww`z"
                                                                 "ww`z*ww`z")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "sqv(ww)")
                                                      (("2"
                                                        (expand "sqv")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "norm")
                                              (("2"
                                                (expand "sqv")
                                                (("2"
                                                  (lemma "sqrt_ge")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "sqv(vect2(ww))")
                                                      (("2"
                                                        (expand "sqv")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred "sqv(ww)")
                                                      (("3"
                                                        (expand "sqv")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "delta /( 2*nnt!1) > 0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (cross-mult 1)
                                          (("2"
                                            (reveal "del2pos")
                                            (("2"
                                              (case
                                               "delta = del1 or delta = del2")
                                              (("1" (ground) nil nil)
                                               ("2"
                                                (hide-all-but ("deltaname" 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "sq_lt")
                            (("2"
                              (inst - "norm(vect2(ss) + nnt!1 * vect2(vv))"
                               "D")
                              (("2" (assert)
                                (("2"
                                  (name "cvect3"
                                        "vect2(ss) + nnt!1 * vect2(vv)")
                                  (("2" (replace -1)
                                    (("2"
                                      (case "sqv(cvect3) = sq(norm(cvect3))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (lemma "vectors_2D.sqrt_sqv_norm")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (replace -1 :dir rl)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (lemma "sq_sqrt")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (split -1)
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (replace -1)
                  (("2" (assert)
                    (("2" (inst + "1")
                      (("2" (skeep)
                        (("2" (expand "conflict?")
                          (("2" (inst + "0") (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (conflict? const-decl "bool" space_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (H formal-const-decl "posreal" space_3D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (D formal-const-decl "posreal" space_3D nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "real" vectors_2D vectors) (sq_ge formula-decl nil sq reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq_abs formula-decl nil sq reals) (sqrt_ge formula-decl nil sqrt reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (ww skolem-const-decl "Vect3" space_3D nil)
    (* const-decl "real" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (vz_distr_add formula-decl nil vectors_3D vectors)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (triangle formula-decl nil real_props nil)
    (norm_add_le formula-decl nil vectors_2D vectors)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm_scal formula-decl nil vectors_2D vectors)
    (sq_lt formula-decl nil sq reals)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (sq_sqrt formula-decl nil sqrt reals)
    (sqrt_sqv_norm formula-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (norm const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (delta skolem-const-decl "{p: real | p <= del1 AND p <= del2}" space_3D
     nil)
    (del2 skolem-const-decl "real" space_3D nil)
    (del1 skolem-const-decl "real" space_3D nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nnt!1 skolem-const-decl "nnreal" space_3D nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors))
   nil))
 (vertical_horizontal_conflict 0
  (vertical_horizontal_conflict-1 nil 3432042079
   ("" (skeep)
    (("" (expand "conflict?")
      (("" (skeep -1)
        (("" (split)
          (("1" (expand "vertical_conflict?") (("1" (inst? 1) nil nil)) nil)
           ("2" (expand "horizontal_conflict?") (("2" (inst? 1) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (conflict? const-decl "bool" space_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vertical_conflict? const-decl "bool" vertical nil)
    (horizontal_conflict? const-decl "bool" horizontal nil))
   shostak))
 (neg_spz 0
  (neg_spz-1 nil 3451660364 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (H formal-const-decl "posreal" space_3D nil)
    (Spz_vect3 type-eq-decl nil space_3D nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "Vector" vectors_3D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil (neg_spz subtype "(vectors_3D.-)(space_3D.spz)" "Spz_vect3")))
 (neg_sp2 0
  (neg_sp2-1 nil 3471185533 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" space_3D nil)
    (Sp2_vect3 type-eq-decl nil space_3D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (- const-decl "Vector" vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (neg_sp2 subtype "(vectors_3D.-)(space_3D.sp2)" "Sp2_vect3")))
 (neg_sp 0
  (neg_sp-1 nil 3471185533 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (H formal-const-decl "posreal" space_3D nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (D formal-const-decl "posreal" space_3D nil)
    (Sp_vect3 type-eq-decl nil space_3D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_3D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (neg_sp subtype "(vectors_3D.-)(space_3D.sp)" "Sp_vect3")))
 (spv2 0
  (spv2-1 nil 3471198643 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" space_3D nil)
    (Sp2_vect3 type-eq-decl nil space_3D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (spv2 subtype "vect_3D_2D.vect2(space_3D.sp2)" "Sp_vect2[D]")))
 (ssv2 0
  (ssv2-1 nil 3432553796 ("" (skosimp :preds? t) nil nil)
   ((Ss2_vect3 type-eq-decl nil space_3D nil)
    (D formal-const-decl "posreal" space_3D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (ssv2 subtype "vect_3D_2D.vect2(space_3D.ss2)" "Ss_vect2[D]")))
 (sp_nzv 0
  (sp_nzv-1 nil 3466172996 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (H formal-const-decl "posreal" space_3D nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (D formal-const-decl "posreal" space_3D nil)
    (Sp_vect3 type-eq-decl nil space_3D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (* const-decl "real" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (zero const-decl "Vector" vectors_3D vectors))
   nil (sp_nzv subtype "space_3D.x" "Nz_vect3")))
 (verticalCoordinationConflict_TCC1 0
  (verticalCoordinationConflict_TCC1-1 nil 3470498979
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (zero const-decl "Vector" vectors_3D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (verticalCoordinationConflict subtype
    "(number_fields.-)(sq.sq(space_3D.b), number_fields.*(space_3D.a, space_3D.c))"
    "nnreal")))
 (verticalCoordinationConflict_asymm 0
  (verticalCoordinationConflict_asymm-3 "" 3790108104
   ("" (skeep)
    (("" (expand "verticalCoordinationConflict")
      (("" (rewrite "vz_neg")
        (("" (rewrite "vect2_neg")
          (("" (rewrite "vect2_neg")
            (("" (rewrite "sqv_neg")
              (("" (rewrite "sqv_neg")
                (("" (rewrite "neg_dot_neg")
                  (("" (rewrite "vz_neg")
                    (("" (rewrite "sqv_eq_0" :dir rl)
                      (("" (rewrite "sqv_eq_0" :dir rl)
                        ((""
                          (case "v`z = 0 OR
                vect2(v) = zero OR
                 sq(vect2(s) * vect2(v)) + sq(D) * sqv(vect2(v)) -
                  sqv(vect2(s)) * sqv(vect2(v))
                  < 0
                  OR
                  eq(v`z,
                     sq(vect2(s) * vect2(v)) + sq(D) * sqv(vect2(v)) -
                      sqv(vect2(s)) * sqv(vect2(v)),
                     s`z * sqv(vect2(v)) - v`z * (vect2(s) * vect2(v)))")
                          (("1" (replace -1)
                            (("1" (case "sqv(s) = 0")
                              (("1" (assert)
                                (("1" (hide -2)
                                  (("1" (lemma "break_symmetry_neg")
                                    (("1" (inst - "v")
                                      (("1"
                                        (lemma "vectors_3D.sqv_eq_0")
                                        (("1"
                                          (inst - "s")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (replace 1)
                                (("2" (lift-if)
                                  (("2" (case "s /= zero")
                                    (("1" (flatten)
                                      (("1"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "break_symmetry_neg")
                                            (("1"
                                              (inst - "s")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split -)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replace -1)
                                              (("2" (assert) nil nil))
                                              nil)
                                             ("3" (propax) nil nil)
                                             ("4"
                                              (lemma "eq_neg")
                                              (("4"
                                                (inst?)
                                                (("1" (assert) nil nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (flatten)
                                      (("2"
                                        (replace -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (case "gt(v`z,
                  sq(vect2(s) * vect2(v)) + sq(D) * sqv(vect2(v)) -
                   sqv(vect2(s)) * sqv(vect2(v)),
                  s`z * sqv(vect2(v)) - v`z * (vect2(s) * vect2(v)))")
                                (("1" (replace -1)
                                  (("1" (lift-if)
                                    (("1" (split +)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (case "s /= zero")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma "vectors_3D.sqv_eq_0")
                                              (("1"
                                                (inst - "s")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "break_symmetry_neg")
                                                  (("2" (inst - "v") nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split +)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (hide-all-but (-1 4))
                                                (("1"
                                                  (expand "zero")
                                                  (("1" (grind) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "eq_neg")
                                                (("2"
                                                  (inst?)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (rewrite "eq_correct_1")
                                              (("2"
                                                (rewrite "eq_correct_1")
                                                (("2"
                                                  (rewrite "gt_correct_1")
                                                  (("2"
                                                    (rewrite "gt_correct_1")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replace 1)
                                  (("2" (case "s = zero")
                                    (("1" (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "break_symmetry_neg")
                                          (("1" (inst - "v") nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1)
                                      (("2"
                                        (lemma "vectors_3D.sqv_eq_0")
                                        (("2"
                                          (inst - "s")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (hide-all-but (-1 6))
                                                        (("1"
                                                          (expand "zero")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma "eq_neg")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split +)
                                                      (("1" (propax) nil nil)
                                                       ("2"
                                                        (rewrite
                                                         "eq_correct_1")
                                                        (("2"
                                                          (rewrite
                                                           "gt_correct_1")
                                                          (("2"
                                                            (rewrite
                                                             "eq_correct_1")
                                                            (("2"
                                                              (rewrite
                                                               "gt_correct_1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert)
                            (("3" (flatten)
                              (("3" (lift-if)
                                (("3" (lift-if) (("3" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (verticalCoordinationConflict_asymm-2 "" 3504835285
   ("" (skeep)
    (("" (expand "verticalCoordinationConflict")
      (("" (rewrite "vz_neg")
        (("" (rewrite "vect2_neg")
          (("" (rewrite "vect2_neg")
            (("" (rewrite "sqv_neg")
              (("" (rewrite "sqv_neg")
                (("" (rewrite "neg_dot_neg")
                  (("" (rewrite "vz_neg")
                    (("" (rewrite "sqv_eq_0" :dir rl)
                      (("" (rewrite "sqv_eq_0" :dir rl)
                        ((""
                          (case "v`z = 0 OR
                vect2(v) = zero OR
                 sq(vect2(s) * vect2(v)) + sq(D) * sqv(vect2(v)) -
                  sqv(vect2(s)) * sqv(vect2(v))
                  < 0
                  OR
                  eq(v`z,
                     sq(vect2(s) * vect2(v)) + sq(D) * sqv(vect2(v)) -
                      sqv(vect2(s)) * sqv(vect2(v)),
                     s`z * sqv(vect2(v)) - v`z * (vect2(s) * vect2(v)))")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1" (case "sqv(s) = 0")
                                (("1" (assert)
                                  (("1" (hide -2)
                                    (("1" (lemma "break_symmetry_neg")
                                      (("1"
                                        (inst - "v")
                                        (("1"
                                          (lemma "vectors_3D.sqv_eq_0")
                                          (("1"
                                            (inst - "s")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replace 1)
                                  (("2" (lift-if)
                                    (("2" (case "s /= zero")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split +)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma "break_symmetry_neg")
                                              (("1"
                                                (inst - "s")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replace -1)
                                                (("2" (assert) nil nil))
                                                nil)
                                               ("3" (propax) nil nil)
                                               ("4"
                                                (lemma "eq_neg")
                                                (("4"
                                                  (inst?)
                                                  (("1" (assert) nil nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (case "gt(v`z,
                  sq(vect2(s) * vect2(v)) + sq(D) * sqv(vect2(v)) -
                   sqv(vect2(s)) * sqv(vect2(v)),
                  s`z * sqv(vect2(v)) - v`z * (vect2(s) * vect2(v)))")
                                (("1" (replace -1)
                                  (("1" (lift-if)
                                    (("1" (split +)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (case "s /= zero")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma "vectors_3D.sqv_eq_0")
                                              (("1"
                                                (inst - "s")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "break_symmetry_neg")
                                                  (("2" (inst - "v") nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split +)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (hide-all-but (-1 4))
                                                (("1"
                                                  (expand "zero")
                                                  (("1" (grind) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "eq_neg")
                                                (("2"
                                                  (inst?)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (rewrite "eq_correct_1")
                                              (("2"
                                                (rewrite "eq_correct_1")
                                                (("2"
                                                  (rewrite "gt_correct_1")
                                                  (("2"
                                                    (rewrite "gt_correct_1")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replace 1)
                                  (("2" (case "s = zero")
                                    (("1" (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "break_symmetry_neg")
                                          (("1" (inst - "v") nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1)
                                      (("2"
                                        (lemma "vectors_3D.sqv_eq_0")
                                        (("2"
                                          (inst - "s")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (hide-all-but (-1 6))
                                                        (("1"
                                                          (expand "zero")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma "eq_neg")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split +)
                                                      (("1" (propax) nil nil)
                                                       ("2"
                                                        (rewrite
                                                         "eq_correct_1")
                                                        (("2"
                                                          (rewrite
                                                           "gt_correct_1")
                                                          (("2"
                                                            (rewrite
                                                             "eq_correct_1")
                                                            (("2"
                                                              (rewrite
                                                               "gt_correct_1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert)
                            (("3" (flatten)
                              (("3" (lift-if)
                                (("3" (lift-if) (("3" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (verticalCoordinationConflict const-decl "Sign" space_3D nil)
    (vect2_neg formula-decl nil vect_3D_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv_neg formula-decl nil vectors_2D vectors)
    (neg_dot_neg formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (sqv_eq_0 formula-decl nil vectors_3D vectors)
    (sqv_neg formula-decl nil vectors_3D vectors)
    (eq const-decl "bool" sqrt reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" space_3D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (v skolem-const-decl "Vect3" space_3D nil)
    (break_symmetry_neg formula-decl nil definitions_3D nil)
    (sign_neg_clos application-judgement "Sign" sign reals)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (eq_neg formula-decl nil sqrt reals)
    (neg_zero formula-decl nil vectors_2D vectors)
    (s skolem-const-decl "Vect3" space_3D nil)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (sq_0 formula-decl nil sq reals)
    (dot_zero_left formula-decl nil vectors_2D vectors)
    (vect2_zero formula-decl nil vect_3D_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (eq_correct_1 formula-decl nil sqrt reals)
    (gt_correct_1 formula-decl nil sqrt reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (gt const-decl "bool" sqrt reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (vz_neg formula-decl nil vectors_3D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors))
   shostak)
  (verticalCoordinationConflict_asymm-1 nil 3470395632
   ("" (skeep)
    (("" (expand "verticalCoordinationConflict")
      (("" (rewrite "vz_neg")
        (("" (rewrite "vect2_neg")
          (("" (rewrite "vect2_neg")
            (("" (rewrite "sqv_neg")
              (("" (rewrite "sqv_neg")
                (("" (rewrite "neg_dot_neg")
                  (("" (rewrite "vz_neg")
                    (("" (rewrite "sqv_eq_0" :dir rl)
                      (("" (rewrite "sqv_eq_0" :dir rl)
                        (("" (lift-if)
                          (("" (lift-if)
                            (("" (assert)
                              (("" (split +)
                                (("1" (flatten)
                                  (("1" (split +)
                                    (("1" (hide -1)
                                      (("1"
                                        (lemma "break_symmetry_neg")
                                        (("1"
                                          (inst - "v")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (lemma "vectors_3D.sqv_eq_0")
                                            (("2"
                                              (inst - "s")
                                              (("2"
                                                (assert)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (flatten)
                                      (("2"
                                        (case "s /= zero")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split +)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "break_symmetry_neg")
                                                (("1"
                                                  (inst - "s")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split -)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2" (assert) nil nil))
                                                  nil)
                                                 ("3" (propax) nil nil)
                                                 ("4"
                                                  (lemma "eq_neg")
                                                  (("4"
                                                    (inst?)
                                                    (("1" (assert) nil nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (replace -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (split +)
                                    (("1" (flatten)
                                      (("1"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (case "s /= zero")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "vectors_3D.sqv_eq_0")
                                                (("1"
                                                  (inst - "s")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "break_symmetry_neg")
                                                    (("2"
                                                      (inst - "v")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split +)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (hide-all-but (-1 4))
                                                  (("1"
                                                    (expand "zero")
                                                    (("1" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma "eq_neg")
                                                  (("2"
                                                    (inst?)
                                                    (("1" (assert) nil nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (rewrite "eq_correct_1")
                                                (("2"
                                                  (rewrite "eq_correct_1")
                                                  (("2"
                                                    (rewrite "gt_correct_1")
                                                    (("2"
                                                      (rewrite "gt_correct_1")
                                                      (("2"
                                                        (split +)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (flatten)
                                      (("2"
                                        (case "s = zero")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "break_symmetry_neg")
                                              (("1" (inst - "v") nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1)
                                          (("2"
                                            (lemma "vectors_3D.sqv_eq_0")
                                            (("2"
                                              (inst - "s")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (hide-all-but (-1 6))
                                                        (("1"
                                                          (expand "zero")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma "eq_neg")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split +)
                                                      (("1" (propax) nil nil)
                                                       ("2"
                                                        (rewrite
                                                         "eq_correct_1")
                                                        (("2"
                                                          (rewrite
                                                           "gt_correct_1")
                                                          (("2"
                                                            (rewrite
                                                             "eq_correct_1")
                                                            (("2"
                                                              (rewrite
                                                               "gt_correct_1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (vect2_neg formula-decl nil vect_3D_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv_neg formula-decl nil vectors_2D vectors)
    (neg_dot_neg formula-decl nil vectors_2D vectors)
    (sqv_eq_0 formula-decl nil vectors_3D vectors)
    (sqv_neg formula-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (zero const-decl "Vector" vectors_2D vectors)
    (neg_zero formula-decl nil vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (break_symmetry_neg formula-decl nil definitions_3D nil)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (sign_neg_clos application-judgement "Sign" sign reals)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (sq_0 formula-decl nil sq reals)
    (dot_zero_left formula-decl nil vectors_2D vectors)
    (vect2_zero formula-decl nil vect_3D_2D vectors)
    (vz_neg formula-decl nil vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors))
   nil))
 (Vertical_Strategy_TCC1 0
  (Vertical_Strategy_TCC1-1 nil 3470395677
   ("" (inst 1 "verticalCoordinationConflict")
    (("" (skeep) (("" (rewrite "verticalCoordinationConflict_asymm") nil nil))
      nil))
    nil)
   ((verticalCoordinationConflict_asymm formula-decl nil space_3D nil)
    (verticalCoordinationConflict const-decl "Sign" space_3D nil)
    (- const-decl "Vector" vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (Vertical_Strategy existence ""
    "{f: [[vectors_3D_def.Vect3, vectors_3D_def.Vect3] -> sign.Sign] | FORALL (s, v): booleans.=>((booleans.OR(space_3D.s /= vectors_3D.zero, space_3D.v /= vectors_3D.zero)), f((vectors_3D.-)(space_3D.s), (vectors_3D.-)(space_3D.v)) = (number_fields.-)(f(space_3D.s, space_3D.v)))}")))
 (verticalCoordinationConflict_strategy 0
  (verticalCoordinationConflict_strategy-2 nil 3550260298
   ("" (skeep) (("" (rewrite "verticalCoordinationConflict_asymm") nil nil))
    nil)
   ((verticalCoordinationConflict_asymm formula-decl nil space_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors))
   nil
   (verticalCoordinationConflict_strategy subtype
    "space_3D.verticalCoordinationConflict" "Vertical_Strategy"))
  (verticalCoordinationConflict_strategy-1 nil 3550260273
   ("" (judgement-tcc) nil nil) nil nil
   (verticalCoordinationConflict_strategy subtype
    "space_3D.verticalCoordinationConflict" "Vertical_Strategy")))
 (verticalCoordinationConflict_correct_TCC1 0
  (verticalCoordinationConflict_correct_TCC1-1 nil 3470415887
   ("" (skosimp*)
    (("" (lemma "Delta_gt_0_nzv") (("" (inst?) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((D formal-const-decl "posreal" space_3D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Delta_gt_0_nzv formula-decl nil horizontal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors))
   nil
   (verticalCoordinationConflict_correct subtype
    "vect_3D_2D.vect2(space_3D.v)"
    "{nzv | reals.>=(horizontal[space_3D.D].Delta(vect_3D_2D.vect2(space_3D.nzs), horizontal.nzv), 0)}")))
 (verticalCoordinationConflict_correct 0
  (verticalCoordinationConflict_correct-2 nil 3478621317
   ("" (skeep)
    (("" (skoletin 1)
      (("" (flatten)
        (("" (lemma "Delta_gt_0_nzv")
          (("" (inst?)
            (("" (assert)
              (("" (flatten)
                (("" (expand "verticalCoordinationConflict")
                  (("" (case-replace "v`z = 0")
                    (("1" (assert)
                      (("1" (replaces -2)
                        (("1" (hide-all-but (2 3)) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "Delta_discr2b")
                        (("2" (inst?)
                          (("2" (rewrite "sqv_eq_0" :dir rl)
                            (("2" (skoletin* -1)
                              (("2" (replace -4 :dir rl)
                                (("2" (replace -3 :dir rl)
                                  (("2"
                                    (name-replace "dd"
                                     "sq(b) + sq(D) * a - sqv(vect2(nzs)) * a"
                                     :hide? nil)
                                    (("2" (case-replace "discr2b(a,b,c)=dd")
                                      (("1"
                                        (case "dd > 0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "eq_correct_1")
                                            (("1"
                                              (rewrite "gt_correct_1")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (expand "Theta_D")
                                                  (("1"
                                                    (replace -7 :dir rl)
                                                    (("1"
                                                      (replace -6 :dir rl)
                                                      (("1"
                                                        (replace -4 :dir rl)
                                                        (("1"
                                                          (expand "root2b")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "nzs`z + (-b - sqrt(dd)) / a * v`z > 0")
                                                              (("1"
                                                                (expand
                                                                 "sign")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split 4)
                                                                    (("1"
                                                                      (isolate
                                                                       -2
                                                                       l
                                                                       2)
                                                                      (("1"
                                                                        (cross-mult
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "sign")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split 5)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (isolate
                                                                       2
                                                                       l
                                                                       2)
                                                                      (("2"
                                                                        (cross-mult
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 5)
                                        (("2"
                                          (expand "discr2b")
                                          (("2"
                                            (assert)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" space_3D nil)
    (Delta const-decl "real" horizontal nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (Theta_D const-decl "real" horizontal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (verticalCoordinationConflict const-decl "Sign" space_3D nil)
    (sign const-decl "Sign" sign reals)
    (Delta_gt_0_nzv formula-decl nil horizontal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (verticalCoordinationConflict_strategy name-judgement "Vertical_Strategy"
     space_3D nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (discr2b const-decl "real" quadratic_2b reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (* const-decl "real" vectors_2D vectors)
    (gt_correct_1 formula-decl nil sqrt reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (root2b const-decl "real" quadratic_2b reals)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (eq_correct_1 formula-decl nil sqrt reals)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (Delta_discr2b formula-decl nil horizontal nil)
    (break_symmetry const-decl "Sign" definitions_3D nil))
   nil)
  (verticalCoordinationConflict_correct-1 nil 3470416043
   ("" (skeep)
    (("" (skoletin 1)
      (("" (flatten)
        (("" (lemma "Delta_gt_0_nzv")
          (("" (inst?)
            (("" (assert)
              (("" (flatten)
                (("" (expand "verticalCoordinationConflict")
                  (("" (case-replace "v`z = 0")
                    (("1" (assert)
                      (("1" (replaces -2)
                        (("1" (hide-all-but (2 3)) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "Delta_discr2b")
                        (("2" (inst?)
                          (("2" (rewrite "sqv_eq_0" :dir rl)
                            (("2" (skoletin* -1)
                              (("1" (replace -4 :dir rl)
                                (("1" (replace -3 :dir rl)
                                  (("1"
                                    (name-replace "dd"
                                     "sq(b) + sq(D) * a - sqv(vect2(nzs)) * a"
                                     :hide? nil)
                                    (("1" (case-replace "discr2b(a,b,c)=dd")
                                      (("1"
                                        (case "dd > 0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "eq_correct_1")
                                            (("1"
                                              (rewrite "gt_correct_1")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (expand "Theta_D")
                                                  (("1"
                                                    (replace -7 :dir rl)
                                                    (("1"
                                                      (replace -6 :dir rl)
                                                      (("1"
                                                        (replace -4 :dir rl)
                                                        (("1"
                                                          (expand "root2b")
                                                          (("1"
                                                            (replace -2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "nzs`z + (-b - sqrt(dd)) / a * v`z > 0")
                                                                (("1"
                                                                  (expand
                                                                   "sign")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       4)
                                                                      (("1"
                                                                        (isolate
                                                                         -2
                                                                         l
                                                                         2)
                                                                        (("1"
                                                                          (cross-mult
                                                                           -2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "sign")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       5)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (isolate
                                                                         2
                                                                         l
                                                                         2)
                                                                        (("2"
                                                                          (cross-mult
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 5)
                                        (("2"
                                          (expand "discr2b")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((break_symmetry const-decl "Sign" definitions_3D nil)
    (Delta_discr2b formula-decl nil horizontal nil)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (root2b const-decl "real" quadratic_2b reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (discr2b const-decl "real" quadratic_2b reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (Delta_gt_0_nzv formula-decl nil horizontal nil)
    (sign const-decl "Sign" sign reals)
    (Vector type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (Delta const-decl "real" horizontal nil)
    (Sign type-eq-decl nil sign reals)
    (Theta_D const-decl "real" horizontal nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors))
   shostak))
 (vs_los_strategy_TCC1 0
  (vs_los_strategy_TCC1-1 nil 3478949740 ("" (subtype-tcc) nil nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (vs_los_strategy subtype "vect_3D_2D.vect2(space_3D.v)" "Nz_vect2")))
 (vs_los_vertical_strategy 0
  (vs_los_vertical_strategy-2 nil 3478949740
   ("" (skeep)
    (("" (expand "vs_los_strategy" 1 1)
      (("" (label "svnz" -1)
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (case "1*(vect2(s)*vect2(v)) >= 0 OR vect2(v) = zero")
                (("1" (label "entryorzero" -1)
                  (("1" (split +)
                    (("1" (flatten)
                      (("1" (rewrite "vz_neg")
                        (("1" (expand "vs_los_strategy")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1" (hide -) (("1" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (case "s`z = 0")
                        (("1" (label "szzero" -1)
                          (("1" (split +)
                            (("1" (flatten)
                              (("1" (rewrite "vz_neg")
                                (("1" (expand "vs_los_strategy")
                                  (("1" (replace -3)
                                    (("1" (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (case "v`z = 0")
                                (("1" (split +)
                                  (("1" (flatten)
                                    (("1" (expand "vs_los_strategy")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace "entryorzero")
                                            (("1"
                                              (case "s /= zero")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "break_symmetry_neg")
                                                  (("1" (inst - "s") nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (expand "zero")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (case "s = zero")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "-v /= zero")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "vs_los_strategy")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (replace "entryorzero")
                                                  (("1"
                                                    (lemma
                                                     "break_symmetry_neg")
                                                    (("1"
                                                      (inst - "v")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but ("svnz" 1 -3))
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand "zero")
                                                (("2"
                                                  (decompose-equality +)
                                                  (("1" (grind) nil nil)
                                                   ("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2"
                                          (expand "zero")
                                          (("2"
                                            (decompose-equality +)
                                            (("1" (grind) nil nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (rewrite "vz_neg")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "vz_neg") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-1 1))
                  (("2" (flatten)
                    (("2" (split -)
                      (("1" (grind) nil nil)
                       ("2" (expand "zero") (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2"
                (case "NOT (1*(vect2(s)*vect2(v)) >= 0 OR vect2(v) = zero)")
                (("1" (flatten)
                  (("1" (name "tca" "horizontal_tca(vect2(-s),vect2(-v))")
                    (("1" (label "tcaname" -1)
                      (("1" (case "tca > 0")
                        (("1" (case "tca = horizontal_tca(s,v)")
                          (("1" (label "tcaeq" -1)
                            (("1" (replace "tcaname")
                              (("1" (case "(-s+tca*-v)`z = - (s + tca*v)`z")
                                (("1" (split +)
                                  (("1" (flatten)
                                    (("1" (replace -1)
                                      (("1"
                                        (expand "vs_los_strategy")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace "tcaeq" :dir rl)
                                              (("1"
                                                (hide-all-but (1 2))
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (split +)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite "vz_neg")
                                          (("1"
                                            (expand "vs_los_strategy")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (1 2))
                                                  (("1" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "vz_neg")
                                          (("2"
                                            (split +)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "vs_los_strategy")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case "s /= zero")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "break_symmetry_neg")
                                                          (("1"
                                                            (inst - "s")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (expand "zero")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case "v /= zero")
                                                    (("1"
                                                      (expand
                                                       "vs_los_strategy")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case "s = zero")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "break_symmetry_neg")
                                                                (("1"
                                                                  (inst - "v")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-2 1))
                                                              (("2"
                                                                (expand
                                                                 "zero")
                                                                (("2"
                                                                  (grind)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     +)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide-all-but (-1 1))
                                                        (("2"
                                                          (expand "zero")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (case "v = zero")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide-all-but
                                                         (-3 "svnz"))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand "zero")
                                                            (("1"
                                                              (grind)
                                                              (("1"
                                                                (decompose-equality
                                                                 +)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but (-1 1))
                                                      (("2"
                                                        (expand "zero")
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1) (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace "tcaname" :dir rl)
                            (("2" (expand "horizontal_tca")
                              (("2" (cross-mult 1)
                                (("2" (hide-all-but 1) (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil)
                         ("2" (replace "tcaname" :dir rl)
                          (("2" (expand "horizontal_tca")
                            (("2" (case "sqv(vect2(-v)) > 0")
                              (("1" (cross-mult 1) (("1" (assert) nil nil))
                                nil)
                               ("2" (lemma "vectors_2D.sqv_eq_0")
                                (("2" (inst - "-v") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-1 1 2))
                  (("2" (split -)
                    (("1" (grind) nil nil)
                     ("2" (hide 1)
                      (("2" (expand "zero") (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vs_los_strategy const-decl "Sign" space_3D nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (v skolem-const-decl "Vect3" space_3D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (div_cancel4 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (horizontal_tca const-decl "real" definitions nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (break_symmetry_neg formula-decl nil definitions_3D nil)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (sign_neg_clos application-judgement "Sign" sign reals)
    (sign const-decl "Sign" sign reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (vz_neg formula-decl nil vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero const-decl "Vector" vectors_2D vectors))
   nil
   (vs_los_vertical_strategy subtype "space_3D.vs_los_strategy"
    "Vertical_Strategy"))
  (vs_los_vertical_strategy-1 nil 3478949740 ("" (judgement-tcc) nil nil) nil
   nil
   (vs_los_vertical_strategy subtype "space_3D.vs_los_strategy"
    "Vertical_Strategy"))))


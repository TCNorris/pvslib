(circle_criterion
 (vertical_sep_independence 0
  (vertical_sep_independence-1 nil 3451660536
   ("" (skeep)
    (("" (lemma "vertical_horizontal_conflict")
      (("" (inst?)
        (("" (assert)
          (("" (flatten)
            (("" (lemma "vertical_exit_independence")
              (("" (inst?)
                (("" (assert)
                  (("" (expand "vertical_exit_criterion?")
                    (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((H formal-const-decl "posreal" circle_criterion nil)
    (D formal-const-decl "posreal" circle_criterion nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vertical_horizontal_conflict formula-decl nil space_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (vertical_exit_independence formula-decl nil vz_criteria nil)
    (vertical_exit_criterion? const-decl "bool" vz_criteria nil)
    (Spz type-eq-decl nil vertical nil)
    (Spz_vect3 type-eq-decl nil space_3D nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors))
   nil))
 (nogs_criterion_independence 0
  (nogs_criterion_independence-1 nil 3451750506
   ("" (skeep :preds? t)
    (("" (expand "nogs_criterion?")
      (("" (split 1)
        (("1" (flatten)
          (("1" (split -1)
            (("1" (flatten)
              (("1" (lemma "vertical_sep_independence")
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (expand "conflict?")
              (("2" (replaces -3)
                (("2" (skeep -2) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (splash 2)
            (("1" (lemma "vertical_exit_independence")
              (("1" (inst -1 "s`z" "vzgs`z")
                (("1" (expand "vertical_exit_criterion?")
                  (("1" (assert)
                    (("1" (expand* "vertical_conflict?" "conflict?")
                      (("1" (replaces -3) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "conflict?")
              (("2" (inst 2 "0") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nogs_criterion? const-decl "bool" circle_criterion nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (vertical_exit_independence formula-decl nil vz_criteria nil)
    (vertical_exit_criterion? const-decl "bool" vz_criteria nil)
    (vertical_conflict? const-decl "bool" vertical nil)
    (Spz type-eq-decl nil vertical nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (conflict? const-decl "bool" space_3D nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (H formal-const-decl "posreal" circle_criterion nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (s skolem-const-decl "Vect3" circle_criterion nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (D formal-const-decl "posreal" circle_criterion nil)
    (Spz_vect3 type-eq-decl nil space_3D nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Zv2_vect3 type-eq-decl nil definitions_3D nil)
    (vertical_sep_independence formula-decl nil circle_criterion nil))
   nil))
 (circle_criterion_independence 0
  (circle_criterion_independence-1 nil 3431966952
   ("" (skeep)
    (("" (expand* "circle_criterion?" "conflict_ever?")
      (("" (flatten)
        (("" (skeep -5)
          (("" (lemma "horizontal_sep_dir")
            (("" (inst?)
              (("" (assert)
                (("" (lemma "vertical_sep_dir")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (inst? -1)
                        (("" (inst? -2) (("" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conflict_ever? const-decl "bool" space_3D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sign_neg_clos application-judgement "Sign" sign reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (circle_criterion? const-decl "bool" circle_criterion nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq const-decl "nonneg_real" sq reals)
    (s skolem-const-decl "Vect3" circle_criterion nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (vertical_sep_dir formula-decl nil vertical nil)
    (H formal-const-decl "posreal" circle_criterion nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (Spz type-eq-decl nil vertical nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (horizontal_sep_dir formula-decl nil horizontal_criteria nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" circle_criterion nil))
   nil))
 (circle_criterion_at_independence 0
  (circle_criterion_at_independence-1 nil 3431967045
   ("" (skeep)
    (("" (lemma "circle_criterion_independence")
      (("" (inst -1 "dir" "s+t*v" "v")
        (("" (assert)
          (("" (hide -1)
            (("" (lemma "conflict_ever_shift")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((circle_criterion_independence formula-decl nil circle_criterion nil)
    (conflict_ever_shift formula-decl nil space_3D nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D formal-const-decl "posreal" circle_criterion nil)
    (H formal-const-decl "posreal" circle_criterion nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))


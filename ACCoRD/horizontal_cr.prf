(horizontal_cr
 (horizontal_cr_is_line_solution 0
  (horizontal_cr_is_line_solution-1 nil 3471194522
   ("" (skeep)
    (("" (expand "horizontal_cr?")
      (("" (split)
        (("1" (lemma "gs_line_is_line_solution")
          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (lemma "trk_line_is_line_solution")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)
         ("3" (lemma "opt_line_is_line_solution")
          (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((horizontal_cr? const-decl "bool" horizontal_cr nil)
    (opt_line_is_line_solution formula-decl nil opt_line nil)
    (trk_line_is_line_solution formula-decl nil trk_line nil)
    (D formal-const-decl "posreal" horizontal_cr nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (gs_line_is_line_solution formula-decl nil gs_line nil)
    (Sp_vect2 type-eq-decl nil horizontal nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil))
   shostak)))


(vertical_los_criterion
 (time_vertical_exit_by_TCC1 0
  (time_vertical_exit_by_TCC1-1 nil 3519732687
   ("" (skeep)
    (("" (lemma "vertical_los_inside_Theta")
      (("" (inst - "eps*MinRelVertSpeed" "sz" "0") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((H formal-const-decl "posreal" vertical_los_criterion nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vertical_los_inside_Theta formula-decl nil vertical nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil
   (time_vertical_exit_by subtype
    "vertical[vertical_los_criterion.H].Theta_H(vertical_los_criterion.sz, number_fields.*(vertical_los_criterion.eps, vertical_los_criterion.MinRelVertSpeed), 1)"
    "{x: reals.real | booleans.IMPLIES(booleans.AND(reals.>(vertical_los_criterion.MinRelVertSpeed, 0), reals.<(real_defs.abs(vertical_los_criterion.sz), vertical_los_criterion.H)), reals.>(x, 0))}")))
 (time_vertical_exit_by_TCC2 0
  (time_vertical_exit_by_TCC2-1 nil 3519732687 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil (time_vertical_exit_by subtype "vertical_los_criterion.vz" "nzreal")))
 (time_vertical_exit_by_TCC3 0
  (time_vertical_exit_by_TCC3-1 nil 3519732687
   ("" (skeep)
    (("" (lemma "vertical_los_inside_Theta")
      (("" (inst-cp - "eps*MinRelVertSpeed" "sz" "0")
        (("" (inst - "vz" "sz" "0")
          (("" (assert)
            (("" (flatten)
              (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((H formal-const-decl "posreal" vertical_los_criterion nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vertical_los_inside_Theta formula-decl nil vertical nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil
   (time_vertical_exit_by subtype
    "real_defs.min(vertical[vertical_los_criterion.H].Theta_H(vertical_los_criterion.sz, number_fields.*(vertical_los_criterion.eps, vertical_los_criterion.MinRelVertSpeed), 1), vertical[vertical_los_criterion.H].Theta_H(vertical_los_criterion.sz, vertical_los_criterion.vz, 1))"
    "{x: reals.real | booleans.IMPLIES(booleans.AND(reals.>(vertical_los_criterion.MinRelVertSpeed, 0), reals.<(real_defs.abs(vertical_los_criterion.sz), vertical_los_criterion.H)), reals.>(x, 0))}")))
 (time_vertical_exit_by_symm 0
  (time_vertical_exit_by_symm-1 nil 3531579993
   ("" (skeep)
    (("" (expand "time_vertical_exit_by")
      (("" (case "-eps*MinRelVertSpeed = -(eps*MinRelVertSpeed)")
        (("1" (replace -1)
          (("1" (rewrite "Theta_H_symm")
            (("1" (rewrite "Theta_H_symm")
              (("1" (hide -1)
                (("1" (lift-if)
                  (("1" (lift-if)
                    (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((sign_neg_clos application-judgement "Sign" sign reals)
    (time_vertical_exit_by const-decl
     "{x: real | MinRelVertSpeed > 0 AND abs(sz) < H IMPLIES x > 0}"
     vertical_los_criterion nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Theta_H_symm formula-decl nil vertical nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (H formal-const-decl "posreal" vertical_los_criterion nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Sign type-eq-decl nil sign reals) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (min_rel_vert_speed_TCC1 0
  (min_rel_vert_speed_TCC1-1 nil 3531562642 ("" (subtype-tcc) nil nil) nil nil
   (min_rel_vert_speed subtype "vertical_los_criterion.MinRelVertSpeed"
    "{x: real_types.nnreal | booleans.IMPLIES(reals.<(real_defs.abs(vertical_los_criterion.sz), vertical_los_criterion.H), reals.>(x, 0))}")))
 (min_rel_vert_speed_TCC2 0
  (min_rel_vert_speed_TCC2-1 nil 3531562642 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (min_rel_vert_speed subtype
    "real_defs.max(vertical_los_criterion.MinRelVertSpeed, real_defs.abs(vertical_los_criterion.vz))"
    "{x: real_types.nnreal | booleans.IMPLIES(reals.<(real_defs.abs(vertical_los_criterion.sz), vertical_los_criterion.H), reals.>(x, 0))}")))
 (min_rel_vert_speed_symm 0
  (min_rel_vert_speed_symm-1 nil 3531562675
   ("" (skeep)
    (("" (expand "min_rel_vert_speed")
      (("" (lift-if)
        (("" (lift-if)
          (("" (lift-if)
            (("" (assert)
              (("" (ground) (("" (rewrite "abs_neg") nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sign_neg_clos application-judgement "Sign" sign reals)
    (min_rel_vert_speed const-decl "{x: nnreal | abs(sz) < H IMPLIES x > 0}"
     vertical_los_criterion nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs_neg formula-decl nil abs_lems reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (vs_bound_crit_indep_TCC1 0
  (vs_bound_crit_indep_TCC1-1 nil 3562942251
   ("" (skeep) (("" (replace -4) (("" (assert) nil nil)) nil)) nil)
   ((dot_zero_right formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (vs_bound_crit_indep subtype "vect_3D_2D.vect2(vertical_los_criterion.nv)"
    "Nz_vect2")))
 (vs_bound_crit_indep_TCC2 0
  (vs_bound_crit_indep_TCC2-1 nil 3562942251
   ("" (skeep) (("" (replace -4) (("" (assert) nil nil)) nil)) nil)
   ((dot_zero_right formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (vs_bound_crit_indep subtype "vect_3D_2D.vect2(vertical_los_criterion.v)"
    "Nz_vect2")))
 (vs_bound_crit_indep 0
  (vs_bound_crit_indep-1 nil 3562941990
   ("" (skeep)
    (("" (lemma "sq_gt")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (rewrite "sq_norm")
              (("" (rewrite "sq_norm")
                (("" (assert)
                  (("" (case "eps*v`z > 0")
                    (("1" (expand "vs_bound_crit?")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1"
                            (case "eps * horizontal_tca(vect2(s), vect2(nv)) * nv`z >=
                                                                                    eps * horizontal_tca(vect2(s), vect2(v)) * v`z")
                            (("1" (grind :exclude "horizontal_tca") nil nil)
                             ("2" (hide 3)
                              (("2"
                                (case "NOT sqv(horizontal_tca(s,nv)*vect2(nv)) >= sqv(horizontal_tca(s,v)*vect2(v))")
                                (("1" (rewrite "vect2_add")
                                  (("1" (rewrite "vect2_add")
                                    (("1" (rewrite "vect2_scal")
                                      (("1"
                                        (rewrite "vect2_scal")
                                        (("1"
                                          (rewrite
                                           "horizontal_sq_dtca_eq"
                                           :dir
                                           rl)
                                          (("1"
                                            (rewrite
                                             "horizontal_sq_dtca_eq"
                                             :dir
                                             rl)
                                            (("1"
                                              (expand "horizontal_sq_dtca")
                                              (("1"
                                                (rewrite "sqv_scal")
                                                (("1"
                                                  (rewrite "sqv_scal")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "horizontal_tca"
                                                         1)
                                                        (("1"
                                                          (rewrite "sq_div")
                                                          (("1"
                                                            (rewrite "sq_div")
                                                            (("1"
                                                              (case
                                                               "FORALL (ap1:posreal,b:real): b/sq(ap1) * ap1 = b/ap1")
                                                              (("1"
                                                                (rewrite -1)
                                                                (("1"
                                                                  (rewrite -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "orthogonal_basis")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -
                                                                       "nv"
                                                                       "perpR(nv)"
                                                                       "s")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "vect2(nv) /= zero AND
                                                                                                                                                               perpR(vect2(nv)) /= zero AND
                                                                                                                                                                orthogonal?(vect2(nv), perpR(vect2(nv)))")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "v"
                                                                                 "perpR(v)"
                                                                                 "s")
                                                                                (("1"
                                                                                  (case
                                                                                   "vect2(v) /= zero AND
                                                                                                                                                                               perpR(vect2(v)) /= zero AND orthogonal?(vect2(v), perpR(vect2(v)))")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "orthogonal_basis_sqv")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           _
                                                                                           _
                                                                                           "v"
                                                                                           "perpR(v)"
                                                                                           "s")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "orthogonal_basis_sqv")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   _
                                                                                                   _
                                                                                                   "nv"
                                                                                                   "perpR(nv)"
                                                                                                   "s")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "sqv_perpR")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "sqv_perpR")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "det_perpR"
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "det_perpR"
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "sq_neg")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "sq_neg")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "sq_div")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "sq_div")
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "sq_div")
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "sq_div")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     -7)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       -7)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         -7)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           -7)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (lemma
                                                                                                                                         "vectors_2D.sqv_eq_0")
                                                                                                                                        (("2"
                                                                                                                                          (inst?)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (lemma
                                                                                                                                       "vectors_2D.sqv_eq_0")
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (lemma
                                                                                                                               "vectors_2D.sqv_eq_0")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (lemma
                                                                                                                             "vectors_2D.sqv_eq_0")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "perpR_perpR")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "--vect2(v) = zero")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (lemma
                                                                                 "perpR_perpR")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "nv")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "--vect2(nv) = zero")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "vectors_2D.sqv_eq_0")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "vectors_2D.sqv_eq_0")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (rewrite "sqv_scal")
                                    (("2" (rewrite "sqv_scal")
                                      (("2"
                                        (expand "horizontal_tca" -1)
                                        (("2"
                                          (rewrite "sq_div")
                                          (("1"
                                            (rewrite "sq_div")
                                            (("1"
                                              (case
                                               "FORALL (ap1:posreal,b:real): b/sq(ap1) * ap1 = b/ap1")
                                              (("1"
                                                (rewrite -1)
                                                (("1"
                                                  (rewrite -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (cross-mult -1)
                                                      (("1"
                                                        (invoke
                                                         (case "%1")
                                                         (! -1 1))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (cross-mult -2)
                                                            (("1"
                                                              (invoke
                                                               (case "%1")
                                                               (! -2 1))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT nv`z * horizontal_tca(vect2(s), vect2(nv)) * eps <
                                                                                                                                                                                                                  v`z * horizontal_tca(vect2(s), vect2(v)) * eps")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "horizontal_tca"
                                                                     -1)
                                                                    (("2"
                                                                      (cross-mult
                                                                       -1)
                                                                      (("2"
                                                                        (cross-mult
                                                                         -1)
                                                                        (("2"
                                                                          (case
                                                                           "(sq(-(vect2(s) * vect2(v))) * sqv(vect2(nv))) > 0")
                                                                          (("1"
                                                                            (case
                                                                             "nv`z * sqv(vect2(v)) * -(vect2(s) * vect2(nv)) * eps > 0")
                                                                            (("1"
                                                                              (mult-ineq
                                                                               -3
                                                                               -6)
                                                                              (("1"
                                                                                (name
                                                                                 "K1"
                                                                                 "sqv(vect2(v))*(-(vect2(s)*vect2(nv)))*(-vect2(s)*vect2(v))*sqv(vect2(nv))")
                                                                                (("1"
                                                                                  (case
                                                                                   "K1 > 0")
                                                                                  (("1"
                                                                                    (mult-by
                                                                                     -12
                                                                                     "K1")
                                                                                    (("1"
                                                                                      (hide
                                                                                       1)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     (-1
                                                                                      -2
                                                                                      2))
                                                                                    (("2"
                                                                                      (hide
                                                                                       (-1
                                                                                        -2
                                                                                        -3
                                                                                        -6))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "K1")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "posreal_times_posreal_is_posreal")
                                                                                          (("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (invoke
                                                                                               (case
                                                                                                "%1")
                                                                                               (!
                                                                                                1
                                                                                                2))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "posreal_times_posreal_is_posreal")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "posreal_times_posreal_is_posreal")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "posreal_times_posreal_is_posreal")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "eps*nv`z"
                                                                                 "sqv(vect2(v)) * -(vect2(s) * vect2(nv))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (invoke
                                                                                   (case
                                                                                    "%1")
                                                                                   (!
                                                                                    1
                                                                                    2))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "posreal_times_posreal_is_posreal")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "posreal_times_posreal_is_posreal")
                                                                            (("2"
                                                                              (lemma
                                                                               "sq_eq_0")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "vectors_2D.sqv_eq_0")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "vectors_2D.sqv_eq_0")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "vectors_2D.sqv_eq_0")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "vectors_2D.sqv_eq_0")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "vectors_2D.sqv_eq_0")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "vectors_2D.sqv_eq_0")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -1)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "vectors_2D.sqv_eq_0")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "v`z = 0")
                        (("1" (expand "vs_bound_crit?")
                          (("1" (replace -1)
                            (("1" (assert)
                              (("1" (rewrite "vz_distr_add")
                                (("1" (rewrite "vz_distr_add")
                                  (("1" (rewrite "vz_scal")
                                    (("1" (rewrite "vz_scal")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (mult-by
                                             -2
                                             "horizontal_tca(vect2(s), vect2(nv))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (expand "horizontal_tca" 1)
                                                (("2"
                                                  (cross-mult 1)
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (lemma
                                                       "vectors_2D.sqv_eq_0")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "NOT eps*v`z < 0")
                          (("1" (typepred "eps") (("1" (ground) nil nil)) nil)
                           ("2" (expand "vs_bound_crit?")
                            (("2" (assert)
                              (("2" (rewrite "vz_distr_add")
                                (("2" (rewrite "vz_distr_add")
                                  (("2" (rewrite "vz_scal")
                                    (("2" (rewrite "vz_scal")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (mult-by
                                           -1
                                           "horizontal_tca(vect2(s), vect2(v))")
                                          (("1"
                                            (mult-by
                                             -2
                                             "horizontal_tca(vect2(s), vect2(nv))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (hide 3)
                                                (("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand
                                                     "horizontal_tca"
                                                     1)
                                                    (("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (ground)
                                                        (("2"
                                                          (lemma
                                                           "vectors_2D.sqv_eq_0")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (invoke (case "%1") (! 1 2))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (hide 4)
                                                (("2"
                                                  (hide 4)
                                                  (("2"
                                                    (expand
                                                     "horizontal_tca"
                                                     1)
                                                    (("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (ground)
                                                        (("2"
                                                          (lemma
                                                           "vectors_2D.sqv_eq_0")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_gt formula-decl nil sq reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_norm formula-decl nil vectors_2D vectors)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_neg_gt1 formula-decl nil extra_real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (vz_scal formula-decl nil vectors_3D vectors)
    (vz_distr_add formula-decl nil vectors_3D vectors)
    (vs_bound_crit? const-decl "bool" vertical_los_criterion nil)
    (v skolem-const-decl "Vect3" vertical_los_criterion nil)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (< const-decl "bool" reals nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (s skolem-const-decl "Vect3" vertical_los_criterion nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (K1 skolem-const-decl "real" vertical_los_criterion nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (sq_eq_0 formula-decl nil sq reals)
    (div_mult_pos_neg_ge2 formula-decl nil extra_real_props nil)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (horizontal_sq_dtca_eq formula-decl nil definitions nil)
    (horizontal_sq_dtca const-decl "real" definitions nil)
    (sq_div formula-decl nil sq reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (perpR const-decl "Vect2" perpendicular_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (orthogonal? const-decl "bool" vectors_2D vectors)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (det_perpR formula-decl nil det_2D vectors)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (det const-decl "real" det_2D vectors) (sq_neg formula-decl nil sq reals)
    (sqv_perpR formula-decl nil perpendicular_2D vectors)
    (orthogonal_basis_sqv formula-decl nil basis_2D vectors)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (perpR_eq_zero formula-decl nil perpendicular_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (neg_neg formula-decl nil vectors_2D vectors)
    (neg_zero formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (perpR_perpR formula-decl nil perpendicular_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (sq_0 formula-decl nil sq reals)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (dot_zero_left formula-decl nil vectors_2D vectors)
    (orthogonal_basis formula-decl nil basis_2D vectors)
    (nv skolem-const-decl "Vect3" vertical_los_criterion nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sqv_scal formula-decl nil vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (horizontal_tca const-decl "real" definitions nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (vs_bound_crit_coord 0
  (vs_bound_crit_coord-2 "" 3790108053
   ("" (skeep)
    (("" (assert)
      (("" (case "NOT (eps * (nvo - nvi)`z >= eps * (vo - vi)`z)")
        (("1" (hide 2) (("1" (grind) nil nil)) nil)
         ("2" (name "vv" "vo-vi")
          (("2" (replace -1)
            (("2" (case "vi-vo = -vv")
              (("1" (replace -1)
                (("1" (name "v1" "nvo-vi")
                  (("1" (replace -1)
                    (("1" (name "v2" "nvi-vo")
                      (("1" (replace -1)
                        (("1" (case "NOT nvo-nvi = v1-v2-vv")
                          (("1" (hide-all-but 1)
                            (("1" (expand "v1")
                              (("1" (expand "v2")
                                (("1" (expand "vv") (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (hide (-1 -2 -3 -4 -5))
                              (("2" (assert)
                                (("2"
                                  (case "vv`z * (vect2(- vv) * vect2(vv)) * -eps +
                                         (- vv)`z * sqv(vect2(vv)) * eps
                                         >= 0")
                                  (("1" (grind) nil nil)
                                   ("2" (hide-all-but (-5 1))
                                    (("2"
                                      (case
                                       "vect2(-vv)*vect2(vv) = -sqv(vect2(vv))")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "vv") (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (vs_bound_crit_coord-1 nil 3527436562
   ("" (skeep)
    (("" (expand "vs_bound_crit_vect?")
      (("" (split +)
        (("1" (flatten)
          (("1" (assert)
            (("1" (split -)
              (("1" (flatten)
                (("1" (assert)
                  (("1"
                    (case "NOT (eps * (nvo - nvi)`z >= eps * (vo - vi)`z)")
                    (("1" (hide 2) (("1" (hide (-3 -6)) (("1" (grind) nil)))))
                     ("2" (name "vv" "vo-vi")
                      (("2" (replace -1)
                        (("2" (case "vi-vo = -vv")
                          (("1" (replace -1)
                            (("1" (name "v1" "nvo-vi")
                              (("1" (replace -1)
                                (("1" (name "v2" "nvi-vo")
                                  (("1" (replace -1)
                                    (("1" (case "NOT nvo-nvi = v1-v2-vv")
                                      (("1"
                                        (hide-all-but 1)
                                        (("1"
                                          (expand "v1")
                                          (("1"
                                            (expand "v2")
                                            (("1"
                                              (expand "vv")
                                              (("1" (grind) nil)))))))))
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (hide (-1 -2 -3 -4 -5))
                                          (("2"
                                            (rewrite "vz_neg")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "vv`z * (vect2(- vv) * vect2(vv)) * -eps +
                                         (- vv)`z * sqv(vect2(vv)) * eps
                                         >= 0")
                                                (("1" (grind) nil)
                                                 ("2"
                                                  (hide-all-but (-5 1))
                                                  (("2"
                                                    (case
                                                     "vect2(-vv)*vect2(vv) = -sqv(vect2(vv))")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (mult-by
                                                         -2
                                                         "sqv(vect2(vv))")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (grind)
                                                            nil)))))))
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))))))))))))))
                           ("2" (hide-all-but 1)
                            (("2" (expand "vv")
                              (("2" (grind) nil)))))))))))))))))
               ("2" (flatten)
                (("2" (assert)
                  (("2" (hide-all-but (-2 1)) (("2" (grind) nil)))))))))))))
         ("2" (flatten)
          (("2" (assert)
            (("2" (split -)
              (("1" (flatten)
                (("1" (hide-all-but (-1 1)) (("1" (grind) nil)))))
               ("2" (flatten) (("2" (grind) nil))))))))))))))
    nil)
   ((sign_neg_clos application-judgement "Sign" sign reals)
    (- const-decl "Vector" vectors_3D vectors)
    (v1 skolem-const-decl "Vector" vertical_los_criterion nil)
    (vv skolem-const-decl "Vector" vertical_los_criterion nil)
    (v2 skolem-const-decl "Vector" vertical_los_criterion nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (vs_bound_crit? const-decl "bool" vertical_los_criterion nil)
    (* const-decl "real" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (Vector type-eq-decl nil vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors))
   nil))
 (vs_bound_dir 0
  (vs_bound_dir-2 nil 3527436806
   ("" (skeep) (("" (expand "vs_bound_crit?") (("" (ground) nil nil)) nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (vs_bound_crit? const-decl "bool" vertical_los_criterion nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)
  (vs_bound_dir-1 nil 3527436584
   ("" (skeep) (("" (expand "vs_bound_crit_vect?") (("" (ground) nil)))) nil)
   ((sign_neg_clos application-judgement "Sign" sign reals)) nil))
 (vertical_los_criterion_coord 0
  (vertical_los_criterion_coord-2 nil 3527436825
   ("" (skeep)
    (("" (expand "vertical_los_criterion?")
      (("" (flatten)
        (("" (assert)
          (("" (split +)
            (("1" (lemma "vs_bound_crit_coord")
              (("1" (inst - "eps" "nvi" "nvo" "zero" "s" "vi" "vo")
                (("1" (assert) nil nil)) nil))
              nil)
             ("2" (case "vi-vo = -(vo-vi)")
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1" (rewrite "vz_neg")
                    (("1" (rewrite "vz_neg")
                      (("1" (rewrite "min_rel_vert_speed_symm")
                        (("1" (expand "min_rel_vert_speed")
                          (("1" (lift-if)
                            (("1" (split +)
                              (("1" (flatten)
                                (("1" (assert)
                                  (("1" (hide-all-but (-1 -4 -7 1))
                                    (("1" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (assert)
                                  (("2" (expand "max" +)
                                    (("2" (lift-if)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (hide-all-but (-5 -8 +))
                                              (("1"
                                                (case "eps = sign((vo-vi)`z)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 3))
                                                  (("2"
                                                    (typepred "eps")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 -4 -7 +))
                                              (("2"
                                                (case "eps = sign((vo-vi)`z)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 4))
                                                  (("2"
                                                    (typepred "eps")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but (-1 -4 -7 +))
                                              (("3"
                                                (case "eps = sign((vo-vi)`z)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 4))
                                                  (("2"
                                                    (typepred "eps")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide-all-but (-3 -6 +))
                                              (("4"
                                                (case "eps = sign((vo-vi)`z)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 5))
                                                  (("2"
                                                    (typepred "eps")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sign_neg_clos application-judgement "Sign" sign reals)
    (vertical_los_criterion? const-decl "bool" vertical_los_criterion nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (min_rel_vert_speed const-decl "{x: nnreal | abs(sz) < H IMPLIES x > 0}"
     vertical_los_criterion nil)
    (posreal_max application-judgement "{z: posreal | z >= x AND z >= y}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sign const-decl "Sign" sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (min_rel_vert_speed_symm formula-decl nil vertical_los_criterion nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (vz_neg formula-decl nil vectors_3D vectors)
    (vs_bound_crit_coord formula-decl nil vertical_los_criterion nil)
    (sub_zero_right formula-decl nil vectors_3D vectors)
    (sub_zero_left formula-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (vertical_los_criterion_coord-1 nil 3527436607
   ("" (skeep)
    (("" (expand "vertical_los_criterion_vect?")
      (("" (flatten)
        (("" (assert)
          (("" (split +)
            (("1" (lemma "vs_bound_crit_vect_coord")
              (("1" (inst - "eps" "nvi" "nvo" "zero" "s" "vi" "vo")
                (("1" (assert) nil)))))
             ("2" (lemma "time_vertical_exit_by_symm")
              (("2" (inst - "eps" "s`z" "tr" "vo`z-vi`z")
                (("2" (rewrite "vz_distr_sub")
                  (("2" (rewrite "vz_distr_sub")
                    (("2" (rewrite "vz_distr_sub")
                      (("2" (rewrite "vz_distr_sub")
                        (("2" (rewrite "vz_distr_sub")
                          (("2" (lemma "time_vertical_exit_by_dist")
                            (("2" (inst - "eps" "s`z" "tr" "vo`z-vi`z")
                              (("2" (assert)
                                (("2" (assert)
                                  (("2" (rewrite "vz_neg")
                                    (("2" (assert)
                                      nil))))))))))))))))))))))))))))))))))
    nil)
   ((sign_neg_clos application-judgement "Sign" sign reals)
    (vz_distr_sub formula-decl nil vectors_3D vectors)
    (vz_neg formula-decl nil vectors_3D vectors)
    (sub_zero_right formula-decl nil vectors_3D vectors)
    (sub_zero_left formula-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Sign type-eq-decl nil sign reals))
   nil))
 (vertical_sep_after_def 0
  (vertical_sep_after_def-1 nil 3519723086
   ("" (skeep)
    (("" (expand "vertical_sep_after")
      (("" (skeep)
        (("" (case "vz >= 0")
          (("1" (case "sz + tr*vz >= 0")
            (("1" (hide -3)
              (("1" (expand "abs" -)
                (("1" (assert)
                  (("1" (mult-by -4 "vz")
                    (("1" (expand "abs" +)
                      (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (mult-by -1 "tr") (("2" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (case "sz + tr*vz <= -H")
            (("1" (mult-by -4 "-vz") (("1" (grind) nil nil)) nil)
             ("2" (hide 3)
              (("2" (mult-by 2 "tr") (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertical_sep_after const-decl "bool" vertical_los_criterion nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (vz skolem-const-decl "real" vertical_los_criterion nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (H formal-const-decl "posreal" vertical_los_criterion nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (z_los_vertical_sep 0
  (z_los_vertical_sep-3 "" 3790108058
   ("" (skeep)
    (("" (expand "vertical_los_criterion?")
      (("" (flatten)
        (("" (skoletin 1)
          (("" (typepred "teb")
            (("" (assert)
              (("" (lemma "vertical_sep_after_def")
                (("" (inst?)
                  (("" (assert)
                    (("" (hide 2)
                      (("" (case "eps*(s`z + teb*nv`z)>=H")
                        (("1" (hide-all-but (-1 1))
                          (("1" (typepred "eps") (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "time_vertical_exit_by")
                            (("2" (lift-if)
                              (("2" (ground)
                                (("1" (expand "min_rel_vert_speed")
                                  (("1" (mult-by -6 "teb")
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         "s`z + teb*(eps*MinRelVertSpeed) = eps*H")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "eps")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -3 1)
                                          (("2"
                                            (expand "Theta_H" +)
                                            (("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (typepred "eps")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "min_rel_vert_speed")
                                  (("2" (expand "min" -1)
                                    (("2" (lift-if)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (case "eps*(s`z+teb*v`z)>=H")
                                              (("1"
                                                (copy 1)
                                                (("1"
                                                  (mult-by 1 "teb")
                                                  (("1"
                                                    (case "eps*nv`z>=eps*v`z")
                                                    (("1"
                                                      (mult-by -1 "teb")
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -2 +))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but (-7 1 3))
                                                      (("2"
                                                        (typepred "eps")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (mult-by 2 "teb")
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (lemma "Theta_H_on_H")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           (-1 -5 1 2))
                                                          (("2"
                                                            (typepred "eps")
                                                            (("2"
                                                              (grind
                                                               :exclude
                                                               "Theta_H")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (lemma "Theta_H_on_H")
                                            (("2"
                                              (inst
                                               -
                                               "1"
                                               "eps*MinRelVertSpeed"
                                               "s`z")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -2 :dir rl)
                                                  (("2"
                                                    (typepred "eps")
                                                    (("2"
                                                      (split -)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand "abs" -3)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (lemma
                                                                   "nnreal_times_nnreal_is_nnreal")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -2
                                                                        -7))
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "nv`z>=MinRelVertSpeed")
                                                                  (("1"
                                                                    (mult-by
                                                                     -1
                                                                     "teb")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "-s`z+teb*MinRelVertSpeed = H")
                                                              (("1"
                                                                (case
                                                                 "-nv`z>=MinRelVertSpeed")
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "teb")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "nnreal_times_nnreal_is_nnreal")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -4
                                                                      -7
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (z_los_vertical_sep-2 nil 3527436843
   ("" (skeep)
    (("" (expand "vertical_los_criterion?")
      (("" (flatten)
        (("" (skoletin 1)
          (("" (typepred "teb")
            (("" (assert)
              (("" (lemma "vertical_sep_after_def")
                (("" (inst?)
                  (("" (assert)
                    (("" (hide 2)
                      (("" (case "eps*(s`z + teb*nv`z)>=H")
                        (("1" (hide-all-but (-1 1))
                          (("1" (typepred "eps") (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "time_vertical_exit_by")
                            (("2" (lift-if)
                              (("2" (ground)
                                (("1" (expand "min_rel_vert_speed")
                                  (("1" (mult-by -6 "teb")
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         "s`z + teb*(eps*MinRelVertSpeed) = eps*H")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "eps")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -3 1)
                                          (("2"
                                            (expand "Theta_H" +)
                                            (("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (typepred "eps")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "min_rel_vert_speed")
                                  (("2" (expand "min" -1)
                                    (("2" (lift-if)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (case "eps*(s`z+teb*v`z)>=H")
                                              (("1"
                                                (copy 1)
                                                (("1"
                                                  (mult-by 1 "teb")
                                                  (("1"
                                                    (case "eps*nv`z>=eps*v`z")
                                                    (("1"
                                                      (mult-by -1 "teb")
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -2 +))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but (-7 1 3))
                                                      (("2"
                                                        (typepred "eps")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (mult-by 2 "teb")
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (lemma "Theta_H_on_H")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           (-1 -5 1 2))
                                                          (("2"
                                                            (typepred "eps")
                                                            (("2"
                                                              (grind
                                                               :exclude
                                                               "Theta_H")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (lemma "Theta_H_on_H")
                                            (("2"
                                              (inst
                                               -
                                               "1"
                                               "eps*MinRelVertSpeed"
                                               "s`z")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -2 :dir rl)
                                                  (("2"
                                                    (typepred "eps")
                                                    (("2"
                                                      (split -)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand "abs" -3)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (lemma
                                                                     "nnreal_times_nnreal_is_nnreal")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -2
                                                                          -7))
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "nv`z>=MinRelVertSpeed")
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "teb")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "-s`z+teb*MinRelVertSpeed = H")
                                                              (("1"
                                                                (case
                                                                 "-nv`z>=MinRelVertSpeed")
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "teb")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "nnreal_times_nnreal_is_nnreal")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -4
                                                                      -7
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertical_los_criterion? const-decl "bool" vertical_los_criterion nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (H formal-const-decl "posreal" vertical_los_criterion nil)
    (time_vertical_exit_by const-decl
     "{x: real | MinRelVertSpeed > 0 AND abs(sz) < H IMPLIES x > 0}"
     vertical_los_criterion nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vertical_sep_after const-decl "bool" vertical_los_criterion nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (Theta_H_on_H formula-decl nil vertical nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (min_rel_vert_speed const-decl "{x: nnreal | abs(sz) < H IMPLIES x > 0}"
     vertical_los_criterion nil)
    (sign const-decl "Sign" sign reals)
    (Theta_H const-decl "real" vertical nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vertical_sep_after_def formula-decl nil vertical_los_criterion nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil)
  (z_los_vertical_sep-1 nil 3527436633
   ("" (skeep)
    (("" (expand "vertical_los_criterion_vect?")
      (("" (flatten)
        (("" (name "teb" "time_vertical_exit_by(s`z, v`z, eps, tr)")
          (("" (typepred "teb")
            (("" (assert)
              (("" (case "teb <= tr")
                (("1" (replace -3)
                  (("1" (hide (-5 -3))
                    (("1" (expand "vertical_sep_after")
                      (("1" (skeep)
                        (("1" (case "eps*(s`z + t*nv`z)>=H")
                          (("1" (hide-all-but (-1 1))
                            (("1" (typepred "eps") (("1" (grind) nil)))))
                           ("2" (hide 2)
                            (("2" (case "eps*s`z < H")
                              (("1" (case "eps*nv`z >=0")
                                (("1" (mult-by -3 "eps*nv`z")
                                  (("1" (mult-by -7 "eps*nv`z")
                                    (("1" (grind) nil)))))
                                 ("2" (mult-by 1 "teb")
                                  (("2" (assert) nil)))))
                               ("2" (hide-all-but (-3 1))
                                (("2" (typepred "eps")
                                  (("2" (grind) nil)))))))))))))))))))
                 ("2" (hide-all-but 1)
                  (("2" (expand "teb")
                    (("2" (grind :exclude "Theta_H") nil))))))))))))))))))
    nil)
   ((Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Sign type-eq-decl nil sign reals))
   nil)))


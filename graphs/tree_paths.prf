(tree_paths
 (dual_paths?_TCC1 0
  (dual_paths?_TCC1-1 nil 3253637114 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (dual_paths? subtype "0" "below[length(p)]")))
 (dual_paths?_TCC2 0
  (dual_paths?_TCC2-1 nil 3253637114 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (dual_paths? subtype "0" "below[length(q)]")))
 (dual_paths?_TCC3 0
  (dual_paths?_TCC3-1 nil 3253637114 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (dual_paths? subtype "(number_fields.-)(length(tree_paths.p), 1)"
    "below[length(p)]")))
 (dual_paths?_TCC4 0
  (dual_paths?_TCC4-1 nil 3253637114 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (dual_paths? subtype "(number_fields.-)(length(tree_paths.q), 1)"
    "below[length(q)]")))
 (min_dual_paths_TCC1 0
  (min_dual_paths_TCC1-1 nil 3253637114
   ("" (skolem-typepred) (("" (inst + "(r!1,s!1)") nil nil)) nil)
   ((dual_paths? const-decl "bool" tree_paths nil)
    (Path type-eq-decl nil paths nil)
    (path? const-decl "bool" paths nil)
    (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (graph type-eq-decl nil graphs nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons "structures/")
    (dbl const-decl "set[T]" doubletons "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil tree_paths nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (min_dual_paths assuming
    "ints@abstract_min[[paths[tree_paths.T].Path(tree_paths.G), paths[tree_paths.T].Path(tree_paths.G)], (LAMBDA (r: paths[tree_paths.T].Path(tree_paths.G), s: paths[tree_paths.T].Path(tree_paths.G)): (number_fields.+)(length(r), length(s))), (LAMBDA (r: paths[tree_paths.T].Path(tree_paths.G), s: paths[tree_paths.T].Path(tree_paths.G)): tree_paths.dual_paths?(tree_paths.G, r, s))]"
    "T_ne: ASSUMPTION EXISTS (t: abstract_min.T): abstract_min.P(t)")))
 (min_dual_paths_TCC2 0
  (min_dual_paths_TCC2-1 nil 3253637114
   ("" (skolem-typepred)
    ((""
      (typepred "min[[Path(G!1), Path(G!1)],
                       LAMBDA (r: Path(G!1), s: Path(G!1)): length(r) + length(s),
                       LAMBDA (r: Path(G!1), s: Path(G!1)):
                         dual_paths?(G!1, r, s)]")
      (("1" (assert)
        (("1" (expand "minimal?") (("1" (propax) nil nil)) nil)) nil)
       ("2" (hide 2) (("2" (inst + "(r!1,s!1)") nil nil)) nil))
      nil))
    nil)
   ((min const-decl "{S: T | minimal?(S)}" abstract_min "ints/")
    (minimal? const-decl "bool" abstract_min "ints/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (Path type-eq-decl nil paths nil)
    (path? const-decl "bool" paths nil)
    (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (graph type-eq-decl nil graphs nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons "structures/")
    (dbl const-decl "set[T]" doubletons "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil tree_paths nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (min_dual_paths subtype
    "abstract_min[[paths[tree_paths.T].Path(tree_paths.G), paths[tree_paths.T].Path(tree_paths.G)], (LAMBDA (r: paths[tree_paths.T].Path(tree_paths.G), s: paths[tree_paths.T].Path(tree_paths.G)): (number_fields.+)(length(r), length(s))), (LAMBDA (r: paths[tree_paths.T].Path(tree_paths.G), s: paths[tree_paths.T].Path(tree_paths.G)): tree_paths.dual_paths?(tree_paths.G, r, s))].min"
    "tree_paths.Dual_paths(tree_paths.G)")))
 (min_dual_def 0
  (min_dual_def-1 nil 3253637114
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (assert)
        (("" (typepred "min_dual_paths(G!1, r!1, s!1)")
          (("" (assert)
            (("" (expand "is_min_dual?")
              (("" (skosimp*)
                (("" (expand "min_dual_paths")
                  ((""
                    (typepred "min[[Path(G!1), Path(G!1)],
                     LAMBDA (r: Path(G!1), s_2847: Path(G!1)):
                       length(r) + length(s_2847),
                     LAMBDA (r: Path(G!1), s_2848: Path(G!1)):
                       dual_paths?(G!1, r, s_2848)]")
                    (("1"
                      (name-replace minp "min[[Path(G!1), Path(G!1)],
                     LAMBDA (r: Path(G!1), s_2847: Path(G!1)):
                       length(r) + length(s_2847),
                     LAMBDA (r: Path(G!1), s_2848: Path(G!1)):
                       dual_paths?(G!1, r, s_2848)]")
                      (("1" (expand "minimal?")
                        (("1" (assert)
                          (("1" (inst - "(r!2,s!2)")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-8 1))
                      (("2" (inst + "(r!1,s!1)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min_dual_paths const-decl "Dual_paths(G)" tree_paths nil)
    (Dual_paths type-eq-decl nil tree_paths nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (is_min_dual? const-decl "bool" tree_paths nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{S: T | minimal?(S)}" abstract_min "ints/")
    (minimal? const-decl "bool" abstract_min "ints/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Path type-eq-decl nil paths nil)
    (path? const-decl "bool" paths nil)
    (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (graph type-eq-decl nil graphs nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons "structures/")
    (dbl const-decl "set[T]" doubletons "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil tree_paths nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (min_dual_exists 0
  (min_dual_exists-1 nil 3312299029
   ("" (skosimp*)
    ((""
      (inst 1 "proj_1(min_dual_paths(G!1,r!1,s!1))"
       "proj_2(min_dual_paths(G!1,r!1,s!1))")
      (("" (lemma "min_dual_def")
        (("" (inst -1 "G!1" "r!1" "s!1") (("" (bddsimp) nil nil)) nil))
        nil))
      nil))
    nil)
   (nil nil nil (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (Path type-eq-decl nil paths nil)
    (path? const-decl "bool" paths nil)
    (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons "structures/")
    (dbl const-decl "set[T]" doubletons "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil tree_paths nil)
    (Dual_paths type-eq-decl nil tree_paths nil)
    (min_dual_paths const-decl "Dual_paths(G)" tree_paths nil)
    (min_dual_def formula-decl nil tree_paths nil))
   nil))
 (dual_path_trunc_TCC1 0
  (dual_path_trunc_TCC1-1 nil 3312299267
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (dual_path_trunc subtype
    "(number_fields.-)(length(tree_paths.p), 2)" "nat")))
 (dual_path_trunc_TCC2 0
  (dual_path_trunc_TCC2-1 nil 3312299267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil tree_paths nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (Path type-eq-decl nil paths nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (verts_in? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (walk? const-decl "bool" walks nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (dual_path_trunc subtype
    "finite_sequences[tree_paths.T].^(tree_paths.p, (0, (number_fields.-)(length(tree_paths.p), 2)))"
    "prewalk[T]")))
 (dual_path_trunc_TCC3 0
  (dual_path_trunc_TCC3-1 nil 3312299267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (Path type-eq-decl nil paths nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil tree_paths nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil)
    (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil)
   nil
   (dual_path_trunc subtype
    "(number_fields.-)(length(tree_paths.q), 2)" "nat")))
 (dual_path_trunc_TCC4 0
  (dual_path_trunc_TCC4-1 nil 3312299267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (Path type-eq-decl nil paths nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil tree_paths nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil)
    (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil)
   nil
   (dual_path_trunc subtype
    "finite_sequences[tree_paths.T].^(tree_paths.q, (0, (number_fields.-)(length(tree_paths.q), 2)))"
    "prewalk[T]")))
 (dual_path_trunc_TCC5 0
  (dual_path_trunc_TCC5-1 nil 3312299267 ("" (subtype-tcc) nil nil)
   ((T formal-type-decl nil tree_paths nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil)
    (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil)
    (dual_paths? const-decl "bool" tree_paths nil) nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (dual_path_trunc subtype
    "(number_fields.-)(length(tree_paths.p), 1)" "nat")))
 (dual_path_trunc_TCC6 0
  (dual_path_trunc_TCC6-1 nil 3312299267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (Path type-eq-decl nil paths nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil tree_paths nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil)
    (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil)
   nil
   (dual_path_trunc subtype
    "finite_sequences[tree_paths.T].^(tree_paths.p, (1, (number_fields.-)(length(tree_paths.p), 1)))"
    "prewalk[T]")))
 (dual_path_trunc_TCC7 0
  (dual_path_trunc_TCC7-1 nil 3312299267 ("" (subtype-tcc) nil nil)
   ((T formal-type-decl nil tree_paths nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil)
    (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil)
    (dual_paths? const-decl "bool" tree_paths nil) nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (dual_path_trunc subtype
    "(number_fields.-)(length(tree_paths.q), 1)" "nat")))
 (dual_path_trunc_TCC8 0
  (dual_path_trunc_TCC8-1 nil 3312299267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (Path type-eq-decl nil paths nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil tree_paths nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil)
    (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil)
   nil
   (dual_path_trunc subtype
    "finite_sequences[tree_paths.T].^(tree_paths.q, (1, (number_fields.-)(length(tree_paths.q), 1)))"
    "prewalk[T]")))
 (dual_path_trunc 0
  (dual_path_trunc-2 nil 3312299311
   ("" (skosimp*)
    (("" (case "length(p!1)>1")
      (("1" (case "length(q!1)>1")
        (("1" (bddsimp)
          (("1" (typepred "q!1")
            (("1" (lemma "path?_caret")
              (("1" (inst? -1)
                (("1" (bddsimp (-1 -3 -4))
                  (("1" (propax) nil) ("2" (assert) nil)
                   ("3" (assert) nil)))))))))
           ("2" (lemma "path?_caret")
            (("2" (inst? -1)
              (("2" (typepred "p!1")
                (("2" (bddsimp (-2 -3 -5))
                  (("1" (propax) nil) ("2" (assert) nil)
                   ("3" (assert) nil)))))))))
           ("3" (typepred "q!1")
            (("3" (lemma "path?_caret")
              (("3" (inst? -1)
                (("1" (bddsimp (-1 -3 -4))
                  (("1" (propax) nil) ("2" (assert) nil)
                   ("3" (assert) nil)))
                 ("2" (assert) nil)))))))
           ("4" (typepred "p!1")
            (("4" (lemma "path?_caret")
              (("4" (inst? -1)
                (("1" (bddsimp (-1 -3 -5))
                  (("1" (propax) nil) ("2" (assert) nil)
                   ("3" (assert) nil)))
                 ("2" (assert) nil)))))))))
         ("2" (hide 2)
          (("2" (expand "dual_paths?")
            (("2" (bddsimp)
              (("2" (flatten)
                (("2" (case "length(q!1)=1")
                  (("1" (replace -1 * lr)
                    (("1" (assert)
                      (("1" (replace -4 -3 rl)
                        (("1" (typepred "p!1")
                          (("1" (expand "path?")
                            (("1" (flatten)
                              (("1"
                                (inst -3 "0" "length(p!1)-1")
                                (("1" (assert) nil)))))))))))))))
                   ("2" (assert) nil)))))))))))))
       ("2" (hide 2)
        (("2" (case "length(p!1)=1")
          (("1" (expand "dual_paths?")
            (("1" (flatten)
              (("1" (replace -1 * lr)
                (("1" (assert)
                  (("1" (replace -3 -2 lr)
                    (("1" (typepred "q!1")
                      (("1" (expand "path?")
                        (("1" (flatten)
                          (("1" (inst -3 "0" "length(q!1)-1")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (case "length(q!1)=1")
                                  (("1"
                                    (apply-extensionality 2 :hide? t)
                                    (("1"
                                      (apply-extensionality 1 :hide? t)
                                      (("1" (grind) nil)))))
                                   ("2"
                                    (assert)
                                    nil)))))))))))))))))))))))))
           ("2" (assert) nil))))))))
    nil)
   ((Path type-eq-decl nil paths nil)
    (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (path? const-decl "bool" paths nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons "structures/")
    (dbl const-decl "set[T]" doubletons "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil tree_paths nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (path?_caret formula-decl nil paths nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil nil nil
    (walk? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (verts_in? const-decl "bool" walks nil))
   nil)
  (dual_path_trunc-1 nil 3312299283
   ("" (skosimp*)
    (("" (lemma " dual_path_trunc")
      (("" (inst -1 "G!1" "p!1" "q!1")
        (("" (bddsimp)
          (("" (delete -4 -5 -6 -7)
            (("" (expand "dual_paths?")
              (("" (flatten)
                (("" (expand "finseq_appl")
                  (("" (lemma "plus_up")
                    (("" (inst? -1)
                      ((""
                        (inst -1 "seq(p!1)(0)"
                         "seq(p!1)(length(p!1)-1)")
                        (("" (assert)
                          (("" (bddsimp)
                            (("1" (install-rewrites "walks[T]")
                              (("1"
                                (assert)
                                (("1"
                                  (case "length(p!1)=2")
                                  (("1"
                                    (replace -1 * lr)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "length(q!1)=2")
                                        (("1"
                                          (replace -1 * lr)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (delete -5 -6)
                                              (("1"
                                                (delete 3 4)
                                                (("1"
                                                  (apply-extensionality
                                                   1
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (replace -1 * lr)
                                                    (("1"
                                                      (replace -2 * lr)
                                                      (("1"
                                                        (assert)
                                                        nil)))))))))))))))
                                         ("2" (assert) nil)))))))
                                   ("2" (assert) nil)))))))
                             ("2" (install-rewrites "walks[T]")
                              (("2" (assert) nil)))
                             ("3" (install-rewrites "walks[T]")
                              (("3" (assert) nil)))
                             ("4" (assert)
                              (("4"
                                (lemma "path_one")
                                (("4"
                                  (inst
                                   -1
                                   "G!1"
                                   "p!1"
                                   "seq(p!1)(0)"
                                   "seq(p!1)(length(p!1)-1)")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (expand "path_from?")
                                      (("4"
                                        (expand "from?")
                                        (("4"
                                          (propax)
                                          nil))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (dual_path_length 0
  (dual_path_length-2 nil 3312300679
   ("" (auto-rewrite "finseq_appl")
    (("" (skosimp*)
      (("" (lemma " dual_path_trunc")
        (("" (inst -1 "G!1" "p!1" "q!1")
          (("" (prop)
            (("" (hide -3 -4 -5 -6)
              (("" (case "length(p!1)=2 AND length(q!1)=2")
                (("1" (hide -2 -3 1 2)
                  (("1" (flatten)
                    (("1" (expand "dual_paths?")
                      (("1" (flatten)
                        (("1" (lemma "plus_up")
                          (("1" (assert)
                            (("1"
                              (inst -1 "p!1" "q!1" "seq(p!1)(0)"
                               "seq(p!1)(length(p!1)-1)")
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "trunc1")
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (expand* "^" "min")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 1)
                                        (("2"
                                          (typepred "x!1")
                                          (("2"
                                            (expand* "^" "min")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "path_one")
                                    (("2"
                                      (inst
                                       -1
                                       "G!1"
                                       "q!1"
                                       "seq(q!1)(0)"
                                       "seq(q!1)(length(q!1)-1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand*
                                           "path_from?"
                                           "from?")
                                          (("2"
                                            (expand "circuit?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "cyclically_reduced?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "from?")
                                    (("3" (propax) nil nil))
                                    nil)
                                   ("4"
                                    (expand "from?")
                                    (("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil tree_paths nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (Path type-eq-decl nil paths nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (plus_up formula-decl nil path_circ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "finseq" finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (trunc1 const-decl "prewalk" walks nil)
    (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (cyclically_reduced? const-decl "bool" circuits nil)
    (circuit? const-decl "bool" circuits nil)
    (path_one formula-decl nil path_circ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (dual_path_trunc formula-decl nil tree_paths nil))
   nil)
  (dual_path_length-1 nil 3312299342
   ("" (skosimp*)
    (("" (lemma " dual_path_trunc")
      (("" (inst -1 "G!1" "p!1" "q!1")
        (("" (bddsimp)
          (("" (delete -4 -5 -6 -7)
            (("" (expand "dual_paths?")
              (("" (flatten)
                (("" (lemma "plus_up")
                  (("" (inst? -1)
                    ((""
                      (inst -1 "seq(p!1)(0)" "seq(p!1)(length(p!1)-1)")
                      (("" (assert)
                        (("" (bddsimp)
                          (("1" (install-rewrites "walks[T]")
                            (("1" (assert)
                              (("1"
                                (case "length(p!1)=2")
                                (("1"
                                  (replace -1 * lr)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "length(q!1)=2")
                                      (("1"
                                        (replace -1 * lr)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (delete -5 -6)
                                            (("1"
                                              (delete 3 4)
                                              (("1"
                                                (apply-extensionality
                                                 1
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (replace -1 * lr)
                                                  (("1"
                                                    (replace -2 * lr)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (install-rewrites "walks[T]")
                            (("2" (assert) nil nil)) nil)
                           ("3" (install-rewrites "walks[T]")
                            (("3" (assert) nil nil)) nil)
                           ("4" (flatten)
                            (("4" (assert)
                              (("4"
                                (lemma "path_one")
                                (("4"
                                  (inst
                                   -1
                                   "G!1"
                                   "p!1"
                                   "seq(p!1)(0)"
                                   "seq(p!1)(length(p!1)-1)")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (expand "path_from?")
                                      (("4"
                                        (expand "from?")
                                        (("4"
                                          (assert)
                                          (("4" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil)
    (Graph type-eq-decl nil graphs nil)
    (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (Path type-eq-decl nil paths nil)
    (path_one formula-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (walk? const-decl "bool" walks nil)
    (reducible? const-decl "bool" circuits nil)
    (reduced? const-decl "bool" circuits nil)
    (cyclically_reduced? const-decl "bool" circuits nil)
    (pre_circuit? const-decl "bool" walks nil)
    (circuit? const-decl "bool" circuits nil)
    (path_from? const-decl "bool" paths nil)
    (from? const-decl "bool" walks nil)
    (trunc1 const-decl "prewalk" walks nil)
    (plus_up formula-decl nil path_circ nil))
   nil))
 (min_dual_reduc_TCC1 0
  (min_dual_reduc_TCC1-2 nil 3312300142
   ("" (skosimp*)
    (("" (expand "is_min_dual?")
      (("" (flatten)
        (("" (lemma "dual_path_trunc")
          (("" (inst? -1)
            (("" (bddsimp (-1 -2)) (("" (assert) nil))))))))))))
    nil)
   ((is_min_dual? const-decl "bool" tree_paths nil)
    (dual_path_trunc formula-decl nil tree_paths nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Path type-eq-decl nil paths nil)
    (path? const-decl "bool" paths nil)
    (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons "structures/")
    (dbl const-decl "set[T]" doubletons "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil tree_paths nil))
   nil (min_dual_reduc subtype "1" "below[length(p)]"))
  (min_dual_reduc_TCC1-1 nil 3312299267 ("" (subtype-tcc) nil nil) nil
   nil (min_dual_reduc subtype "1" "below[length(p)]")))
 (min_dual_reduc_TCC2 0
  (min_dual_reduc_TCC2-3 nil 3312300240
   ("" (skosimp*)
    (("" (expand "is_min_dual?")
      (("" (flatten)
        (("" (lemma "dual_path_trunc")
          (("" (inst? -1)
            (("" (bddsimp (-1 -2)) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((is_min_dual? const-decl "bool" tree_paths nil)
    (dual_path_trunc formula-decl nil tree_paths nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Path type-eq-decl nil paths nil)
    (path? const-decl "bool" paths nil)
    (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons "structures/")
    (dbl const-decl "set[T]" doubletons "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil tree_paths nil))
   nil (min_dual_reduc subtype "1" "below[length(q)]"))
  (min_dual_reduc_TCC2-2 nil 3312300182
   ("" (skolem-typepred)
    ((""
      (typepred "min[[Path(G!1), Path(G!1)],
                         LAMBDA (r: Path(G!1), s: Path(G!1)): length(r) + length(s),
                         LAMBDA (r: Path(G!1), s: Path(G!1)):
                           dual_paths?(G!1, r, s)]")
      (("1" (assert) (("1" (expand "minimal?") (("1" (propax) nil)))))
       ("2" (hide 2) (("2" (inst + "(r!1,s!1)") nil))))))
    nil)
   nil nil (min_dual_reduc subtype "1" "below[length(q)]"))
  (min_dual_reduc_TCC2-1 nil 3312299267 ("" (subtype-tcc) nil nil) nil
   nil (min_dual_reduc subtype "1" "below[length(q)]")))
 (min_dual_reduc_TCC3 0
  (min_dual_reduc_TCC3-2 nil 3312300261
   ("" (skosimp*)
    (("" (expand "finseq_appl")
      (("" (expand "is_min_dual?")
        (("" (flatten)
          (("" (lemma "dual_path_trunc")
            (("" (inst? -1)
              (("" (bddsimp (-1 -2)) (("" (assert) nil))))))))))))))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (T formal-type-decl nil tree_paths nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (Path type-eq-decl nil paths nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dual_path_trunc formula-decl nil tree_paths nil)
    (is_min_dual? const-decl "bool" tree_paths nil))
   nil
   (min_dual_reduc subtype "(number_fields.-)(length(tree_paths.p), 2)"
    "below[length(p)]"))
  (min_dual_reduc_TCC3-1 nil 3312299267 ("" (subtype-tcc) nil nil) nil
   nil
   (min_dual_reduc subtype "(number_fields.-)(length(tree_paths.p), 2)"
    "below[length(p)]")))
 (min_dual_reduc_TCC4 0
  (min_dual_reduc_TCC4-2 nil 3312300280
   ("" (skosimp*)
    (("" (expand "is_min_dual?")
      (("" (flatten)
        (("" (lemma "dual_path_trunc")
          (("" (inst? -1)
            (("" (bddsimp (-1 -2)) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((is_min_dual? const-decl "bool" tree_paths nil)
    (dual_path_trunc formula-decl nil tree_paths nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Path type-eq-decl nil paths nil)
    (path? const-decl "bool" paths nil)
    (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons "structures/")
    (dbl const-decl "set[T]" doubletons "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil tree_paths nil))
   nil
   (min_dual_reduc subtype "(number_fields.-)(length(tree_paths.q), 2)"
    "below[length(q)]"))
  (min_dual_reduc_TCC4-1 nil 3312299267 ("" (subtype-tcc) nil nil) nil
   nil
   (min_dual_reduc subtype "(number_fields.-)(length(tree_paths.q), 2)"
    "below[length(q)]")))
 (min_dual_reduc 0
  (min_dual_reduc-1 nil 3312299362
   ("" (skosimp*)
    (("" (expand "finseq_appl")
      (("" (lemma "dual_path_trunc")
        (("" (inst? -1)
          (("" (inst -1 "q!1")
            (("" (expand "is_min_dual?")
              (("" (flatten)
                (("" (bddsimp (-1 -2))
                  ((""
                    (inst -8 "p!1^(0,length(p!1)-2)"
                     "q!1^(0,length(q!1)-2)")
                    (("1" (bddsimp)
                      (("1" (hide -1 -4 -5 -6 -7)
                        (("1" (install-rewrites "walks[T]")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide -1 -4 -5 -6 -7)
                        (("2" (install-rewrites "walks[T]")
                          (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (expand "dual_paths?")
                        (("3" (expand "finseq_appl")
                          (("3" (flatten)
                            (("3" (bddsimp)
                              (("1"
                                (expand "^" 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "min")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "^" 2)
                                (("2"
                                  (expand "empty_seq")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3"
                                  (hide -5 -6 -7 -8)
                                  (("3"
                                    (install-rewrites "walks[T]")
                                    (("3"
                                      (apply-extensionality 1)
                                      (("3"
                                        (apply-extensionality
                                         1
                                         :hide?
                                         t)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (case
                                             "(LAMBDA (x: below[min(length(p!1) - 1, p!1`length)]): p!1`seq(x))(x!1) =
                                   (LAMBDA (x: below[min(length(q!1) - 1, q!1`length)]): q!1`seq(x))(x!1)")
                                            (("1"
                                              (hide -7)
                                              (("1"
                                                (beta -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -6 1 lr)
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (typepred "x!1")
                                              (("3"
                                                (replace -6 -1 lr)
                                                (("3"
                                                  (case
                                                   "x!1=length(q!1)-1")
                                                  (("1"
                                                    (replace -1 2 lr)
                                                    (("1"
                                                      (replace
                                                       -7
                                                       -4
                                                       lr)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (typepred "x!1")
                                              (("4"
                                                (case
                                                 "x!1=length(p!1)-1")
                                                (("1"
                                                  (replace -1 2 lr)
                                                  (("1"
                                                    (replace -7 -4 rl)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (expand "dual_paths?")
                        (("4" (expand "finseq_appl")
                          (("4" (flatten)
                            (("4" (bddsimp)
                              (("1"
                                (expand "^" 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "min")
                                    (("1"
                                      (reveal -1)
                                      (("1"
                                        (inst
                                         -1
                                         "p!1^(1,length(p!1)-1)"
                                         "q!1^(1,length(q!1)-1)")
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (hide -6 -7 -8 -9)
                                            (("1"
                                              (install-rewrites
                                               "walks[T]")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "dual_paths?")
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (bddsimp)
                                                (("1"
                                                  (expand "^" 1)
                                                  (("1"
                                                    (expand "min")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "^" 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (flatten)
                                                  (("3"
                                                    (hide -6 -7 -8 -9)
                                                    (("3"
                                                      (install-rewrites
                                                       "walks[T]")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (apply-extensionality
                                                             1
                                                             :hide?
                                                             t)
                                                            (("3"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("3"
                                                                (case
                                                                 "(LAMBDA (x: below[min(length(p!1) - 1, p!1`length - 1)]): p!1`seq(1 + x))(x!1-1) =
              (LAMBDA (x: below[min(length(q!1) - 1, q!1`length - 1)]): q!1`seq(1 + x))(x!1-1)")
                                                                (("1"
                                                                  (beta
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -2
                                                                   1
                                                                   lr)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "^" 2)
                                (("2"
                                  (expand "empty_seq")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "^" 2)
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide -5 -6 -7 -8)
                                    (("3"
                                      (expand "min")
                                      (("3"
                                        (install-rewrites "walks[T]")
                                        (("3"
                                          (apply-extensionality
                                           1
                                           :hide?
                                           t)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              (("3"
                                                (case
                                                 "(LAMBDA (x: below[min(length(p!1) - 1, p!1`length)]): p!1`seq(x))(x!1) =
                                   (LAMBDA (x: below[min(length(q!1) - 1, q!1`length)]): q!1`seq(x))(x!1)")
                                                (("1"
                                                  (hide -7)
                                                  (("1"
                                                    (beta -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -6 1 lr)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (bddsimp)
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (T formal-type-decl nil tree_paths nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (Path type-eq-decl nil paths nil)
    (is_min_dual? const-decl "bool" tree_paths nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "finseq" finite_sequences nil) nil
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dual_path_trunc formula-decl nil tree_paths nil))
   nil))
 (min_dual_distin_TCC1 0
  (min_dual_distin_TCC1-1 nil 3312299267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil tree_paths nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (Path type-eq-decl nil paths nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (walk? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (verts_in? const-decl "bool" walks nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (is_min_dual? const-decl "bool" tree_paths nil))
   nil (min_dual_distin subtype "tree_paths.i" "below[length(p)]")))
 (min_dual_distin_TCC2 0
  (min_dual_distin_TCC2-1 nil 3312299267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil tree_paths nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (Path type-eq-decl nil paths nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (walk? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (verts_in? const-decl "bool" walks nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (is_min_dual? const-decl "bool" tree_paths nil))
   nil (min_dual_distin subtype "tree_paths.j" "below[length(q)]")))
 (min_dual_distin 0
  (min_dual_distin-1 nil 3312299391
   ("" (skosimp*)
    (("" (lemma "min_dual_reduc")
      (("" (expand "finseq_appl")
        (("" (inst? -1)
          (("" (bddsimp (-1 -2))
            (("" (expand "is_min_dual?")
              (("" (flatten)
                (("" (lemma "dual_path_trunc")
                  (("" (inst? -1)
                    (("" (bddsimp (-1 -2))
                      (("" (delete -4 -5 -6 -7)
                        (("" (hide -2 -3)
                          (("" (inst -2 "p!1^(0,i!1)" "q!1^(0,j!1)")
                            (("1" (expand "dual_paths?")
                              (("1"
                                (expand "finseq_appl")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (expand* "^" "min")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand* "^" "min")
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3"
                                      (expand* "^" "min")
                                      (("3" (assert) nil nil))
                                      nil)
                                     ("4"
                                      (expand* "^" "min")
                                      (("4" (assert) nil nil))
                                      nil)
                                     ("5" (expand* "^" "min") nil nil)
                                     ("6" (expand* "^" "min") nil nil)
                                     ("7"
                                      (expand* "^" "min")
                                      (("7"
                                        (flatten)
                                        (("7"
                                          (case
                                           " (LAMBDA (x: below[min(1 + i!1, p!1`length)]): p!1`seq(x))(1) = (LAMBDA (x: below[min(1 + j!1, q!1`length)]): q!1`seq(x))(1)")
                                          (("1"
                                            (beta -1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (replace -4 1 lr)
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (skosimp*)
                                            (("3" (assert) nil nil))
                                            nil)
                                           ("4"
                                            (expand "min")
                                            (("4" (assert) nil nil))
                                            nil)
                                           ("5"
                                            (skosimp*)
                                            (("5" (assert) nil nil))
                                            nil)
                                           ("6"
                                            (expand "min")
                                            (("6" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("8"
                                      (expand* "^" "min")
                                      (("8"
                                        (flatten)
                                        (("8"
                                          (assert)
                                          (("8"
                                            (case
                                             " (LAMBDA (x: below[min(1 + i!1, p!1`length)]): p!1`seq(x))(1) = (LAMBDA (x: below[min(1 + j!1, q!1`length)]): q!1`seq(x))(1)")
                                            (("1"
                                              (beta -1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (replace -4 1 lr)
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (skosimp*)
                                              (("3" (assert) nil nil))
                                              nil)
                                             ("4"
                                              (expand "min")
                                              (("4" (assert) nil nil))
                                              nil)
                                             ("5"
                                              (skosimp*)
                                              (("5" (assert) nil nil))
                                              nil)
                                             ("6"
                                              (expand "min")
                                              (("6" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lemma "path?_caret")
                                (("2"
                                  (inst -1 "G!1" "0" "j!1" "q!1")
                                  (("2"
                                    (typepred "j!1")
                                    (("2"
                                      (expand "dual_paths?")
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (typepred "q!1")
                                          (("2"
                                            (assert (-3 -4 -7))
                                            (("2"
                                              (bddsimp)
                                              (("1"
                                                (expand "^" 1)
                                                (("1"
                                                  (expand "min")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "^" 1)
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (bddsimp)
                              (("1"
                                (lemma "path?_caret")
                                (("1"
                                  (inst -1 "G!1" "0" "i!1" "p!1")
                                  (("1"
                                    (typepred "p!1")
                                    (("1"
                                      (assert (-2 -3 -4))
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "path?_caret")
                                (("2"
                                  (inst -1 "G!1" "0" "i!1" "p!1")
                                  (("2"
                                    (typepred "i!1")
                                    (("2"
                                      (typepred "p!1")
                                      (("2"
                                        (assert (-2 -3 -4))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand* "^" min)
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (expand* "^" min)
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min_dual_reduc formula-decl nil tree_paths nil)
    (T formal-type-decl nil tree_paths nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (Path type-eq-decl nil paths nil)
    (is_min_dual? const-decl "bool" tree_paths nil)
    (dual_path_trunc formula-decl nil tree_paths nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (path?_caret formula-decl nil paths nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    nil nil
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "finseq" finite_sequences nil) nil nil nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (dual_cycle_TCC1 0
  (dual_cycle_TCC1-1 nil 3312301088 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil tree_paths nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (Path type-eq-decl nil paths nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (walk? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (verts_in? const-decl "bool" walks nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (dual_paths? const-decl "bool" tree_paths nil))
   nil (dual_cycle subtype "tree_paths.i" "below[length(p)]")))
 (dual_cycle_TCC2 0
  (dual_cycle_TCC2-1 nil 3312301088 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil tree_paths nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (Path type-eq-decl nil paths nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (walk? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (verts_in? const-decl "bool" walks nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (dual_paths? const-decl "bool" tree_paths nil))
   nil (dual_cycle subtype "tree_paths.j" "below[length(q)]")))
 (dual_cycle_TCC3 0
  (dual_cycle_TCC3-2 nil 3312305764
   ("" (skosimp*)
    (("" (lemma "dual_path_trunc")
      (("" (inst? -1)
        (("" (bddsimp (-1 -2))
          (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((dual_path_trunc formula-decl nil tree_paths nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Path type-eq-decl nil paths nil)
    (path? const-decl "bool" paths nil)
    (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons "structures/")
    (dbl const-decl "set[T]" doubletons "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil tree_paths nil))
   nil (dual_cycle subtype "tree_paths.p" "Longprewalk[T]"))
  (dual_cycle_TCC3-1 nil 3312301088 ("" (subtype-tcc) nil nil) nil nil
   (dual_cycle subtype "tree_paths.p" "Longprewalk[T]")))
 (dual_cycle_TCC4 0
  (dual_cycle_TCC4-2 nil 3312305798
   ("" (skosimp*)
    (("" (hide -2)
      (("" (lemma "dual_path_trunc")
        (("" (inst? -1)
          (("" (bddsimp (-1 -2))
            (("" (delete -4 -5 -6 -7)
              (("" (lemma "walk_concat")
                ((""
                  (inst -1 "G!1" "p!1`seq(0)" "q!1`seq(0)"
                   "p!1`seq(length(p!1)-1)" "p!1" "q!1")
                  (("" (expand "walk_from?")
                    (("" (expand "dual_paths?")
                      (("" (expand "finseq_appl")
                        (("" (flatten)
                          (("" (typepred "p!1")
                            (("" (typepred "q!1")
                              ((""
                                (delete -1 -3)
                                ((""
                                  (expand "path?")
                                  ((""
                                    (flatten)
                                    ((""
                                      (hide -2 -4)
                                      ((""
                                        (bddsimp (-1 -2 -6 -3))
                                        (("1"
                                          (expand "trunc1")
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand "walk?" -6)
                                              (("1"
                                                (expand "finseq_appl")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "rev" 2)
                                              (("2"
                                                (expand "^" 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide
                                                     -1
                                                     -2
                                                     -4
                                                     -5
                                                     -6)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil tree_paths nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (Path type-eq-decl nil paths nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (trunc1 const-decl "prewalk" walks nil)
    (rev const-decl "finseq[T]" doubletons "structures/")
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (O const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (walk? const-decl "bool" walks nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (walk_from? const-decl "bool" walks nil)
    (walk_concat formula-decl nil walks nil)
    (dual_path_trunc formula-decl nil tree_paths nil))
   nil
   (dual_cycle subtype
    "finite_sequences[tree_paths.T].o(walks[tree_paths.T].trunc1(tree_paths.p), doubletons[tree_paths.T].rev(tree_paths.q))"
    "walks[tree_paths.T].Seq(tree_paths.G)"))
  (dual_cycle_TCC4-1 nil 3312301088 ("" (subtype-tcc) nil nil) nil nil
   (dual_cycle subtype
    "finite_sequences[tree_paths.T].o(walks[tree_paths.T].trunc1(tree_paths.p), doubletons[tree_paths.T].rev(tree_paths.q))"
    "walks[tree_paths.T].Seq(tree_paths.G)")))
 (dual_cycle 0
  (dual_cycle-1 nil 3312301113
   ("" (skosimp*)
    (("" (lemma "dual_path_length")
      (("" (inst? -1)
        (("" (bddsimp (-1 -2))
          (("1" (hide -2)
            (("1" (expand "cycle?")
              (("1" (expand "finseq_appl")
                (("1" (bddsimp)
                  (("1" (skosimp*)
                    (("1" (typepred "i!1")
                      (("1" (typepred "j!1")
                        (("1" (case "i!1<length(p!1)-1")
                          (("1" (case "j!1<length(p!1)-1")
                            (("1" (hide -6)
                              (("1"
                                (expand "dual_paths?")
                                (("1"
                                  (expand "finseq_appl")
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (typepred "p!1")
                                      (("1"
                                        (typepred "q!1")
                                        (("1"
                                          (expand "trunc1")
                                          (("1"
                                            (expand "endpoint?")
                                            (("1"
                                              (expand "o ")
                                              (("1"
                                                (expand*
                                                 "^"
                                                 min
                                                 empty_seq)
                                                (("1"
                                                  (expand "rev")
                                                  (("1"
                                                    (install-rewrites
                                                     "walks[T]")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide
                                                           -11
                                                           -12
                                                           -3
                                                           -7)
                                                          (("1"
                                                            (inst
                                                             -6
                                                             "i!1"
                                                             "j!1")
                                                            (("1"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "p!1")
                                      (("2"
                                        (typepred "q!1")
                                        (("2"
                                          (expand "trunc1")
                                          (("2"
                                            (expand "endpoint?")
                                            (("2"
                                              (expand "o ")
                                              (("2"
                                                (expand*
                                                 "^"
                                                 min
                                                 empty_seq)
                                                (("2"
                                                  (expand "rev")
                                                  (("2"
                                                    (install-rewrites
                                                     "walks[T]")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4
                                                           -7
                                                           -11
                                                           -12)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "i!1"
                                                             "j!1")
                                                            (("2"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst -5 "i!1"
                               "length(q!1)+length(p!1)-j!1-2")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "endpoint?")
                                  (("1"
                                    (expand "o" 3)
                                    (("1"
                                      (expand "rev" 3)
                                      (("1"
                                        (expand "trunc1" 3)
                                        (("1"
                                          (expand "^" 3)
                                          (("1"
                                            (expand "min" 3)
                                            (("1"
                                              (expand "trunc1" -6)
                                              (("1"
                                                (expand "o" -6)
                                                (("1"
                                                  (expand "rev" -6)
                                                  (("1"
                                                    (expand "^" -6)
                                                    (("1"
                                                      (expand "min" -6)
                                                      (("1"
                                                        (bddsimp
                                                         (-5 -6))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "j!1=length(p!1)-1")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               *
                                                               lr)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "dual_paths?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "finseq_appl")
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -7
                                                                         rl)
                                                                        (("1"
                                                                          (typepred
                                                                           "p!1")
                                                                          (("1"
                                                                            (expand
                                                                             "path?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "finseq_appl")
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "length(p!1)-1"
                                                                                   "i!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide -4 -5 4)
                                  (("2"
                                    (install-rewrites "walks[T]")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "j!1<length(p!1)-1")
                            (("1"
                              (inst -5 "j!1"
                               "length(q!1)+length(p!1)-i!1-2")
                              (("1"
                                (expand "endpoint?")
                                (("1"
                                  (hide -2 -3 -4)
                                  (("1"
                                    (expand "o")
                                    (("1"
                                      (expand "rev")
                                      (("1"
                                        (expand "trunc1")
                                        (("1"
                                          (expand* "^" min empty_seq)
                                          (("1"
                                            (install-rewrites
                                             "walks[T]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (bddsimp -2 -3)
                                                (("1" (assert) nil nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (assert)
                                                  (("3"
                                                    (case
                                                     "i!1=length(p!1)-1")
                                                    (("1"
                                                      (replace -1 * lr)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (reveal -3)
                                                          (("1"
                                                            (expand
                                                             "dual_paths?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   -5
                                                                   rl)
                                                                  (("1"
                                                                    (typepred
                                                                     "p!1")
                                                                    (("1"
                                                                      (expand
                                                                       "path?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "finseq_appl")
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "length(p!1)-1"
                                                                             "j!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -4 -5 4)
                                (("2"
                                  (install-rewrites "walks[T]")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -4)
                              (("2"
                                (typepred "q!1")
                                (("2"
                                  (expand "path?")
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide -2 -6)
                                        (("2"
                                          (inst
                                           -2
                                           "length(q!1)+length(p!1)-i!1-2"
                                           "length(q!1)+length(p!1)-j!1-2")
                                          (("1"
                                            (expand "endpoint?")
                                            (("1"
                                              (expand "o")
                                              (("1"
                                                (expand "rev")
                                                (("1"
                                                  (expand "trunc1")
                                                  (("1"
                                                    (expand*
                                                     "^"
                                                     min
                                                     empty_seq)
                                                    (("1"
                                                      (install-rewrites
                                                       "walks[T]")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if -4)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -4 5)
                                            (("2"
                                              (install-rewrites
                                               "walks[T]")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand*
                                                   "^"
                                                   min
                                                   empty_seq)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lift-if -2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -4 5)
                                            (("3"
                                              (install-rewrites
                                               "walks[T]")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand*
                                                   "^"
                                                   min
                                                   empty_seq)
                                                  (("3"
                                                    (lift-if -2)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (lift-if -3)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "dual_paths?")
                    (("2" (flatten)
                      (("2" (hide -1 -2)
                        (("2" (inst -1 "1" "1")
                          (("2" (reveal -4)
                            (("2" (assert (-1 -2))
                              (("2"
                                (bddsimp)
                                (("1"
                                  (expand "o")
                                  (("1"
                                    (expand "trunc1")
                                    (("1"
                                      (expand* "^" min empty_seq)
                                      (("1"
                                        (expand "rev")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "length(q!1)>1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (reveal -2 -3)
                                              (("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (case
                                                   "length(q!1)=1")
                                                  (("1"
                                                    (lemma
                                                     "walk_from_l")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "q!1"
                                                       "q!1`seq(0)"
                                                       "q!1`seq(length(q!1)-1)")
                                                      (("1"
                                                        (expand
                                                         "from?")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               *
                                                               lr)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "path_one")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "G!1"
                                                                     "p!1"
                                                                     "p!1`seq(0)"
                                                                     "p!1`seq(length(p!1)-1)")
                                                                    (("1"
                                                                      (typepred
                                                                       "p!1")
                                                                      (("1"
                                                                        (expand
                                                                         "path_from?")
                                                                        (("1"
                                                                          (expand
                                                                           "from?")
                                                                          (("1"
                                                                            (expand
                                                                             "circuit?")
                                                                            (("1"
                                                                              (expand
                                                                               "cyclically_reduced?")
                                                                              (("1"
                                                                                (expand
                                                                                 "finseq_appl")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "length(q!1)=1")
                                  (("1"
                                    (reveal -2 -3)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (lemma "walk_from_l")
                                        (("1"
                                          (inst
                                           -1
                                           "q!1"
                                           "q!1`seq(0)"
                                           "q!1`seq(length(q!1)-1)")
                                          (("1"
                                            (expand "from?")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (replace -3 * lr)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "path_one")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G!1"
                                                         "p!1"
                                                         "p!1`seq(0)"
                                                         "p!1`seq(length(p!1)-1)")
                                                        (("1"
                                                          (typepred
                                                           "p!1")
                                                          (("1"
                                                            (expand
                                                             "path_from?")
                                                            (("1"
                                                              (expand
                                                               "from?")
                                                              (("1"
                                                                (expand
                                                                 "trunc1")
                                                                (("1"
                                                                  (expand
                                                                   "o ")
                                                                  (("1"
                                                                    (expand
                                                                     "^")
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (expand
                                                                         "rev")
                                                                        (("1"
                                                                          (replace
                                                                           -6)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "circuit?")
                                                                              (("1"
                                                                                (expand
                                                                                 "cyclically_reduced?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "finseq_appl")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "q!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (reveal -2 -3)
                                          (("2"
                                            (hide -4)
                                            (("2"
                                              (expand "o ")
                                              (("2"
                                                (expand "trunc1")
                                                (("2"
                                                  (expand "rev")
                                                  (("2"
                                                    (expand*
                                                     "^"
                                                     min
                                                     empty_seq)
                                                    (("2"
                                                      (expand
                                                       "finseq_appl")
                                                      (("2"
                                                        (case
                                                         "length(q!1)=2")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           *
                                                           lr)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "p!1")
                                                              (("1"
                                                                (expand
                                                                 "path?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "finseq_appl")
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "1"
                                                                         "length(p!1)-1")
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           -8
                                                                           rl)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "dual_path_trunc")
                    (("3" (inst? -1)
                      (("3" (bddsimp (-1 -2))
                        (("3" (delete -4 -5 -6 7-)
                          (("3" (hide -1)
                            (("3" (hide -3 -4)
                              (("3"
                                (install-rewrites "walks[T]")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide -2)
                    (("4" (lemma "dual_path_trunc")
                      (("4" (inst -1 "G!1" "p!1" "q!1")
                        (("4" (bddsimp (-1 -2))
                          (("4" (delete -4 -5 -6 -7)
                            (("4" (expand "dual_paths?")
                              (("4"
                                (flatten)
                                (("4"
                                  (expand "pre_circuit?")
                                  (("4"
                                    (expand "finseq_appl")
                                    (("4"
                                      (bddsimp)
                                      (("1"
                                        (install-rewrites "walks[T]")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (lemma "walk_concat")
                                        (("2"
                                          (inst
                                           -1
                                           "G!1"
                                           "p!1`seq(0)"
                                           "q!1`seq(0)"
                                           "p!1`seq(length(p!1)-1)"
                                           "p!1"
                                           "q!1")
                                          (("2"
                                            (typepred "p!1")
                                            (("2"
                                              (typepred "q!1")
                                              (("2"
                                                (expand "path?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -3 -6 -1 -4)
                                                    (("2"
                                                      (expand
                                                       "walk_from?")
                                                      (("2"
                                                        (bddsimp)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -4
                                                           -5)
                                                          (("1"
                                                            (expand
                                                             "trunc1")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -2)
            (("2" (expand "cycle?")
              (("2" (expand "finseq_appl")
                (("2" (bddsimp)
                  (("1" (skosimp*)
                    (("1" (typepred "i!1")
                      (("1" (typepred "j!1")
                        (("1" (case "i!1<length(p!1)-1")
                          (("1" (case "j!1<length(p!1)-1")
                            (("1" (hide -6)
                              (("1"
                                (expand "dual_paths?")
                                (("1"
                                  (expand "finseq_appl")
                                  (("1"
                                    (bddsimp)
                                    (("1"
                                      (typepred "p!1")
                                      (("1"
                                        (typepred "q!1")
                                        (("1"
                                          (expand "trunc1")
                                          (("1"
                                            (expand "endpoint?")
                                            (("1"
                                              (expand "o ")
                                              (("1"
                                                (expand*
                                                 "^"
                                                 min
                                                 empty_seq)
                                                (("1"
                                                  (expand "rev")
                                                  (("1"
                                                    (install-rewrites
                                                     "walks[T]")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide
                                                           -11
                                                           -12
                                                           -3
                                                           -7)
                                                          (("1"
                                                            (inst
                                                             -6
                                                             "i!1"
                                                             "j!1")
                                                            (("1"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "p!1")
                                      (("2"
                                        (typepred "q!1")
                                        (("2"
                                          (expand "trunc1")
                                          (("2"
                                            (expand "endpoint?")
                                            (("2"
                                              (expand "o ")
                                              (("2"
                                                (expand*
                                                 "^"
                                                 min
                                                 empty_seq)
                                                (("2"
                                                  (expand "rev")
                                                  (("2"
                                                    (install-rewrites
                                                     "walks[T]")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4
                                                           -7
                                                           -11
                                                           -12)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "i!1"
                                                             "j!1")
                                                            (("2"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst -5 "i!1"
                               "length(q!1)+length(p!1)-j!1-2")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "endpoint?")
                                  (("1"
                                    (expand "o" 3)
                                    (("1"
                                      (expand "rev" 3)
                                      (("1"
                                        (expand "trunc1" 3)
                                        (("1"
                                          (expand "^" 3)
                                          (("1"
                                            (expand "trunc1" -6)
                                            (("1"
                                              (expand "o" -6)
                                              (("1"
                                                (expand "rev" -6)
                                                (("1"
                                                  (expand "^" -6)
                                                  (("1"
                                                    (expand "min")
                                                    (("1"
                                                      (bddsimp (-5 -6))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "j!1=length(p!1)-1")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           *
                                                           lr)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "dual_paths?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (typepred
                                                                   "p!1")
                                                                  (("1"
                                                                    (expand
                                                                     "path?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (replace
                                                                           -10
                                                                           -5
                                                                           rl)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "i!1"
                                                                             "length(p!1)-1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide -4 -5 4)
                                  (("2"
                                    (install-rewrites "walks[T]")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "j!1<length(p!1)-1")
                            (("1"
                              (inst -5 "j!1"
                               "length(q!1)+length(p!1)-i!1-2")
                              (("1"
                                (expand "endpoint?")
                                (("1"
                                  (hide -2 -3 -4)
                                  (("1"
                                    (expand "o")
                                    (("1"
                                      (expand "rev")
                                      (("1"
                                        (expand "trunc1")
                                        (("1"
                                          (expand* "^" min empty_seq)
                                          (("1"
                                            (install-rewrites
                                             "walks[T]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (bddsimp -2 -3)
                                                (("1" (assert) nil nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (case
                                                   "i!1=length(p!1)-1")
                                                  (("1"
                                                    (replace -1 * lr)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (reveal -3)
                                                        (("1"
                                                          (expand
                                                           "dual_paths?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "finseq_appl")
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 -2
                                                                 lr)
                                                                (("1"
                                                                  (typepred
                                                                   "p!1")
                                                                  (("1"
                                                                    (expand
                                                                     "path?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "length(p!1)-1"
                                                                           "j!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -4 -5 4)
                                (("2"
                                  (install-rewrites "walks[T]")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -4)
                              (("2"
                                (typepred "q!1")
                                (("2"
                                  (expand "path?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide -2 -6)
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (inst
                                           -2
                                           "length(q!1)+length(p!1)-i!1-2"
                                           "length(q!1)+length(p!1)-j!1-2")
                                          (("1"
                                            (expand "endpoint?")
                                            (("1"
                                              (expand "o")
                                              (("1"
                                                (expand "rev")
                                                (("1"
                                                  (expand "trunc1")
                                                  (("1"
                                                    (expand*
                                                     "^"
                                                     min
                                                     empty_seq)
                                                    (("1"
                                                      (install-rewrites
                                                       "walks[T]")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if -4)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -4 5)
                                            (("2"
                                              (install-rewrites
                                               "walks[T]")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand*
                                                   "^"
                                                   min
                                                   empty_seq)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lift-if -2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -4 5)
                                            (("3"
                                              (install-rewrites
                                               "walks[T]")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand*
                                                   "^"
                                                   min
                                                   empty_seq)
                                                  (("3"
                                                    (lift-if -2)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (lift-if -3)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "dual_paths?")
                    (("2" (flatten)
                      (("2" (hide -1 -2)
                        (("2" (inst -1 "1" "1")
                          (("2" (reveal -4)
                            (("2" (assert (-1 -2))
                              (("2"
                                (bddsimp)
                                (("1"
                                  (expand "o")
                                  (("1"
                                    (expand "trunc1")
                                    (("1"
                                      (expand* "^" min empty_seq)
                                      (("1"
                                        (expand "rev")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "length(p!1)>1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case "length(p!1)=2")
                                                (("1"
                                                  (replace -1 * lr)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred "q!1")
                                                      (("1"
                                                        (expand
                                                         "path?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "length(q!1)-1"
                                                               "1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -2)
                                              (("2"
                                                (lemma
                                                 "dual_path_trunc")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (inst? -1)
                                                    (("2"
                                                      (expand
                                                       "dual_paths?")
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (reveal
                                                           -5
                                                           -6)
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (lemma
                                                               "walk_from_l")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "p!1`seq(0)"
                                                                   "p!1`seq(length(p!1)-1)")
                                                                  (("2"
                                                                    (expand
                                                                     "from?")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "length(p!1)=1")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           *
                                                                           lr)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "path_one")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "G!1"
                                                                                 "q!1"
                                                                                 "q!1`seq(0)"
                                                                                 "q!1`seq(length(q!1)-1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "path_from?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "from?")
                                                                                    (("1"
                                                                                      (reveal
                                                                                       -6)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "circuit?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "pre_circuit?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "cyclically_reduced?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "finseq_appl")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "length(p!1)=1")
                                  (("1"
                                    (reveal -2 -3)
                                    (("1"
                                      (replace -3 * lr)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (replace -1 -2 lr)
                                            (("1"
                                              (lemma "path_one")
                                              (("1"
                                                (inst
                                                 -1
                                                 "G!1"
                                                 "q!1"
                                                 "q!1`seq(0)"
                                                 "q!1`seq(length(q!1)-1)")
                                                (("1"
                                                  (expand "path_from?")
                                                  (("1"
                                                    (expand "from?")
                                                    (("1"
                                                      (expand "o ")
                                                      (("1"
                                                        (expand "rev")
                                                        (("1"
                                                          (expand
                                                           "trunc1")
                                                          (("1"
                                                            (expand*
                                                             "^"
                                                             min
                                                             empty_seq)
                                                            (("1"
                                                              (expand
                                                               "circuit?")
                                                              (("1"
                                                                (expand
                                                                 "cyclically_reduced?")
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (reveal -2 -3)
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (case "length(p!1)=2")
                                          (("1"
                                            (replace -1 * lr)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (install-rewrites
                                                 "walks[T]")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1 * lr)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "q!1")
                                                        (("1"
                                                          (expand
                                                           "path?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "finseq_appl")
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "length(q!1)-1"
                                                                 "1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "dual_path_trunc")
                    (("3" (inst? -1)
                      (("3" (bddsimp)
                        (("3" (delete -4 -5 -6 -7)
                          (("3" (hide -1 -4)
                            (("3" (install-rewrites "walks[T]")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (expand "pre_circuit?")
                    (("4" (expand "finseq_appl")
                      (("4" (bddsimp)
                        (("1" (lemma "dual_path_trunc")
                          (("1" (inst? -1)
                            (("1" (bddsimp)
                              (("1"
                                (delete -4 -5 -6 -7)
                                (("1"
                                  (expand "dual_paths?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (hide -5)
                                        (("1"
                                          (install-rewrites "walks[T]")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "dual_path_trunc")
                          (("2" (inst? -1)
                            (("2" (bddsimp)
                              (("2"
                                (delete -4 -5 -6 -7)
                                (("2"
                                  (hide -4)
                                  (("2"
                                    (expand "dual_paths?")
                                    (("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (typepred "p!1")
                                        (("2"
                                          (typepred "q!1")
                                          (("2"
                                            (expand "path?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (hide -1 -3 -4 -6)
                                                (("2"
                                                  (lemma "walk_concat")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "G!1"
                                                     "p!1`seq(0)"
                                                     "q!1`seq(0)"
                                                     "p!1`seq(length(p!1)-1)"
                                                     "p!1"
                                                     "q!1")
                                                    (("2"
                                                      (expand
                                                       "walk_from?")
                                                      (("2"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand
                                                           "trunc1")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dual_path_length formula-decl nil tree_paths nil)
    (cycle? const-decl "bool" cycles nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rev const-decl "finseq[T]" doubletons "structures/")
    (trunc1 const-decl "prewalk" walks nil)
    (Longprewalk type-eq-decl nil walks nil)
    (O const-decl "finseq" finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil nil nil
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (verts_in? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (walk? const-decl "bool" walks nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (endpoint? const-decl "bool" paths nil)
    (dual_paths? const-decl "bool" tree_paths nil) nil
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (path_one formula-decl nil path_circ nil)
    (cyclically_reduced? const-decl "bool" circuits nil)
    (circuit? const-decl "bool" circuits nil)
    (path_from? const-decl "bool" paths nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (from? const-decl "bool" walks nil)
    (walk_from_l formula-decl nil path_circ nil)
    (dual_path_trunc formula-decl nil tree_paths nil)
    (pre_circuit? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (walk_concat formula-decl nil walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    nil nil (Path type-eq-decl nil paths nil)
    (path? const-decl "bool" paths nil)
    (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons "structures/")
    (dbl const-decl "set[T]" doubletons "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil tree_paths nil))
   nil))
 (tree_one_path 0
  (tree_one_path-3 nil 3767622197
   ("" (skosimp*)
    (("" (case "u!1=v!1")
      (("1" (lemma "tree_no_circuits")
        (("1" (inst-cp -1 "G!1" "p!1")
          (("1" (inst -1 "G!1" "q!1")
            (("1" (lemma "prewalk_same")
              (("1" (inst -1 "p!1" "q!1" "u!1" "v!1")
                (("1" (lemma "path_one")
                  (("1" (inst-cp -1 "G!1" "p!1" "u!1" "v!1")
                    (("1" (inst -1 "G!1" "q!1" "u!1" "v!1")
                      (("1" (expand "path_from?")
                        (("1" (bddsimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (expand "path_from?" -4)
                (("2" (expand "path?" -4) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "path_from?" -3)
            (("2" (expand "path?" -3) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma "tree_no_circuits")
        (("2" (lemma "min_dual_def")
          (("2" (inst -1 "G!1" "p!1" "q!1")
            (("1"
              (name-replace PRO_1
               "PROJ_1(min_dual_paths(G!1, p!1, q!1))")
              (("1"
                (name-replace PRO_2
                 "PROJ_2(min_dual_paths(G!1, p!1, q!1))")
                (("1" (lemma "cycl_red_compos")
                  (("1"
                    (inst -1 "G!1" "PRO_1" "PRO_2" "PRO_1(0)"
                     "PRO_1(length(PRO_1)-1)")
                    (("1" (lemma "path_one")
                      (("1"
                        (inst-cp -1 "G!1" "PRO_1" "PRO_1(0)"
                         "PRO_1(length(PRO_1)-1)")
                        (("1"
                          (inst -1 "G!1" "PRO_2" "PRO_2(0)"
                           "PRO_2(length(PRO_2)-1)")
                          (("1" (inst-cp -5 "G!1" "PRO_1")
                            (("1" (inst-cp -5 "G!1" "PRO_2")
                              (("1"
                                (inst
                                 -5
                                 "G!1"
                                 "trunc1(PRO_1) o rev(PRO_2)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "back_short")
                                    (("1"
                                      (inst
                                       -1
                                       "G!1"
                                       "PRO_1"
                                       "PRO_2"
                                       "PRO_1(0)"
                                       "PRO_1(length(PRO_1) -1)")
                                      (("1"
                                        (lemma "front_short")
                                        (("1"
                                          (inst
                                           -1
                                           "G!1"
                                           "PRO_1"
                                           "PRO_2"
                                           "PRO_1(0)"
                                           "PRO_1(length(PRO_1) -1)")
                                          (("1"
                                            (expand "circuit?" 1)
                                            (("1"
                                              (lemma "two_walks")
                                              (("1"
                                                (inst
                                                 -1
                                                 "G!1"
                                                 "PRO_1"
                                                 "PRO_2"
                                                 "PRO_1(0)"
                                                 "PRO_1(length(PRO_1) -1)")
                                                (("1"
                                                  (expand
                                                   "pre_circuit?")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "is_min_dual?")
                                                      (("1"
                                                        (expand
                                                         "dual_paths?"
                                                         -7)
                                                        (("1"
                                                          (typepred
                                                           "PRO_1")
                                                          (("1"
                                                            (typepred
                                                             "PRO_2")
                                                            (("1"
                                                              (expand
                                                               "path_from?")
                                                              (("1"
                                                                (copy
                                                                 -2)
                                                                (("1"
                                                                  (copy
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "path?"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "path?"
                                                                       -2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           -2
                                                                           -4)
                                                                          (("1"
                                                                            (copy
                                                                             -16)
                                                                            (("1"
                                                                              (copy
                                                                               -19)
                                                                              (("1"
                                                                                (expand
                                                                                 "from?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "from?"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "walkers")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "PRO_1"
                                                                                       "PRO_2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "finseq_appl")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               -4
                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3
                                                                                                 -5
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -21
                                                                                                         -22)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (bddsimp
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "seq(PRO_1)(0) = seq(PRO_1)(length(PRO_1) - 1)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -14
                                                                                                                   -15
                                                                                                                   -16)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -16)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -10
                                                                                                                       -12
                                                                                                                       -19
                                                                                                                       -20
                                                                                                                       -21
                                                                                                                       -22)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "prewalk_same")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "PRO_1"
                                                                                                                           "PRO_2"
                                                                                                                           "seq(PRO_1)(0)"
                                                                                                                           "seq(PRO_1)(length(PRO_1)-1)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -16
                                                                                                                   -17)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "seq(PRO_1)(length(PRO_1) - 2) /= seq(PRO_2)(length(PRO_2) - 2) AND
                                                                 seq(PRO_1)(1) /= seq(PRO_2)(1)")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (case
                                                                                                                       "seq(PRO_1)(length(PRO_1) - 2) = seq(PRO_2)(length(PRO_2) - 2)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -17
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (skolem!
                                                                                                                             -16)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -19
                                                                                                                               "pp!1"
                                                                                                                               "qq!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "from?"
                                                                                                                                   -16)
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-16
                                                                                                                                      -19)
                                                                                                                                     -)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case
                                                                                                                         "seq(PRO_1)(1) = seq(PRO_2)(1)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -16
                                                                                                                             -17)
                                                                                                                            (("1"
                                                                                                                              (skolem!
                                                                                                                               -15)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -18
                                                                                                                                 "pp!1"
                                                                                                                                 "qq!1")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "from?"
                                                                                                                                   -15)
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-15
                                                                                                                                      -18)
                                                                                                                                     -)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-4 -8 -9) -)
                                  (("2"
                                    (expand "path_from?")
                                    (("2"
                                      (expand "dual_paths?")
                                      (("2"
                                        (expand "from?")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (typepred "PRO_1")
                                            (("2"
                                              (typepred "PRO_2")
                                              (("2"
                                                (expand
                                                 "path?"
                                                 (-2 -4))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide
                                                       -3
                                                       -6
                                                       -8
                                                       -11)
                                                      (("2"
                                                        (replace
                                                         -8
                                                         -6
                                                         rl)
                                                        (("2"
                                                          (replace
                                                           -9
                                                           -7
                                                           rl)
                                                          (("2"
                                                            (hide
                                                             -8
                                                             -9)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (reveal
                                                                   -7
                                                                   -8
                                                                   -10
                                                                   -11
                                                                   -12)
                                                                  (("2"
                                                                    (bddsimp
                                                                     -4)
                                                                    (("1"
                                                                      (bddsimp
                                                                       -3)
                                                                      (("1"
                                                                        (hide
                                                                         -3)
                                                                        (("1"
                                                                          (lemma
                                                                           "prewalk_same")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "PRO_1"
                                                                             "PRO_2"
                                                                             "finseq_appl(PRO_1)(0)"
                                                                             "finseq_appl(PRO_1)(length(PRO_1) - 1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "finseq_appl")
                                                                                (("1"
                                                                                  (case
                                                                                   "length(PRO_1)>1")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "walk_concat")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "G!1"
                                                                                       "seq(PRO_1)(0)"
                                                                                       "seq(PRO_1)(0)"
                                                                                       "seq(PRO_1)(length(PRO_1)-1)"
                                                                                       "PRO_1"
                                                                                       "PRO_2")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -3
                                                                                         -4
                                                                                         -7
                                                                                         -12
                                                                                         -13
                                                                                         1
                                                                                         2
                                                                                         3
                                                                                         5)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "path_from?")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -10
                                                                                         -11
                                                                                         3
                                                                                         4
                                                                                         5)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "dual_paths?")
                                  (("3"
                                    (hide -3)
                                    (("3"
                                      (expand "path_from?")
                                      (("3"
                                        (typepred "PRO_1" "PRO_2")
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (hide -11 -13)
                                            (("3"
                                              (bddsimp -8)
                                              (("1"
                                                (bddsimp -8)
                                                (("1"
                                                  (hide -8)
                                                  (("1"
                                                    (expand
                                                     "from?"
                                                     (-8 -9))
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace
                                                         -10
                                                         -8
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -11
                                                           -9
                                                           rl)
                                                          (("1"
                                                            (hide
                                                             -10
                                                             -11)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -6
                                                                     -7)
                                                                    (("1"
                                                                      (lemma
                                                                       "prewalk_same")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "PRO_1"
                                                                         "PRO_2"
                                                                         "seq(PRO_1)(0)"
                                                                         "seq(PRO_1)(length(PRO_1)-1)")
                                                                        (("1"
                                                                          (hide
                                                                           -9
                                                                           -10
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 -2 -3 -5 -6)
                                (("2"
                                  (expand "dual_paths?")
                                  (("2"
                                    (expand "path_from?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "from?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "is_min_dual?")
                                            (("2"
                                              (replace -6 -3 rl)
                                              (("2"
                                                (replace -7 -4 rl)
                                                (("2"
                                                  (hide -2 -5 -6 -7)
                                                  (("2"
                                                    (expand
                                                     "finseq_appl")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide
                                                           -2
                                                           -5
                                                           -6)
                                                          (("2"
                                                            (expand
                                                             "dual_paths?")
                                                            (("2"
                                                              (typepred
                                                               "PRO_2")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "PRO_1")
                              (("2"
                                (hide-all-but (-2) -)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "PRO_2")
                            (("2" (hide-all-but (-1) -)
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (typepred "PRO_2")
                            (("3" (hide-all-but (-1) -)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (typepred "PRO_1")
                          (("2" (hide-all-but (-1) -)
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (typepred "PRO_1")
                          (("3" (hide-all-but (-1) -)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "PRO_1")
                      (("2" (hide-all-but (-1) -)
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (typepred "PRO_1")
                      (("3" (hide-all-but (-1) -)
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 -2)
                  (("2" (expand "path_from?")
                    (("2" (flatten)
                      (("2" (expand "from?")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "dual_paths?")
                              (("2"
                                (expand "finseq_appl")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -1 -2)
                  (("3" (expand "path_from?") (("3" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (hide -1 -2)
                  (("4" (lemma "tree_nonempty")
                    (("4" (inst?)
                      (("4" (assert)
                        (("4" (expand "empty?")
                          (("4" (expand "nonempty?")
                            (("4" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2)
                (("2" (expand "path_from?")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (expand "from?")
                        (("2" (flatten)
                          (("2" (expand "dual_paths?")
                            (("2" (expand "finseq_appl")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1 -2)
                (("3" (expand "path_from?") (("3" (flatten) nil nil))
                  nil))
                nil)
               ("4" (lemma "tree_nonempty")
                (("4" (inst -1 "G!1")
                  (("4" (assert)
                    (("4" (expand "nonempty?")
                      (("4" (expand "empty?" +)
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 -2) (("2" (grind) nil nil)) nil)
             ("3" (hide -1 -2) (("3" (grind) nil nil)) nil)
             ("4" (hide -1 -3 -4)
              (("4" (lemma "tree_nonempty")
                (("4" (inst -1 "G!1")
                  (("4" (assert)
                    (("4" (hide -1) (("4" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (Graph type-eq-decl nil graphs nil)
    (Path type-eq-decl nil paths nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (PRO_1 skolem-const-decl "Path[T](G!1)" tree_paths nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "finseq" finite_sequences nil)
    (Longprewalk type-eq-decl nil walks nil)
    (trunc1 const-decl "prewalk" walks nil)
    (rev const-decl "finseq[T]" doubletons "structures/")
    (back_short formula-decl nil path_circ nil)
    (front_short formula-decl nil path_circ nil)
    (circuit? const-decl "bool" circuits nil)
    (from? const-decl "bool" walks nil)
    (walkers formula-decl nil path_circ nil)
    (pp!1 skolem-const-decl "prewalk[T]" tree_paths nil)
    (qq!1 skolem-const-decl "prewalk[T]" tree_paths nil)
    (qq!1 skolem-const-decl "prewalk[T]" tree_paths nil)
    (pp!1 skolem-const-decl "prewalk[T]" tree_paths nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_min_dual? const-decl "bool" tree_paths nil)
    (pre_circuit? const-decl "bool" walks nil)
    (two_walks formula-decl nil path_circ nil)
    (walk_concat formula-decl nil walks nil)
    (walk_from? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (verts_in? const-decl "bool" walks nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nil application-judgement "finite_set[T]" tree_paths nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (PRO_2 skolem-const-decl "Path[T](G!1)" tree_paths nil)
    (cycl_red_compos formula-decl nil path_circ nil)
    (tree_nonempty formula-decl nil trees nil)
    (empty? const-decl "bool" graphs nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (Dual_paths type-eq-decl nil tree_paths nil)
    (min_dual_paths const-decl "Dual_paths(G)" tree_paths nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (min_dual_def formula-decl nil tree_paths nil)
    (tree_no_circuits formula-decl nil tree_circ nil)
    (q!1 skolem-const-decl "prewalk[T]" tree_paths nil)
    (path_from? const-decl "bool" paths nil)
    (path_one formula-decl nil path_circ nil)
    (prewalk_same formula-decl nil path_circ nil)
    (path? const-decl "bool" paths nil)
    (Walk type-eq-decl nil walks nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (dbl const-decl "set[T]" doubletons "structures/")
    (doubleton type-eq-decl nil doubletons "structures/")
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks nil)
    (walk? const-decl "bool" walks nil)
    (G!1 skolem-const-decl "graph[T]" tree_paths nil)
    (p!1 skolem-const-decl "prewalk[T]" tree_paths nil)
    (T formal-type-decl nil tree_paths nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil)
  (tree_one_path-2 nil 3253637225
   ("" (skosimp*)
    (("" (case "u!1=v!1")
      (("1" (lemma "tree_no_circuits")
        (("1" (inst-cp -1 "G!1" "p!1")
          (("1" (inst -1 "G!1" "q!1")
            (("1" (lemma "prewalk_same")
              (("1" (inst -1 "p!1" "q!1" "u!1" "v!1")
                (("1" (lemma "path_one")
                  (("1" (inst-cp -1 "G!1" "p!1" "u!1" "v!1")
                    (("1" (inst -1 "G!1" "q!1" "u!1" "v!1")
                      (("1" (expand "path_from?")
                        (("1" (bddsimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (expand "path_from?" -4)
                (("2" (expand "path?" -4) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "path_from?" -3)
            (("2" (expand "path?" -3) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma "tree_no_circuits")
        (("2" (lemma "min_dual_def")
          (("2" (inst -1 "G!1" "p!1" "q!1")
            (("1"
              (name-replace PRO_1
               "PROJ_1(min_dual_paths(G!1, p!1, q!1))")
              (("1"
                (name-replace PRO_2
                 "PROJ_2(min_dual_paths(G!1, p!1, q!1))")
                (("1" (lemma "cycl_red_compos")
                  (("1"
                    (inst -1 "G!1" "PRO_1" "PRO_2" "PRO_1(0)"
                     "PRO_1(length(PRO_1)-1)")
                    (("1" (lemma "path_one")
                      (("1"
                        (inst-cp -1 "G!1" "PRO_1" "PRO_1(0)"
                         "PRO_1(length(PRO_1)-1)")
                        (("1"
                          (inst -1 "G!1" "PRO_2" "PRO_2(0)"
                           "PRO_2(length(PRO_2)-1)")
                          (("1" (inst-cp -5 "G!1" "PRO_1")
                            (("1" (inst-cp -5 "G!1" "PRO_2")
                              (("1"
                                (inst
                                 -5
                                 "G!1"
                                 "trunc1(PRO_1) o rev(PRO_2)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "back_short")
                                    (("1"
                                      (inst
                                       -1
                                       "G!1"
                                       "PRO_1"
                                       "PRO_2"
                                       "PRO_1(0)"
                                       "PRO_1(length(PRO_1) -1)")
                                      (("1"
                                        (lemma "front_short")
                                        (("1"
                                          (inst
                                           -1
                                           "G!1"
                                           "PRO_1"
                                           "PRO_2"
                                           "PRO_1(0)"
                                           "PRO_1(length(PRO_1) -1)")
                                          (("1"
                                            (expand "circuit?" 1)
                                            (("1"
                                              (lemma "two_walks")
                                              (("1"
                                                (inst
                                                 -1
                                                 "G!1"
                                                 "PRO_1"
                                                 "PRO_2"
                                                 "PRO_1(0)"
                                                 "PRO_1(length(PRO_1) -1)")
                                                (("1"
                                                  (expand
                                                   "pre_circuit?")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "is_min_dual?")
                                                      (("1"
                                                        (expand
                                                         "dual_paths?"
                                                         -7)
                                                        (("1"
                                                          (typepred
                                                           "PRO_1")
                                                          (("1"
                                                            (typepred
                                                             "PRO_2")
                                                            (("1"
                                                              (expand
                                                               "path_from?")
                                                              (("1"
                                                                (copy
                                                                 -2)
                                                                (("1"
                                                                  (copy
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "path?"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "path?"
                                                                       -2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           -2
                                                                           -4)
                                                                          (("1"
                                                                            (copy
                                                                             -16)
                                                                            (("1"
                                                                              (copy
                                                                               -19)
                                                                              (("1"
                                                                                (expand
                                                                                 "from?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "from?"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "walkers")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "PRO_1"
                                                                                       "PRO_2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "finseq_appl")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               -4
                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3
                                                                                                 -5
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -21
                                                                                                         -22)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (bddsimp
                                                                                                             -1
                                                                                                             -15
                                                                                                             -16
                                                                                                             -18
                                                                                                             -19)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "seq(PRO_1)(0) = seq(PRO_1)(length(PRO_1) - 1)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -14
                                                                                                                   -15
                                                                                                                   -16)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -16)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -10
                                                                                                                       -12
                                                                                                                       -19
                                                                                                                       -20
                                                                                                                       -21
                                                                                                                       -22)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "prewalk_same")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "PRO_1"
                                                                                                                           "PRO_2"
                                                                                                                           "seq(PRO_1)(0)"
                                                                                                                           "seq(PRO_1)(length(PRO_1)-1)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -16
                                                                                                                   -17)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "seq(PRO_1)(length(PRO_1) - 2) /= seq(PRO_2)(length(PRO_2) - 2) AND
                                    seq(PRO_1)(1) /= seq(PRO_2)(1)")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (case
                                                                                                                       "seq(PRO_1)(length(PRO_1) - 2) = seq(PRO_2)(length(PRO_2) - 2)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -17
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (skolem!
                                                                                                                             -16)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -19
                                                                                                                               "pp!1"
                                                                                                                               "qq!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "from?"
                                                                                                                                   -16)
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-16
                                                                                                                                      -19)
                                                                                                                                     -)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case
                                                                                                                         "seq(PRO_1)(1) = seq(PRO_2)(1)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -16
                                                                                                                             -17)
                                                                                                                            (("1"
                                                                                                                              (skolem!
                                                                                                                               -15)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -18
                                                                                                                                 "pp!1"
                                                                                                                                 "qq!1")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "from?"
                                                                                                                                   -15)
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-15
                                                                                                                                      -18)
                                                                                                                                     -)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-4 -8 -9) -)
                                  (("2"
                                    (expand "path_from?")
                                    (("2"
                                      (expand "dual_paths?")
                                      (("2"
                                        (expand "from?")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (typepred "PRO_1")
                                            (("2"
                                              (typepred "PRO_2")
                                              (("2"
                                                (expand
                                                 "path?"
                                                 (-2 -4))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide
                                                       -3
                                                       -6
                                                       -8
                                                       -11)
                                                      (("2"
                                                        (replace
                                                         -8
                                                         -6
                                                         rl)
                                                        (("2"
                                                          (replace
                                                           -9
                                                           -7
                                                           rl)
                                                          (("2"
                                                            (hide
                                                             -8
                                                             -9)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (reveal
                                                                   -7
                                                                   -8
                                                                   -10
                                                                   -11
                                                                   -12)
                                                                  (("2"
                                                                    (bddsimp
                                                                     -4
                                                                     -5)
                                                                    (("1"
                                                                      (bddsimp
                                                                       -3
                                                                       -4)
                                                                      (("1"
                                                                        (hide
                                                                         -3)
                                                                        (("1"
                                                                          (lemma
                                                                           "prewalk_same")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "PRO_1"
                                                                             "PRO_2"
                                                                             "finseq_appl(PRO_1)(0)"
                                                                             "finseq_appl(PRO_1)(length(PRO_1) - 1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "finseq_appl")
                                                                                (("1"
                                                                                  (case
                                                                                   "length(PRO_1)>1")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "walk_concat")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "G!1"
                                                                                       "seq(PRO_1)(0)"
                                                                                       "seq(PRO_1)(0)"
                                                                                       "seq(PRO_1)(length(PRO_1)-1)"
                                                                                       "PRO_1"
                                                                                       "PRO_2")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -3
                                                                                         -4
                                                                                         -7
                                                                                         -12
                                                                                         -13
                                                                                         1
                                                                                         2
                                                                                         3
                                                                                         5)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "path_from?")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -10
                                                                                         -11
                                                                                         3
                                                                                         4
                                                                                         5)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "dual_paths?")
                                  (("3"
                                    (hide -3)
                                    (("3"
                                      (expand "path_from?")
                                      (("3"
                                        (typepred "PRO_1" "PRO_2")
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (hide -11 -13)
                                            (("3"
                                              (bddsimp -8 -10)
                                              (("1"
                                                (bddsimp -8 -9)
                                                (("1"
                                                  (hide -8)
                                                  (("1"
                                                    (expand
                                                     "from?"
                                                     (-8 -9))
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace
                                                         -10
                                                         -8
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -11
                                                           -9
                                                           rl)
                                                          (("1"
                                                            (hide
                                                             -10
                                                             -11)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -6
                                                                     -7)
                                                                    (("1"
                                                                      (lemma
                                                                       "prewalk_same")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "PRO_1"
                                                                         "PRO_2"
                                                                         "seq(PRO_1)(0)"
                                                                         "seq(PRO_1)(length(PRO_1)-1)")
                                                                        (("1"
                                                                          (hide
                                                                           -9
                                                                           -10
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 -2 -3 -5 -6)
                                (("2"
                                  (expand "dual_paths?")
                                  (("2"
                                    (expand "path_from?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "from?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "is_min_dual?")
                                            (("2"
                                              (replace -6 -3 rl)
                                              (("2"
                                                (replace -7 -4 rl)
                                                (("2"
                                                  (hide -2 -5 -6 -7)
                                                  (("2"
                                                    (expand
                                                     "finseq_appl")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide
                                                           -2
                                                           -5
                                                           -6)
                                                          (("2"
                                                            (expand
                                                             "dual_paths?")
                                                            (("2"
                                                              (typepred
                                                               "PRO_2")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "PRO_1")
                              (("2"
                                (hide-all-but (-2) -)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "PRO_2")
                            (("2" (hide-all-but (-1) -)
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (typepred "PRO_2")
                            (("3" (hide-all-but (-1) -)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (typepred "PRO_1")
                          (("2" (hide-all-but (-1) -)
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (typepred "PRO_1")
                          (("3" (hide-all-but (-1) -)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "PRO_1")
                      (("2" (hide-all-but (-1) -)
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (typepred "PRO_1")
                      (("3" (hide-all-but (-1) -)
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 -2)
                  (("2" (expand "path_from?")
                    (("2" (flatten)
                      (("2" (expand "from?")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "dual_paths?")
                              (("2"
                                (expand "finseq_appl")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -1 -2)
                  (("3" (expand "path_from?") (("3" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (hide -1 -2)
                  (("4" (lemma "tree_nonempty")
                    (("4" (inst?)
                      (("4" (assert)
                        (("4" (expand "empty?")
                          (("4" (expand "nonempty?")
                            (("4" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2)
                (("2" (expand "path_from?")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (expand "from?")
                        (("2" (flatten)
                          (("2" (expand "dual_paths?")
                            (("2" (expand "finseq_appl")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1 -2)
                (("3" (expand "path_from?") (("3" (flatten) nil nil))
                  nil))
                nil)
               ("4" (lemma "tree_nonempty")
                (("4" (inst -1 "G!1")
                  (("4" (assert)
                    (("4" (expand "nonempty?")
                      (("4" (expand "empty?" +)
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 -2) (("2" (grind) nil nil)) nil)
             ("3" (hide -1 -2) (("3" (grind) nil nil)) nil)
             ("4" (hide -1 -3 -4)
              (("4" (lemma "tree_nonempty")
                (("4" (inst -1 "G!1")
                  (("4" (assert)
                    (("4" (hide -1) (("4" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil tree_paths nil) nil nil
    (walk? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons "structures/")
    (dbl const-decl "set[T]" doubletons "structures/")
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Walk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (prewalk_same formula-decl nil path_circ nil)
    (path_one formula-decl nil path_circ nil)
    (path_from? const-decl "bool" paths nil) nil
    (tree_no_circuits formula-decl nil tree_circ nil)
    (min_dual_def formula-decl nil tree_paths nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (min_dual_paths const-decl "Dual_paths(G)" tree_paths nil)
    (Dual_paths type-eq-decl nil tree_paths nil)
    (dual_paths? const-decl "bool" tree_paths nil)
    (empty? const-decl "bool" graphs nil)
    (tree_nonempty formula-decl nil trees nil)
    (cycl_red_compos formula-decl nil path_circ nil) nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    nil (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (verts_in? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (walk_from? const-decl "bool" walks nil)
    (walk_concat formula-decl nil walks nil)
    (two_walks formula-decl nil path_circ nil)
    (pre_circuit? const-decl "bool" walks nil)
    (is_min_dual? const-decl "bool" tree_paths nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil nil nil
    (walkers formula-decl nil path_circ nil)
    (from? const-decl "bool" walks nil)
    (circuit? const-decl "bool" circuits nil)
    (front_short formula-decl nil path_circ nil)
    (back_short formula-decl nil path_circ nil)
    (rev const-decl "finseq[T]" doubletons "structures/")
    (trunc1 const-decl "prewalk" walks nil)
    (Longprewalk type-eq-decl nil walks nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil) nil
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Path type-eq-decl nil paths nil)
    (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil))
   nil)
  (tree_one_path-1 nil 3253637114
   ("" (skosimp*)
    (("" (case "u!1=v!1")
      (("1" (lemma "tree_no_circuits")
        (("1" (inst-cp -1 "G!1" "p!1")
          (("1" (inst -1 "G!1" "q!1")
            (("1" (lemma "prewalk_same")
              (("1" (inst -1 "p!1" "q!1" "u!1" "v!1")
                (("1" (lemma "path_one")
                  (("1" (inst-cp -1 "G!1" "p!1" "u!1" "v!1")
                    (("1" (inst -1 "G!1" "q!1" "u!1" "v!1")
                      (("1" (expand "path_from?")
                        (("1" (bddsimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (expand "path_from?" -4)
                (("2" (expand "path?" -4) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "path_from?" -3)
            (("2" (expand "path?" -3) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma "tree_no_circuits")
        (("2" (lemma "min_dual_def")
          (("2" (inst -1 "G!1" "p!1" "q!1")
            (("1"
              (name-replace pro_1
               "PROJ_1(min_dual_paths(G!1, p!1, q!1))")
              (("1"
                (name-replace pro_2
                 "PROJ_2(min_dual_paths(G!1, p!1, q!1))")
                (("1" (lemma "cycl_red_compos")
                  (("1"
                    (inst -1 "G!1" "PRO_1" "PRO_2" "PRO_1(0)"
                     "PRO_1(length(PRO_1)-1)")
                    (("1" (lemma "path_one")
                      (("1"
                        (inst-cp -1 "G!1" "PRO_1" "PRO_1(0)"
                         "PRO_1(length(PRO_1)-1)")
                        (("1"
                          (inst -1 "G!1" "PRO_2" "PRO_2(0)"
                           "PRO_2(length(PRO_2)-1)")
                          (("1" (inst-cp -5 "G!1" "PRO_1")
                            (("1" (inst-cp -5 "G!1" "PRO_2")
                              (("1"
                                (inst
                                 -5
                                 "G!1"
                                 "trunc1(PRO_1) o rev(PRO_2)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "back_short")
                                    (("1"
                                      (inst
                                       -1
                                       "G!1"
                                       "PRO_1"
                                       "PRO_2"
                                       "PRO_1(0)"
                                       "PRO_1(length(PRO_1) -1)")
                                      (("1"
                                        (lemma "front_short")
                                        (("1"
                                          (inst
                                           -1
                                           "G!1"
                                           "PRO_1"
                                           "PRO_2"
                                           "PRO_1(0)"
                                           "PRO_1(length(PRO_1) -1)")
                                          (("1"
                                            (expand "circuit?" 1)
                                            (("1"
                                              (lemma "two_walks")
                                              (("1"
                                                (inst
                                                 -1
                                                 "G!1"
                                                 "PRO_1"
                                                 "PRO_2"
                                                 "PRO_1(0)"
                                                 "PRO_1(length(PRO_1) -1)")
                                                (("1"
                                                  (expand
                                                   "pre_circuit?")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "is_min_dual?")
                                                      (("1"
                                                        (expand
                                                         "dual_paths?"
                                                         -7)
                                                        (("1"
                                                          (typepred
                                                           "PRO_1")
                                                          (("1"
                                                            (typepred
                                                             "PRO_2")
                                                            (("1"
                                                              (expand
                                                               "path_from?")
                                                              (("1"
                                                                (copy
                                                                 -2)
                                                                (("1"
                                                                  (copy
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "path?"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "path?"
                                                                       -2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           -2
                                                                           -4)
                                                                          (("1"
                                                                            (copy
                                                                             -16)
                                                                            (("1"
                                                                              (copy
                                                                               -19)
                                                                              (("1"
                                                                                (expand
                                                                                 "from?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "from?"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "walkers")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "PRO_1"
                                                                                       "PRO_2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "finseq_appl")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               -4
                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3
                                                                                                 -5
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -21
                                                                                                         -22)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (bddsimp
                                                                                                             -1
                                                                                                             -15
                                                                                                             -16
                                                                                                             -18
                                                                                                             -19)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "seq(PRO_1)(0) = seq(PRO_1)(length(PRO_1) - 1)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -14
                                                                                                                   -15
                                                                                                                   -16)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -16)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -10
                                                                                                                         -12
                                                                                                                         -19
                                                                                                                         -20
                                                                                                                         -21
                                                                                                                         -22)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "prewalk_same")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "PRO_1"
                                                                                                                             "PRO_2"
                                                                                                                             "seq(PRO_1)(0)"
                                                                                                                             "seq(PRO_1)(length(PRO_1)-1)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -16
                                                                                                                   -17)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "seq(PRO_1)(length(PRO_1) - 2) /= seq(PRO_2)(length(PRO_2) - 2) AND
       seq(PRO_1)(1) /= seq(PRO_2)(1)")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (case
                                                                                                                       "seq(PRO_1)(length(PRO_1) - 2) = seq(PRO_2)(length(PRO_2) - 2)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -17
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (skolem!
                                                                                                                             -16)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -19
                                                                                                                               "pp!1"
                                                                                                                               "qq!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "from?"
                                                                                                                                   -16)
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-16
                                                                                                                                      -19)
                                                                                                                                     -)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case
                                                                                                                         "seq(PRO_1)(1) = seq(PRO_2)(1)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -16
                                                                                                                             -17)
                                                                                                                            (("1"
                                                                                                                              (skolem!
                                                                                                                               -15)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -18
                                                                                                                                 "pp!1"
                                                                                                                                 "qq!1")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "from?"
                                                                                                                                   -15)
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-15
                                                                                                                                      -18)
                                                                                                                                     -)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-4 -8 -9) -)
                                  (("2"
                                    (expand "path_from?")
                                    (("2"
                                      (expand "dual_paths?")
                                      (("2"
                                        (expand "from?")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (typepred "PRO_1")
                                            (("2"
                                              (typepred "PRO_2")
                                              (("2"
                                                (expand
                                                 "path?"
                                                 (-2 -4))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide
                                                       -3
                                                       -6
                                                       -8
                                                       -11)
                                                      (("2"
                                                        (replace
                                                         -8
                                                         -6
                                                         rl)
                                                        (("2"
                                                          (replace
                                                           -9
                                                           -7
                                                           rl)
                                                          (("2"
                                                            (hide
                                                             -8
                                                             -9)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (reveal
                                                                   -7
                                                                   -8
                                                                   -10
                                                                   -11
                                                                   -12)
                                                                  (("2"
                                                                    (bddsimp
                                                                     -4
                                                                     -5)
                                                                    (("1"
                                                                      (bddsimp
                                                                       -3
                                                                       -4)
                                                                      (("1"
                                                                        (hide
                                                                         -3)
                                                                        (("1"
                                                                          (lemma
                                                                           "prewalk_same")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "PRO_1"
                                                                             "PRO_2"
                                                                             "finseq_appl(PRO_1)(0)"
                                                                             "finseq_appl(PRO_1)(length(PRO_1) - 1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "finseq_appl")
                                                                                (("1"
                                                                                  (case
                                                                                   "length(PRO_1)>1")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "walk_concat")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "G!1"
                                                                                       "seq(PRO_1)(0)"
                                                                                       "seq(PRO_1)(0)"
                                                                                       "seq(PRO_1)(length(PRO_1)-1)"
                                                                                       "PRO_1"
                                                                                       "PRO_2")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -3
                                                                                         -4
                                                                                         -7
                                                                                         -12
                                                                                         -13
                                                                                         1
                                                                                         2
                                                                                         3
                                                                                         5)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "path_from?")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -2
                                                                                           -10
                                                                                           -11
                                                                                           3
                                                                                           4
                                                                                           5)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "dual_paths?")
                                  (("3"
                                    (hide -3)
                                    (("3"
                                      (expand "path_from?")
                                      (("3"
                                        (typepred "PRO_1" "PRO_2")
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (hide -11 -13)
                                            (("3"
                                              (bddsimp -8 -10)
                                              (("1"
                                                (bddsimp -8 -9)
                                                (("1"
                                                  (hide -8)
                                                  (("1"
                                                    (expand
                                                     "from?"
                                                     (-8 -9))
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace
                                                         -10
                                                         -8
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -11
                                                           -9
                                                           rl)
                                                          (("1"
                                                            (hide
                                                             -10
                                                             -11)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -6
                                                                       -7)
                                                                      (("1"
                                                                        (lemma
                                                                         "prewalk_same")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "PRO_1"
                                                                           "PRO_2"
                                                                           "seq(PRO_1)(0)"
                                                                           "seq(PRO_1)(length(PRO_1)-1)")
                                                                          (("1"
                                                                            (hide
                                                                             -9
                                                                             -10
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 -2 -3 -5 -6)
                                (("2"
                                  (expand "dual_paths?")
                                  (("2"
                                    (expand "path_from?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "from?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "is_min_dual?")
                                            (("2"
                                              (replace -6 -3 rl)
                                              (("2"
                                                (replace -7 -4 rl)
                                                (("2"
                                                  (hide -2 -5 -6 -7)
                                                  (("2"
                                                    (expand
                                                     "finseq_appl")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide
                                                           -2
                                                           -5
                                                           -6)
                                                          (("2"
                                                            (expand
                                                             "dual_paths?")
                                                            (("2"
                                                              (typepred
                                                               "PRO_2")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "PRO_1")
                              (("2"
                                (hide-all-but (-2) -)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "PRO_2")
                            (("2" (hide-all-but (-1) -)
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (typepred "PRO_2")
                            (("3" (hide-all-but (-1) -)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (typepred "PRO_1")
                          (("2" (hide-all-but (-1) -)
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (typepred "PRO_1")
                          (("3" (hide-all-but (-1) -)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "PRO_1")
                      (("2" (hide-all-but (-1) -)
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (typepred "PRO_1")
                      (("3" (hide-all-but (-1) -)
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "q!1")
                  (("2" (hide -2 -3)
                    (("2" (expand "dual_paths?")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (hide -1 -2)
                  (("3" (expand "path_from?") (("3" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (hide -1 -3 -4)
                  (("4" (lemma "tree_nonempty")
                    (("4" (inst -1 "G!1")
                      (("4" (assert) (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2) (("2" (grind) nil nil)) nil)
               ("3" (hide -1 -2) (("3" (grind) nil nil)) nil)
               ("4" (hide -1 -3 -4)
                (("4" (lemma "tree_nonempty")
                  (("4" (inst -1 "G!1")
                    (("4" (assert)
                      (("4" (hide -1) (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 -2) (("2" (grind) nil nil)) nil)
             ("3" (hide -1 -2) (("3" (grind) nil nil)) nil)
             ("4" (hide -1 -3 -4)
              (("4" (lemma "tree_nonempty")
                (("4" (inst -1 "G!1")
                  (("4" (assert)
                    (("4" (hide -1) (("4" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)))


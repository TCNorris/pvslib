(graph_connected
 (conn_eq_path 0
  (conn_eq_path-2 "" 3790105212
   ("" (skosimp*)
    (("" (iff 1)
      (("" (prop)
        (("1" (lemma "conn_implies_piece[T]")
          (("1" (inst?)
            (("1" (lemma "piece_implies_path[T]")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (lemma "path_implies_conn[T]")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (conn_eq_path-1 nil 3507100596
   ("" (skosimp*)
    (("" (iff 1)
      (("" (prop)
        (("1" (lemma "conn_implies_piece[T]")
          (("1" (inst?)
            (("1" (lemma "piece_implies_path[T]")
              (("1" (inst?) (("1" (assert) nil)))))))))
         ("2" (lemma "path_implies_conn[T]")
          (("2" (inst?) (("2" (assert) nil))))))))))
    nil)
   ((path_implies_conn formula-decl nil graph_path_conn nil)
    (T formal-type-decl nil graph_connected nil)
    (conn_implies_piece formula-decl nil graph_conn_piece nil)
    (piece_implies_path formula-decl nil graph_piece_path nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (path_eq_piece 0
  (path_eq_piece-2 "" 3790105212
   ("" (skosimp*)
    (("" (iff)
      (("" (prop)
        (("1" (lemma "path_implies_conn[T]")
          (("1" (lemma "conn_implies_piece[T]")
            (("1" (inst?) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (lemma "piece_implies_path[T]")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (path_eq_piece-1 nil 3507100596
   ("" (skosimp*)
    (("" (iff)
      (("" (prop)
        (("1" (lemma "path_implies_conn[T]")
          (("1" (lemma "conn_implies_piece[T]")
            (("1" (inst?) (("1" (inst?) (("1" (assert) nil)))))))))
         ("2" (lemma "piece_implies_path[T]")
          (("2" (inst?) (("2" (assert) nil))))))))))
    nil)
   ((piece_implies_path formula-decl nil graph_piece_path nil)
    (T formal-type-decl nil graph_connected nil)
    (path_implies_conn formula-decl nil graph_path_conn nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (conn_implies_piece formula-decl nil graph_conn_piece nil))
   nil))
 (piece_eq_conn 0
  (piece_eq_conn-2 "" 3790105212
   ("" (skosimp*)
    (("" (iff)
      (("" (prop)
        (("1" (lemma "piece_implies_path[T]")
          (("1" (inst?)
            (("1" (lemma "path_implies_conn[T]")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (lemma "conn_implies_piece[T]")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (piece_eq_conn-1 nil 3507100596
   ("" (skosimp*)
    (("" (iff)
      (("" (prop)
        (("1" (lemma "piece_implies_path[T]")
          (("1" (inst?)
            (("1" (lemma "path_implies_conn[T]")
              (("1" (inst?) (("1" (assert) nil)))))))))
         ("2" (lemma "conn_implies_piece[T]")
          (("2" (inst?) (("2" (assert) nil))))))))))
    nil)
   ((conn_implies_piece formula-decl nil graph_conn_piece nil)
    (T formal-type-decl nil graph_connected nil)
    (piece_implies_path formula-decl nil graph_piece_path nil)
    (path_implies_conn formula-decl nil graph_path_conn nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (conn_eq_complected 0
  (conn_eq_complected-2 "" 3790105213
   ("" (skosimp*)
    (("" (lemma "conn_eq_compl[T]")
      (("" (inst?)
        (("" (expand "complected?") (("" (iff) (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (conn_eq_complected-1 nil 3507100596
   ("" (skosimp*)
    (("" (lemma "conn_eq_compl[T]")
      (("" (inst?)
        (("" (expand "complected?") (("" (iff) (("" (propax) nil))))))))))
    nil)
   ((T formal-type-decl nil graph_connected nil)
    (conn_eq_compl formula-decl nil graph_complected nil)
    (complected? const-decl "bool" graph_conn_defs nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)))


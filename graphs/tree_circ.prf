(tree_circ
 (exists_c_tree 0
  (exists_c_tree-2 "" 3790105200
   ("" (skosimp*) (("" (inst 1 "GT!1") (("" (assert) nil nil)) nil)) nil) nil
   shostak)
  (exists_c_tree-1 nil 3507100595
   ("" (skosimp*) (("" (inst 1 "GT!1") (("" (assert) nil)))) nil)
   ((T formal-type-decl nil tree_circ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil) (tree? def-decl "bool" trees nil)
    (Tree type-eq-decl nil trees nil))
   nil))
 (c_tree_TCC1 0
  (c_tree_TCC1-2 "" 3790105200
   ("" (skosimp*)
    (("" (inst 1 "TR!1") (("" (typepred "C!1") (("" (propax) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (c_tree assuming
    "ints@abstract_min[Tree[T], (LAMBDA GT: graphs[tree_circ.T].size(tree_circ.GT)), (LAMBDA GT: subgraphs[tree_circ.T].subgraph?(tree_circ.C, tree_circ.GT))].abstract_min"
    "T_ne: ASSUMPTION EXISTS (t: abstract_min.T): abstract_min.P(t)"))
  (c_tree_TCC1-1 nil 3507100595
   ("" (skosimp*)
    (("" (inst 1 "TR!1") (("" (typepred "C!1") (("" (propax) nil)))))) nil)
   ((T formal-type-decl nil tree_circ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil) (tree? def-decl "bool" trees nil)
    (Tree type-eq-decl nil trees nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (Subgraph type-eq-decl nil subgraphs nil))
   nil
   (c_tree assuming
    "ints@abstract_min[Tree[T], (LAMBDA GT: graphs[tree_circ.T].size(tree_circ.GT)), (LAMBDA GT: subgraphs[tree_circ.T].subgraph?(tree_circ.C, tree_circ.GT))].abstract_min"
    "T_ne: ASSUMPTION EXISTS (t: abstract_min.T): abstract_min.P(t)")))
 (tree_containing_lem 0
  (tree_containing_lem-2 "" 3790105201
   ("" (skosimp*)
    (("" (prop)
      (("1" (assert) nil nil)
       ("2"
        (lemma "min_in[Tree[T],(LAMBDA GT: size(GT)),
                         (LAMBDA GT: subgraph?(G_from(GT!1,w!1),GT))]")
        (("1" (beta) (("1" (expand "c_tree") (("1" (propax) nil nil)) nil))
          nil)
         ("2" (lemma "exists_c_tree") (("2" (inst?) nil nil)) nil))
        nil)
       ("3" (skosimp*)
        (("3"
          (lemma "min_is_min[Tree[T],(LAMBDA GT: size(GT)),
                         (LAMBDA GT: subgraph?(G_from(GT!1,w!1),GT))]")
          (("1" (expand "c_tree")
            (("1" (inst -1 "GG!1") (("1" (beta) (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (lemma "exists_c_tree") (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (tree_containing_lem-1 nil 3507100595
   ("" (skosimp*)
    (("" (prop)
      (("1" (assert) nil)
       ("2"
        (lemma "min_in[Tree[T],(LAMBDA GT: size(GT)),
                         (LAMBDA GT: subgraph?(G_from(GT!1,w!1),GT))]")
        (("1" (beta) (("1" (expand "c_tree") (("1" (propax) nil)))))
         ("2" (lemma "exists_c_tree") (("2" (inst?) nil)))))
       ("3" (skosimp*)
        (("3"
          (lemma "min_is_min[Tree[T],(LAMBDA GT: size(GT)),
                         (LAMBDA GT: subgraph?(G_from(GT!1,w!1),GT))]")
          (("1" (expand "c_tree")
            (("1" (inst -1 "GG!1") (("1" (beta) (("1" (assert) nil)))))))
           ("2" (lemma "exists_c_tree") (("2" (inst?) nil))))))))))
    nil)
   ((exists_c_tree formula-decl nil tree_circ nil)
    (c_tree const-decl "Tree" tree_circ nil)
    (min_in formula-decl nil abstract_min ints)
    (T formal-type-decl nil tree_circ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil) (tree? def-decl "bool" trees nil)
    (Tree type-eq-decl nil trees nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" graphs nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (walk? const-decl "bool" walks nil) (Walk type-eq-decl nil walks nil)
    (Subgraph type-eq-decl nil subgraphs nil)
    (G_from const-decl "Subgraph(G)" subgraphs_from_walk nil)
    (min_is_min formula-decl nil abstract_min ints)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (tree_deg 0
  (tree_deg-2 "" 3790105201
   ("" (skosimp*)
    (("" (expand "deg")
      (("" (lemma "card_subset[doubleton[T]]")
        ((""
          (inst -1 "incident_edges(v!1, G_from(GT!1, w!1))"
           "incident_edges(v!1, c_tree(GT!1, G_from(GT!1, w!1)))")
          (("" (assert)
            (("" (hide -1 -2 2)
              (("" (expand "subset?")
                (("" (skosimp*)
                  (("" (expand "member")
                    (("" (expand "incident_edges")
                      (("" (lemma "tree_containing_lem")
                        (("" (inst?)
                          (("" (flatten)
                            (("" (hide -1 -3)
                              (("" (expand "subgraph?")
                                (("" (flatten)
                                  (("" (hide -1)
                                    (("" (expand "subset?")
                                      ((""
                                        (expand "member")
                                        ((""
                                          (inst?)
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (tree_deg-1 nil 3507100595
   ("" (skosimp*)
    (("" (expand "deg")
      (("" (lemma "card_subset[doubleton[T]]")
        ((""
          (inst -1 "incident_edges(v!1, G_from(GT!1, w!1))"
           "incident_edges(v!1, c_tree(GT!1, G_from(GT!1, w!1)))")
          (("" (assert)
            (("" (hide -1 -2 2)
              (("" (expand "subset?")
                (("" (skosimp*)
                  (("" (expand "member")
                    (("" (expand "incident_edges")
                      (("" (lemma "tree_containing_lem")
                        (("" (inst?)
                          (("" (flatten)
                            (("" (hide -1 -3)
                              (("" (expand "subgraph?")
                                (("" (flatten)
                                  (("" (hide -1)
                                    (("" (expand "subset?")
                                      ((""
                                        (expand "member")
                                        ((""
                                          (inst?)
                                          ((""
                                            (assert)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   ((deg const-decl "nat" graph_deg nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (incident_edges const-decl "finite_set[doubleton[T]]" graph_deg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (walk? const-decl "bool" walks nil) (Walk type-eq-decl nil walks nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (Subgraph type-eq-decl nil subgraphs nil)
    (G_from const-decl "Subgraph(G)" subgraphs_from_walk nil)
    (tree? def-decl "bool" trees nil) (Tree type-eq-decl nil trees nil)
    (c_tree const-decl "Tree" tree_circ nil)
    (tree_containing_lem formula-decl nil tree_circ nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (card_subset formula-decl nil finite_sets nil)
    (T formal-type-decl nil tree_circ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures))
   nil))
 (small_tree_lem 0
  (small_tree_lem-2 "" 3790105201
   ("" (skosimp*)
    (("" (expand "size")
      (("" (lemma "circuit_subgraph_len_1")
        (("" (inst?)
          (("" (assert)
            (("" (lemma "G_from_vert")
              (("" (inst?)
                (("" (replace -1)
                  (("" (hide -1)
                    (("" (lemma "verts_of_subset")
                      (("" (inst?)
                        (("" (inst?)
                          (("" (lemma "card_subset[T]")
                            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (small_tree_lem-1 nil 3507100595
   ("" (skosimp*)
    (("" (expand "size")
      (("" (lemma "circuit_subgraph_len_1")
        (("" (inst?)
          (("" (assert)
            (("" (lemma "G_from_vert")
              (("" (inst?)
                (("" (replace -1)
                  (("" (hide -1)
                    (("" (lemma "verts_of_subset")
                      (("" (inst?)
                        (("" (inst?)
                          (("1" (lemma "card_subset[T]")
                            (("1" (inst?) (("1" (assert) nil)))))
                           ("2" (assert)
                            (("2" (typepred "w!1")
                              (("2" (expand "walk?")
                                (("2" (propax)
                                  nil))))))))))))))))))))))))))))))
    nil)
   ((size const-decl "nat" graphs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (walk? const-decl "bool" walks nil) (Walk type-eq-decl nil walks nil)
    (G_from_vert formula-decl nil subgraphs_from_walk nil)
    (verts_of_subset formula-decl nil walks nil)
    (Seq type-eq-decl nil walks nil) (verts_in? const-decl "bool" walks nil)
    (verts_of const-decl "finite_set[T]" walks nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card_subset formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (circuit_subgraph_len_1 formula-decl nil circuit_deg nil)
    (T formal-type-decl nil tree_circ nil))
   nil))
 (tree_no_circuits 0
  (tree_no_circuits-1 nil 3507100595
   ("" (skosimp*)
    (("" (case "card(vert(G!1)) <= 1")
      (("1" (rewrite "small_tree_lem")
        (("1" (expand "size") (("1" (propax) nil nil)) nil)) nil)
       ("2" (name "Gp" "c_tree(G!1,G_from(G!1,w!1))")
        (("1" (case "size(G_from(G!1,w!1)) <= size(Gp)")
          (("1" (expand "size")
            (("1" (lemma "tree_containing_lem")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (typepred "c_tree(G!1, G_from(G!1, w!1))")
                      (("1" (expand "tree?" -2)
                        (("1" (split -2)
                          (("1" (lemma "circuit_subgraph_len_1")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                           ("2" (skosimp*)
                            (("2" (hide -3)
                              (("2" (expand "subgraph?" -3)
                                (("2" (flatten)
                                  (("2" (lemma "card_subset[T]")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "circuit_deg")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -3 -8 -9)
                                                (("2"
                                                  (typepred "v!1")
                                                  (("2"
                                                    (hide -3)
                                                    (("2"
                                                      (case
                                                       "NOT verts_of(w!1)(v!1)")
                                                      (("1"
                                                        (case
                                                         "subgraph?(G_from(G!1,w!1),del_vert(Gp,v!1))")
                                                        (("1"
                                                          (case
                                                           "size(del_vert(Gp, v!1)) = size(Gp) - 1")
                                                          (("1"
                                                            (inst
                                                             -8
                                                             "del_vert(Gp, v!1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "size")
                                                            (("2"
                                                              (hide -5)
                                                              (("2"
                                                                (expand
                                                                 "del_vert")
                                                                (("2"
                                                                  (rewrite
                                                                   "card_remove")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "verts_of")
                                                          (("2"
                                                            (rewrite
                                                             "del_vert_subgraph"
                                                             +)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (expand
                                                                 "subgraph?")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "verts_of")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "verts_of")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (hide
                                                               -5
                                                               -6
                                                               -7
                                                               -8
                                                               -9)
                                                              (("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (hide -1)
                                                                  (("2"
                                                                    (lemma
                                                                     "tree_deg")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "w!1")
            (("2" (expand "walk?")
              (("2" (flatten)
                (("2" (hide -2 -3 2)
                  (("2" (hide -1)
                    (("2" (lemma "tree_containing_lem")
                      (("2" (inst -1 "G!1" "w!1")
                        (("2" (flatten)
                          (("2" (hide -3)
                            (("2" (expand "subgraph?")
                              (("2" (flatten)
                                (("2" (hide -1 -3)
                                  (("2" (expand "size")
                                    (("2" (lemma "card_subset[T]")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   ((graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil tree_circ nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (size const-decl "nat" graphs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (small_tree_lem formula-decl nil tree_circ nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (walk? const-decl "bool" walks nil) (Walk type-eq-decl nil walks nil)
    (tree_containing_lem formula-decl nil tree_circ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (circuit_subgraph_len_1 formula-decl nil circuit_deg nil)
    (circuit_deg formula-decl nil circuit_deg nil)
    (verts_of const-decl "finite_set[T]" walks nil)
    (del_vert_subgraph formula-decl nil subgraphs_from_walk nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (card_remove formula-decl nil finite_sets nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (tree_deg formula-decl nil tree_circ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (card_subset formula-decl nil finite_sets nil)
    (Tree type-eq-decl nil trees nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (tree? def-decl "bool" trees nil)
    (Subgraph type-eq-decl nil subgraphs nil)
    (c_tree const-decl "Tree" tree_circ nil)
    (G_from const-decl "Subgraph(G)" subgraphs_from_walk nil))
   nil)))


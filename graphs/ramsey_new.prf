(ramsey_new
 (subgraph_clique 0
  (subgraph_clique-1 nil 3399979141
   ("" (install-rewrites :defs !)
    (("" (ground)
      (("" (skosimp*)
        (("" (inst? +)
          (("" (prop)
            (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
             ("2" (skosimp*)
              (("2" (inst?)
                (("2" (assert) (("2" (inst?) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil ramsey_new nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (dbl const-decl "set[T]" doubletons structures)
    (edge? const-decl "bool" graphs nil)
    (contains_clique const-decl "bool" ramsey_new nil)
    (nil application-judgement "finite_set[T]" ramsey_new nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (subgraph_indep 0
  (subgraph_indep-1 nil 3399979141
   ("" (install-rewrites :defs !)
    (("" (skosimp*)
      (("" (ground)
        (("" (skosimp*)
          (("" (inst?)
            (("" (prop)
              (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (skosimp*)
                            (("2" (ground)
                              (("2" (replace -1)
                                (("2" (hide -1)
                                  (("2" (reveal -3)
                                    (("2" (inst -1 "j!1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nil application-judgement "finite_set[T]" ramsey_new nil)
    (contains_indep const-decl "bool" ramsey_new nil)
    (edge? const-decl "bool" graphs nil)
    (dbl const-decl "set[T]" doubletons structures)
    (/= const-decl "boolean" notequal nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (T formal-type-decl nil ramsey_new nil))
   nil))
 (r1_TCC1 0
  (r1_TCC1-1 nil 3399979141
   ("" (skosimp*) (("" (typepred "G!1") (("" (propax) nil nil)) nil)) nil)
   ((Graph type-eq-decl nil graphs nil) (nonempty? const-decl "bool" sets nil)
    (graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil ramsey_new nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (r1 subtype "vert(ramsey_new.G)" "(sets[ramsey_new.T].nonempty?)")))
 (r1_TCC2 0
  (r1_TCC2-2 nil 3399980916
   ("" (skosimp*)
    ((""
      (case "subset?({n: T | vert(G!1)(n) AND
                                    n /= v0!1 AND
                                     edge?[T](G!1)(v0!1, n)},vert(G!1))")
      (("1" (lemma "finite_subset[T]")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (hide 2)
        (("2" (expand "subset?")
          (("2" (skosimp*)
            (("2" (expand "member") (("2" (flatten) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((edge? const-decl "bool" graphs nil) (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil) (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil ramsey_new nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil))
   nil
   (r1 subtype
    "{n: ramsey_new.T | booleans.AND(vert(ramsey_new.G)(n), booleans.AND(n /= ramsey_new.v0, graphs[ramsey_new.T].edge?(ramsey_new.G)(ramsey_new.v0, n)))}"
    "finite_set[T]"))
  (r1_TCC2-1 nil 3399979141
   ("" (skosimp*)
    ((""
      (case "subset?({n: T | vert(G!1)(n) AND
                      n /= choose[T](vert(G!1)) AND
                       edge?[T](G!1)(choose[T](vert(G!1)), n)},vert(G!1))")
      (("1" (lemma "finite_subset[T]")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (hide 2)
        (("2" (expand "subset?")
          (("2" (skosimp*)
            (("2" (expand "member") (("2" (flatten) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (r1 subtype
    "{n: ramsey_new.T | booleans.AND(vert(ramsey_new.G)(n), booleans.AND(n /= ramsey_new.v0, graphs[ramsey_new.T].edge?(ramsey_new.G)(ramsey_new.v0, n)))}"
    "finite_set[T]")))
 (r2_TCC1 0
  (r2_TCC1-2 nil 3399980945
   ("" (skosimp*)
    ((""
      (case "subset?({n: T | vert(G!1)(n) AND
                                    n /= v0!1 AND
                                     NOT edge?[T](G!1)(v0!1, n)},vert(G!1))")
      (("1" (lemma "finite_subset[T]")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (hide 2)
        (("2" (expand "subset?")
          (("2" (skosimp*)
            (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((edge? const-decl "bool" graphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Graph type-eq-decl nil graphs nil) (nonempty? const-decl "bool" sets nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil ramsey_new nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil))
   nil
   (r2 subtype
    "{n: ramsey_new.T | booleans.AND(vert(ramsey_new.G)(n), booleans.AND(n /= ramsey_new.v0, (booleans.NOT)(graphs[ramsey_new.T].edge?(ramsey_new.G)(ramsey_new.v0, n))))}"
    "finite_set[T]"))
  (r2_TCC1-1 nil 3399979141
   ("" (skosimp*)
    ((""
      (case "subset?({n: T |
              vert(G!1)(n) AND
               n /= choose[T](vert(G!1)) AND
                NOT edge?[T](G!1)(choose[T](vert(G!1)), n)},vert(G!1))")
      (("1" (lemma "finite_subset[T]")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (hide 2)
        (("2" (expand "subset?")
          (("2" (skosimp*)
            (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (r2 subtype
    "{n: ramsey_new.T | booleans.AND(vert(ramsey_new.G)(n), booleans.AND(n /= ramsey_new.v0, (booleans.NOT)(graphs[ramsey_new.T].edge?(ramsey_new.G)(ramsey_new.v0, n))))}"
    "finite_set[T]")))
 (card_r1_r2 0
  (card_r1_r2-1 nil 3399979141
   ("" (skosimp*)
    (("" (case "add(choose(vert(G!1)),union(r1(G!1),r2(G!1))) = vert(G!1)")
      (("1" (expand "size")
        (("1" (replace -1 * rl)
          (("1" (hide -1)
            (("1" (rewrite "card_add")
              (("1" (rewrite "card_union")
                (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (apply-extensionality 1 :hide? t)
          (("2" (grind :exclude "choose") nil nil)) nil))
        nil))
      nil))
    nil)
   ((r2 const-decl "finite_set[T]" ramsey_new nil)
    (r1 const-decl "finite_set[T]" ramsey_new nil)
    (is_finite const-decl "bool" finite_sets nil)
    (union const-decl "set" sets nil) (Graph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil) (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil ramsey_new nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (card_add formula-decl nil finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (card_union formula-decl nil finite_sets nil)
    (size const-decl "nat" graphs nil)
    (nil application-judgement "finite_set[T]" ramsey_new nil)
    (edge? const-decl "bool" graphs nil) (member const-decl "bool" sets nil))
   nil))
 (ramsey_lem 0
  (ramsey_lem-1 nil 3399979141
   ("" (induct "ii")
    (("1" (skosimp*)
      (("1" (inst 1 "ramsey(l1!1,l2!1)")
        (("1" (skosimp*)
          (("1" (expand "contains_clique")
            (("1" (inst 1 "emptyset[T]")
              (("1" (hide 2) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (case-replace "l1!1 = 0")
        (("1" (inst 1 "ramsey(l1!1,l2!1)")
          (("1" (skosimp*)
            (("1" (expand "contains_clique")
              (("1" (inst 1 "emptyset[T]")
                (("1" (hide -2 2) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (case-replace "l2!1 = 0")
          (("1" (inst 2 "ramsey(l1!1,l2!1)")
            (("1" (skosimp*)
              (("1" (hide -2 2)
                (("1" (expand "contains_indep")
                  (("1" (inst 2 "emptyset[T]") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst-cp -1 "l1!1" "l2!1-1")
            (("1" (inst -1 "l1!1-1" "l2!1")
              (("1" (assert)
                (("1" (skosimp*)
                  (("1" (inst 3 "n!1+n!2")
                    (("1" (skosimp*)
                      (("1" (lemma "card_r1_r2")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (case "card(r1(G!1)) >= n!1")
                              (("1" (inst -3 "SG1(G!1)")
                                (("1" (expand "size")
                                  (("1" (split -3)
                                    (("1" (hide -2 -3 -4 -5 -6 4)
                                      (("1"
                                        (name "Vo" "choose(vert(G!1))")
                                        (("1"
                                          (case
                                           "contains_clique(subgraph(G!1,add(Vo,
                                          vert(SG1(G!1)))), l1!1)")
                                          (("1"
                                            (lemma "subgraph_clique")
                                            (("1"
                                              (inst
                                               -1
                                               "G!1"
                                               "l1!1"
                                               "add(Vo, vert(SG1(G!1)))")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 4)
                                            (("2"
                                              (expand "contains_clique")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst 1 "add(Vo,C!1)")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (hide -2 -3 2 3)
                                                        (("1"
                                                          (expand "subset?")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "x!1")
                                                                (("1"
                                                                  (grind
                                                                   :exclude
                                                                   ("choose"
                                                                    "r1"))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -4 2 3)
                                                      (("2"
                                                        (rewrite "card_add")
                                                        (("2"
                                                          (expand "SG1")
                                                          (("2"
                                                            (expand
                                                             "subgraph")
                                                            (("2"
                                                              (expand
                                                               "subset?")
                                                              (("2"
                                                                (inst -2 "Vo")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (grind
                                                                     :exclude
                                                                     "choose")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp*)
                                                      (("3"
                                                        (hide -5 3 4)
                                                        (("3"
                                                          (inst
                                                           -5
                                                           "i!1"
                                                           "j!2")
                                                          (("3"
                                                            (expand "subset?")
                                                            (("3"
                                                              (inst-cp
                                                               -4
                                                               "i!1")
                                                              (("3"
                                                                (inst
                                                                 -4
                                                                 "j!2")
                                                                (("3"
                                                                  (expand
                                                                   "add")
                                                                  (("3"
                                                                    (expand
                                                                     "member")
                                                                    (("3"
                                                                      (grind
                                                                       :exclude
                                                                       "choose")
                                                                      (("3"
                                                                        (rewrite
                                                                         "dbl_comm")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -2 -3 -4 -5 -6 3)
                                      (("2"
                                        (expand "SG1")
                                        (("2"
                                          (expand "subgraph")
                                          (("2"
                                            (expand "contains_indep")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst 3 "D!1")
                                                (("2"
                                                  (expand "subset?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst -2 "x!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -6
                                                             "i!1"
                                                             "j!2")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "edge?")
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (expand
                                                                       "r1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (expand
                                                                             "dbl")
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (hide -2 -3 -4 -5 2 3 4 5)
                                      (("3"
                                        (case-replace
                                         "vert(SG1(G!1)) = r1(G!1)")
                                        (("3"
                                          (hide -1 2)
                                          (("3"
                                            (apply-extensionality 1 :hide? t)
                                            (("3"
                                              (grind
                                               :exclude
                                               ("choose" "edge?"))
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (hide -4 -6 2 3 4 5)
                                    (("2" (expand "nonempty?")
                                      (("2"
                                        (expand "SG1")
                                        (("2"
                                          (case "card(r1(G!1)) = 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -3 -4 -5)
                                            (("2"
                                              (lemma "card_empty?[T]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "vert(subgraph(G!1, r1(G!1)))")
                                                (("2"
                                                  (lemma "card_subset[T]")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "r1(G!1)"
                                                     "vert(subgraph(G!1, r1(G!1)))")
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (hide -1 -2 -3 2)
                                                        (("2"
                                                          (grind
                                                           :exclude
                                                           ("choose" "edge?"))
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (case "card(r2(G!1)) >= n!2")
                                  (("1" (inst -4 "SG2(G!1)")
                                    (("1" (expand "size")
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (split -3)
                                          (("1"
                                            (hide -2 -3 -4 -5 1 5)
                                            (("1"
                                              (expand "contains_clique")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide -2 -3 2 3)
                                                      (("1"
                                                        (expand "subset?")
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (grind
                                                             :exclude
                                                             ("choose" "r2"))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (inst -5 "j!2")
                                                          (("2"
                                                            (grind
                                                             :exclude
                                                             ("choose" "r2"))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -2 -3 -4 -5 1 4)
                                            (("2"
                                              (expand "SG2")
                                              (("2"
                                                (expand "contains_indep")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (name
                                                     "Vo"
                                                     "choose(vert(G!1))")
                                                    (("2"
                                                      (inst 3 "add(Vo,D!1)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (hide -3 -4 2 3)
                                                          (("1"
                                                            (case-replace
                                                             "vert(subgraph(G!1, r2(G!1))) = r2(G!1)")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (expand
                                                                 "subset?")
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (grind
                                                                       :exclude
                                                                       "choose")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -1 2)
                                                              (("2"
                                                                (apply-extensionality
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (grind
                                                                   :exclude
                                                                   "choose")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -4)
                                                          (("2"
                                                            (typepred "G!1")
                                                            (("2"
                                                              (typepred
                                                               "vert(G!1)")
                                                              (("2"
                                                                (rewrite
                                                                 "card_add")
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (grind
                                                                           :exclude
                                                                           "choose")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skosimp*)
                                                          (("3"
                                                            (expand "add")
                                                            (("3"
                                                              (expand
                                                               "member")
                                                              (("3"
                                                                (inst
                                                                 -7
                                                                 "i!1"
                                                                 "j!2")
                                                                (("3"
                                                                  (expand
                                                                   "subset?")
                                                                  (("3"
                                                                    (inst-cp
                                                                     -5
                                                                     "i!1")
                                                                    (("3"
                                                                      (inst
                                                                       -5
                                                                       "j!2")
                                                                      (("3"
                                                                        (expand
                                                                         "member")
                                                                        (("3"
                                                                          (grind
                                                                           :exclude
                                                                           "choose")
                                                                          (("3"
                                                                            (rewrite
                                                                             "dbl_comm")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -2 -3 -4 2 3 4 5 6)
                                            (("3"
                                              (case-replace
                                               "vert(SG2(G!1)) = r2(G!1)")
                                              (("3"
                                                (hide 2)
                                                (("3"
                                                  (apply-extensionality
                                                   1
                                                   :hide?
                                                   t)
                                                  (("3"
                                                    (hide -1)
                                                    (("3"
                                                      (grind
                                                       :exclude
                                                       ("choose" "edge?"))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (case "card(r2(G!1)) = 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -3 -4 -5 -6 -7 2 3 4 5 6)
                                            (("2"
                                              (expand "SG2")
                                              (("2"
                                                (lemma "card_empty?[T]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "vert(subgraph(G!1, r2(G!1)))")
                                                  (("2"
                                                    (lemma "card_subset[T]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "r2(G!1)"
                                                       "vert(subgraph(G!1, r2(G!1)))")
                                                      (("2"
                                                        (ground)
                                                        (("2"
                                                          (hide -1 -2 2 -3)
                                                          (("2"
                                                            (grind
                                                             :exclude
                                                             ("choose"
                                                              "edge?"))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((l1!1 skolem-const-decl "nat" ramsey_new nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (r1 const-decl "finite_set[T]" ramsey_new nil)
    (card_empty? formula-decl nil finite_sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (Subgraph type-eq-decl nil subgraphs nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (subgraph_clique formula-decl nil ramsey_new nil)
    (dbl_comm formula-decl nil doubletons structures)
    (card_add formula-decl nil finite_sets nil)
    (choose const-decl "(p)" sets nil)
    (G!1 skolem-const-decl "Graph[T]" ramsey_new nil)
    (SG1 const-decl "graph[T]" ramsey_new nil)
    (r2 const-decl "finite_set[T]" ramsey_new nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (SG2 const-decl "graph[T]" ramsey_new nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (card_r1_r2 formula-decl nil ramsey_new nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (l2!1 skolem-const-decl "nat" ramsey_new nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nil application-judgement "finite_set[T]" ramsey_new nil)
    (edge? const-decl "bool" graphs nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (ramsey const-decl "posnat" ramsey_new nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (contains_indep const-decl "bool" ramsey_new nil)
    (contains_clique const-decl "bool" ramsey_new nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "nat" graphs nil) (Graph type-eq-decl nil graphs nil)
    (nonempty? const-decl "bool" sets nil) (graph type-eq-decl nil graphs nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil ramsey_new nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (ramseys_theorem 0
  (ramseys_theorem-2 "" 3790105234
   ("" (skosimp*)
    (("" (lemma "ramsey_lem")
      (("" (inst?) (("" (inst -1 "l1!1 + l2!1") nil nil)) nil)) nil))
    nil)
   nil shostak)
  (ramseys_theorem-1 nil 3399979141
   ("" (skosimp*)
    (("" (lemma "ramsey_lem")
      (("" (inst?) (("" (inst -1 "l1!1 + l2!1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((ramsey_lem formula-decl nil ramsey_new nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)))


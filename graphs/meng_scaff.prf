(meng_scaff
 (first_TCC1 0
  (first_TCC1-1 nil 3251049125
   ("" (skosimp*)
    (("" (typepred "ps!1")
      (("" (skosimp*)
        (("" (expand "nonempty?")
          (("" (expand "empty?")
            (("" (expand "member") (("" (inst?) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ps_ptype type-eq-decl nil meng_scaff nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil meng_scaff nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sets nil))
   nil
   (first subtype
          "{i: naturalnumbers.nat | booleans.AND(reals.<(i, length(meng_scaff.ps)), meng_scaff.P(seq(meng_scaff.ps)(i)))}"
          "(sets[nat].nonempty?)")))
 (first_lem 0
  (first_lem-1 nil 3251049125
   ("" (skosimp*)
    (("" (expand "first")
      (("" (lemma "min_lem[nat]")
        (("" (inst?)
          (("1" (expand "minimum?") (("1" (flatten) nil nil)) nil)
           ("2" (hide 2)
            (("2" (expand "nonempty?")
              (("2" (typepred "ps!1")
                (("2" (skosimp*)
                  (("2" (expand "empty?")
                    (("2" (expand "member")
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first const-decl "below(length(ps))" meng_scaff nil)
    (ps!1 skolem-const-decl "ps_ptype(P!1)" meng_scaff nil)
    (ps_ptype type-eq-decl nil meng_scaff nil)
    (P!1 skolem-const-decl "pred[T]" meng_scaff nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil meng_scaff nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (minimum? const-decl "bool" min_nat nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (min_lem formula-decl nil min_lem ints)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (first_not_TCC1 0
  (first_not_TCC1-1 nil 3251049125 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (first_not subtype "meng_scaff.i" "below[ps`length]")))
 (first_not 0
  (first_not-1 nil 3251049125
   ("" (skosimp*)
    (("" (expand "first")
      (("" (lemma "min_lem[nat]")
        (("" (inst?)
          (("1" (expand "minimum?")
            (("1" (flatten)
              (("1" (assert)
                (("1" (inst -3 "i!1") (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (typepred "ps!1")
            (("2" (skosimp*)
              (("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (expand "member")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first const-decl "below(length(ps))" meng_scaff nil)
    (ps!1 skolem-const-decl "ps_ptype(P!1)" meng_scaff nil)
    (ps_ptype type-eq-decl nil meng_scaff nil)
    (P!1 skolem-const-decl "pred[T]" meng_scaff nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil meng_scaff nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minimum? const-decl "bool" min_nat nil)
    (empty? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (min_lem formula-decl nil min_lem ints)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (meng_to_G_sep_TCC1 0
  (meng_to_G_sep_TCC1-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil (meng_to_G_sep subtype "meng_scaff.s" "(vert(meng_scaff.G))")))
 (meng_to_G_sep_TCC2 0
  (meng_to_G_sep_TCC2-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil (meng_to_G_sep subtype "meng_scaff.t" "(vert(meng_scaff.G))")))
 (meng_to_G_sep_TCC3 0
  (meng_to_G_sep_TCC3-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil
   (meng_to_G_sep subtype "meng_scaff.w1"
    "{t_1 | booleans.AND(vert(meng_scaff.G)(t_1), t_1 /= meng_scaff.t)}")))
 (meng_to_G_sep_TCC4 0
  (meng_to_G_sep_TCC4-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil
   (meng_to_G_sep subtype "meng_scaff.w2"
    "{t_1 | booleans.AND(vert(meng_scaff.G)(t_1), t_1 /= meng_scaff.t)}")))
 (meng_to_G_sep 0
  (meng_to_G_sep-1 nil 3251049125
   ("" (skosimp*)
    (("" (expand "separates")
      (("" (flatten)
        (("" (expand "dbl")
          (("" (expand "singleton")
            (("" (flatten)
              (("" (assert)
                (("" (expand "in?")
                  (("" (expand "disjoint?")
                    (("" (flatten)
                      (("" (expand "verts_of")
                        (("" (expand "finseq_appl")
                          ((""
                            (case "(EXISTS (i: below(length(p!1))): seq(p!1)(i) = w1!1 OR seq(p!1)(i) = w2!1)")
                            (("1" (skosimp*)
                              (("1"
                                (name "ipf"
                                      "first((LAMBDA (x:T): x = w1!1 OR x = w2!1),p!1)")
                                (("1" (lemma "first_lem")
                                  (("1" (inst?)
                                    (("1" (lemma "first_not")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (expand "walk_from?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case
                                                   "walk?(G!1,p!1^(0,ipf))")
                                                  (("1"
                                                    (case
                                                     "NOT verts_of(p!1^(0,ipf))(t!1)")
                                                    (("1"
                                                      (hide 11 13)
                                                      (("1"
                                                        (case
                                                         "walk?(H(G!1,s!1,w1!1,w2!1),trunc1(p!1^(0,ipf)))")
                                                        (("1"
                                                          (case
                                                           "walk?(meng(G!1,s!1,t!1,w1!1,w2!1),p!1^(0,ipf))")
                                                          (("1"
                                                            (name-replace
                                                             "Ms"
                                                             "meng(G!1, s!1, t!1, w1!1, w2!1)")
                                                            (("1"
                                                              (hide -2 -3 -9)
                                                              (("1"
                                                                (case
                                                                 "walk?(Ms,add1(p!1^(0,ipf),t!1))")
                                                                (("1"
                                                                  (case-replace
                                                                   "del_verts(Ms, {y: T | y = z!1}) = del_vert(Ms,z!1)")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "add1(p!1^(0,ipf),t!1)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "walk?_del_vert_not")
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -5
                                                                         -6
                                                                         11)
                                                                        (("1"
                                                                          (expand
                                                                           "add1")
                                                                          (("1"
                                                                            (expand*
                                                                             "^"
                                                                             "min"
                                                                             "empty_seq")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -5
                                                                         -6
                                                                         -7
                                                                         6
                                                                         11)
                                                                        (("2"
                                                                          (expand
                                                                           "verts_of")
                                                                          (("2"
                                                                            (expand
                                                                             "finseq_appl")
                                                                            (("2"
                                                                              (expand
                                                                               "add1")
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (expand*
                                                                                   "^"
                                                                                   "min")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("2"
                                                                                            (expand*
                                                                                             "^"
                                                                                             "min")
                                                                                            (("2"
                                                                                              (reveal
                                                                                               3)
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     -5
                                                                     -6
                                                                     -7
                                                                     -8
                                                                     2
                                                                     5)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (apply-extensionality
                                                                         1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (iff
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "del_verts")
                                                                            (("1"
                                                                              (expand
                                                                               "del_vert")
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "finite_singleton[T]")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (expand
                                                                               "singleton")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "del_vert")
                                                                        (("2"
                                                                          (expand
                                                                           "del_verts")
                                                                          (("2"
                                                                            (apply-extensionality
                                                                             1
                                                                             :hide?
                                                                             t)
                                                                            (("2"
                                                                              (iff
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "difference")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "remove")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (lemma
                                                                         "finite_singleton[T]")
                                                                        (("3"
                                                                          (expand
                                                                           "singleton")
                                                                          (("3"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "finite_singleton[T]")
                                                                    (("3"
                                                                      (expand
                                                                       "singleton")
                                                                      (("3"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6
                                                                   5
                                                                   6
                                                                   7
                                                                   12)
                                                                  (("2"
                                                                    (lemma
                                                                     "walk?_add1")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (reveal
                                                                             -11)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               *
                                                                               rl)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (split
                                                                                   +)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "meng")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "add")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "edge?")
                                                                                    (("2"
                                                                                      (expand*
                                                                                       "^"
                                                                                       "min")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "verts_of")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "finseq_appl")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 -4)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "meng")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "union")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "add")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -3 -5 7 12)
                                                            (("2"
                                                              (expand "walk?")
                                                              (("2"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split +)
                                                                    (("1"
                                                                      (expand
                                                                       "verts_in?")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (typepred
                                                                           "i!2")
                                                                          (("1"
                                                                            (expand
                                                                             "^"
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "min"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "empty_seq"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "i!2 = ipf")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2
                                                                                       -3
                                                                                       -4
                                                                                       -6
                                                                                       -11)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "meng")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "^")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "verts_of")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "finseq_appl")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "add")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -3
                                                                                       -4
                                                                                       -5
                                                                                       -9
                                                                                       -10)
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "meng")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "trunc1")
                                                                                            (("1"
                                                                                              (expand*
                                                                                               "^"
                                                                                               "min"
                                                                                               "empty_seq")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "add")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "trunc1"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "^"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "min"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "empty_seq"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "^"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "min"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "empty_seq"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "n!1 = ipf - 1")
                                                                                (("1"
                                                                                  (hide
                                                                                   -3
                                                                                   -4)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "verts_in?")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "edge?")
                                                                                          (("1"
                                                                                            (expand*
                                                                                             "^"
                                                                                             "min"
                                                                                             "empty_seq")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "meng")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "union")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "add")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "incident")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       +
                                                                                                                       "seq(p!1)(ipf-1)")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         +
                                                                                                                         "seq(p!1)(ipf-1)")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           1
                                                                                                                           2
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (reveal
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "verts_in?")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "ipf-1")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "trunc1"
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "^"
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "min"
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "dbl_comm"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -5)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "trunc1"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "^"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "min"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "min"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -4
                                                                                   -5
                                                                                   -9
                                                                                   -10)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "edge?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "n!1")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         3)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "trunc1")
                                                                                          (("2"
                                                                                            (expand*
                                                                                             "^"
                                                                                             "min"
                                                                                             "empty_seq")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "meng")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "union")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "add")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("6"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma "walk?_H")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (case
                                                                   "walk?(G!1, trunc1(p!1 ^ (0, ipf)))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       7
                                                                       12)
                                                                      (("1"
                                                                        (expand
                                                                         "trunc1")
                                                                        (("1"
                                                                          (expand*
                                                                           "^"
                                                                           "min"
                                                                           "empty_seq")
                                                                          (("1"
                                                                            (expand
                                                                             "verts_of")
                                                                            (("1"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("1"
                                                                                (split
                                                                                 +)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (skosimp*)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -
                                                                                       "i!2")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (flatten)
                                                                                  (("4"
                                                                                    (skosimp*)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("5"
                                                                                  (flatten)
                                                                                  (("5"
                                                                                    (skosimp*)
                                                                                    (("5"
                                                                                      (inst
                                                                                       -
                                                                                       "i!2")
                                                                                      (("5"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (hide
                                                                       -2
                                                                       2
                                                                       7
                                                                       12)
                                                                      (("2"
                                                                        (expand
                                                                         "trunc1")
                                                                        (("2"
                                                                          (rewrite
                                                                           "walk?_caret")
                                                                          (("1"
                                                                            (expand
                                                                             "^"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "min"
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "^"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "min"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand "^" 1)
                                                          (("3"
                                                            (expand "min" 1)
                                                            (("3"
                                                              (expand
                                                               "empty_seq"
                                                               1)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3 4 5 11)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand "verts_of")
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (expand
                                                               "finseq_appl")
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "p!1^(0,i!2)")
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     7)
                                                                    (("1"
                                                                      (expand
                                                                       "min"
                                                                       7)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "walk?")
                                                                          (("1"
                                                                            (expand
                                                                             "finseq_appl")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (split
                                                                                 +)
                                                                                (("1"
                                                                                  (expand
                                                                                   "verts_in?")
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "i!2")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "min"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "verts_in?")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "del_verts")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "difference")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "i!3")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "i!2")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "min"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -11
                                                                                                       "i!3")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "i!3 = ipf")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst
                                                                                                             -7
                                                                                                             "i!3")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skosimp*)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "edge?")
                                                                                    (("3"
                                                                                      (inst
                                                                                       -
                                                                                       "n!1")
                                                                                      (("3"
                                                                                        (hide
                                                                                         -3)
                                                                                        (("3"
                                                                                          (expand*
                                                                                           "^"
                                                                                           "min")
                                                                                          (("3"
                                                                                            (case
                                                                                             "n!1 = ipf")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -9
                                                                                                     "ipf")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "i!2")
                                                                                                      (("1"
                                                                                                        (expand*
                                                                                                         "^"
                                                                                                         "min")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "i!2")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "^"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "min"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "del_verts")
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -12
                                                                                                                 -13
                                                                                                                 -18
                                                                                                                 9)
                                                                                                                (("2"
                                                                                                                  (inst-cp
                                                                                                                   -7
                                                                                                                   "n!1")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -7
                                                                                                                     "n!1+1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "n!1 = ipf -1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "dbl")
                                                                                                                            (("2"
                                                                                                                              (ground)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "i!2")
                                                                    (("2"
                                                                      (expand
                                                                       "^"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "min"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "^"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "min"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite "walk?_caret")
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (expand "^" 1)
                                                    (("3"
                                                      (expand "min" 1)
                                                      (("3"
                                                        (expand "empty_seq" 1)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (lift-if)
                                                            (("3"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst?) nil nil))
                                nil))
                              nil)
                             ("2" (inst 11 "p!1")
                              (("2" (hide 6 12)
                                (("2" (expand "walk_from?")
                                  (("2" (flatten)
                                    (("2" (assert)
                                      (("2"
                                        (expand "walk?")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (split +)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "verts_in?")
                                                (("1"
                                                  (expand "del_verts")
                                                  (("1"
                                                    (expand "difference")
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst? -)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (expand "edge?")
                                                (("2"
                                                  (inst?)
                                                  (("1"
                                                    (inst? -)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "del_verts")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (expand "dbl")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (reveal 1)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "n!1+1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (reveal 1)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "n!1+1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((separates const-decl "bool" sep_sets nil)
    (dbl const-decl "set[T]" doubletons structures)
    (in? const-decl "bool" meng_scaff_defs nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (n!1 skolem-const-decl "nat" meng_scaff nil)
    (first_lem formula-decl nil meng_scaff nil)
    (first_not formula-decl nil meng_scaff nil)
    (walk_from? const-decl "bool" walks nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil) (walk? const-decl "bool" walks nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i!2 skolem-const-decl "below(length(p!1 ^ (0, ipf)))" meng_scaff nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (walk?_H formula-decl nil meng_scaff_defs nil)
    (walk?_caret formula-decl nil walks nil)
    (meng const-decl "graph[T]" meng_scaff_defs nil)
    (add const-decl "(nonempty?)" sets nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs
     nil)
    (union const-decl "set" sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (edge? const-decl "bool" graphs nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil)
    (walk?_add1 formula-decl nil walks nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (walk?_del_vert_not formula-decl nil path_ops nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (p!1 skolem-const-decl "prewalk[T]" meng_scaff nil)
    (ipf skolem-const-decl "below(length(p!1))" meng_scaff nil)
    (z!1 skolem-const-decl "T" meng_scaff nil)
    (finite_singleton judgement-tcc nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (finite_difference application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil) (difference const-decl "set" sets nil)
    (add1 const-decl "prewalk" walks nil)
    (n!1 skolem-const-decl "nat" meng_scaff nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (dbl_comm formula-decl nil doubletons structures)
    (incident const-decl "finite_set[doubleton[T]]" meng_scaff_defs nil)
    (verts_in? const-decl "bool" walks nil)
    (i!2 skolem-const-decl "below(length(p!1 ^ (0, ipf)))" meng_scaff nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (trunc1 const-decl "prewalk" walks nil)
    (Longprewalk type-eq-decl nil walks nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (Subgraph type-eq-decl nil subgraphs nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (is_finite const-decl "bool" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (first const-decl "below(length(ps))" meng_scaff nil)
    (ps_ptype type-eq-decl nil meng_scaff nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil meng_scaff nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (verts_of const-decl "finite_set[T]" walks nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (singleton const-decl "(singleton?)" sets nil))
   nil))
 (prep_14_TCC1 0
  (prep_14_TCC1-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil))
   nil
   (prep_14 subtype "meng_scaff.w1"
    "{t_1 | booleans.AND(vert(meng_scaff.G)(t_1), t_1 /= meng_scaff.t)}")))
 (prep_14_TCC2 0
  (prep_14_TCC2-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil))
   nil
   (prep_14 subtype "meng_scaff.w2"
    "{t_1 | booleans.AND(vert(meng_scaff.G)(t_1), t_1 /= meng_scaff.t)}")))
 (prep_14 0
  (prep_14-2 "" 3790105507
   ("" (skosimp*)
    (("" (lemma "sep_num_le1")
      (("" (inst -1 "meng(G!1, s!1, t!1, w1!1, w2!1)" "w1!1" "s!1" "t!1")
        (("" (assert)
          (("" (split -1)
            (("1" (skosimp*)
              (("1" (hide 1 2)
                (("1" (hide -7 -8)
                  (("1" (lemma "sep_num_is_1")
                    (("1" (inst?)
                      (("1" (inst -1 "z!1")
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (expand "separates")
                              (("1" (flatten)
                                (("1" (expand "singleton")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (expand "separates")
                              (("2" (flatten)
                                (("2" (assert)
                                  (("2" (expand "singleton")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skosimp*)
                              (("3" (lemma "meng_to_G_sep")
                                (("3" (inst?)
                                  (("3" (inst?)
                                    (("3" (assert)
                                      (("3"
                                        (expand "in?")
                                        (("3"
                                          (expand "verts_of")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (expand "finseq_appl")
                                              (("3" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -6 -7 -8 -9 -10)
              (("2" (expand "meng")
                (("2" (expand "add")
                  (("2" (expand "member")
                    (("2" (expand "disjoint?")
                      (("2" (flatten)
                        (("2" (lemma "vert_H_s")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -6 -7 -8 -9 -10)
              (("3" (expand "meng")
                (("3" (expand "add") (("3" (propax) nil nil)) nil)) nil))
              nil)
             ("4" (hide -6 -7 -8 -9 -10)
              (("4" (expand "meng")
                (("4" (expand "add")
                  (("4" (flatten)
                    (("4" (expand "member") (("4" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand "disjoint?") (("5" (flatten) nil nil)) nil)
             ("6" (expand "disjoint?") (("6" (flatten) nil nil)) nil)
             ("7" (assert)
              (("7" (hide -6 -7 -10 2)
                (("7" (expand "separable?")
                  (("7" (flatten)
                    (("7" (assert)
                      (("7" (expand "meng")
                        (("7" (expand "edge?")
                          (("7" (expand "add")
                            (("7" (expand "union")
                              (("7" (expand "member")
                                (("7" (expand "disjoint?")
                                  (("7" (flatten)
                                    (("7" (split -1)
                                      (("1"
                                        (lemma "dbl_eq")
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "dbl_eq")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "H")
                                        (("3"
                                          (expand "path_comp")
                                          (("3"
                                            (expand "subgraph")
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (inst -2 "t!1")
                                                (("3"
                                                  (expand "dbl")
                                                  (("3"
                                                    (hide -2)
                                                    (("3"
                                                      (expand "del_vert")
                                                      (("3"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (expand "incident")
                                        (("4" (skosimp*) nil nil))
                                        nil)
                                       ("5"
                                        (expand "incident")
                                        (("5" (skosimp*) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (prep_14-1 nil 3251049125
   ("" (skosimp*)
    (("" (lemma "sep_num_le1")
      (("" (inst -1 "meng(G!1, s!1, t!1, w1!1, w2!1)" "w1!1" "s!1" "t!1")
        (("1" (assert)
          (("1" (split -1)
            (("1" (skosimp*)
              (("1" (hide 1 2)
                (("1" (hide -7 -8)
                  (("1" (lemma "sep_num_is_1")
                    (("1" (inst?)
                      (("1" (inst -1 "z!1")
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (expand "separates")
                              (("1" (flatten)
                                (("1" (expand "singleton")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (expand "separates")
                              (("2" (flatten)
                                (("2" (assert)
                                  (("2" (expand "singleton")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skosimp*)
                              (("3" (lemma "meng_to_G_sep")
                                (("3" (inst?)
                                  (("3" (inst?)
                                    (("3" (assert)
                                      (("3"
                                        (expand "in?")
                                        (("3"
                                          (expand "verts_of")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (expand "finseq_appl")
                                              (("3" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -6 -7 -8 -9 -10)
              (("2" (expand "meng")
                (("2" (expand "add")
                  (("2" (expand "member")
                    (("2" (expand "disjoint?")
                      (("2" (flatten)
                        (("2" (lemma "vert_H_s")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -6 -7 -8 -9 -10)
              (("3" (expand "meng")
                (("3" (expand "add") (("3" (propax) nil nil)) nil)) nil))
              nil)
             ("4" (hide -6 -7 -8 -9 -10)
              (("4" (expand "meng")
                (("4" (expand "add")
                  (("4" (flatten)
                    (("4" (expand "member") (("4" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand "disjoint?") (("5" (flatten) nil nil)) nil)
             ("6" (expand "disjoint?") (("6" (flatten) nil nil)) nil)
             ("7" (assert)
              (("7" (hide -6 -7 -10 2)
                (("7" (expand "separable?")
                  (("7" (flatten)
                    (("7" (assert)
                      (("7" (expand "meng")
                        (("7" (expand "edge?")
                          (("7" (expand "add")
                            (("7" (expand "union")
                              (("7" (expand "member")
                                (("7" (expand "disjoint?")
                                  (("7" (flatten)
                                    (("7" (split -1)
                                      (("1"
                                        (lemma "dbl_eq")
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "dbl_eq")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "H")
                                        (("3"
                                          (expand "path_comp")
                                          (("3"
                                            (expand "subgraph")
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (inst -2 "t!1")
                                                (("3"
                                                  (expand "dbl")
                                                  (("3"
                                                    (hide -2)
                                                    (("3"
                                                      (expand "del_vert")
                                                      (("3"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (expand "incident")
                                        (("4" (skosimp*) nil nil))
                                        nil)
                                       ("5"
                                        (expand "incident")
                                        (("5" (skosimp*) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "disjoint?") (("2" (propax) nil nil)) nil)) nil)
         ("3" (expand "disjoint?")
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil meng_scaff nil)
    (sep_num_le1 formula-decl nil sep_set_lems nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (separable? const-decl "bool" sep_sets nil)
    (edge? const-decl "bool" graphs nil) (union const-decl "set" sets nil)
    (dbl_eq formula-decl nil doubletons structures)
    (path_comp const-decl "Subgraph(G)" meng_scaff_defs nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (incident const-decl "finite_set[doubleton[T]]" meng_scaff_defs nil)
    (add const-decl "(nonempty?)" sets nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (vert_H_s formula-decl nil meng_scaff_defs nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (verts_of const-decl "finite_set[T]" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (meng_to_G_sep formula-decl nil meng_scaff nil)
    (separates const-decl "bool" sep_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (sep_num_is_1 formula-decl nil sep_set_lems nil)
    (meng const-decl "graph[T]" meng_scaff_defs nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (line14_TCC1 0
  (line14_TCC1-1 nil 3251049125
   ("" (skosimp*) (("" (expand "in?") (("" (flatten) nil nil)) nil)) nil)
   ((in? const-decl "bool" meng_scaff_defs nil)) nil
   (line14 subtype "meng_scaff.s" "(vert(meng_scaff.G))")))
 (line14_TCC2 0
  (line14_TCC2-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (edge? const-decl "bool" graphs nil)
    (separable? const-decl "bool" sep_sets nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (min_sep_set const-decl "finite_set[T]" sep_sets nil)
    (sep_num const-decl "nat" sep_sets nil)
    (dbl const-decl "set[T]" doubletons structures)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (member const-decl "bool" sets nil) (difference const-decl "set" sets nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (separates const-decl "bool" sep_sets nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil (line14 subtype "meng_scaff.t" "(vert(meng_scaff.G))")))
 (line14_TCC3 0
  (line14_TCC3-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (edge? const-decl "bool" graphs nil)
    (separable? const-decl "bool" sep_sets nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (min_sep_set const-decl "finite_set[T]" sep_sets nil)
    (sep_num const-decl "nat" sep_sets nil)
    (dbl const-decl "set[T]" doubletons structures)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (member const-decl "bool" sets nil) (difference const-decl "set" sets nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (separates const-decl "bool" sep_sets nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil
   (line14 subtype "meng_scaff.w1"
    "{t_1 | booleans.AND(vert(meng_scaff.G)(t_1), t_1 /= meng_scaff.t)}")))
 (line14_TCC4 0
  (line14_TCC4-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (edge? const-decl "bool" graphs nil)
    (separable? const-decl "bool" sep_sets nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (min_sep_set const-decl "finite_set[T]" sep_sets nil)
    (sep_num const-decl "nat" sep_sets nil)
    (dbl const-decl "set[T]" doubletons structures)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (member const-decl "bool" sets nil) (difference const-decl "set" sets nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (separates const-decl "bool" sep_sets nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil
   (line14 subtype "meng_scaff.w2"
    "{t_1 | booleans.AND(vert(meng_scaff.G)(t_1), t_1 /= meng_scaff.t)}")))
 (line14 0
  (line14-2 "" 3790105509
   ("" (skosimp*)
    (("" (expand "sep_num")
      (("" (expand "in?")
        (("" (expand "disjoint?")
          (("" (flatten)
            ((""
              (case "separates(meng(G!1, s!1, t!1, w1!1, w2!1), dbl(w1!1, w2!1), s!1, t!1)")
              (("1" (assert)
                (("1" (lemma "min_sep_set_card")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (rewrite "card_dbl")
                        (("1" (lemma "prep_14")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1" (expand "sep_num")
                                (("1" (expand "disjoint?")
                                  (("1" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 8)
                      (("2" (expand "meng")
                        (("2" (expand "add") (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (hide -1 8)
                      (("3" (expand "meng")
                        (("3" (expand "add")
                          (("3" (expand "member")
                            (("3" (lemma "vert_H_s")
                              (("3" (inst?) (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 8)
                (("2" (expand "separates")
                  (("2" (flatten)
                    (("2" (expand "dbl" 1 (1 2))
                      (("2" (assert)
                        (("2" (skosimp*)
                          (("2" (inst + "w!1")
                            (("2" (expand "walk_from?")
                              (("2" (flatten)
                                (("2" (assert)
                                  (("2" (expand "walk?")
                                    (("2" (split +)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -4)
                                          (("1"
                                            (expand "verts_in?")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (expand "del_verts")
                                                (("1"
                                                  (expand "difference")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "meng")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand "add")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand "H")
                                                                  (("1"
                                                                    (expand
                                                                     "path_comp")
                                                                    (("1"
                                                                      (expand
                                                                       "subgraph")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "del_vert")
                                                                          (("1"
                                                                            (expand
                                                                             "remove")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (expand "edge?")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "del_verts")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand "meng")
                                                            (("2"
                                                              (expand "union")
                                                              (("2"
                                                                (expand "add")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (split +)
                                                                    (("1"
                                                                      (expand
                                                                       "verts_in?")
                                                                      (("1"
                                                                        (expand
                                                                         "difference")
                                                                        (("1"
                                                                          (expand
                                                                           "member")
                                                                          (("1"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (lemma
                                                                               "dbl_eq")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -6
                                                                                           "n!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "dbl")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -6
                                                                                           "n!1+1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "dbl")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "dbl_eq")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -7
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "dbl")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -7
                                                                                         "n!1+1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "dbl")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "H")
                                                                              (("3"
                                                                                (expand
                                                                                 "path_comp")
                                                                                (("3"
                                                                                  (expand
                                                                                   "subgraph")
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "del_vert")
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (expand
                                                                               "incident")
                                                                              (("4"
                                                                                (skosimp*)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (expand
                                                                               "incident")
                                                                              (("5"
                                                                                (skosimp*)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (line14-1 nil 3251049125
   ("" (skosimp*)
    (("" (expand "sep_num")
      (("" (expand "in?")
        (("" (expand "disjoint?")
          (("" (flatten)
            ((""
              (case "separates(meng(G!1, s!1, t!1, w1!1, w2!1), dbl(w1!1, w2!1), s!1, t!1)")
              (("1" (assert)
                (("1" (lemma "min_sep_set_card")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (rewrite "card_dbl")
                        (("1" (lemma "prep_14")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1" (expand "sep_num")
                                (("1" (expand "disjoint?")
                                  (("1" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 8)
                      (("2" (expand "meng")
                        (("2" (expand "add") (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (hide -1 8)
                      (("3" (expand "meng")
                        (("3" (expand "add")
                          (("3" (expand "member")
                            (("3" (lemma "vert_H_s")
                              (("3" (inst?) (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 8)
                (("2" (expand "separates")
                  (("2" (flatten)
                    (("2" (expand "dbl" 1 (1 2))
                      (("2" (assert)
                        (("2" (skosimp*)
                          (("2" (inst + "w!1")
                            (("2" (expand "walk_from?")
                              (("2" (flatten)
                                (("2" (assert)
                                  (("2" (expand "walk?")
                                    (("2" (split +)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -4)
                                          (("1"
                                            (expand "verts_in?")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (expand "del_verts")
                                                (("1"
                                                  (expand "difference")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "meng")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand "add")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand "H")
                                                                  (("1"
                                                                    (expand
                                                                     "path_comp")
                                                                    (("1"
                                                                      (expand
                                                                       "subgraph")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "del_vert")
                                                                          (("1"
                                                                            (expand
                                                                             "remove")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (expand "edge?")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "del_verts")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand "meng")
                                                            (("2"
                                                              (expand "union")
                                                              (("2"
                                                                (expand "add")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (split +)
                                                                    (("1"
                                                                      (expand
                                                                       "verts_in?")
                                                                      (("1"
                                                                        (expand
                                                                         "difference")
                                                                        (("1"
                                                                          (expand
                                                                           "member")
                                                                          (("1"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (lemma
                                                                               "dbl_eq")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -6
                                                                                           "n!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "dbl")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -6
                                                                                           "n!1+1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "dbl")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "dbl_eq")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -7
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "dbl")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -7
                                                                                         "n!1+1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "dbl")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "H")
                                                                              (("3"
                                                                                (expand
                                                                                 "path_comp")
                                                                                (("3"
                                                                                  (expand
                                                                                   "subgraph")
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "del_vert")
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (expand
                                                                               "incident")
                                                                              (("4"
                                                                                (skosimp*)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (expand
                                                                               "incident")
                                                                              (("5"
                                                                                (skosimp*)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert) nil nil) ("4" (assert) nil nil)
               ("5" (propax) nil nil) ("6" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sep_num const-decl "nat" sep_sets nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (meng const-decl "graph[T]" meng_scaff_defs nil)
    (separates const-decl "bool" sep_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil meng_scaff nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil)
    (min_sep_set_card formula-decl nil sep_sets nil)
    (vert_H_s formula-decl nil meng_scaff_defs nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (prep_14 formula-decl nil meng_scaff nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (card_dbl formula-decl nil doubletons structures)
    (w2!1 skolem-const-decl "T" meng_scaff nil)
    (w1!1 skolem-const-decl "T" meng_scaff nil)
    (t!1 skolem-const-decl "T" meng_scaff nil)
    (s!1 skolem-const-decl "T" meng_scaff nil)
    (G!1 skolem-const-decl "graph[T]" meng_scaff nil)
    (walk_from? const-decl "bool" walks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (difference const-decl "set" sets nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (remove const-decl "set" sets nil)
    (path_comp const-decl "Subgraph(G)" meng_scaff_defs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (verts_in? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (incident const-decl "finite_set[doubleton[T]]" meng_scaff_defs nil)
    (dbl_eq formula-decl nil doubletons structures)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (walk? const-decl "bool" walks nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (in? const-decl "bool" meng_scaff_defs nil))
   nil))
 (line15ab 0
  (line15ab-1 nil 3251049125
   ("" (skosimp*)
    (("" (lemma "sep_num_gt_0")
      (("" (inst -1 "G!1" "s!1" "t!1")
        (("" (expand "in?")
          (("" (flatten)
            (("" (assert)
              (("" (skosimp*)
                (("" (lemma "walk_to_path_from")
                  (("" (inst?)
                    (("" (assert)
                      (("" (skosimp*)
                        (("" (hide -2)
                          ((""
                            (case "(EXISTS (i: below(length(p!1))): seq(p!1)(i) = w1!1 OR
                                         seq(p!1)(i) = w2!1)")
                            (("1" (skosimp*)
                              (("1" (case "seq(p!1)(i!1) = w1!1")
                                (("1" (hide -2)
                                  (("1" (lemma "one_to_each")
                                    (("1"
                                      (inst
                                       -1
                                       "G!1"
                                       "s!1"
                                       "t!1"
                                       "w1!1"
                                       "w2!1")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (lemma "one_to_each")
                                    (("2"
                                      (inst
                                       -1
                                       "G!1"
                                       "s!1"
                                       "t!1"
                                       "w2!1"
                                       "w1!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (split +)
                                                (("1" (inst?) nil nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 -2 -3 -4 -5 -6 -7 2 3)
                                            (("2"
                                              (rewrite "dbl_comm")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "separates")
                              (("2" (flatten)
                                (("2" (inst 4 "p!1")
                                  (("2" (hide -7 5)
                                    (("2" (expand "walk_from?")
                                      (("2"
                                        (expand "path_from?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "from?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "path?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (expand "walk?")
                                                        (("2"
                                                          (split 4)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (expand
                                                                 "verts_in?")
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "del_verts")
                                                                    (("1"
                                                                      (expand
                                                                       "difference")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (expand
                                                                           "dbl")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (inst? -)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "edge?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "del_verts")
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "dbl")
                                                                            (("2"
                                                                              (inst-cp
                                                                               1
                                                                               "n!1")
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "n!1+1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "finseq_appl")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil meng_scaff nil)
    (sep_num_gt_0 formula-decl nil sep_set_lems nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil)
    (walk_to_path_from formula-decl nil path_ops nil)
    (separates const-decl "bool" sep_sets nil)
    (walk_from? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (verts_in? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (walk? const-decl "bool" walks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (dbl_comm formula-decl nil doubletons structures)
    (one_to_each formula-decl nil sep_set_lems nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (prep_16 0
  (prep_16-1 nil 3251049125
   ("" (skosimp*)
    (("" (case "separates(G!1, singleton(w2!1), s!1, t!1)")
      (("1" (hide -2 -3 -4)
        (("1" (expand "sep_num")
          (("1" (lemma "min_sep_set_card")
            (("1" (inst?)
              (("1" (assert)
                (("1" (hide -2) (("1" (rewrite "card_singleton") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "separates")
        (("2" (flatten)
          (("2" (split +)
            (("1" (expand "singleton")
              (("1" (expand "dbl") (("1" (assert) nil nil)) nil)) nil)
             ("2" (expand "singleton")
              (("2" (expand "dbl") (("2" (assert) nil nil)) nil)) nil)
             ("3" (skosimp*)
              (("3" (lemma "walk_to_path_from")
                (("3" (inst?)
                  (("3" (assert)
                    (("3" (skosimp*)
                      (("3" (hide -2)
                        (("3" (inst + "p!1")
                          (("3" (expand "path_from?")
                            (("3" (flatten)
                              (("3" (lemma "path?_del_verts")
                                (("3" (inst?)
                                  (("3" (assert)
                                    (("3" (lemma "path?_rev")
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (expand "path?" -3)
                                            (("3"
                                              (expand "finseq_appl")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand "walk_from?")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand "from?")
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (expand "walk?")
                                                            (("3"
                                                              (expand
                                                               "finseq_appl")
                                                              (("3"
                                                                (flatten)
                                                                (("3"
                                                                  (split +)
                                                                  (("1"
                                                                    (expand
                                                                     "verts_in?")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (expand
                                                                         "del_verts")
                                                                        (("1"
                                                                          (expand
                                                                           "difference")
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "dbl")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "singleton")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -10
                                                                                             "rev(p!1)^(0,(length(p!1) - i!1 - 1))")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "path?_caret")
                                                                                              (("1"
                                                                                                (expand*
                                                                                                 "^"
                                                                                                 "min")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rev")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "verts_of")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "finseq_appl")
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "length(p!1) - 1 - i!2")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "singleton")
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "rev")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand*
                                                                                               "^"
                                                                                               "min")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "rev")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (expand
                                                                       "edge?")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "del_verts")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "verts_in?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "difference")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "singleton")
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -8
                                                                                                   "v!1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "dbl")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -11
                                                                                                             "rev(p!1)^(0,length(p!1) - n!1 - 1)")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "path?_caret")
                                                                                                              (("1"
                                                                                                                (expand*
                                                                                                                 "^"
                                                                                                                 "min")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "rev")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "verts_of")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "finseq_appl")
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -5
                                                                                                                           "length(p!1) - 1 - i!1")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "rev")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "rev")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand*
                                                                                                                   "^"
                                                                                                                   "min")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -11
                                                                                                             "rev(p!1)^(0,length(p!1) - n!1 - 2)")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "path?_caret")
                                                                                                              (("1"
                                                                                                                (expand*
                                                                                                                 "^"
                                                                                                                 "min"
                                                                                                                 "empty_seq")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "rev")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "verts_of")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "finseq_appl")
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -5
                                                                                                                           "length(p!1) - 1 - i!1")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "rev")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand*
                                                                                                               "^"
                                                                                                               "min"
                                                                                                               "empty_seq")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "rev")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (separates const-decl "bool" sep_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil meng_scaff nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (sep_num const-decl "nat" sep_sets nil)
    (G!1 skolem-const-decl "graph[T]" meng_scaff nil)
    (s!1 skolem-const-decl "T" meng_scaff nil)
    (t!1 skolem-const-decl "T" meng_scaff nil)
    (card_singleton formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (min_sep_set_card formula-decl nil sep_sets nil)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (path?_rev formula-decl nil paths nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (walk_from? const-decl "bool" walks nil)
    (from? const-decl "bool" walks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (difference const-decl "set" sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (path?_caret formula-decl nil paths nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (verts_of const-decl "finite_set[T]" walks nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (i!1 skolem-const-decl "below(length(p!1))" meng_scaff nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (p!1 skolem-const-decl "prewalk[T]" meng_scaff nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (^ const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil)
    (verts_in? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (finite_difference application-judgement "finite_set" finite_sets nil)
    (n!1 skolem-const-decl "nat" meng_scaff nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (walk? const-decl "bool" walks nil) (path? const-decl "bool" paths nil)
    (path?_del_verts formula-decl nil path_ops nil)
    (path_from? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil)
    (walk_to_path_from formula-decl nil path_ops nil))
   nil))
 (line16 0
  (line16-1 nil 3251049125
   ("" (skosimp*)
    (("" (lemma "prep_16")
      (("" (inst?)
        (("" (assert)
          (("" (skosimp*)
            (("" (hide -3 -4 -5 -6)
              (("" (lemma "path_from_l")
                (("" (inst?)
                  (("" (assert)
                    (("" (expand "disjoint?")
                      (("" (flatten)
                        (("" (assert)
                          (("" (case "length(p!1) = 2")
                            (("1" (expand "path_from?")
                              (("1" (flatten)
                                (("1" (expand "from?")
                                  (("1" (flatten)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "path?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "walk?")
                                                (("1"
                                                  (expand "finseq_appl")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst -3 "0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "edge?")
                                                          (("1"
                                                            (rewrite
                                                             "dbl_comm")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "path_from?")
                              (("2" (flatten)
                                (("2" (expand "from?")
                                  (("2" (flatten)
                                    (("2" (inst + "seq(p!1)(1)")
                                      (("2"
                                        (expand "path?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (inst-cp - "0" "1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "H")
                                                  (("2"
                                                    (expand "path_comp")
                                                    (("2"
                                                      (expand "subgraph")
                                                      (("2"
                                                        (case
                                                         "vert(del_vert(del_vert(G!1, w1!1), w2!1))(seq(p!1)(1))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "path_verts")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "p!1^(0,1)")
                                                                (("1"
                                                                  (expand
                                                                   "walk_from?")
                                                                  (("1"
                                                                    (expand*
                                                                     "^"
                                                                     "min")
                                                                    (("1"
                                                                      (expand
                                                                       "walk?")
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (split
                                                                           +)
                                                                          (("1"
                                                                            (expand
                                                                             "verts_in?")
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "del_vert")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "remove")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "verts_of")
                                                                                          (("1"
                                                                                            (inst?
                                                                                             +)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "finseq_appl")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -2
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "length(p!1)-1"
                                                                                             "i!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "edge?")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "del_vert")
                                                                                    (("2"
                                                                                      (split
                                                                                       +)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "dbl")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "remove")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "1+n!1"
                                                                                                   "length(p!1)-1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "dbl")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "verts_of")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "finseq_appl")
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "1+n!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand*
                                                                   "^"
                                                                   "min")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 11)
                                                          (("2"
                                                            (expand
                                                             "del_vert")
                                                            (("2"
                                                              (expand
                                                               "remove")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (expand
                                                                     "verts_of")
                                                                    (("1"
                                                                      (inst?
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -
                                                                     "length(p!1)-1"
                                                                     "1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "walk?")
                                                                    (("3"
                                                                      (expand
                                                                       "finseq_appl")
                                                                      (("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (hide
                                                                           -3
                                                                           -4)
                                                                          (("3"
                                                                            (expand
                                                                             "verts_in?")
                                                                            (("3"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prep_16 formula-decl nil meng_scaff nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (walk_from? const-decl "bool" walks nil)
    (member const-decl "bool" sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (verts_of const-decl "finite_set[T]" walks nil)
    (remove const-decl "set" sets nil) (verts_in? const-decl "bool" walks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (p!1 skolem-const-decl "prewalk[T]" meng_scaff nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (path_verts const-decl "set[T]" paths nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (path_comp const-decl "Subgraph(G)" meng_scaff_defs nil)
    (path_from? const-decl "bool" paths nil)
    (from? const-decl "bool" walks nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edge? const-decl "bool" graphs nil)
    (dbl_comm formula-decl nil doubletons structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (walk? const-decl "bool" walks nil) (path? const-decl "bool" paths nil)
    (path_from_l formula-decl nil paths nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil meng_scaff nil))
   nil))
 (line19_TCC1 0
  (line19_TCC1-1 nil 3251049125
   ("" (skosimp*) (("" (expand "in?") (("" (flatten) nil nil)) nil)) nil)
   ((in? const-decl "bool" meng_scaff_defs nil)) nil
   (line19 subtype "meng_scaff.s" "(vert(meng_scaff.G))")))
 (line19_TCC2 0
  (line19_TCC2-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (edge? const-decl "bool" graphs nil)
    (separable? const-decl "bool" sep_sets nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil (line19 subtype "meng_scaff.t" "(vert(meng_scaff.G))")))
 (line19_TCC3 0
  (line19_TCC3-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (edge? const-decl "bool" graphs nil)
    (separable? const-decl "bool" sep_sets nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil
   (line19 subtype "meng_scaff.w1"
    "{t_1 | booleans.AND(vert(meng_scaff.G)(t_1), t_1 /= meng_scaff.t)}")))
 (line19_TCC4 0
  (line19_TCC4-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil meng_scaff nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (edge? const-decl "bool" graphs nil)
    (separable? const-decl "bool" sep_sets nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil
   (line19 subtype "meng_scaff.w2"
    "{t_1 | booleans.AND(vert(meng_scaff.G)(t_1), t_1 /= meng_scaff.t)}")))
 (line19_TCC5 0
  (line19_TCC5-1 nil 3251049125 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (line19 subtype "(number_fields.-)(length(meng_scaff.p), 2)"
    "below[p`length]")))
 (line19 0
  (line19-1 nil 3251049125
   ("" (skosimp*)
    (("" (lemma "path_from_l")
      (("" (inst?)
        (("" (expand "disjoint?")
          (("" (flatten)
            (("" (assert)
              (("" (expand "path_from?")
                (("" (flatten)
                  (("" (expand "from?")
                    (("" (flatten)
                      (("" (hide -3)
                        (("" (expand "path?")
                          (("" (flatten)
                            (("" (hide -6)
                              (("" (expand "walk?")
                                (("" (expand "finseq_appl")
                                  (("" (flatten)
                                    (("" (hide -5)
                                      ((""
                                        (inst - "length(p!1) -2")
                                        ((""
                                          (assert)
                                          ((""
                                            (expand "edge?")
                                            ((""
                                              (replace -7)
                                              ((""
                                                (flatten)
                                                ((""
                                                  (case-replace
                                                   "length(p!1) = 2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (hide -2 -4)
                                                        (("1"
                                                          (expand "meng")
                                                          (("1"
                                                            (expand "union")
                                                            (("1"
                                                              (expand
                                                               "incident")
                                                              (("1"
                                                                (expand "add")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (replace
                                                                     -5)
                                                                    (("1"
                                                                      (split
                                                                       -4)
                                                                      (("1"
                                                                        (case
                                                                         "dbl[T](w1!1, t!1)(s!1) = dbl[T](s!1, t!1)(s!1)")
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "dbl")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "dbl[T](w2!1, t!1)(s!1) = dbl[T](s!1, t!1)(s!1)")
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "dbl")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "H(G!1, s!1, w1!1, w2!1)")
                                                                        (("3"
                                                                          (hide
                                                                           -1)
                                                                          (("3"
                                                                            (expand
                                                                             "subgraph?")
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (hide
                                                                                 -1)
                                                                                (("3"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("3"
                                                                                      (inst?)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "separable?")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "edge?")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skosimp*)
                                                                        (("4"
                                                                          (expand
                                                                           "separable?")
                                                                          (("4"
                                                                            (expand
                                                                             "edge?")
                                                                            (("4"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (skosimp*)
                                                                        (("5"
                                                                          (expand
                                                                           "separable?")
                                                                          (("5"
                                                                            (expand
                                                                             "edge?")
                                                                            (("5"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -3)
                                                      (("2"
                                                        (hide -3)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (expand
                                                             "separates")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "meng")
                                                                (("2"
                                                                  (expand
                                                                   "union")
                                                                  (("2"
                                                                    (expand
                                                                     "add")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (expand
                                                                         "incident")
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (case
                                                                             "dbl[T](w1!1, t!1)(w1!1) = dbl[T](seq(p!1)(length(p!1) - 2), t!1)(w1!1)")
                                                                            (("1"
                                                                              (hide
                                                                               -2)
                                                                              (("1"
                                                                                (expand
                                                                                 "dbl")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "dbl[T](w2!1, t!1)(w2!1) = dbl[T](seq(p!1)(length(p!1) - 2), t!1)(w2!1)")
                                                                            (("1"
                                                                              (hide
                                                                               -2)
                                                                              (("1"
                                                                                (expand
                                                                                 "dbl")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (expand
                                                                             "H")
                                                                            (("3"
                                                                              (expand
                                                                               "path_comp")
                                                                              (("3"
                                                                                (expand
                                                                                 "subgraph")
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "del_vert")
                                                                                    (("3"
                                                                                      (flatten)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -
                                                                                         "seq(p!1)(length(p!1) - 2)")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "dbl")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "path_verts")
                                                                                            (("3"
                                                                                              (skosimp*)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "walk_from?")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "add1(w!1,t!1)")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "add1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "del_verts")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "walk?")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "finseq_appl")
                                                                                                              (("3"
                                                                                                                (split
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "verts_in?")
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "difference")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "member")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "remove")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (reveal
                                                                                                                                       -8)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "in?")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (reveal
                                                                                                                                   -8)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "in?")
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "edge?")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "dbl")
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (ground)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (case-replace
                                                                                                                               "n!1 = length(w!1) - 1")
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -6
                                                                                                                                 -7)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -5)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -8
                                                                                                                                       *
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "dbl")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (ground)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (skosimp*)
                                                                            (("4"
                                                                              (replace
                                                                               -2)
                                                                              (("4"
                                                                                (case
                                                                                 "dbl[T](seq(p!1)(length(p!1) - 2), t!1)(z!1) = dbl[T](w1!1, z!1)(z!1) AND dbl[T](seq(p!1)(length(p!1) - 2), t!1)(w1!1) = dbl[T](w1!1, z!1)(w1!1)")
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "dbl")
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (skosimp*)
                                                                            (("5"
                                                                              (hide
                                                                               -1)
                                                                              (("5"
                                                                                (case
                                                                                 "dbl[T](seq(p!1)(length(p!1) - 2), t!1)(w2!1) = dbl[T](w2!1, z!1)(w2!1) AND dbl[T](seq(p!1)(length(p!1) - 2), t!1)(z!1) = dbl[T](w2!1, z!1)(z!1)")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "dbl")
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil meng_scaff nil)
    (path_from_l formula-decl nil paths nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil)
    (path? const-decl "bool" paths nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (meng const-decl "graph[T]" meng_scaff_defs nil)
    (incident const-decl "finite_set[doubleton[T]]" meng_scaff_defs nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (separable? const-decl "bool" sep_sets nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (Subgraph type-eq-decl nil subgraphs nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (add const-decl "(nonempty?)" sets nil) (union const-decl "set" sets nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (path_comp const-decl "Subgraph(G)" meng_scaff_defs nil)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (verts_in? const-decl "bool" walks nil)
    (difference const-decl "set" sets nil) (remove const-decl "set" sets nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (w!1 skolem-const-decl "prewalk[T]" meng_scaff nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i!1 skolem-const-decl "below(1 + length(w!1))" meng_scaff nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (add1 const-decl "prewalk" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (path_verts const-decl "set[T]" paths nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (separates const-decl "bool" sep_sets nil)
    (edge? const-decl "bool" graphs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (walk? const-decl "bool" walks nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (line17_prep 0
  (line17_prep-1 nil 3251049125
   ("" (skosimp*)
    (("" (expand "disjoint?")
      (("" (flatten)
        (("" (expand "H")
          (("" (expand "path_comp")
            (("" (expand "subgraph")
              (("" (flatten)
                (("" (expand "path_verts")
                  (("" (skosimp*)
                    (("" (expand "separates")
                      (("" (flatten)
                        (("" (lemma "walk_merge")
                          (("" (inst?)
                            (("" (inst -1 "w!2" "s!1")
                              (("" (assert)
                                (("" (skosimp*)
                                  (("" (inst + "p!1")
                                    (("" (assert)
                                      (("" (rewrite "del_verts_eq") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((disjoint? const-decl "bool" meng_scaff_defs nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (path_verts const-decl "set[T]" paths nil)
    (separates const-decl "bool" sep_sets nil)
    (walk_merge formula-decl nil walks nil)
    (T formal-type-decl nil meng_scaff nil)
    (del_verts_eq formula-decl nil sep_set_lems nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (path_comp const-decl "Subgraph(G)" meng_scaff_defs nil))
   nil))
 (line17_TCC1 0
  (line17_TCC1-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil meng_scaff nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (dbl const-decl "set[T]" doubletons structures)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (path_verts const-decl "set[T]" paths nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (path_comp const-decl "Subgraph(G)" meng_scaff_defs nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (difference const-decl "set" sets nil)
    (separates const-decl "bool" sep_sets nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil (line17 subtype "meng_scaff.s" "(vert(meng_scaff.G))")))
 (line17_TCC2 0
  (line17_TCC2-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil meng_scaff nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (dbl const-decl "set[T]" doubletons structures)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (path_verts const-decl "set[T]" paths nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (path_comp const-decl "Subgraph(G)" meng_scaff_defs nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (difference const-decl "set" sets nil)
    (separates const-decl "bool" sep_sets nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil (line17 subtype "meng_scaff.t" "(vert(meng_scaff.G))")))
 (line17_TCC3 0
  (line17_TCC3-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (T formal-type-decl nil meng_scaff nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (dbl const-decl "set[T]" doubletons structures)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (path_verts const-decl "set[T]" paths nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (path_comp const-decl "Subgraph(G)" meng_scaff_defs nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (difference const-decl "set" sets nil)
    (separates const-decl "bool" sep_sets nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil
   (line17 subtype "meng_scaff.w1"
    "{t_1 | booleans.AND(vert(meng_scaff.G)(t_1), t_1 /= meng_scaff.t)}")))
 (line17_TCC4 0
  (line17_TCC4-1 nil 3251049125 ("" (subtype-tcc) nil nil)
   ((graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (T formal-type-decl nil meng_scaff nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (dbl const-decl "set[T]" doubletons structures)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (path_verts const-decl "set[T]" paths nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (path_comp const-decl "Subgraph(G)" meng_scaff_defs nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (in? const-decl "bool" meng_scaff_defs nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (del_verts const-decl "graph[T]" sep_sets nil)
    (difference const-decl "set" sets nil)
    (separates const-decl "bool" sep_sets nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil))
   nil
   (line17 subtype "meng_scaff.w2"
    "{t_1 | booleans.AND(vert(meng_scaff.G)(t_1), t_1 /= meng_scaff.t)}")))
 (line17 0
  (line17-2 "" 3790105517
   ("" (skosimp*)
    (("" (expand "in?")
      (("" (expand "disjoint?")
        (("" (flatten)
          ((""
            (case "subset?(vert(meng(G!1, s!1, t!1, w1!1, w2!1)),vert(G!1))")
            (("1" (lemma "card_subset[T]")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (expand "size")
                    (("1" (hide -2)
                      (("1" (lemma "line17_prep")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1" (expand "disjoint?")
                                (("1"
                                  (case "NOT vert(meng(G!1, s!1, t!1, w1!1, w2!1))(yt!1)")
                                  (("1"
                                    (name-replace "Mt"
                                     "vert(meng(G!1, s!1, t!1, w1!1, w2!1))")
                                    (("1" (case "vert(G!1)(yt!1)")
                                      (("1"
                                        (hide -3 2)
                                        (("1"
                                          (lemma "same_card_subset[T]")
                                          (("1"
                                            (inst -1 "Mt" "vert(G!1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (reveal -6 -3)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2 3 11)
                                        (("2"
                                          (expand "H")
                                          (("2"
                                            (expand "path_comp")
                                            (("2"
                                              (expand "subgraph")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "del_vert")
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand "member")
                                                        (("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (lemma "separates_comm")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide -1 -3 9)
                                          (("2"
                                            (expand "meng")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (hide 1)
                                                  (("2"
                                                    (expand "H")
                                                    (("2"
                                                      (expand "path_comp")
                                                      (("2"
                                                        (expand "subgraph")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "del_vert")
                                                              (("2"
                                                                (expand
                                                                 "remove")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "vert_meng_sub")
              (("2" (inst?)
                (("2" (expand "in?")
                  (("2" (expand "disjoint?") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (line17-1 nil 3251049125
   ("" (skosimp*)
    (("" (expand "in?")
      (("" (expand "disjoint?")
        (("" (flatten)
          ((""
            (case "subset?(vert(meng(G!1, s!1, t!1, w1!1, w2!1)),vert(G!1))")
            (("1" (lemma "card_subset[T]")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (expand "size")
                    (("1" (hide -2)
                      (("1" (lemma "line17_prep")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1" (expand "disjoint?")
                                (("1"
                                  (case "NOT vert(meng(G!1, s!1, t!1, w1!1, w2!1))(yt!1)")
                                  (("1"
                                    (name-replace "Mt"
                                     "vert(meng(G!1, s!1, t!1, w1!1, w2!1))")
                                    (("1" (case "vert(G!1)(yt!1)")
                                      (("1"
                                        (hide -3 2)
                                        (("1"
                                          (lemma "same_card_subset[T]")
                                          (("1"
                                            (inst -1 "Mt" "vert(G!1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (reveal -6 -3)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2 3 11)
                                        (("2"
                                          (expand "H")
                                          (("2"
                                            (expand "path_comp")
                                            (("2"
                                              (expand "subgraph")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "del_vert")
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand "member")
                                                        (("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (lemma "separates_comm")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide -1 -3 9)
                                          (("2"
                                            (expand "meng")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (hide 1)
                                                  (("2"
                                                    (expand "H")
                                                    (("2"
                                                      (expand "path_comp")
                                                      (("2"
                                                        (expand "subgraph")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "del_vert")
                                                              (("2"
                                                                (expand
                                                                 "remove")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil) ("3" (assert) nil nil))
                nil))
              nil)
             ("2" (lemma "vert_meng_sub")
              (("2" (inst?)
                (("2" (expand "in?")
                  (("2" (expand "disjoint?") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (assert) nil nil) ("4" (assert) nil nil)
             ("5" (propax) nil nil) ("6" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in? const-decl "bool" meng_scaff_defs nil)
    (vert_meng_sub formula-decl nil meng_scaff_defs nil)
    (card_subset formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (remove const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (path_comp const-decl "Subgraph(G)" meng_scaff_defs nil)
    (add const-decl "(nonempty?)" sets nil)
    (separates_comm formula-decl nil sep_set_lems nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (line17_prep formula-decl nil meng_scaff nil)
    (size const-decl "nat" graphs nil)
    (is_finite const-decl "bool" finite_sets nil)
    (T formal-type-decl nil meng_scaff nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (subset? const-decl "bool" sets nil)
    (graph type-eq-decl nil graphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (meng const-decl "graph[T]" meng_scaff_defs nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil))
   nil))
 (pre20 0
  (pre20-1 nil 3251049125
   ("" (skosimp*)
    (("" (split +)
      (("1" (expand "separable?")
        (("1" (flatten)
          (("1" (assert)
            (("1" (expand "meng")
              (("1" (expand "edge?")
                (("1" (expand "add")
                  (("1" (expand "member")
                    (("1" (expand "union")
                      (("1" (expand "member")
                        (("1" (split -1)
                          (("1" (lemma "dbl_eq")
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (expand "disjoint?")
                                  (("1" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "dbl_eq")
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (expand "disjoint?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "disjoint?")
                            (("3" (flatten)
                              (("3" (expand "H")
                                (("3" (expand "path_comp")
                                  (("3" (expand "subgraph")
                                    (("3" (expand "del_vert")
                                      (("3" (flatten) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (expand "incident") (("4" (skosimp*) nil nil))
                            nil)
                           ("5" (expand "incident") (("5" (skosimp*) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "line14") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)
       ("3" (expand "meng")
        (("3" (expand "add")
          (("3" (expand "member")
            (("3" (assert)
              (("3" (expand "in?")
                (("3" (expand "disjoint?")
                  (("3" (flatten)
                    (("3" (assert)
                      (("3" (expand "H")
                        (("3" (expand "path_comp")
                          (("3" (expand "subgraph")
                            (("3" (expand "del_vert")
                              (("3" (expand "remove")
                                (("3" (expand "member")
                                  (("3" (expand "path_verts")
                                    (("3" (inst + "gen_seq1(G!1,s!1)")
                                      (("3"
                                        (expand "walk_from?")
                                        (("3"
                                          (expand "gen_seq1")
                                          (("3"
                                            (expand "walk?")
                                            (("3"
                                              (expand "verts_in?")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (expand "meng")
        (("4" (expand "add") (("4" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((meng const-decl "graph[T]" meng_scaff_defs nil)
    (add const-decl "(nonempty?)" sets nil) (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" meng_scaff_defs nil)
    (T formal-type-decl nil meng_scaff nil)
    (dbl_eq formula-decl nil doubletons structures)
    (path_comp const-decl "Subgraph(G)" meng_scaff_defs nil)
    (del_vert const-decl "graph[T]" graph_ops nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (H const-decl "Subgraph(G)" meng_scaff_defs nil)
    (incident const-decl "finite_set[doubleton[T]]" meng_scaff_defs nil)
    (member const-decl "bool" sets nil) (edge? const-decl "bool" graphs nil)
    (nil application-judgement "finite_set[T]" meng_scaff nil)
    (separable? const-decl "bool" sep_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (line14 formula-decl nil meng_scaff nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil) (Seq type-eq-decl nil walks nil)
    (gen_seq1 const-decl "Seq(G)" walks nil)
    (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (path_verts const-decl "set[T]" paths nil)
    (remove const-decl "set" sets nil)
    (in? const-decl "bool" meng_scaff_defs nil))
   nil)))


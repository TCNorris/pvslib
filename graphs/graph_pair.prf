(graph_pair
 (wf_lsth 0
  (wf_lsth-1 nil 3507100605
   ("" (expand "well_founded?")
    (("" (skosimp*)
      (("" (expand "lsth")
        (("" (lemma "wf_nat")
          (("" (expand "well_founded?" -1)
            (("" (inst-cp -1 "(LAMBDA (i:nat): Exists (j:nat): p!1(i,j))")
              (("" (assert)
                (("" (bddsimp)
                  (("1" (skosimp*)
                    (("1" (inst -1 "(LAMBDA (j:nat):p!1(y!2,j))")
                      (("1" (typepred "y!2")
                        (("1" (skosimp*)
                          (("1" (bddsimp)
                            (("1" (skosimp*)
                              (("1" (typepred "y!3")
                                (("1" (inst 1 "(y!2,y!3)")
                                  (("1" (skosimp*)
                                    (("1" (typepred "x!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -5 "x!1`1")
                                          (("1"
                                            (inst -4 "x!1`2")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (bddsimp)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace*)
                                                    (("2"
                                                      (case
                                                       "x!1=(proj_1(x!1),proj_2(x!1))")
                                                      (("1"
                                                        (replace -1 -2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "x!1=(proj_1(x!1),proj_2(x!1))")
                                            (("1"
                                              (replace -1 -2)
                                              (("1" (inst 1 "x!1`2") nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst 1 "y!1`1")
                    (("2" (inst 1 "y!1`2")
                      (("2" (hide -1 2) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wf_nat formula-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (p!1 skolem-const-decl "pred[[nat, nat]]" graph_pair nil)
    (x!1 skolem-const-decl "(p!1)" graph_pair nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (y!2 skolem-const-decl "(LAMBDA (i: nat): EXISTS (j: nat): p!1(i, j))"
     graph_pair nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lsth const-decl "bool" graph_pair nil)
    (well_founded? const-decl "bool" orders nil))
   nil))
 (NAT_pair_induct 0
  (NAT_pair_induct-1 nil 3507100605
   ("" (skosimp*)
    (("" (lemma "wf_induction[[nat,nat],lsth]")
      (("1" (inst -1 "p!1")
        (("1" (assert)
          (("1" (split -1)
            (("1" (inst -1 "(i!1,j!1)") nil nil)
             ("2" (hide 2)
              (("2" (skosimp*)
                (("2" (inst -2 "x!1")
                  (("2" (assert)
                    (("2" (skosimp*)
                      (("2" (inst -1 "(l!1,m!1)")
                        (("2" (assert)
                          (("2" (case-replace "(x!1`1, x!1`2) = x!1")
                            (("2" (apply-extensionality 1 :hide? t) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "wf_lsth") (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((lsth const-decl "bool" graph_pair nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_lsth formula-decl nil graph_pair nil))
   nil))
 (size_up 0
  (size_up-1 nil 3507100605 ("" (grind) nil nil)
   ((H!1 skolem-const-decl "graph[T]" graph_pair nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (H!1 skolem-const-decl "graph[T]" graph_pair nil)
    (T formal-type-decl nil graph_pair nil) (size const-decl "nat" graphs nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (graph_induct_pair 0
  (graph_induct_pair-2 "" 3790105535
   ("" (skosimp)
    (("" (rewrite "size_up" +)
      (("" (skosimp*)
        (("" (lemma "NAT_pair_induct")
          ((""
            (inst -1
             "lambda (l,m):(FORALL (GG,HH): size(GG)=l AND size(HH)=m IMPLIES Q!1(GG,HH))")
            (("" (assert)
              (("" (bddsimp)
                (("1" (inst -1 "size(G!1)" "size(H!1)" "G!1" "H!1") nil nil)
                 ("2" (skosimp*)
                  (("2" (inst -4 "GG!1" "HH!1")
                    (("2" (replace -2 -1 rl)
                      (("2" (replace -3 -1 rl)
                        (("2" (hide -2 -3 -5 -6 2)
                          (("2" (assert)
                            (("2" (expand "lsth")
                              (("2" (assert)
                                (("2" (skosimp*)
                                  (("2" (inst -1 "size(GG!2)" "size(HH!2)")
                                    (("2" (bddsimp)
                                      (("1" (inst -2 "GG!2" "HH!2") nil nil)
                                       ("2" (inst -3 "GG!2" "HH!2") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (graph_induct_pair-1 nil 3507100605
   ("" (skosimp)
    (("" (rewrite "size_up" +)
      (("" (skosimp*)
        (("" (lemma "NAT_pair_induct")
          ((""
            (inst -1
             "lambda (l,m):(FORALL (GG,HH): size(GG)=l AND size(HH)=m IMPLIES Q!1(GG,HH))")
            (("" (assert)
              (("" (bddsimp)
                (("1" (inst -1 "size(G!1)" "size(H!1)" "G!1" "H!1")
                  (("1" (assert) nil nil)) nil)
                 ("2" (skosimp*)
                  (("2" (inst -4 "GG!1" "HH!1")
                    (("2" (replace -2 -1 rl)
                      (("2" (replace -3 -1 rl)
                        (("2" (hide -2 -3 -5 -6 2)
                          (("2" (assert)
                            (("2" (expand "lsth")
                              (("2" (assert)
                                (("2" (skosimp*)
                                  (("2" (inst -1 "size(GG!2)" "size(HH!2)")
                                    (("2" (bddsimp)
                                      (("1"
                                        (inst -2 "GG!2" "HH!2")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (inst -3 "GG!2" "HH!2")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size_up formula-decl nil graph_pair nil)
    (T formal-type-decl nil graph_pair nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (NAT_pair_induct formula-decl nil graph_pair nil)
    (lsth const-decl "bool" graph_pair nil) (size const-decl "nat" graphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (graph_induct_pair_B 0
  (graph_induct_pair_B-1 nil 3507100605
   ("" (lemma "graph_induct_pair")
    (("" (expand "lsth" 1) (("" (propax) nil nil)) nil)) nil)
   ((lsth const-decl "bool" graph_pair nil)
    (graph_induct_pair formula-decl nil graph_pair nil))
   nil))
 (graph_pair_induct_not 0
  (graph_pair_induct_not-2 "" 3790105536
   ("" (skosimp*)
    (("" (lemma "graph_induct_pair")
      (("" (inst -1 "(LAMBDA (GG,HH): NOT P!1(GG,HH))")
        (("" (prop)
          (("1" (inst?) nil nil)
           ("2" (skosimp*)
            (("2" (inst -3 "G!2" "H!2")
              (("2" (assert)
                (("2" (skosimp*)
                  (("2" (inst -1 "GG!1" "HH!1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (graph_pair_induct_not-1 nil 3507100605
   ("" (skosimp*)
    (("" (lemma "graph_induct_pair")
      (("" (inst -1 "(LAMBDA (GG,HH): NOT P!1(GG,HH))")
        (("" (beta)
          (("" (prop)
            (("1" (inst?) nil nil)
             ("2" (skosimp*)
              (("2" (inst -3 "G!2" "H!2")
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (inst -1 "GG!1" "HH!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((graph_induct_pair formula-decl nil graph_pair nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil graph_pair nil))
   nil)))


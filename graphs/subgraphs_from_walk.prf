(subgraphs_from_walk
 (G_from_TCC1 0
  (G_from_TCC1-1 nil 3251047162
   ("" (skosimp*)
    (("" (typepred "w!1")
      (("" (split +)
        (("1" (skosimp*)
          (("1" (expand "walk?")
            (("1" (flatten)
              (("1" (expand "verts_of")
                (("1" (expand "verts_in?")
                  (("1" (expand "finseq_appl")
                    (("1" (hide -4)
                      (("1" (expand "edges_of")
                        (("1" (skosimp*)
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1" (expand "finseq_appl")
                                (("1" (expand "dbl")
                                  (("1" (split -1)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil)
                                     ("2" (inst?)
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subgraph?")
          (("2" (expand "walk?")
            (("2" (flatten)
              (("2" (expand "subset?")
                (("2" (expand "member")
                  (("2" (expand "verts_of")
                    (("2" (expand "edges_of")
                      (("2" (expand "finseq_appl")
                        (("2" (split +)
                          (("1" (skosimp*)
                            (("1" (expand "verts_in?")
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "edge?")
                              (("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Walk type-eq-decl nil walks nil) (walk? const-decl "bool" walks nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil subgraphs_from_walk nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "finite_set[T]" subgraphs_from_walk nil)
    (edge? const-decl "bool" graphs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subset? const-decl "bool" sets nil)
    (verts_in? const-decl "bool" walks nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edges_of const-decl "finite_set[doubleton[T]]" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (verts_of const-decl "finite_set[T]" walks nil))
   nil
   (G_from subtype
    "(# vert := walks[subgraphs_from_walk.T].verts_of(subgraphs_from_walk.w), edges := walks[subgraphs_from_walk.T].edges_of(subgraphs_from_walk.w) #)"
    "subgraphs[subgraphs_from_walk.T].Subgraph(subgraphs_from_walk.G)")))
 (G_from_vert 0
  (G_from_vert-1 nil 3251047162
   ("" (skosimp*) (("" (expand "G_from") (("" (propax) nil nil)) nil)) nil)
   ((G_from const-decl "Subgraph(G)" subgraphs_from_walk nil)) nil))
 (vert_G_from 0
  (vert_G_from-1 nil 3251047162
   ("" (skosimp*)
    (("" (expand "G_from")
      (("" (expand "verts_of") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((G_from const-decl "Subgraph(G)" subgraphs_from_walk nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Walk type-eq-decl nil walks nil) (walk? const-decl "bool" walks nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil subgraphs_from_walk nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (verts_of const-decl "finite_set[T]" walks nil))
   nil))
 (edge?_G_from_TCC1 0
  (edge?_G_from_TCC1-1 nil 3251047162
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (edge?_G_from subtype "subgraphs_from_walk.i" "below[length(w)]")))
 (edge?_G_from_TCC2 0
  (edge?_G_from_TCC2-1 nil 3251047162 ("" (subtype-tcc) nil nil) nil nil
   (edge?_G_from subtype "(number_fields.+)(subgraphs_from_walk.i, 1)"
    "below[length(w)]")))
 (edge?_G_from 0
  (edge?_G_from-1 nil 3251047162
   ("" (skosimp*)
    (("" (expand "G_from")
      (("" (expand "edge?")
        (("" (typepred "w!1")
          (("" (expand "walk?")
            (("" (flatten)
              (("" (inst?)
                (("" (assert)
                  (("" (expand "edge?")
                    (("" (flatten)
                      (("" (assert)
                        (("" (expand "edges_of") (("" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((G_from const-decl "Subgraph(G)" subgraphs_from_walk nil)
    (Walk type-eq-decl nil walks nil) (walk? const-decl "bool" walks nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil subgraphs_from_walk nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edges_of const-decl "finite_set[doubleton[T]]" walks nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edge? const-decl "bool" graphs nil)
    (nil application-judgement "finite_set[T]" subgraphs_from_walk nil))
   nil))
 (edge?_G_from_rev 0
  (edge?_G_from_rev-1 nil 3251047162
   ("" (skosimp*)
    (("" (expand "G_from")
      (("" (typepred "w!1")
        (("" (expand "walk?")
          (("" (flatten)
            (("" (inst - "i!1")
              (("" (assert)
                (("" (expand "edge?")
                  (("" (rewrite "dbl_comm")
                    (("" (ground)
                      (("" (expand "edges_of")
                        (("" (inst?) (("" (rewrite "dbl_comm") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((G_from const-decl "Subgraph(G)" subgraphs_from_walk nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nil application-judgement "finite_set[T]" subgraphs_from_walk nil)
    (edge? const-decl "bool" graphs nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (edges_of const-decl "finite_set[doubleton[T]]" walks nil)
    (dbl_comm formula-decl nil doubletons structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil subgraphs_from_walk nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil) (walk? const-decl "bool" walks nil)
    (Walk type-eq-decl nil walks nil))
   nil))
 (vert_G_from_not 0
  (vert_G_from_not-1 nil 3251047162
   ("" (skosimp*)
    (("" (expand "subset?")
      (("" (skosimp*)
        (("" (rewrite "G_from_vert")
          (("" (inst?)
            (("" (assert)
              (("" (expand "remove")
                (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (G_from_vert formula-decl nil subgraphs_from_walk nil)
    (T formal-type-decl nil subgraphs_from_walk nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (walk? const-decl "bool" walks nil) (Walk type-eq-decl nil walks nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil) (remove const-decl "set" sets nil))
   nil))
 (del_vert_subgraph 0
  (del_vert_subgraph-1 nil 3251047162
   ("" (skosimp*)
    (("" (auto-rewrite-theory "sets")
      (("" (expand "subgraph?")
        (("" (prop)
          (("1" (hide -2)
            (("1" (expand "del_vert")
              (("1" (rewrite "vert_G_from_not") nil nil)) nil))
            nil)
           ("2" (lemma "vert_G_from_not")
            (("2" (inst?)
              (("2" (inst?)
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (rewrite "edge_in_del_vert")
                      (("1" (hide -1 -3 2 3)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                       ("2" (hide -2 -4 -5 1)
                        (("2" (expand "G_from")
                          (("2" (expand "verts_of")
                            (("2" (expand "edges_of")
                              (("2" (skosimp*)
                                (("2" (replace -2)
                                  (("2" (hide -2)
                                    (("2" (expand "dbl")
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((del_vert const-decl "graph[T]" graph_ops nil)
    (Walk type-eq-decl nil walks nil) (walk? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil subgraphs_from_walk nil)
    (vert_G_from_not formula-decl nil subgraphs_from_walk nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (edge_in_del_vert formula-decl nil graph_ops nil)
    (G_from const-decl "Subgraph(G)" subgraphs_from_walk nil)
    (edges_of const-decl "finite_set[doubleton[T]]" walks nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (verts_of const-decl "finite_set[T]" walks nil)
    (subgraph? const-decl "bool" subgraphs nil))
   nil)))


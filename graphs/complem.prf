(complem
 (powerset_finite 0
  (powerset_finite-2 "from-prelude" 3349377711
   ("" (use "finite_sets_of_sets[T].powerset_natfun_inj")
    (("" (skosimp)
      (("" (expand "is_finite")
        (("" (inst 1 "exp2(card(A!1))" "powerset_natfun(A!1)")
          (("" (expand "injective?") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil) (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (powerset_natfun const-decl "below(exp2(card(A)))" finite_sets_of_sets
     nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (T formal-type-decl nil complem nil)
    (powerset_natfun_inj formula-decl nil finite_sets_of_sets nil))
   shostak)
  (powerset_finite-1 nil 3349377681
   ("" (use "powerset_natfun_inj")
    (("" (skosimp)
      (("" (expand "is_finite")
        (("" (inst 1 "exp2(card(A!1))" "powerset_natfun(A!1)")
          (("" (expand "injective?") (("" (grind) nil))))))))))
    nil)
   nil nil))
 (all_edges_power 0
  (all_edges_power-1 nil 3349381067 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil complem nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nil application-judgement "finite_set[T]" graph_ops nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (powerset const-decl "setofsets" sets nil)
    (restrict const-decl "R" restrict nil))
   shostak))
 (all_edges_finite 0
  (all_edges_finite-2 "revis all_edge" 3349528703
   ("" (skosimp*)
    (("" (use all_edges_power)
      (("" (lemma "finite_sets[set[T]].finite_subset")
        (("" (inst -1 "powerset(V!1)" "all_edges(V!1)")
          (("" (bddsimp)
            (("1" (hide -2)
              (("1" (expand "extend")
                (("1" (ground)
                  (("1" (expand "is_finite")
                    (("1" (skosimp*)
                      (("1" (inst + "N!1" "f!1")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                          nil)
                         ("2" (skosimp*) (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide 2)
                (("2" (expand "restrict") (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((all_edges_power formula-decl nil complem nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas
     nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (finite_restrict application-judgement "finite_set[S]" restrict_set_props
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil application-judgement "finite_set[T]" graph_ops nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (V!1 skolem-const-decl "finite_set[T]" complem nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (finite_subset formula-decl nil finite_sets nil))
   shostak)
  (all_edges_finite-1 nil 3349381260
   ("" (skosimp*)
    (("" (use all_edges_power)
      (("" (lemma "finite_sets[set[T]].finite_subset")
        (("" (inst -1 "powerset(V!1)" "all_edges(V!1)")
          (("" (bddsimp)
            (("1" (hide -2)
              (("1" (expand "extend")
                (("1" (grind)
                  (("1" (reveal -1)
                    (("1" (inst -1 "dbl[T](x!3, y!3)" "dbl[T](x!4, y!4)")
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (reveal -1)
                    (("2" (inst -1 "dbl[T](x!3, y!3)" "dbl[T](x!4, y!4)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide 2)
                (("2" (expand "restrict") (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures))
   shostak))
 (completion_TCC1 0
  (completion_TCC1-1 nil 3349204238
   ("" (use "all_edges_finite") (("" (skosimp*) (("" (inst?) nil nil)) nil))
    nil)
   ((T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (all_edges_finite formula-decl nil complem nil))
   nil
   (completion subtype "complem.all_edges(vert(complem.G))"
    "finite_set[doubleton[T]]")))
 (completion_TCC2 0
  (completion_TCC2-1 nil 3349381053 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil complem nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (nil application-judgement "finite_set[T]" graph_ops nil)
    (/= const-decl "boolean" notequal nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil))
   nil
   (completion subtype
    "(# vert := vert(complem.G), edges := complem.all_edges(vert(complem.G)) #)"
    "graph[T]")))
 (completion_is_subgraph 0
  (completion_is_subgraph-2 "works" 3349205027
   ("" (grind)
    (("1" (lemma "graphs[T].edges_vert_in") (("1" (grind) nil nil)) nil)
     ("2" (lemma "graphs[T].edges_vert_in") (("2" (grind) nil nil)) nil)
     ("3" (lemma "graphs[T].edges_vert_in") (("3" (grind) nil nil)) nil)
     ("4" (lemma "graphs[T].edges_vert_in") (("4" (grind) nil nil)) nil)
     ("5" (lemma "graphs[T].edges_vert_in") (("5" (grind) nil nil)) nil)
     ("6" (lemma "graphs[T].edges_vert_in") (("6" (grind) nil nil)) nil))
    nil)
   ((edges_vert_in formula-decl nil graphs nil)
    (nil application-judgement "finite_set[T]" graph_ops nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil complem nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (completion const-decl "graph[T]" complem nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (complement_TCC1 0
  (complement_TCC1-1 nil 3349204238
   ("" (skosimp*)
    ((""
      (case "subset?(difference[doubleton[T]](all_edges(vert(G!1)), edges(G!1)),all_edges(vert(G!1)))")
      (("1" (lemma "finite_sets[doubleton[T]].finite_subset")
        (("1"
          (inst -1 "all_edges(vert(G!1))"
           "difference[doubleton[T]](all_edges(vert(G!1)), edges(G!1))")
          (("1" (bddsimp) nil nil)
           ("2" (lemma "all_edges_finite")
            (("2" (inst -1 "vert(G!1)") nil nil)) nil))
          nil))
        nil)
       ("2" (lemma "sets_lemmas[doubleton[T]].difference_subset")
        (("2" (inst -1 "all_edges(vert(G!1))" "edges(G!1)") nil nil)) nil))
      nil))
    nil)
   ((graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (difference const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (all_edges_finite formula-decl nil complem nil)
    (finite_subset formula-decl nil finite_sets nil)
    (difference_subset formula-decl nil sets_lemmas nil))
   nil
   (complement subtype
               "sets[doubleton[T]].difference(complem.all_edges(vert(complem.G)), edges(complem.G))"
               "finite_set[doubleton[T]]")))
 (complement_TCC2 0
  (complement_TCC2-1 nil 3349381053 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil complem nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (nil application-judgement "finite_set[T]" graph_ops nil)
    (/= const-decl "boolean" notequal nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (complement subtype
               "(# vert := vert(complem.G), edges := sets[doubleton[T]].difference(complem.all_edges(vert(complem.G)), edges(complem.G)) #)"
               "graph[T]")))
 (comp_comp_lem 0
  (comp_comp_lem-1 nil 3349285188
   ("" (skosimp*)
    (("" (expand "complement")
      (("" (apply-extensionality 1 :hide? t)
        (("" (apply-extensionality 1 :hide? t)
          (("" (expand "difference")
            (("" (expand "member")
              (("" (iff 1)
                (("" (bddsimp)
                  (("" (expand "all_edges")
                    (("" (typepred "G!1")
                      (("" (typepred "x!1")
                        (("" (skosimp*)
                          (("" (inst 2 "x!2" "y!1")
                            (("" (bddsimp)
                              (("1" (inst -2 "x!1")
                                (("1" (bddsimp) (("1" (grind) nil nil)) nil))
                                nil)
                               ("2" (inst -2 "x!1")
                                (("2" (bddsimp) (("2" (grind) nil nil)) nil))
                                nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complement const-decl "graph[T]" complem nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil application-judgement "finite_set[T]" graph_ops nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil) (difference const-decl "set" sets nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil))
   shostak))
 (isol_TCC1 0
  (isol_TCC1-1 nil 3349204238 ("" (subtype-tcc) nil nil)
   ((emptyset const-decl "set" sets nil)) nil
   (isol subtype
    "(# vert := vert(complem.G), edges := sets[doubleton[T]].emptyset #)"
    "graph[T]")))
 (path_or_not_path 0
  (path_or_not_path-3 "Do not use vert_in" 3358451058
   ("" (skosimp*)
    (("" (expand "path_connected?")
      (("" (bddsimp)
        (("1" (expand "empty?")
          (("1" (expand "empty?") (("1" (hide 2) (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (case "x!1=y!1")
            (("1" (inst 2 "gen_seq1(G!1,x!1)")
              (("1" (hide 3)
                (("1" (install-rewrites "walks") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (lemma "walks[T].gen_seq1_is_walk")
                (("2" (inst -1 "G!1" "x!1")
                  (("2" (typepred "x!1") (("2" (bddsimp) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (case "x!2=y!2")
              (("1" (inst 4 "gen_seq1(complement(G!1),x!2)")
                (("1" (install-rewrites "walks") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "walks[T].gen_seq1_is_walk")
                  (("2" (inst -1 "complement(G!1)" "x!2")
                    (("2" (typepred "x!2") (("2" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (case "edge?(G!1)(x!2,y!2)")
                (("1" (case "x!1=x!2")
                  (("1" (case "y!1=y!2")
                    (("1" (inst 4 "gen_seq2(G!1,x!1,y!1)")
                      (("1" (hide 5)
                        (("1" (install-rewrites "walks")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (lemma "walks[T].edge_to_walk")
                        (("2" (inst -1 "G!1" "x!1" "y!1")
                          (("2" (bddsimp)
                            (("1" (expand "edge?")
                              (("1" (bddsimp)
                                (("1" (assert)
                                  (("1" (replace -1 1 lr)
                                    (("1" (replace -2 1 lr)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (-4 1))
                                          (("1"
                                            (install-rewrites "walks")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "edge?(G!1)(x!1, y!1)")
                      (("1" (inst 5 "gen_seq2(G!1,x!1,y!1)")
                        (("1" (hide -3 6)
                          (("1" (install-rewrites "walks")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (lemma "walks[T].edge_to_walk")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2" (expand "edge?")
                                (("2" (hide-all-but (-1 1))
                                  (("2" (assert)
                                    (("2" (install-rewrites "walks")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "edge?(G!1)(y!2,y!1)")
                        (("1" (inst 6 "add1(gen_seq2(G!1,x!2,y!2),y!1)")
                          (("1" (hide 7)
                            (("1" (install-rewrites "walks")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (lemma "walks[T].walk?_add1")
                            (("2" (inst? -1)
                              (("2" (bddsimp)
                                (("1" (hide (2 8))
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (lemma "graphs[T].edges_vert_in")
                                  (("2"
                                    (inst -1 "G!1" "dbl[T](y!2,y!1)" "y!2"
                                     "y!1")
                                    (("1" (expand "edge?")
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (inst 1 "y!2" "y!1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("3" (lemma "walks[T].edge_to_walk")
                                  (("3" (inst -1 "G!1" "x!2" "y!2")
                                    (("3" (expand "edge?")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide-all-but (-3 1))
                                          (("3"
                                            (install-rewrites "walks")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "graphs[T].edges_vert_in")
                            (("3"
                              (inst -1 "G!1" "dbl[T](y!2,y!1)" "y!2" "y!1")
                              (("1" (expand "edge?") (("1" (assert) nil nil))
                                nil)
                               ("2" (inst 1 "y!2" "y!1")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("4" (lemma "graphs[T].edges_vert_in")
                            (("4"
                              (inst -1 "G!1" "dbl[T](x!2,y!2)" "x!2" "y!2")
                              (("1" (bddsimp)
                                (("1" (expand "edge?")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (inst 1 "x!2" "y!2")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst 8
                           "add1(gen_seq2(complement(G!1),x!2,y!1),y!2)")
                          (("1" (hide 7)
                            (("1" (install-rewrites "walks")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (lemma "walks[T].walk?_add1")
                            (("2" (hide 8)
                              (("2"
                                (inst -1 "complement(G!1)"
                                 "gen_seq2[T](complement(G!1), x!2, y!1)"
                                 "y!2")
                                (("2" (assert)
                                  (("2" (install-rewrites "walks")
                                    (("2" (hide 2)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "graphs[T].edge?_comm")
                                                (("1"
                                                  (inst -1 "G!1" "y!2" "y!1")
                                                  (("1"
                                                    (expand "edge?")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst 1 "y!1" "y!2")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "graphs[T].edges_vert_in")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "G!1"
                                                     "dbl[T](x!2,y!2)"
                                                     "x!2"
                                                     "y!2")
                                                    (("2" (bddsimp) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "walks[T].edge_to_walk")
                                          (("2"
                                            (inst
                                             -1
                                             "complement(G!1)"
                                             "x!2"
                                             "y!1")
                                            (("2"
                                              (bddsimp)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (replace -1 * lr)
                                                  (("1"
                                                    (hide (-2 2))
                                                    (("1"
                                                      (install-rewrites
                                                       "walks")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "x!2"
                                                             "y!1")
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (typepred
                                                                 "y!1")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "x!2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "walks[T].edge_to_walk")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "complement(G!1)"
                                                   "x!2"
                                                   "y!1")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "y!1")
                            (("3" (hide-all-but (-1 1))
                              (("3" (install-rewrites "walks")
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case-replace "edge?(G!1)(x!1,y!1)")
                    (("1" (inst 5 "gen_seq2(G!1,x!1,y!1)")
                      (("1" (hide 6)
                        (("1" (install-rewrites "walks")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (lemma "walks[T].edge_to_walk")
                        (("2" (inst? -1)
                          (("2" (assert)
                            (("2" (hide-all-but (-1 1))
                              (("2" (install-rewrites "walks")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case-replace "edge?(G!1)(x!1,x!2)")
                      (("1" (case-replace "edge?(G!1)(y!2,y!1)")
                        (("1"
                          (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!1 AND seq(w)(length(w) - 1) = y!1 and walk?(G!1,w)")
                          (("1" (skosimp*)
                            (("1" (hide 7)
                              (("1" (install-rewrites "walks")
                                (("1" (inst 6 "w!1")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 7 8)
                            (("2" (install-rewrites "walks")
                              (("2"
                                (inst 1
                                 "walks[T].list2prewalk((:x!1,x!2,y!2,y!1:))")
                                (("1" (install-rewrites "walks")
                                  (("1" (assert)
                                    (("1" (bddsimp)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (case "n!1=0")
                                            (("1"
                                              (replace -1 -3 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 -3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=2")
                                                (("1"
                                                  (replace -1 -3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n!1=0")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (replace -1 2 lr)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=2")
                                                (("1"
                                                  (replace -1 3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (typepred "i!1")
                                          (("2"
                                            (lemma "graphs[T].edges_vert_in")
                                            (("2"
                                              (lemma
                                               "graphs[T].edges_vert_in")
                                              (("2"
                                                (lemma
                                                 "graphs[T].edges_vert_in")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "G!1"
                                                   "dbl[T](y!2,y!1)"
                                                   "y!2"
                                                   "y!1")
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "G!1"
                                                     "dbl[T](x!1,x!2)"
                                                     "x!1"
                                                     "x!2")
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "G!1"
                                                       "dbl[T](x!2,y!2)"
                                                       "x!2"
                                                       "y!2")
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (case "i!1=0")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1
                                                               lr)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case "i!1=1")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               2
                                                               lr)
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case "i!1=2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 3
                                                                 lr)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case "i!1=3")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   4
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide (-1 -2 -3 2 7 8))
                                  (("2" (assert) (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "edge?(G!1)(x!2,y!1)")
                          (("1" (hide 8)
                            (("1"
                              (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!1 AND seq(w)(length(w) - 1) = y!1 and walk?(G!1,w)")
                              (("1" (skosimp*)
                                (("1" (inst 7 "w!1") (("1" (bddsimp) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 8)
                                (("2"
                                  (inst 1
                                   "walks[T].list2prewalk((:x!1,x!2,y!1:))")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (case "n!1=0")
                                              (("1"
                                                (replace -1 -3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (replace -1 -3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 2 lr)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (bddsimp)
                                            (("1"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 -3 lr)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (replace -1 2 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp*)
                                          (("3"
                                            (typepred "i!1")
                                            (("3"
                                              (case "i!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (replace -1 1 lr)
                                                  (("1"
                                                    (typepred "x!1")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=1")
                                                (("1"
                                                  (replace -1 2 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (typepred "x!2")
                                                        (("1"
                                                          (expand
                                                           "complement")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "i!1=2")
                                                  (("1"
                                                    (replace -1 3 lr)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (assert)
                                          (("4"
                                            (skosimp*)
                                            (("4"
                                              (typepred "i!1")
                                              (("4"
                                                (case "i!1=0")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 1 lr)
                                                    (("1"
                                                      (typepred "x!1")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "i!1=1")
                                                  (("1"
                                                    (replace -1 2 lr)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "i!1=2")
                                                    (("1"
                                                      (replace -1 3 lr)
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide (-1 -2 -3 2 7))
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (-1 -2 3 8))
                            (("2" (lemma "graphs[T].edge?_comm")
                              (("2" (inst -1 "G!1" "y!2" "y!1")
                                (("2" (bddsimp)
                                  (("2"
                                    (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!2 AND seq(w)(length(w) - 1) = y!2 and walk?(complement(G!1),w)")
                                    (("1" (skosimp*)
                                      (("1"
                                        (inst 8 "w!1")
                                        (("1"
                                          (install-rewrites "walks")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 9)
                                      (("2"
                                        (inst
                                         1
                                         "walks[T].list2prewalk((:x!2,y!1,y!2:))")
                                        (("1"
                                          (install-rewrites "walks")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (case "n!1=0")
                                                    (("1"
                                                      (replace -1 -3 lr)
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=1")
                                                      (("1"
                                                        (replace -1 -3 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil)
                                                   ("3"
                                                    (case "n!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 * lr)
                                                        (("1"
                                                          (inst 1 "x!2" "y!1")
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=1")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (replace -1 2 lr)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "nth")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (case "n!1=0")
                                                    (("1"
                                                      (replace -1 1 lr)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst 1 "x!2" "y!1")
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (reveal -3)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=1")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (replace -1 2 lr)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (reveal -3)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (case "n!1=0")
                                                  (("1"
                                                    (replace -1 1 lr)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "n!1=1")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (bddsimp)
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil)
                                                       ("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (skosimp*)
                                                (("4"
                                                  (case "n!1=0")
                                                  (("1"
                                                    (replace -1 1 lr)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst 1 "x!2" "y!1")
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (reveal (-2 -3))
                                                            (("2"
                                                              (replace
                                                               -5
                                                               *
                                                               lr)
                                                              (("2"
                                                                (expand
                                                                 "edge?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (reveal (-2 -3))
                                                            (("3"
                                                              (replace
                                                               -5
                                                               *
                                                               lr)
                                                              (("3"
                                                                (expand
                                                                 "edge?")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "n!1=1")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (reveal (-2 -3))
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 *
                                                                 lr)
                                                                (("1"
                                                                  (expand
                                                                   "edge?")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5" (assert) nil nil)
                                               ("6"
                                                (skosimp*)
                                                (("6"
                                                  (assert)
                                                  (("6"
                                                    (bddsimp)
                                                    (("1"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 -3 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 -3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("1"
                                                                  (replace
                                                                   -5
                                                                   *
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 -3 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 -3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "x!2"
                                                             "y!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("1"
                                                                  (replace
                                                                   -5
                                                                   *
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (replace -1 2 lr)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 *
                                                                 lr)
                                                                (("1"
                                                                  (reveal
                                                                   (-2 -3))
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     *
                                                                     lr)
                                                                    (("1"
                                                                      (expand
                                                                       "edge?")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("7"
                                                (skosimp*)
                                                (("7"
                                                  (assert)
                                                  (("7"
                                                    (bddsimp)
                                                    (("1"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 -3 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (reveal (-2 -3))
                                                            (("1"
                                                              (replace
                                                               -5
                                                               *
                                                               lr)
                                                              (("1"
                                                                (expand
                                                                 "edge?")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 -3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 -3 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (reveal (-2 -3))
                                                            (("1"
                                                              (expand "edge?")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 -3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 * lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (inst
                                                             1
                                                             "x!2"
                                                             "y!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (reveal
                                                                   (-2 -3))
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (replace -1 2 lr)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 "y!1"
                                                                 "y!2")
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (reveal
                                                                       (-2
                                                                        -3))
                                                                      (("2"
                                                                        (expand
                                                                         "edge?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (reveal
                                                                     (-2 -3))
                                                                    (("3"
                                                                      (replace
                                                                       -5
                                                                       *
                                                                       lr)
                                                                      (("3"
                                                                        (expand
                                                                         "edge?")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("8"
                                                (assert)
                                                (("8"
                                                  (skosimp*)
                                                  (("8"
                                                    (case "n!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (reveal (-2 -3))
                                                            (("1"
                                                              (expand "edge?")
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 *
                                                                 lr)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             1
                                                             "x!2"
                                                             "y!1")
                                                            (("2"
                                                              (bddsimp)
                                                              (("1"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("1"
                                                                  (replace
                                                                   -5
                                                                   *
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("2"
                                                                  (typepred
                                                                   "y!1")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("3"
                                                                  (typepred
                                                                   "x!2")
                                                                  (("3"
                                                                    (expand
                                                                     "complement")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=1")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (replace -1 2 lr)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("1"
                                                                  (replace
                                                                   -5
                                                                   *
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 2
                                                                 "y!1"
                                                                 "y!2")
                                                                (("2"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (reveal
                                                                     (-2 -3))
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       *
                                                                       lr)
                                                                      (("1"
                                                                        (expand
                                                                         "edge?")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "y!2")
                                                                    (("2"
                                                                      (expand
                                                                       "complement")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (typepred
                                                                     "y!1")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("9" (assert) nil nil)
                                               ("10"
                                                (reveal (-2 -3))
                                                (("10"
                                                  (replace -4 * lr)
                                                  (("10"
                                                    (expand "edge?")
                                                    (("10" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("11"
                                                (skosimp*)
                                                (("11"
                                                  (typepred "i!1")
                                                  (("11"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("12"
                                                (skosimp*)
                                                (("12"
                                                  (typepred "i!1")
                                                  (("12"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("13"
                                                (skosimp*)
                                                (("13"
                                                  (typepred "i!1")
                                                  (("13"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("14"
                                                (skosimp*)
                                                (("14"
                                                  (typepred "i!1")
                                                  (("14"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("15"
                                                (skosimp*)
                                                (("15"
                                                  (typepred "i!1")
                                                  (("15"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("16"
                                                (skosimp*)
                                                (("16"
                                                  (typepred "i!1")
                                                  (("16"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "edge?(G!1)(y!1,y!2)")
                        (("1" (case "y!1=y!2")
                          (("1"
                            (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!2 AND seq(w)(length(w) - 1) = y!2 and walk?(complement(G!1),w)")
                            (("1" (skosimp*)
                              (("1" (inst 8 "w!1")
                                (("1" (install-rewrites "walks")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (hide 8 9)
                              (("2"
                                (inst 1
                                 "walks[T].list2prewalk((:x!2,x!1,y!2:))")
                                (("1" (install-rewrites "walks")
                                  (("1" (assert) nil nil)) nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "edge?(G!1)(x!1,y!2)")
                            (("1"
                              (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!1 AND seq(w)(length(w) - 1) = y!1 and walk?(G!1,w)")
                              (("1" (skosimp*)
                                (("1" (inst 8 "w!1")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (hide 9 10)
                                (("2"
                                  (inst 1
                                   "walks[T].list2prewalk((:x!1,y!2,y!1:))")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (case "n!1=0")
                                              (("1"
                                                (replace -1 -3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (replace -1 -3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -3 -4 lr)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 2 lr)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "graphs[T].edge?_comm")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "G!1"
                                                           "y!2"
                                                           "y!1")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand "edge?")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand "edge?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (case "i!1=0")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (replace -1 1 lr)
                                                (("1"
                                                  (typepred "x!1")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 2 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (typepred "y!2")
                                                      (("1"
                                                        (expand "complement")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "i!1")
                                                (("2"
                                                  (case "i!1=2")
                                                  (("1"
                                                    (replace -1 3 lr)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!2 AND seq(w)(length(w) - 1) = y!2 and walk?(complement(G!1),w)")
                              (("1" (skosimp*)
                                (("1" (inst 10 "w!1")
                                  (("1" (hide 9)
                                    (("1" (install-rewrites "walks")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 10 11)
                                (("2"
                                  (inst 1
                                   "walks[T].list2prewalk((:x!2,x!1,y!2:))")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (case "n!1=0")
                                              (("1"
                                                (replace -1 -3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -4 + lr)
                                                    (("1"
                                                      (lemma
                                                       "graphs[T].edge?_comm")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G!1"
                                                         "y!2"
                                                         "y!1")
                                                        (("1"
                                                          (expand "edge?")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (replace -1 -3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -3 - rl)
                                                        (("1"
                                                          (lemma
                                                           "graphs[T].edge?_comm")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "G!1"
                                                             "x!1"
                                                             "x!2")
                                                            (("1"
                                                              (expand "edge?")
                                                              (("1"
                                                                (prop)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "graphs[T].edge?_comm")
                                              (("2"
                                                (inst -1 "G!1" "x!1" "x!2")
                                                (("2"
                                                  (replace -4 + rl)
                                                  (("2"
                                                    (replace -4 -6 rl)
                                                    (("2"
                                                      (expand "edge?")
                                                      (("2" (prop) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst 1 "x!2" "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred "x!2")
                                                        (("1"
                                                          (expand
                                                           "complement")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 2 lr)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst 2 "x!1" "y!2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -3 * rl)
                                                            (("1"
                                                              (lemma
                                                               "graphs[T].edge?_comm")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "G!1"
                                                                 "x!1"
                                                                 "x!2")
                                                                (("1"
                                                                  (expand
                                                                   "edge?")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (bddsimp)
                                            (("1"
                                              (case "n!1=0")
                                              (("1"
                                                (replace -1 -3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -3 * lr)
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (replace -1 -3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -3 5 lr)
                                                        (("1"
                                                          (lemma
                                                           "graphs[T].edge?_comm")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "G!1"
                                                             "y!2"
                                                             "x!2")
                                                            (("1"
                                                              (expand "edge?")
                                                              (("1"
                                                                (prop)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "graphs[T].edge?_comm")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G!1"
                                                       "x!1"
                                                       "x!2")
                                                      (("1"
                                                        (expand "edge?")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 -3 lr)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "nth")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst 1 "x!2" "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred "x!2")
                                                        (("1"
                                                          (expand
                                                           "complement")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 2 lr)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst 2 "x!1" "y!2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               5
                                                               lr)
                                                              (("1"
                                                                (lemma
                                                                 "graphs[T].edge?_comm")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G!1"
                                                                   "y!2"
                                                                   "x!2")
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred "y!2")
                                                              (("2"
                                                                (expand
                                                                 "complement")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp*)
                                          (("3"
                                            (case "i!1=0")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (replace -1 1 lr)
                                                (("1"
                                                  (typepred "x!2")
                                                  (("1"
                                                    (expand "complement")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 2 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=2")
                                                (("1"
                                                  (replace -1 3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (typepred "i!1")
                                                          (("1"
                                                            (typepred "y!2")
                                                            (("1"
                                                              (expand
                                                               "complement")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i!1")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skosimp*)
                                          (("4"
                                            (case "i!1=0")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (replace -1 1 lr)
                                                (("1"
                                                  (typepred "x!2")
                                                  (("1"
                                                    (expand "complement")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 2 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=2")
                                                (("1"
                                                  (replace -1 3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (typepred "y!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i!1")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!2 AND seq(w)(length(w) - 1) = y!2 and walk?(complement(G!1),w)")
                          (("1" (skosimp*)
                            (("1" (inst 9 "w!1")
                              (("1" (install-rewrites "walks")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (hide 10)
                            (("2" (hide 9)
                              (("2" (case "y!1=y!2")
                                (("1"
                                  (inst 1
                                   "walks[T].list2prewalk((:x!2,x!1,y!2:))")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert)
                                      (("1"
                                        (hide 3 4)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 * lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 * lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 * lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (reveal 1)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (lemma
                                                                 "graphs[T].edge?_comm")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G!1"
                                                                   "x!1"
                                                                   "x!2")
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (prop)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 - lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (reveal 2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (case "n!1=0")
                                                        (("1"
                                                          (replace -1 * lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "x!2"
                                                               "x!1")
                                                              (("1"
                                                                (typepred
                                                                 "x!1")
                                                                (("1"
                                                                  (typepred
                                                                   "x!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case "n!1=1")
                                                          (("1"
                                                            (replace -1 2 lr)
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (inst
                                                                   2
                                                                   "x!1"
                                                                   "y!2")
                                                                  (("1"
                                                                    (typepred
                                                                     "x!1")
                                                                    (("1"
                                                                      (typepred
                                                                       "y!2")
                                                                      (("1"
                                                                        (expand
                                                                         "complement")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "x!2")
                                                  (("2"
                                                    (typepred "x!1")
                                                    (("2"
                                                      (typepred "y!2")
                                                      (("2"
                                                        (expand "complement")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (typepred "i!1")
                                                            (("2"
                                                              (case "i!1=0")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 +
                                                                 lr)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case "i!1=1")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   +
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "i!1=2")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     3
                                                                     lr)
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2 2 3 4)
                                    (("2" (grind) nil nil)) nil))
                                  nil)
                                 ("2"
                                  (inst 2
                                   "walks[T].list2prewalk((:x!2,x!1,y!1,y!2:))")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (case "n!1=0")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (lemma
                                                     "graphs[T].edge?_comm")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G!1"
                                                       "x!1"
                                                       "x!2")
                                                      (("1"
                                                        (expand "edge?")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst 2 "x!2" "x!1")
                                                    (("2"
                                                      (typepred "x!2")
                                                      (("2"
                                                        (typepred "x!1")
                                                        (("2"
                                                          (expand
                                                           "complement")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (inst 3 "x!1" "y!1")
                                                        (("1"
                                                          (typepred "x!1")
                                                          (("1"
                                                            (typepred "y!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=2")
                                                (("1"
                                                  (replace -1 4 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (inst 4 "y!1" "y!2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred "y!2")
                                                              (("1"
                                                                (expand
                                                                 "complement")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "x!2")
                                          (("2"
                                            (typepred "x!1")
                                            (("2"
                                              (typepred "y!1")
                                              (("2"
                                                (typepred "y!2")
                                                (("2"
                                                  (expand "complement")
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (case "i!1=0")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (case "i!1=1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case "i!1=2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case "i!1=3")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -1 2 3 4)
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 5)
                  (("2" (inst 5 "gen_seq2(G!1,x!2,y!2)")
                    (("1" (install-rewrites "walks") (("1" (assert) nil nil))
                      nil)
                     ("2" (lemma "walks[T].edge_to_walk")
                      (("2" (inst -1 "complement(G!1)" "x!2" "y!2")
                        (("2" (assert)
                          (("2" (bddsimp)
                            (("1" (expand "complement" -1 2)
                              (("1" (expand "gen_seq2")
                                (("1" (propax) nil nil)) nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (grind)
                                (("1" (typepred "y!2")
                                  (("1" (expand "complement")
                                    (("1" (propax) nil nil)) nil))
                                  nil)
                                 ("2" (typepred "x!2")
                                  (("2" (expand "complement")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "y!2")
                      (("3" (expand "complement") (("3" (propax) nil nil))
                        nil))
                      nil)
                     ("4" (typepred "x!2")
                      (("4" (expand "complement") (("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((path_connected? const-decl "bool" graph_conn_defs nil)
    (x!2 skolem-const-decl "(vert(complement(G!1)))" complem nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (difference const-decl "set" sets nil)
    (edge?_comm formula-decl nil graphs nil)
    (y!2 skolem-const-decl "(vert(complement(G!1)))" complem nil)
    (add1 const-decl "prewalk" walks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edges_vert_in formula-decl nil graphs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (walk?_add1 formula-decl nil walks nil)
    (y!1 skolem-const-decl "(vert(G!1))" complem nil)
    (gen_seq2 const-decl "Seq(G)" walks nil)
    (nil application-judgement "finite_set[T]" graph_conn_defs nil)
    (edg const-decl "doubleton[T]" graphs nil)
    (edge_to_walk formula-decl nil walks nil)
    (w!1 skolem-const-decl "prewalk[T]" complem nil)
    (w!1 skolem-const-decl "prewalk[T]" complem nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (w!1 skolem-const-decl "prewalk[T]" complem nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (list2prewalk const-decl "prewalk" walks nil)
    (non_null type-eq-decl nil walks nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (w!1 skolem-const-decl "prewalk[T]" complem nil)
    (w!1 skolem-const-decl "prewalk[T]" complem nil)
    (w!1 skolem-const-decl "prewalk[T]" complem nil)
    (w!1 skolem-const-decl "prewalk[T]" complem nil)
    (edge? const-decl "bool" graphs nil)
    (x!1 skolem-const-decl "(vert(G!1))" complem nil)
    (gen_seq1 const-decl "Seq(G)" walks nil) (Seq type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (walk? const-decl "bool" walks nil) (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Walk type-eq-decl nil walks nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gen_seq1_is_walk formula-decl nil walks nil)
    (T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil) (empty? const-decl "bool" graphs nil)
    (complement const-decl "graph[T]" complem nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil))
   shostak)
  (path_or_not_path-2 "paul" 3358096826
   ("" (skosimp*)
    (("" (expand "path_connected?")
      (("" (bddsimp)
        (("1" (expand "empty?")
          (("1" (expand "empty?") (("1" (hide 2) (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (case "x!1=y!1")
            (("1" (inst 2 "gen_seq1(G!1,x!1)")
              (("1" (hide 3)
                (("1" (install-rewrites "walks") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (lemma "walks[T].gen_seq1_is_walk")
                (("2" (inst -1 "G!1" "x!1")
                  (("2" (typepred "x!1") (("2" (bddsimp) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (case "x!2=y!2")
              (("1" (inst 4 "gen_seq1(complement(G!1),x!2)")
                (("1" (install-rewrites "walks") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "walks[T].gen_seq1_is_walk")
                  (("2" (inst -1 "complement(G!1)" "x!2")
                    (("2" (typepred "x!2") (("2" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (case "edge?(G!1)(x!2,y!2)")
                (("1" (case "x!1=x!2")
                  (("1" (case "y!1=y!2")
                    (("1" (inst 4 "gen_seq2(G!1,x!1,y!1)")
                      (("1" (hide 5)
                        (("1" (install-rewrites "walks")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (lemma "walks[T].edge_to_walk")
                        (("2" (inst -1 "G!1" "x!1" "y!1")
                          (("2" (bddsimp)
                            (("1" (expand "edge?")
                              (("1" (bddsimp)
                                (("1" (assert)
                                  (("1" (replace -1 1 lr)
                                    (("1" (replace -2 1 lr)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (-4 1))
                                          (("1"
                                            (install-rewrites "walks")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "edge?(G!1)(x!1, y!1)")
                      (("1" (inst 5 "gen_seq2(G!1,x!1,y!1)")
                        (("1" (hide -3 6)
                          (("1" (install-rewrites "walks")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (lemma "walks[T].edge_to_walk")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2" (expand "edge?")
                                (("2" (hide-all-but (-1 1))
                                  (("2" (assert)
                                    (("2" (install-rewrites "walks")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "edge?(G!1)(y!2,y!1)")
                        (("1" (inst 6 "add1(gen_seq2(G!1,x!2,y!2),y!1)")
                          (("1" (hide 7)
                            (("1" (install-rewrites "walks")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (lemma "walks[T].walk?_add1")
                            (("2" (inst? -1)
                              (("2" (bddsimp)
                                (("1" (hide (2 8))
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (lemma "graphs[T].edges_vert_in")
                                  (("2"
                                    (inst -1 "G!1" "dbl[T](y!2,y!1)" "y!2"
                                     "y!1")
                                    (("1" (expand "edge?")
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (inst 1 "y!2" "y!1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("3" (lemma "walks[T].edge_to_walk")
                                  (("3" (inst -1 "G!1" "x!2" "y!2")
                                    (("3" (expand "edge?")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide-all-but (-3 1))
                                          (("3"
                                            (install-rewrites "walks")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "graphs[T].edges_vert_in")
                            (("3"
                              (inst -1 "G!1" "dbl[T](y!2,y!1)" "y!2" "y!1")
                              (("1" (expand "edge?") (("1" (assert) nil nil))
                                nil)
                               ("2" (inst 1 "y!2" "y!1")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("4" (lemma "graphs[T].edges_vert_in")
                            (("4"
                              (inst -1 "G!1" "dbl[T](x!2,y!2)" "x!2" "y!2")
                              (("1" (bddsimp)
                                (("1" (expand "edge?")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (inst 1 "x!2" "y!2")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst 8
                           "add1(gen_seq2(complement(G!1),x!2,y!1),y!2)")
                          (("1" (hide 7)
                            (("1" (install-rewrites "walks")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (lemma "walks[T].walk?_add1")
                            (("2" (hide 8)
                              (("2"
                                (inst -1 "complement(G!1)"
                                 "gen_seq2[T](complement(G!1), x!2, y!1)"
                                 "y!2")
                                (("2" (assert)
                                  (("2" (install-rewrites "walks")
                                    (("2" (hide 2)
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "graphs[T].edge?_comm")
                                                (("1"
                                                  (inst -1 "G!1" "y!2" "y!1")
                                                  (("1"
                                                    (expand "edge?")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst 1 "y!1" "y!2")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "graphs[T].edges_vert_in")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "G!1"
                                                     "dbl[T](x!2,y!2)"
                                                     "x!2"
                                                     "y!2")
                                                    (("2" (bddsimp) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "walks[T].edge_to_walk")
                                          (("2"
                                            (inst
                                             -1
                                             "complement(G!1)"
                                             "x!2"
                                             "y!1")
                                            (("2"
                                              (bddsimp)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (replace -1 * lr)
                                                  (("1"
                                                    (hide (-2 2))
                                                    (("1"
                                                      (install-rewrites
                                                       "walks")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "x!2"
                                                             "y!1")
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (typepred
                                                                 "y!1")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "x!2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "walks[T].edge_to_walk")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "complement(G!1)"
                                                   "x!2"
                                                   "y!1")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "y!1")
                            (("3" (hide-all-but (-1 1))
                              (("3" (install-rewrites "walks")
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case-replace "edge?(G!1)(x!1,y!1)")
                    (("1" (inst 5 "gen_seq2(G!1,x!1,y!1)")
                      (("1" (hide 6)
                        (("1" (install-rewrites "walks")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (lemma "walks[T].edge_to_walk")
                        (("2" (inst? -1)
                          (("2" (assert)
                            (("2" (hide-all-but (-1 1))
                              (("2" (install-rewrites "walks")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case-replace "edge?(G!1)(x!1,x!2)")
                      (("1" (case-replace "edge?(G!1)(y!2,y!1)")
                        (("1"
                          (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!1 AND seq(w)(length(w) - 1) = y!1 and walk?(G!1,w)")
                          (("1" (skosimp*)
                            (("1" (hide 7)
                              (("1" (install-rewrites "walks")
                                (("1" (inst 6 "w!1")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 7 8)
                            (("2" (install-rewrites "walks")
                              (("2"
                                (inst 1
                                 "walks[T].list2prewalk((:x!1,x!2,y!2,y!1:))")
                                (("1" (install-rewrites "walks")
                                  (("1" (assert)
                                    (("1" (bddsimp)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (case "n!1=0")
                                            (("1"
                                              (replace -1 -3 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 -3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=2")
                                                (("1"
                                                  (replace -1 -3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n!1=0")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (replace -1 2 lr)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=2")
                                                (("1"
                                                  (replace -1 3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (typepred "i!1")
                                          (("2"
                                            (lemma "graphs[T].edges_vert_in")
                                            (("2"
                                              (lemma
                                               "graphs[T].edges_vert_in")
                                              (("2"
                                                (lemma
                                                 "graphs[T].edges_vert_in")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "G!1"
                                                   "dbl[T](y!2,y!1)"
                                                   "y!2"
                                                   "y!1")
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "G!1"
                                                     "dbl[T](x!1,x!2)"
                                                     "x!1"
                                                     "x!2")
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "G!1"
                                                       "dbl[T](x!2,y!2)"
                                                       "x!2"
                                                       "y!2")
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (case "i!1=0")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1
                                                               lr)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case "i!1=1")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               2
                                                               lr)
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case "i!1=2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 3
                                                                 lr)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case "i!1=3")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   4
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide (-1 -2 -3 2 7 8))
                                  (("2" (assert) (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "edge?(G!1)(x!2,y!1)")
                          (("1" (hide 8)
                            (("1"
                              (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!1 AND seq(w)(length(w) - 1) = y!1 and walk?(G!1,w)")
                              (("1" (skosimp*)
                                (("1" (inst 7 "w!1") (("1" (bddsimp) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 8)
                                (("2"
                                  (inst 1
                                   "walks[T].list2prewalk((:x!1,x!2,y!1:))")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (case "n!1=0")
                                              (("1"
                                                (replace -1 -3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (replace -1 -3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 2 lr)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (bddsimp)
                                            (("1"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 -3 lr)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (replace -1 2 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp*)
                                          (("3"
                                            (typepred "i!1")
                                            (("3"
                                              (lemma "graphs[T].vert_in")
                                              (("3"
                                                (lemma "graphs[T].vert_in")
                                                (("3"
                                                  (lemma "graphs[T].vert_in")
                                                  (("3"
                                                    (inst
                                                     -1
                                                     "G!1"
                                                     "x!1"
                                                     "x!2")
                                                    (("3"
                                                      (inst
                                                       -2
                                                       "G!1"
                                                       "x!2"
                                                       "y!1")
                                                      (("3"
                                                        (delete -3)
                                                        (("3"
                                                          (prop)
                                                          (("3"
                                                            (case "i!1=0")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 lr)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case "i!1=1")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 2
                                                                 lr)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case "i!1=2")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   3
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skosimp*)
                                          (("4"
                                            (typepred "i!1")
                                            (("4"
                                              (lemma "graphs[T].vert_in")
                                              (("4"
                                                (lemma "graphs[T].vert_in")
                                                (("4"
                                                  (lemma "graphs[T].vert_in")
                                                  (("4"
                                                    (inst
                                                     -2
                                                     "G!1"
                                                     "x!2"
                                                     "y!1")
                                                    (("4"
                                                      (inst
                                                       -1
                                                       "G!1"
                                                       "x!1"
                                                       "x!2")
                                                      (("4"
                                                        (delete -3)
                                                        (("4"
                                                          (prop)
                                                          (("4"
                                                            (case "i!1=0")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 lr)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case "i!1=1")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 2
                                                                 lr)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case "i!1=2")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   3
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide (-1 -2 -3 2 7))
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (-1 -2 3 8))
                            (("2" (lemma "graphs[T].edge?_comm")
                              (("2" (inst -1 "G!1" "y!2" "y!1")
                                (("2" (bddsimp)
                                  (("2"
                                    (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!2 AND seq(w)(length(w) - 1) = y!2 and walk?(complement(G!1),w)")
                                    (("1" (skosimp*)
                                      (("1"
                                        (inst 8 "w!1")
                                        (("1"
                                          (install-rewrites "walks")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 9)
                                      (("2"
                                        (inst
                                         1
                                         "walks[T].list2prewalk((:x!2,y!1,y!2:))")
                                        (("1"
                                          (install-rewrites "walks")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (case "n!1=0")
                                                    (("1"
                                                      (replace -1 -3 lr)
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=1")
                                                      (("1"
                                                        (replace -1 -3 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil)
                                                   ("3"
                                                    (case "n!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 * lr)
                                                        (("1"
                                                          (inst 1 "x!2" "y!1")
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=1")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (replace -1 2 lr)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "nth")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (case "n!1=0")
                                                    (("1"
                                                      (replace -1 1 lr)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst 1 "x!2" "y!1")
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (reveal -3)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=1")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (replace -1 2 lr)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (reveal -3)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (case "n!1=0")
                                                  (("1"
                                                    (replace -1 1 lr)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "n!1=1")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (bddsimp)
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil)
                                                       ("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (skosimp*)
                                                (("4"
                                                  (case "n!1=0")
                                                  (("1"
                                                    (replace -1 1 lr)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst 1 "x!2" "y!1")
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (reveal (-2 -3))
                                                            (("2"
                                                              (replace
                                                               -5
                                                               *
                                                               lr)
                                                              (("2"
                                                                (expand
                                                                 "edge?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (reveal (-2 -3))
                                                            (("3"
                                                              (replace
                                                               -5
                                                               *
                                                               lr)
                                                              (("3"
                                                                (expand
                                                                 "edge?")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "n!1=1")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (reveal (-2 -3))
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 *
                                                                 lr)
                                                                (("1"
                                                                  (expand
                                                                   "edge?")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5" (assert) nil nil)
                                               ("6"
                                                (skosimp*)
                                                (("6"
                                                  (assert)
                                                  (("6"
                                                    (bddsimp)
                                                    (("1"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 -3 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 -3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("1"
                                                                  (replace
                                                                   -5
                                                                   *
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 -3 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 -3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "x!2"
                                                             "y!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("1"
                                                                  (replace
                                                                   -5
                                                                   *
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (replace -1 2 lr)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 *
                                                                 lr)
                                                                (("1"
                                                                  (reveal
                                                                   (-2 -3))
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     *
                                                                     lr)
                                                                    (("1"
                                                                      (expand
                                                                       "edge?")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("7"
                                                (skosimp*)
                                                (("7"
                                                  (assert)
                                                  (("7"
                                                    (bddsimp)
                                                    (("1"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 -3 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (reveal (-2 -3))
                                                            (("1"
                                                              (replace
                                                               -5
                                                               *
                                                               lr)
                                                              (("1"
                                                                (expand
                                                                 "edge?")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 -3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 -3 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (reveal (-2 -3))
                                                            (("1"
                                                              (expand "edge?")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 -3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 * lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (inst
                                                             1
                                                             "x!2"
                                                             "y!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (reveal
                                                                   (-2 -3))
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (replace -1 2 lr)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 "y!1"
                                                                 "y!2")
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (reveal
                                                                       (-2
                                                                        -3))
                                                                      (("2"
                                                                        (expand
                                                                         "edge?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (reveal
                                                                     (-2 -3))
                                                                    (("3"
                                                                      (replace
                                                                       -5
                                                                       *
                                                                       lr)
                                                                      (("3"
                                                                        (expand
                                                                         "edge?")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("8"
                                                (assert)
                                                (("8"
                                                  (skosimp*)
                                                  (("8"
                                                    (case "n!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (reveal (-2 -3))
                                                            (("1"
                                                              (expand "edge?")
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 *
                                                                 lr)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             1
                                                             "x!2"
                                                             "y!1")
                                                            (("2"
                                                              (bddsimp)
                                                              (("1"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("1"
                                                                  (replace
                                                                   -5
                                                                   *
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("2"
                                                                  (typepred
                                                                   "y!1")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("3"
                                                                  (typepred
                                                                   "x!2")
                                                                  (("3"
                                                                    (expand
                                                                     "complement")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=1")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (replace -1 2 lr)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (reveal
                                                                 (-2 -3))
                                                                (("1"
                                                                  (replace
                                                                   -5
                                                                   *
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 2
                                                                 "y!1"
                                                                 "y!2")
                                                                (("2"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (reveal
                                                                     (-2 -3))
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       *
                                                                       lr)
                                                                      (("1"
                                                                        (expand
                                                                         "edge?")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "y!2")
                                                                    (("2"
                                                                      (expand
                                                                       "complement")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (typepred
                                                                     "y!1")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("9" (assert) nil nil)
                                               ("10"
                                                (reveal (-2 -3))
                                                (("10"
                                                  (replace -4 * lr)
                                                  (("10"
                                                    (expand "edge?")
                                                    (("10" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("11"
                                                (skosimp*)
                                                (("11"
                                                  (typepred "i!1")
                                                  (("11"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("12"
                                                (skosimp*)
                                                (("12"
                                                  (typepred "i!1")
                                                  (("12"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("13"
                                                (skosimp*)
                                                (("13"
                                                  (typepred "i!1")
                                                  (("13"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("14"
                                                (skosimp*)
                                                (("14"
                                                  (typepred "i!1")
                                                  (("14"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("15"
                                                (skosimp*)
                                                (("15"
                                                  (typepred "i!1")
                                                  (("15"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("16"
                                                (skosimp*)
                                                (("16"
                                                  (typepred "i!1")
                                                  (("16"
                                                    (case "i!1=0")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -1 1 lr)
                                                        (("1"
                                                          (typepred "x!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i!1=1")
                                                      (("1"
                                                        (replace -1 2 lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i!1=2")
                                                        (("1"
                                                          (replace -1 3 lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (typepred
                                                                   "y!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "edge?(G!1)(y!1,y!2)")
                        (("1" (case "y!1=y!2")
                          (("1"
                            (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!2 AND seq(w)(length(w) - 1) = y!2 and walk?(complement(G!1),w)")
                            (("1" (skosimp*)
                              (("1" (inst 8 "w!1")
                                (("1" (install-rewrites "walks")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (hide 8 9)
                              (("2"
                                (inst 1
                                 "walks[T].list2prewalk((:x!2,x!1,y!2:))")
                                (("1" (install-rewrites "walks")
                                  (("1" (assert) nil nil)) nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "edge?(G!1)(x!1,y!2)")
                            (("1"
                              (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!1 AND seq(w)(length(w) - 1) = y!1 and walk?(G!1,w)")
                              (("1" (skosimp*)
                                (("1" (inst 8 "w!1")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (hide 9 10)
                                (("2"
                                  (inst 1
                                   "walks[T].list2prewalk((:x!1,y!2,y!1:))")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (case "n!1=0")
                                              (("1"
                                                (replace -1 -3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (replace -1 -3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -3 -4 lr)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 2 lr)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "graphs[T].edge?_comm")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "G!1"
                                                           "y!2"
                                                           "y!1")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand "edge?")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand "edge?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (case "i!1=0")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (replace -1 1 lr)
                                                (("1"
                                                  (typepred "x!1")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 2 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (typepred "y!2")
                                                      (("1"
                                                        (expand "complement")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "i!1")
                                                (("2"
                                                  (case "i!1=2")
                                                  (("1"
                                                    (replace -1 3 lr)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!2 AND seq(w)(length(w) - 1) = y!2 and walk?(complement(G!1),w)")
                              (("1" (skosimp*)
                                (("1" (inst 10 "w!1")
                                  (("1" (hide 9)
                                    (("1" (install-rewrites "walks")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 10 11)
                                (("2"
                                  (inst 1
                                   "walks[T].list2prewalk((:x!2,x!1,y!2:))")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (case "n!1=0")
                                              (("1"
                                                (replace -1 -3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -4 + lr)
                                                    (("1"
                                                      (lemma
                                                       "graphs[T].edge?_comm")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G!1"
                                                         "y!2"
                                                         "y!1")
                                                        (("1"
                                                          (expand "edge?")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (replace -1 -3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -3 - rl)
                                                        (("1"
                                                          (lemma
                                                           "graphs[T].edge?_comm")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "G!1"
                                                             "x!1"
                                                             "x!2")
                                                            (("1"
                                                              (expand "edge?")
                                                              (("1"
                                                                (prop)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "graphs[T].edge?_comm")
                                              (("2"
                                                (inst -1 "G!1" "x!1" "x!2")
                                                (("2"
                                                  (replace -4 + rl)
                                                  (("2"
                                                    (replace -4 -6 rl)
                                                    (("2"
                                                      (expand "edge?")
                                                      (("2" (prop) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst 1 "x!2" "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred "x!2")
                                                        (("1"
                                                          (expand
                                                           "complement")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 2 lr)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst 2 "x!1" "y!2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -3 * rl)
                                                            (("1"
                                                              (lemma
                                                               "graphs[T].edge?_comm")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "G!1"
                                                                 "x!1"
                                                                 "x!2")
                                                                (("1"
                                                                  (expand
                                                                   "edge?")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (bddsimp)
                                            (("1"
                                              (case "n!1=0")
                                              (("1"
                                                (replace -1 -3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -3 * lr)
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (replace -1 -3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (replace -3 5 lr)
                                                        (("1"
                                                          (lemma
                                                           "graphs[T].edge?_comm")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "G!1"
                                                             "y!2"
                                                             "x!2")
                                                            (("1"
                                                              (expand "edge?")
                                                              (("1"
                                                                (prop)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "graphs[T].edge?_comm")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G!1"
                                                       "x!1"
                                                       "x!2")
                                                      (("1"
                                                        (expand "edge?")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 -3 lr)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "nth")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (case "n!1=0")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst 1 "x!2" "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred "x!2")
                                                        (("1"
                                                          (expand
                                                           "complement")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=1")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (replace -1 2 lr)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst 2 "x!1" "y!2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               5
                                                               lr)
                                                              (("1"
                                                                (lemma
                                                                 "graphs[T].edge?_comm")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G!1"
                                                                   "y!2"
                                                                   "x!2")
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred "y!2")
                                                              (("2"
                                                                (expand
                                                                 "complement")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp*)
                                          (("3"
                                            (case "i!1=0")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (replace -1 1 lr)
                                                (("1"
                                                  (typepred "x!2")
                                                  (("1"
                                                    (expand "complement")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 2 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=2")
                                                (("1"
                                                  (replace -1 3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (typepred "i!1")
                                                          (("1"
                                                            (typepred "y!2")
                                                            (("1"
                                                              (expand
                                                               "complement")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i!1")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skosimp*)
                                          (("4"
                                            (case "i!1=0")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (replace -1 1 lr)
                                                (("1"
                                                  (typepred "x!2")
                                                  (("1"
                                                    (expand "complement")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 2 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=2")
                                                (("1"
                                                  (replace -1 3 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (typepred "y!2")
                                                          (("1"
                                                            (expand
                                                             "complement")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i!1")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "EXISTS (w: walks[T].prewalk): seq(w)(0) = x!2 AND seq(w)(length(w) - 1) = y!2 and walk?(complement(G!1),w)")
                          (("1" (skosimp*)
                            (("1" (inst 9 "w!1")
                              (("1" (install-rewrites "walks")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (hide 10)
                            (("2" (hide 9)
                              (("2" (case "y!1=y!2")
                                (("1"
                                  (inst 1
                                   "walks[T].list2prewalk((:x!2,x!1,y!2:))")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert)
                                      (("1"
                                        (hide 3 4)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 * lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 * lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "n!1=0")
                                                      (("1"
                                                        (replace -1 * lr)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (reveal 1)
                                                            (("1"
                                                              (bddsimp)
                                                              (("1"
                                                                (lemma
                                                                 "graphs[T].edge?_comm")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G!1"
                                                                   "x!1"
                                                                   "x!2")
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (prop)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "n!1=1")
                                                        (("1"
                                                          (replace -1 - lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (reveal 2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (case "n!1=0")
                                                        (("1"
                                                          (replace -1 * lr)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "x!2"
                                                               "x!1")
                                                              (("1"
                                                                (typepred
                                                                 "x!1")
                                                                (("1"
                                                                  (typepred
                                                                   "x!2")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case "n!1=1")
                                                          (("1"
                                                            (replace -1 2 lr)
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (inst
                                                                   2
                                                                   "x!1"
                                                                   "y!2")
                                                                  (("1"
                                                                    (typepred
                                                                     "x!1")
                                                                    (("1"
                                                                      (typepred
                                                                       "y!2")
                                                                      (("1"
                                                                        (expand
                                                                         "complement")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "x!2")
                                                  (("2"
                                                    (typepred "x!1")
                                                    (("2"
                                                      (typepred "y!2")
                                                      (("2"
                                                        (expand "complement")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (typepred "i!1")
                                                            (("2"
                                                              (case "i!1=0")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 +
                                                                 lr)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case "i!1=1")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   +
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "i!1=2")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     3
                                                                     lr)
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2 2 3 4)
                                    (("2" (grind) nil nil)) nil))
                                  nil)
                                 ("2"
                                  (inst 2
                                   "walks[T].list2prewalk((:x!2,x!1,y!1,y!2:))")
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (case "n!1=0")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (lemma
                                                     "graphs[T].edge?_comm")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G!1"
                                                       "x!1"
                                                       "x!2")
                                                      (("1"
                                                        (expand "edge?")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst 2 "x!2" "x!1")
                                                    (("2"
                                                      (typepred "x!2")
                                                      (("2"
                                                        (typepred "x!1")
                                                        (("2"
                                                          (expand
                                                           "complement")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 3 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (inst 3 "x!1" "y!1")
                                                        (("1"
                                                          (typepred "x!1")
                                                          (("1"
                                                            (typepred "y!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=2")
                                                (("1"
                                                  (replace -1 4 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (inst 4 "y!1" "y!2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred "y!2")
                                                              (("1"
                                                                (expand
                                                                 "complement")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "x!2")
                                          (("2"
                                            (typepred "x!1")
                                            (("2"
                                              (typepred "y!1")
                                              (("2"
                                                (typepred "y!2")
                                                (("2"
                                                  (expand "complement")
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (case "i!1=0")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (case "i!1=1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case "i!1=2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case "i!1=3")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -1 2 3 4)
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 5)
                  (("2" (inst 5 "gen_seq2(G!1,x!2,y!2)")
                    (("1" (install-rewrites "walks") (("1" (assert) nil nil))
                      nil)
                     ("2" (lemma "walks[T].edge_to_walk")
                      (("2" (inst -1 "complement(G!1)" "x!2" "y!2")
                        (("2" (assert)
                          (("2" (bddsimp)
                            (("1" (expand "complement" -1 2)
                              (("1" (expand "gen_seq2")
                                (("1" (propax) nil nil)) nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (grind)
                                (("1" (typepred "y!2")
                                  (("1" (expand "complement")
                                    (("1" (propax) nil nil)) nil))
                                  nil)
                                 ("2" (typepred "x!2")
                                  (("2" (expand "complement")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "y!2")
                      (("3" (expand "complement") (("3" (propax) nil nil))
                        nil))
                      nil)
                     ("4" (typepred "x!2")
                      (("4" (expand "complement") (("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((path_connected? const-decl "bool" graph_conn_defs nil)
    (edge?_comm formula-decl nil graphs nil)
    (add1 const-decl "prewalk" walks nil)
    (edges_vert_in formula-decl nil graphs nil)
    (walk?_add1 formula-decl nil walks nil)
    (gen_seq2 const-decl "Seq(G)" walks nil)
    (edg const-decl "doubleton[T]" graphs nil)
    (edge_to_walk formula-decl nil walks nil)
    (list2prewalk const-decl "prewalk" walks nil)
    (non_null type-eq-decl nil walks nil) (edge? const-decl "bool" graphs nil)
    (gen_seq1 const-decl "Seq(G)" walks nil) (Seq type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (walk? const-decl "bool" walks nil) (prewalk type-eq-decl nil walks nil)
    (Walk type-eq-decl nil walks nil)
    (gen_seq1_is_walk formula-decl nil walks nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (empty? const-decl "bool" graphs nil))
   shostak)
  (path_or_not_path-1 nil 3358001425
   ("" (skosimp*)
    (("" (expand "path_connected?")
      (("" (bddsimp)
        (("1" (expand "empty?")
          (("1" (expand "empty?") (("1" (hide 2) (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (case "NOT edge?(G!1)(x!1,x!2) OR NOT edge?(G!1)(x!2,y!1)")
            (("1" (bddsimp)
              (("1"
                (case "NOT edge?(G!1)(x!1,y!2) OR NOT edge?(G!1)(y!2,y!1)")
                (("1" (bddsimp)
                  (("1" (hide 4)
                    (("1"
                      (inst 4 "add1(gen_seq2(complement(G!1),x!2,y!1),y!2)")
                      (("1" (install-rewrites "walks")
                        (("1" (assert) nil nil)) nil)
                       ("2" (lemma "walks[T].walk?_add1")
                        (("2"
                          (inst -1 "complement(G!1)"
                           "gen_seq2[T](complement(G!1), x!2, y!1)" "y!2")
                          (("2" (lemma "walks[T].edge_to_walk")
                            (("2" (inst -1 "complement(G!1)" "x!2" "y!1")
                              (("2" (bddsimp)
                                (("1" (hide -1 2)
                                  (("1" (install-rewrites "walks")
                                    (("1" (assert)
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (reveal -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -1 "0")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (reveal -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -1 "0")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (bddsimp)
                                                  (("2" (postpone) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (postpone) nil nil)
                                         ("4" (postpone) nil nil)
                                         ("5" (postpone) nil nil)
                                         ("6" (postpone) nil nil)
                                         ("7" (postpone) nil nil)
                                         ("8" (postpone) nil nil)
                                         ("9" (postpone) nil nil)
                                         ("10" (postpone) nil nil)
                                         ("11" (postpone) nil nil)
                                         ("12" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil)
                                 ("3" (postpone) nil nil)
                                 ("4" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (postpone) nil nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil)
               ("2" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (five_degrees_separation 0
  (five_degrees_separation-2 "not-final" 3361205662
   ("" (skosimp*)
    (("" (case "edge?(G!1)(x!1,y!1)")
      (("1" (inst 2 "gen_seq2(G!1,x!1,y!1)")
        (("1" (hide 4)
          (("1" (lemma "walks[T].edge_to_walk")
            (("1" (inst -1 "G!1" "x!1" "y!1")
              (("1" (bddsimp)
                (("1" (install-rewrites "walks") (("1" (assert) nil nil)) nil)
                 ("2" (install-rewrites "walks") (("2" (assert) nil nil)) nil)
                 ("3" (expand "edge?")
                  (("3" (assert)
                    (("3" (expand "edg") (("3" (propax) nil nil)) nil)) nil))
                  nil)
                 ("4" (expand "edge?")
                  (("4" (expand "edg") (("4" (assert) nil nil)) nil)) nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "NOT edge?(G!1)(x!2,y!2)")
        (("1" (inst 6 "gen_seq2(complement(G!1),x!2,y!2)")
          (("1" (bddsimp)
            (("1" (hide (2 3 4))
              (("1" (install-rewrites "walks") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (hide 2 4)
              (("2" (lemma "walks[T].edge_to_walk")
                (("2" (inst -1 "complement(G!1)" "x!2" "y!2")
                  (("2" (install-rewrites "walks")
                    (("2" (bddsimp)
                      (("1" (expand "walk_from?")
                        (("1" (bddsimp)
                          (("1" (hide -1 1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 1) (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide 5)
                        (("2" (assert)
                          (("2" (bddsimp)
                            (("2" (inst 1 "x!2" "y!2")
                              (("2" (typepred "x!2")
                                (("2" (typepred "y!2")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "y!2")
            (("2" (hide-all-but (-1 1))
              (("2" (assert)
                (("2" (expand "complement") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but (-1 1))
            (("3" (typepred "x!2")
              (("3" (expand "complement") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (case "x!1=x!2")
          (("1" (case "y!1=y!2")
            (("1" (hide 3 5) (("1" (grind) nil nil)) nil)
             ("2" (case "edge?(G!1)(y!1,y!2)")
              (("1" (lemma "graphs[T].edge?_comm")
                (("1" (inst -1 "G!1" "y!2" "y!1")
                  (("1" (prop)
                    (("1" (replace -3 -4 rl)
                      (("1" (hide 6)
                        (("1"
                          (inst 4 "walks[T].list2prewalk((:x!1,y!2,y!1:))")
                          (("1" (install-rewrites "walks")
                            (("1" (assert)
                              (("1" (bddsimp)
                                (("1" (skosimp*)
                                  (("1" (bddsimp)
                                    (("1" (typepred "n!1")
                                      (("1"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 -8 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 -8 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "n!1")
                                      (("2"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 7 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (typepred "x!1")
                                  (("2" (typepred "y!2")
                                    (("2" (typepred "y!1")
                                      (("2"
                                        (hide (-4 -5 -7 5))
                                        (("2"
                                          (grind)
                                          (("2"
                                            (case "i!1=0")
                                            (("1"
                                              (replace -1 5 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 6 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=2")
                                                (("1"
                                                  (replace -1 7 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (-1 -2 -4 3))
                            (("2" (install-rewrites "walks")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1 3 lr)
                (("2" (hide 5)
                  (("2" (inst 6 "walks[T].list2prewalk((:x!2,y!1,y!2:))")
                    (("1" (bddsimp)
                      (("1" (install-rewrites "walks")
                        (("1" (assert) nil nil)) nil)
                       ("2" (expand "walk_from?")
                        (("2" (bddsimp)
                          (("1" (expand "complement")
                            (("1" (expand "walk?")
                              (("1" (bddsimp)
                                (("1" (grind)
                                  (("1" (case "n!1=0")
                                    (("1" (replace -1 -6 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=1")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (case "n!1=0")
                                    (("1" (replace -1 -6 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=1")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3" (reveal 1)
                                    (("3" (case "n!1=0")
                                      (("1"
                                        (replace -1 1 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (inst 1 "x!2" "y!1")
                                            (("1"
                                              (typepred "x!2")
                                              (("1"
                                                (typepred "y!1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 2 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (inst 2 "y!1" "y!2")
                                                (("1"
                                                  (typepred "y!1")
                                                  (("1"
                                                    (typepred "y!2")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (install-rewrites "walks")
                                  (("2" (assert)
                                    (("2" (bddsimp)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (typepred "i!1")
                                          (("1"
                                            (case "i!1=0")
                                            (("1"
                                              (replace -1 * lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 * lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=2")
                                                (("1"
                                                  (replace -1 * lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (typepred "i!1")
                                          (("2"
                                            (case "i!1=0")
                                            (("1"
                                              (replace -1 * lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 * lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=2")
                                                (("1"
                                                  (replace -1 * lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (install-rewrites "walks")
                            (("2" (assert) nil nil)) nil)
                           ("3" (install-rewrites "walks")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (install-rewrites "walks") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "y!1=y!2")
            (("1" (case "edge?(G!1)(x!1,x!2)")
              (("1" (inst 4 "walks[T].list2prewalk((:x!1,x!2,y!1:))")
                (("1" (replace -2 -3 rl)
                  (("1" (hide 6)
                    (("1" (bddsimp)
                      (("1" (install-rewrites "walks")
                        (("1" (assert) nil nil)) nil)
                       ("2" (expand "walk_from?")
                        (("2" (bddsimp)
                          (("1" (expand "list2prewalk")
                            (("1" (install-rewrites "walks")
                              (("1" (assert)
                                (("1" (bddsimp)
                                  (("1" (skosimp*)
                                    (("1" (bddsimp)
                                      (("1"
                                        (typepred "n!1")
                                        (("1"
                                          (case "n!1=0")
                                          (("1"
                                            (replace -1 -7 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n!1=1")
                                            (("1"
                                              (replace -1 -7 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "n!1")
                                        (("2"
                                          (case "n!1=0")
                                          (("1"
                                            (replace -1 5 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n!1=1")
                                            (("1"
                                              (replace -1 6 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp*)
                                    (("2" (typepred "i!1")
                                      (("2"
                                        (case "i!1=0")
                                        (("1"
                                          (replace -1 5 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "i!1=1")
                                          (("1"
                                            (replace -1 6 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "i!1=2")
                                            (("1"
                                              (replace -1 7 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (install-rewrites "walks")
                            (("2" (assert) nil nil)) nil)
                           ("3" (install-rewrites "walks")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (install-rewrites "walks") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "graphs[T].edge?_comm")
                (("2" (inst -1 "G!1" "x!1" "x!2")
                  (("2" (bddsimp)
                    (("2" (replace -1 4 lr)
                      (("2" (inst 8 "walks[T].list2prewalk((:x!2,x!1,y!2:))")
                        (("1" (hide 6)
                          (("1" (install-rewrites "walks")
                            (("1" (assert)
                              (("1" (bddsimp)
                                (("1" (skosimp*)
                                  (("1" (bddsimp)
                                    (("1" (case "n!1=0")
                                      (("1"
                                        (replace -1 -7 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=0")
                                      (("1"
                                        (replace -1 -7 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (case "n!1=0")
                                      (("1"
                                        (replace -1 5 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (inst 5 "x!2" "x!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (inst 6 "x!1" "y!2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil)
                                 ("3" (skosimp*)
                                  (("3" (bddsimp)
                                    (("1" (case "n!1=0")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=0")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (case "n!1=0")
                                      (("1"
                                        (replace -1 6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (inst 6 "x!2" "x!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (inst 7 "x!1" "y!2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4" (grind) nil nil)
                                 ("5" (skosimp*)
                                  (("5" (bddsimp)
                                    (("1" (case "n!1=0")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=0")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (case "n!1=0")
                                      (("1"
                                        (replace -1 6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (inst 6 "x!2" "x!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (inst 7 "x!1" "y!2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("6" (grind) nil nil)
                                 ("7" (skosimp*)
                                  (("7" (bddsimp)
                                    (("1" (case "n!1=0")
                                      (("1"
                                        (replace -1 -5 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -5 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=0")
                                      (("1"
                                        (replace -1 -5 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -5 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (case "n!1=0")
                                      (("1"
                                        (replace -1 7 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (inst 7 "x!2" "x!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 8 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (inst 8 "x!1" "y!2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=0")
                                          (("1" (propax) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("8" (grind)
                                  (("8" (case "i!1=0")
                                    (("1" (replace -1 7 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "i!1=1")
                                      (("1"
                                        (replace -1 8 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "i!1=2")
                                        (("1"
                                          (replace -1 9 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (install-rewrites "walks")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "edge?(G!1)(x!1,x!2)")
              (("1" (case "edge?(G!1)(y!2,y!1)")
                (("1" (inst 5 "walks[T].list2prewalk((:x!1,x!2,y!2,y!1:))")
                  (("1" (install-rewrites "walks")
                    (("1" (hide 7)
                      (("1" (assert)
                        (("1" (bddsimp)
                          (("1" (skosimp*)
                            (("1" (bddsimp)
                              (("1" (grind)
                                (("1" (case "n!1=0")
                                  (("1" (replace -1 -6 lr)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (case "n!1=1")
                                    (("1" (replace -1 -6 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=2")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (grind)
                                  (("2" (case "n!1=0")
                                    (("1" (replace -1 7 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=1")
                                      (("1"
                                        (replace -1 8 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=2")
                                        (("1"
                                          (replace -1 9 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind)
                            (("2" (case "i!1=0")
                              (("1" (replace -1 7 lr)
                                (("1" (expand "nth") (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (case "i!1=1")
                                (("1" (replace -1 8 lr)
                                  (("1" (expand "nth")
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (case "i!1=2")
                                  (("1" (replace -1 9 lr)
                                    (("1" (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "i!1=3")
                                    (("1" (replace -1 10 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 7)
                    (("2" (install-rewrites "walks") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "edge?(G!1)(x!2,y!1)")
                  (("1" (inst 6 "walks[T].list2prewalk((:x!1,x!2,y!1:))")
                    (("1" (hide 8)
                      (("1" (install-rewrites "walks")
                        (("1" (assert)
                          (("1" (bddsimp)
                            (("1" (skosimp*)
                              (("1" (bddsimp)
                                (("1" (case "n!1=0")
                                  (("1" (replace -1 -7 lr)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (case "n!1=1")
                                    (("1" (replace -1 -7 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (case "n!1=0")
                                  (("1" (replace -1 7 lr)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (case "n!1=1")
                                    (("1" (replace -1 8 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2" (typepred "i!1")
                                (("2" (case "i!1=0")
                                  (("1" (replace -1 7 lr)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (case "i!1=1")
                                    (("1" (replace -1 8 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "i!1=2")
                                      (("1"
                                        (replace -1 9 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skosimp*)
                              (("3" (bddsimp)
                                (("1" (case "n!1=0")
                                  (("1" (replace -1 -6 lr)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (case "n!1=1")
                                    (("1" (replace -1 -6 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (case "n!1=0")
                                  (("1" (replace -1 8 lr)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (case "n!1=1")
                                    (("1" (replace -1 9 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (assert)
                              (("4" (skosimp*)
                                (("4" (typepred "i!1")
                                  (("4" (case "i!1=0")
                                    (("1" (replace -1 8 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "i!1=1")
                                      (("1"
                                        (replace -1 9 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "i!1=2")
                                        (("1"
                                          (replace -1 10 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 8)
                      (("2" (install-rewrites "walks")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "graphs[T].edge?_comm")
                    (("2" (inst -1 "G!1" "y!2" "y!1")
                      (("2" (bddsimp)
                        (("2"
                          (inst 10 "walks[T].list2prewalk((:x!2,y!1,y!2:))")
                          (("1" (hide 8)
                            (("1" (install-rewrites "walks")
                              (("1" (assert)
                                (("1" (bddsimp)
                                  (("1" (skosimp*)
                                    (("1" (bddsimp)
                                      (("1"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 -7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 -7 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 -7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 -7 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (inst 7 "x!2" "y!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 8 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (inst 8 "y!1" "y!2")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp*)
                                    (("2" (typepred "i!1")
                                      (("2"
                                        (case "i!1=0")
                                        (("1"
                                          (replace -1 7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "i!1=1")
                                          (("1"
                                            (replace -1 8 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "i!1=2")
                                            (("1"
                                              (replace -1 9 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil)
                                   ("4" (assert) nil nil)
                                   ("5" (assert) nil nil)
                                   ("6" (assert) nil nil)
                                   ("7" (skosimp*)
                                    (("7" (bddsimp)
                                      (("1"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 -5 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 -5 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 -5 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 -5 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (case "n!1=0")
                                          (("1"
                                            (replace -1 9 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (inst 9 "x!2" "y!1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n!1=1")
                                            (("1"
                                              (replace -1 10 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (inst 10 "y!1" "y!2")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("8" (skosimp*)
                                    (("8" (case "i!1=0")
                                      (("1"
                                        (replace -1 9 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "i!1=1")
                                        (("1"
                                          (replace -1 10 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "i!1=2")
                                          (("1"
                                            (replace -1 11 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 9)
                            (("2" (install-rewrites "walks")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (case "edge?(G!1)(x!1,y!2)")
                  (("1" (case "edge?(G!1)(y!2,y!1)")
                    (("1" (inst 6 "walks[T].list2prewalk((:x!1,y!2,y!1:))")
                      (("1" (hide 8)
                        (("1" (install-rewrites "walks")
                          (("1" (assert)
                            (("1" (bddsimp)
                              (("1" (skosimp*)
                                (("1" (bddsimp)
                                  (("1" (case "n!1=0")
                                    (("1" (replace -1 -6 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=1")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (case "n!1=0")
                                    (("1" (replace -1 7 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=1")
                                      (("1"
                                        (replace -1 8 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp*)
                                (("2" (case "i!1=0")
                                  (("1" (replace -1 7 lr)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (case "i!1=1")
                                    (("1" (replace -1 8 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "i!1")
                                      (("2"
                                        (case "i!1=2")
                                        (("1"
                                          (replace -1 9 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 8)
                        (("2" (install-rewrites "walks")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (case "edge?(G!1)(x!2,y!1)")
                      (("1" (lemma "graphs[T].edge?_comm")
                        (("1" (inst -1 "G!1" "y!2" "x!2")
                          (("1" (prop)
                            (("1"
                              (inst 7
                               "walks[T].list2prewalk((:x!1,y!2,x!2,y!1:))")
                              (("1" (hide 9)
                                (("1" (install-rewrites "walks")
                                  (("1" (assert)
                                    (("1" (bddsimp)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (case "n!1=0")
                                            (("1"
                                              (replace -1 -7 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 -7 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=2")
                                                (("1"
                                                  (replace -1 -7 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n!1=0")
                                            (("1"
                                              (replace -1 9 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 10 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1=2")
                                                (("1"
                                                  (replace -1 11 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (grind)
                                        (("2"
                                          (case "i!1=0")
                                          (("1"
                                            (replace -1 9 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "i!1=1")
                                            (("1"
                                              (replace -1 10 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=2")
                                              (("1"
                                                (replace -1 11 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=3")
                                                (("1"
                                                  (replace -1 12 lr)
                                                  (("1"
                                                    (install-rewrites "walks")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 9)
                                (("2" (install-rewrites "walks")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 10 "walks[T].list2prewalk((:x!2,y!1,y!2:))")
                        (("1" (lemma "graphs[T].edge?_comm")
                          (("1" (inst -1 "G!1" "y!2" "y!1")
                            (("1" (bddsimp)
                              (("1" (hide 9)
                                (("1" (install-rewrites "walks")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (hide 9)
                                (("2" (install-rewrites "walks")
                                  (("2" (assert)
                                    (("2" (bddsimp)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (case "n!1=0")
                                            (("1"
                                              (replace -1 -6 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 -6 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n!1=0")
                                            (("1"
                                              (replace -1 -6 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 -6 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (case "n!1=0")
                                            (("1"
                                              (replace -1 10 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (inst 10 "x!2" "y!1")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 11 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (inst 11 "y!1" "y!2")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil)
                                       ("3"
                                        (skosimp*)
                                        (("3"
                                          (bddsimp)
                                          (("1"
                                            (case "n!1=0")
                                            (("1"
                                              (replace -1 -5 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 -5 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n!1=0")
                                            (("1"
                                              (replace -1 -5 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 -5 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (case "n!1=0")
                                            (("1"
                                              (replace -1 11 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (inst 11 "x!2" "y!1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "n!1=1")
                                              (("1"
                                                (replace -1 12 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (inst 12 "y!1" "y!2")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (grind)
                                        (("4"
                                          (case "i!1=0")
                                          (("1"
                                            (replace -1 11 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "i!1=1")
                                            (("1"
                                              (replace -1 12 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=2")
                                              (("1"
                                                (replace -1 13 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (install-rewrites "walks")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "graphs[T].edge?_comm")
                    (("2" (inst -1 "G!1" "x!1" "x!2")
                      (("2" (prop)
                        (("2"
                          (inst 10 "walks[T].list2prewalk((:x!2,x!1,y!2:))")
                          (("1" (hide 8)
                            (("1" (install-rewrites "walks")
                              (("1" (assert)
                                (("1" (bddsimp)
                                  (("1" (skosimp*)
                                    (("1" (bddsimp)
                                      (("1"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 -5 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 -5 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 -5 lr)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 -5 lr)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 8 lr)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 9 lr)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil)
                                   ("3" (skosimp*)
                                    (("3" (bddsimp)
                                      (("1"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 -4 lr)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 -4 lr)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 -4 lr)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 -4 lr)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 9 lr)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 9 "x!2" "x!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 10 lr)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst 10 "x!1" "y!2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (grind)
                                    (("4" (case "i!1=0")
                                      (("1"
                                        (replace -1 9 lr)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (case "i!1=1")
                                        (("1"
                                          (replace -1 10 lr)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case "i!1=2")
                                          (("1"
                                            (replace -1 11 lr)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 9)
                            (("2" (install-rewrites "walks")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge? const-decl "bool" graphs nil) (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil)
    (edg const-decl "doubleton[T]" graphs nil)
    (walk_from? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" graph_conn_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (walk? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge_to_walk formula-decl nil walks nil)
    (gen_seq2 const-decl "Seq(G)" walks nil) (Seq type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (y!1 skolem-const-decl "(vert(G!1))" complem nil)
    (x!1 skolem-const-decl "(vert(G!1))" complem nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (list type-decl nil list_adt nil) (non_null type-eq-decl nil walks nil)
    (list2prewalk const-decl "prewalk" walks nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (edge?_comm formula-decl nil graphs nil)
    (x!2 skolem-const-decl "(vert(G!1))" complem nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (complement const-decl "graph[T]" complem nil)
    (y!2 skolem-const-decl "(vert(G!1))" complem nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (member const-decl "bool" sets nil) (difference const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak)
  (five_degrees_separation-1 nil 3361087229
   ("" (skosimp*)
    (("" (case "edge?(G!1)(x!1,y!1)")
      (("1" (inst 2 "gen_seq2(G!1,x!1,y!1)")
        (("1" (hide 4)
          (("1" (lemma "walks[T].edge_to_walk")
            (("1" (inst -1 "G!1" "x!1" "y!1")
              (("1" (bddsimp)
                (("1" (install-rewrites "walks") (("1" (assert) nil nil)) nil)
                 ("2" (install-rewrites "walks") (("2" (assert) nil nil)) nil)
                 ("3" (expand "edge?")
                  (("3" (assert)
                    (("3" (expand "edg") (("3" (propax) nil nil)) nil)) nil))
                  nil)
                 ("4" (expand "edge?")
                  (("4" (expand "edg") (("4" (assert) nil nil)) nil)) nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "NOT edge?(G!1)(x!2,y!2)")
        (("1" (inst 6 "gen_seq2(complement(G!1),x!2,y!2)")
          (("1" (bddsimp)
            (("1" (hide (2 3 4))
              (("1" (install-rewrites "walks") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (hide 2 4)
              (("2" (lemma "walks[T].edge_to_walk")
                (("2" (inst -1 "complement(G!1)" "x!2" "y!2")
                  (("2" (install-rewrites "walks")
                    (("2" (bddsimp)
                      (("1" (expand "walk_from?")
                        (("1" (bddsimp)
                          (("1" (hide -1 1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 1) (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide 5)
                        (("2" (assert)
                          (("2" (bddsimp)
                            (("2" (inst 1 "x!2" "y!2")
                              (("2" (typepred "x!2")
                                (("2" (typepred "y!2")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "y!2")
            (("2" (hide-all-but (-1 1))
              (("2" (assert)
                (("2" (expand "complement") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but (-1 1))
            (("3" (typepred "x!2")
              (("3" (expand "complement") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (case "x!1=x!2")
          (("1" (case "y!1=y!2")
            (("1" (hide 3 5) (("1" (grind) nil nil)) nil)
             ("2" (case "edge?(G!1)(y!1,y!2)")
              (("1" (lemma "graphs[T].edge?_comm")
                (("1" (inst -1 "G!1" "y!2" "y!1")
                  (("1" (prop)
                    (("1" (replace -3 -4 rl)
                      (("1" (hide 6)
                        (("1"
                          (inst 4 "walks[T].list2prewalk((:x!1,y!2,y!1:))")
                          (("1" (install-rewrites "walks")
                            (("1" (assert)
                              (("1" (bddsimp)
                                (("1" (skosimp*)
                                  (("1" (bddsimp)
                                    (("1" (typepred "n!1")
                                      (("1"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 -8 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 -8 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "n!1")
                                      (("2"
                                        (case "n!1=0")
                                        (("1"
                                          (replace -1 6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=1")
                                          (("1"
                                            (replace -1 7 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (typepred "x!1")
                                  (("2" (typepred "y!2")
                                    (("2" (typepred "y!1")
                                      (("2"
                                        (hide (-4 -5 -7 5))
                                        (("2"
                                          (grind)
                                          (("2"
                                            (case "i!1=0")
                                            (("1"
                                              (replace -1 5 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 6 lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=2")
                                                (("1"
                                                  (replace -1 7 lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (-1 -2 -4 3))
                            (("2" (install-rewrites "walks")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1 3 lr)
                (("2" (hide 5)
                  (("2" (inst 6 "walks[T].list2prewalk((:x!2,y!1,y!2:))")
                    (("1" (bddsimp)
                      (("1" (install-rewrites "walks")
                        (("1" (assert) nil nil)) nil)
                       ("2" (expand "walk_from?")
                        (("2" (bddsimp)
                          (("1" (expand "complement")
                            (("1" (expand "walk?")
                              (("1" (bddsimp)
                                (("1" (grind)
                                  (("1" (case "n!1=0")
                                    (("1" (replace -1 -6 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=1")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (case "n!1=0")
                                    (("1" (replace -1 -6 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=1")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3" (reveal 1)
                                    (("3" (case "n!1=0")
                                      (("1"
                                        (replace -1 1 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (inst 1 "x!2" "y!1")
                                            (("1"
                                              (typepred "x!2")
                                              (("1"
                                                (typepred "y!1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 2 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (inst 2 "y!1" "y!2")
                                                (("1"
                                                  (typepred "y!1")
                                                  (("1"
                                                    (typepred "y!2")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (install-rewrites "walks")
                                  (("2" (assert)
                                    (("2" (bddsimp)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (typepred "i!1")
                                          (("1"
                                            (case "i!1=0")
                                            (("1"
                                              (replace -1 * lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 * lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=2")
                                                (("1"
                                                  (replace -1 * lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (typepred "i!1")
                                          (("2"
                                            (case "i!1=0")
                                            (("1"
                                              (replace -1 * lr)
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i!1=1")
                                              (("1"
                                                (replace -1 * lr)
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "i!1=2")
                                                (("1"
                                                  (replace -1 * lr)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (install-rewrites "walks")
                            (("2" (assert) nil nil)) nil)
                           ("3" (install-rewrites "walks")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (install-rewrites "walks") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "y!1=y!2")
            (("1" (case "edge?(G!1)(x!1,x!2)")
              (("1" (inst 4 "walks[T].list2prewalk((:x!1,x!2,y!1:))")
                (("1" (replace -2 -3 rl)
                  (("1" (hide 6)
                    (("1" (bddsimp)
                      (("1" (install-rewrites "walks")
                        (("1" (assert) nil nil)) nil)
                       ("2" (expand "walk_from?")
                        (("2" (bddsimp)
                          (("1" (expand "list2prewalk")
                            (("1" (install-rewrites "walks")
                              (("1" (assert)
                                (("1" (bddsimp)
                                  (("1" (skosimp*)
                                    (("1" (bddsimp)
                                      (("1"
                                        (typepred "n!1")
                                        (("1"
                                          (case "n!1=0")
                                          (("1"
                                            (replace -1 -7 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n!1=1")
                                            (("1"
                                              (replace -1 -7 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "n!1")
                                        (("2"
                                          (case "n!1=0")
                                          (("1"
                                            (replace -1 5 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n!1=1")
                                            (("1"
                                              (replace -1 6 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp*)
                                    (("2" (typepred "i!1")
                                      (("2"
                                        (case "i!1=0")
                                        (("1"
                                          (replace -1 5 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "i!1=1")
                                          (("1"
                                            (replace -1 6 lr)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "i!1=2")
                                            (("1"
                                              (replace -1 7 lr)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (install-rewrites "walks")
                            (("2" (assert) nil nil)) nil)
                           ("3" (install-rewrites "walks")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (install-rewrites "walks") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "graphs[T].edge?_comm")
                (("2" (inst -1 "G!1" "x!1" "x!2")
                  (("2" (bddsimp)
                    (("2" (replace -1 4 lr)
                      (("2" (inst 8 "walks[T].list2prewalk((:x!2,x!1,y!2:))")
                        (("1" (hide 6)
                          (("1" (install-rewrites "walks")
                            (("1" (assert)
                              (("1" (bddsimp)
                                (("1" (skosimp*)
                                  (("1" (bddsimp)
                                    (("1" (case "n!1=0")
                                      (("1"
                                        (replace -1 -7 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=0")
                                      (("1"
                                        (replace -1 -7 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (case "n!1=0")
                                      (("1"
                                        (replace -1 5 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (inst 5 "x!2" "x!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (inst 6 "x!1" "y!2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil)
                                 ("3" (skosimp*)
                                  (("3" (bddsimp)
                                    (("1" (case "n!1=0")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=0")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (case "n!1=0")
                                      (("1"
                                        (replace -1 6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (inst 6 "x!2" "x!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (inst 7 "x!1" "y!2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4" (grind) nil nil)
                                 ("5" (skosimp*)
                                  (("5" (bddsimp)
                                    (("1" (case "n!1=0")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=0")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -6 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (case "n!1=0")
                                      (("1"
                                        (replace -1 6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (inst 6 "x!2" "x!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 7 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (inst 7 "x!1" "y!2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("6" (grind) nil nil)
                                 ("7" (skosimp*)
                                  (("7" (bddsimp)
                                    (("1" (case "n!1=0")
                                      (("1"
                                        (replace -1 -5 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -5 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=0")
                                      (("1"
                                        (replace -1 -5 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 -5 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (case "n!1=0")
                                      (("1"
                                        (replace -1 7 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (inst 7 "x!2" "x!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "n!1=1")
                                        (("1"
                                          (replace -1 8 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (inst 8 "x!1" "y!2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n!1=0")
                                          (("1" (propax) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("8" (grind)
                                  (("8" (case "i!1=0")
                                    (("1" (replace -1 7 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (case "i!1=1")
                                      (("1"
                                        (replace -1 8 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "i!1=2")
                                        (("1"
                                          (replace -1 9 lr)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (install-rewrites "walks")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "edge?(G!1)(x!1,x!2)")
              (("1" (case "edge?(G!1)(x!2,y!1)")
                (("1" (inst 5 "walks[T].list2prewalk((:x!1,x!2,y!2,y!1:))")
                  (("1" (install-rewrites "walks")
                    (("1" (hide 7)
                      (("1" (assert)
                        (("1" (bddsimp)
                          (("1" (skosimp*)
                            (("1" (bddsimp)
                              (("1" (grind)
                                (("1" (case "n!1=0")
                                  (("1" (replace -1 -6 lr)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (case "n!1=1")
                                    (("1" (replace -1 -6 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=2")
                                      (("1"
                                        (replace -1 -6 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind)
                                (("2" (case "n!1=0")
                                  (("1" (replace -1 7 lr)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (case "n!1=1")
                                    (("1" (replace -1 8 lr)
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "n!1=2")
                                      (("1"
                                        (replace -1 9 lr)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (assert)
                                                (("1" (postpone) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (paths_or_not 0
  (paths_or_not-1 nil 3361265661
   ("" (skosimp*)
    (("" (expand "path_connected?")
      (("" (bddsimp)
        (("1" (expand "empty?")
          (("1" (expand "empty?") (("1" (hide 2) (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (case "x!1=y!1")
            (("1" (inst 2 "gen_seq1(G!1,x!1)")
              (("1" (hide 3)
                (("1" (install-rewrites "walks") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (lemma "walks[T].gen_seq1_is_walk")
                (("2" (inst -1 "G!1" "x!1")
                  (("2" (typepred "x!1") (("2" (bddsimp) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (case "x!2=y!2")
              (("1" (inst 4 "gen_seq1(complement(G!1),x!2)")
                (("1" (install-rewrites "walks") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "walks[T].gen_seq1_is_walk")
                  (("2" (inst -1 "complement(G!1)" "x!2")
                    (("2" (typepred "x!2") (("2" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "five_degrees_separation")
                (("2" (inst -1 "G!1" "x!1" "y!1")
                  (("2" (bddsimp)
                    (("1" (hide 5)
                      (("1" (skosimp*)
                        (("1" (inst 4 "w!1")
                          (("1" (install-rewrites "walks")
                            (("1" (assert) (("1" (bddsimp) nil nil)) nil))
                            nil)
                           ("2" (assert)
                            (("2" (install-rewrites "walks")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -1 "x!2" "y!2")
                      (("1" (hide 4)
                        (("1" (prop)
                          (("1" (skosimp*)
                            (("1" (inst 4 "w!1")
                              (("1" (install-rewrites "walks")
                                (("1" (assert) (("1" (prop) nil nil)) nil))
                                nil)
                               ("2" (expand "walk_from?")
                                (("2" (prop) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "y!2")
                        (("2" (expand "complement") (("2" (propax) nil nil))
                          nil))
                        nil)
                       ("3" (typepred "x!2")
                        (("3" (expand "complement") (("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((path_connected? const-decl "bool" graph_conn_defs nil)
    (x!2 skolem-const-decl "(vert(complement(G!1)))" complem nil)
    (y!2 skolem-const-decl "(vert(complement(G!1)))" complem nil)
    (w!1 skolem-const-decl "prewalk[T]" complem nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (difference const-decl "set" sets nil)
    (w!1 skolem-const-decl "prewalk[T]" complem nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "finite_set[T]" graph_conn_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil)
    (walk_from? const-decl "bool" walks nil)
    (five_degrees_separation formula-decl nil complem nil)
    (x!1 skolem-const-decl "(vert(G!1))" complem nil)
    (gen_seq1 const-decl "Seq(G)" walks nil) (Seq type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (walk? const-decl "bool" walks nil) (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Walk type-eq-decl nil walks nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gen_seq1_is_walk formula-decl nil walks nil)
    (T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil) (empty? const-decl "bool" graphs nil)
    (complement const-decl "graph[T]" complem nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil))
   nil))
 (five_degrees_separated 0
  (five_degrees_separated-1 nil 3361267550
   ("" (skosimp*)
    (("" (lemma "five_degrees_separation")
      (("" (inst -1 "G!1" "x!1" "y!1")
        (("" (bddsimp)
          (("1" (inst 1 "gen_seq1(G!1,x!1)")
            (("1" (hide 2)
              (("1" (install-rewrites "walks") (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (inst -1 "x!2" "y!2")
            (("2" (prop)
              (("2" (inst 2 "gen_seq1(G!1,x!2)")
                (("2" (hide 1)
                  (("2" (install-rewrites "walks") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((five_degrees_separation formula-decl nil complem nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" graph_conn_defs nil)
    (gen_seq1 const-decl "Seq(G)" walks nil) (Seq type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (complement const-decl "graph[T]" complem nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (member const-decl "bool" sets nil) (difference const-decl "set" sets nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil))
   shostak))
 (strong_implies 0
  (strong_implies-3 "defs" 3350413889
   ("" (skosimp*)
    (("" (expand "strong_transitive?")
      (("" (expand "transitive?")
        (("" (skosimp*)
          (("" (inst -1 "x!1" "y!1" "z!1")
            (("1" (bddsimp) (("1" (assert) nil nil)) nil)
             ("2" (lemma "graphs[T].edges_vert_in")
              (("2" (inst -1 "G!1" "dbl[T](y!1,z!1)" "y!1" "z!1")
                (("1" (expand "edge?") (("1" (assert) nil nil)) nil)
                 ("2" (inst?)
                  (("2" (typepred "G!1")
                    (("2" (inst -1 "dbl[T](y!1,z!1)")
                      (("1" (expand "edge?") (("1" (assert) nil nil)) nil)
                       ("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (lemma "graphs[T].edges_vert_in")
              (("3" (inst -1 "G!1" "dbl[T](y!1,z!1)" "y!1" "z!1")
                (("1" (expand "edge?") (("1" (bddsimp) nil nil)) nil)
                 ("2" (inst?)
                  (("2" (lemma "graphs[T].edges_vert_in")
                    (("2" (inst -1 "G!1" "dbl[T](y!1,z!1)" "y!1" "z!1")
                      (("1" (expand "edge?") (("1" (assert) nil nil)) nil)
                       ("2" (inst?)
                        (("2" (lemma "graphs[T].edges_vert_in")
                          (("2" (inst -1 "G!1" "dbl[T](y!1,z!1)" "y!1" "z!1")
                            (("1" (expand "edge?") (("1" (assert) nil nil))
                              nil)
                             ("2" (inst?) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (grind)
              (("4" (lemma "graphs[T].edges_vert_in")
                (("4" (inst -1 "G!1" "dbl[T](x!1,y!1)" "x!1" "y!1")
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strong_transitive? const-decl "bool" complem nil)
    (edges_vert_in formula-decl nil graphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (edge? const-decl "bool" graphs nil)
    (nil application-judgement "finite_set[T]" graph_conn_defs nil)
    (z!1 skolem-const-decl "T" complem nil)
    (y!1 skolem-const-decl "T" complem nil)
    (T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (x!1 skolem-const-decl "T" complem nil)
    (transitive? const-decl "bool" complem nil))
   shostak)
  (strong_implies-2 "verts" 3349623591
   ("" (skosimp*)
    (("" (expand "strong_transitive?")
      (("" (expand "transitive?")
        (("" (skosimp*)
          (("" (typepred "G!1")
            (("" (copy -1)
              (("" (inst -1 "dbl[T](x!1,y!1)")
                (("1" (inst -2 "dbl[T](y!1,z!1)")
                  (("1" (expand "edge?")
                    (("1" (bddsimp)
                      (("1" (inst -5 "x!1" "y!1" "z!1")
                        (("1" (bddsimp)
                          (("1" (assert)
                            (("1" (lemma "graphs[T].edges_vert_in")
                              (("1"
                                (inst -1 "G!1" "dbl[T](y!1, z!1)" "y!1" "z!1")
                                (("1" (bddsimp) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (lemma "graphs[T].edges_vert_in")
                            (("2"
                              (inst -1 "G!1" "dbl[T](y!1, z!1)" "y!1" "z!1")
                              (("2" (bddsimp)
                                (("2" (lemma "graphs[T].edges_vert_in")
                                  (("2"
                                    (inst -1 "G!1" "dbl[T](x!1, y!1)" "x!1"
                                     "y!1")
                                    (("2" (bddsimp) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (inst 1 "y!1" "z!1")
                    (("2" (inst -2 "x!1" "y!1" "z!1")
                      (("2" (bddsimp)
                        (("1" (lemma "graphs[T].edges_vert_in")
                          (("1" (inst -1 "G!1" "dbl[T](y!1, z!1)" "y!1" "z!1")
                            (("1" (bddsimp)
                              (("1" (expand "edge?") (("1" (bddsimp) nil nil))
                                nil))
                              nil)
                             ("2" (lemma "graphs[T].edges_vert_in")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst -1 "y!1")
                          (("2" (install-rewrites "doubletons[T]")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (assert) nil nil)
                         ("4" (expand "edge?") (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "edge?")
                  (("2" (assert)
                    (("2" (assert)
                      (("2" (inst 1 "x!1" "y!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edges_vert_in formula-decl nil graphs nil)
    (edge? const-decl "bool" graphs nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil))
   shostak)
  (strong_implies-1 nil 3349545498
   ("" (skosimp*)
    (("" (expand "strong_transitive?")
      (("" (expand "transitive?")
        (("" (skosimp*)
          (("" (typepred "G!1")
            (("" (copy -1)
              (("" (inst -1 "dbl[T](x!1,y!1)")
                (("1" (inst -2 "dbl[T](y!1,z!1)")
                  (("1" (expand "edge?")
                    (("1" (bddsimp)
                      (("1" (inst -5 "x!1" "y!1" "z!1")
                        (("1" (bddsimp) (("1" (assert) nil nil)) nil)
                         ("2" (inst -4 "z!1")
                          (("2" (install-rewrites "doubletons[T]")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (inst -4 "y!1")
                          (("3" (assert)
                            (("3" (install-rewrites "doubletons[T]")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (install-rewrites "doubletons[T]")
                          (("4" (assert) (("4" (inst -2 "x!1") nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (inst 1 "y!1" "z!1")
                    (("2" (inst -2 "x!1" "y!1" "z!1")
                      (("1" (bddsimp)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
                       ("2" (typepred "G!1")
                        (("2" (inst -1 "dbl[T](y!1,z!1)")
                          (("1" (bddsimp)
                            (("1" (inst -1 "z!1")
                              (("1" (install-rewrites "doubletons[T]")
                                (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (expand "edge?") (("2" (assert) nil nil))
                              nil)
                             ("3" (assert) nil nil) ("4" (assert) nil nil))
                            nil)
                           ("2" (install-rewrites "doubletons[T]")
                            (("2" (bddsimp)
                              (("1" (typepred "G!1")
                                (("1" (inst -1 "dbl[T](y!1,z!1)")
                                  (("1" (expand "edge?")
                                    (("1" (bddsimp) nil nil)) nil)
                                   ("2" (inst 1 "y!1" "z!1")
                                    (("2" (expand "edge?")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "edge?") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (bddsimp)
                        (("1" (inst -1 "y!1")
                          (("1" (install-rewrites "doubletons[T]")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (expand "edge?") (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (expand "edge?") (("4" (bddsimp) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst 1 "x!1" "y!1")
                  (("2" (inst -2 "x!1" "y!1" "z!1")
                    (("1" (bddsimp) (("1" (assert) nil nil)) nil)
                     ("2" (expand "edge?")
                      (("2" (inst -1 "dbl[T](y!1,z!1)")
                        (("2" (bddsimp) nil nil)) nil))
                      nil)
                     ("3" (inst -1 "dbl[T](y!1,z!1)")
                      (("1" (bddsimp)
                        (("1" (inst -1 "y!1")
                          (("1" (install-rewrites "doubletons[T]")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (expand "edge?") (("2" (bddsimp) nil nil)) nil))
                        nil)
                       ("2" (inst 1 "y!1" "z!1") (("2" (assert) nil nil))
                        nil))
                      nil)
                     ("4" (inst -1 "dbl[T](x!1,y!1)")
                      (("1" (expand "edge?") (("1" (bddsimp) nil nil)) nil)
                       ("2" (typepred "G!1")
                        (("2" (expand "edge?") (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edges_vert_in formula-decl nil graphs nil)
    (edge? const-decl "bool" graphs nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (pregraph type-eq-decl nil graphs nil)
    (graph type-eq-decl nil graphs nil))
   shostak))
 (imply_strong 0
  (imply_strong-1 nil 3350414683
   ("" (skosimp*)
    (("" (expand "strong_transitive?")
      (("" (skosimp*)
        (("" (expand "transitive?")
          (("" (inst -1 "x!1" "y!1" "z!1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((strong_transitive? const-decl "bool" complem nil)
    (transitive? const-decl "bool" complem nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil))
   shostak))
 (completion_is_transitive 0
  (completion_is_transitive-4 "made strong stronger" 3349626942
   ("" (skosimp*)
    (("" (expand "strong_transitive?")
      (("" (skosimp*)
        (("" (expand "completion" 2)
          (("" (expand "edge?" 2)
            (("" (bddsimp)
              (("1" (expand "all_edges")
                (("1" (inst 2 "x!1" "z!1")
                  (("1" (expand "completion")
                    (("1" (expand "edge?")
                      (("1" (bddsimp)
                        (("1" (expand "all_edges")
                          (("1" (skosimp*)
                            (("1" (install-rewrites "doubletons")
                              (("1" (assert)
                                (("1" (grind)
                                  (("1" (lemma "doubletons[T].dbl_eq")
                                    (("1" (lemma "doubletons[T].dbl_eq")
                                      (("1"
                                        (inst -1 "x!3" "y!1" "z!1" "y!3")
                                        (("1"
                                          (inst -2 "x!2" "x!1" "y!1" "y!2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "all_edges")
                          (("2" (skosimp*)
                            (("2" (lemma "doubletons[T].dbl_eq")
                              (("2" (lemma "doubletons[T].dbl_eq")
                                (("2" (inst -2 "x!2" "x!1" "y!1" "y!2")
                                  (("2" (inst -1 "x!3" "y!1" "z!1" "y!3")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strong_transitive? const-decl "bool" complem nil)
    (completion const-decl "graph[T]" complem nil)
    (T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (dbl_eq formula-decl nil doubletons structures)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (edge? const-decl "bool" graphs nil)
    (nil application-judgement "finite_set[T]" graph_conn_defs nil))
   shostak)
  (completion_is_transitive-3 "revised strong" 3349625399
   ("" (skosimp*)
    (("" (expand "strong_transitive?")
      (("" (skosimp*)
        (("" (hide -4 -7 -8)
          (("" (expand "completion" 2)
            (("" (expand "edge?" 2)
              (("" (bddsimp)
                (("1" (expand "all_edges")
                  (("1" (inst 2 "x!1" "z!1")
                    (("1" (hide -3 -5) (("1" (grind) nil nil)) nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge? const-decl "bool" graphs nil)) shostak)
  (completion_is_transitive-2 "strong-vers" 3349601415
   ("" (skosimp*)
    (("" (expand "strong_transitive?")
      (("" (skosimp*)
        (("" (hide -1 -2)
          (("" (expand "edge?")
            (("" (bddsimp)
              (("1" (grind)
                (("1" (reveal -2)
                  (("1" (expand "edge?")
                    (("1" (bddsimp)
                      (("1" (typepred "G!1")
                        (("1" (inst -1 "dbl[T](y!1, z!1)")
                          (("1" (bddsimp)
                            (("1" (inst -1 "z!1") (("1" (assert) nil nil))
                              nil)
                             ("2" (hide 1)
                              (("2" (expand "completion")
                                (("2" (expand "all_edges")
                                  (("2" (skosimp*)
                                    (("2" (lemma "doubletons[T].dbl_eq")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (bddsimp)
                                          (("1" (ground) nil nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (reveal -1)
                  (("2" (expand "edge?")
                    (("2" (bddsimp)
                      (("2" (typepred "G!1")
                        (("2" (inst -1 "dbl[T](x!1, y!1)")
                          (("2" (bddsimp)
                            (("1" (inst -1 "x!1") (("1" (assert) nil nil))
                              nil)
                             ("2" (hide 1)
                              (("2" (expand "completion")
                                (("2" (expand "all_edges")
                                  (("2" (skosimp*)
                                    (("2" (lemma "doubletons[T].dbl_eq")
                                      (("2"
                                        (inst?)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (prop) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge? const-decl "bool" graphs nil)) shostak)
  (completion_is_transitive-1 nil 3349285756
   ("" (skosimp*)
    (("" (expand "transitive?")
      (("" (skosimp*)
        (("" (hide -1 -2)
          (("" (expand "edge?")
            (("" (bddsimp)
              (("1" (grind)
                (("1" (reveal -2)
                  (("1" (expand "edge?")
                    (("1" (bddsimp)
                      (("1" (typepred "G!1")
                        (("1" (inst -1 "dbl[T](y!1, z!1)")
                          (("1" (bddsimp)
                            (("1" (inst -1 "z!1") (("1" (assert) nil nil))
                              nil)
                             ("2" (hide 1)
                              (("2" (expand "completion")
                                (("2" (expand "all_edges")
                                  (("2" (skosimp*)
                                    (("2" (lemma "doubletons[T].dbl_eq")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (bddsimp)
                                          (("1" (ground) nil nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (reveal -1)
                  (("2" (expand "edge?")
                    (("2" (bddsimp)
                      (("2" (typepred "G!1")
                        (("2" (inst -1 "dbl[T](x!1, y!1)")
                          (("2" (bddsimp)
                            (("1" (inst -1 "x!1") (("1" (assert) nil nil))
                              nil)
                             ("2" (hide 1)
                              (("2" (expand "completion")
                                (("2" (expand "all_edges")
                                  (("2" (skosimp*)
                                    (("2" (lemma "doubletons[T].dbl_eq")
                                      (("2"
                                        (inst?)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (prop) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dbl_eq formula-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (edge? const-decl "bool" graphs nil))
   shostak))
 (trans_complem 0
  (trans_complem-10 "strong_is_same" 3350497636
   ("" (skosimp*)
    (("" (lemma "los_graph[(vert(G!1))].los_graphic")
      ((""
        (inst -1
         "lambda (r:(vert(G!1)),s:(vert(G!1))):  r=s or edge?(G!1)(r,s) "
         "lambda  (r:(vert(G!1)),s:(vert(G!1))): r=s or edge?(H!1)(r,s) ")
        (("" (bddsimp)
          (("1" (hide -3 -4 -5 2)
            (("1" (apply-extensionality 1 :hide? t)
              (("1" (apply-extensionality 1 :hide? t)
                (("1" (expand "edge?")
                  (("1" (iff)
                    (("1" (bddsimp)
                      (("1" (typepred "x!1")
                        (("1" (skosimp*)
                          (("1" (expand "completion")
                            (("1" (expand "all_edges")
                              (("1" (inst 2 "x!2" "y!1")
                                (("1" (bddsimp)
                                  (("1" (hide -3 -4)
                                    (("1" (typepred "G!1")
                                      (("1"
                                        (inst -1 "x!1")
                                        (("1"
                                          (bddsimp)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -3 -4)
                                    (("2" (typepred "G!1")
                                      (("2"
                                        (inst -1 "x!1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "x!1")
                        (("2" (skosimp*)
                          (("2" (inst -3 "x!2" "y!1")
                            (("1" (replace -1 -3 rl) (("1" (assert) nil nil))
                              nil)
                             ("2" (expand "completion")
                              (("2" (expand "all_edges")
                                (("2" (skosimp*)
                                  (("2" (lemma "doubletons[T].dbl_eq")
                                    (("2" (inst -1 "x!3" "x!2" "y!1" "y!2")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "completion")
                              (("3" (expand "all_edges")
                                (("3" (skosimp*)
                                  (("3" (lemma "doubletons[T].dbl_eq")
                                    (("3" (inst -1 "x!3" "x!2" "y!1" "y!2")
                                      (("3" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil)
           ("2" (hide -3 -4 -5 1)
            (("2" (expand "completion")
              (("2" (apply-extensionality 1 :hide? t)
                (("1" (apply-extensionality 1 :hide? t)
                  (("1" (replace -2 1 lr)
                    (("1" (hide -2)
                      (("1" (typepred "x!1")
                        (("1" (typepred "H!1")
                          (("1" (skosimp*)
                            (("1" (inst -3 "x!2" "y!1")
                              (("1" (bddsimp)
                                (("1" (expand "all_edges")
                                  (("1" (inst 2 "x!2" "y!1")
                                    (("1" (bddsimp)
                                      (("1"
                                        (inst -1 "x!1")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (inst -1 "x!1")
                                        (("2" (grind) nil nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst -1 "x!1")
                                  (("2" (expand "edge?")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (grind)
                                (("1" (install-rewrites "graphs")
                                  (("1" (typepred "H!1")
                                    (("1" (inst -1 "x!1")
                                      (("1"
                                        (replace -3 -4 rl)
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -2 "y!1")
                                              (("1"
                                                (replace -4 -2 lr)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (reveal -2)
                                  (("2" (reveal -2)
                                    (("2" (reveal -3)
                                      (("2"
                                        (delete -3)
                                        (("2"
                                          (inst -2 "x!3" "y!2")
                                          (("2"
                                            (expand "edge?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (grind)
                                (("3" (reveal -2 -3)
                                  (("3" (inst -1 "x!3" "y!2")
                                    (("3" (expand "edge?")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "all_edges_finite") (("2" (inst?) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (hide -2 -3 2 3)
            (("3" (skosimp*)
              (("3" (expand "union")
                (("3" (decompose-equality -2)
                  (("3" (expand "union")
                    (("3" (expand "member")
                      (("3" (expand "completion")
                        (("3" (expand "all_edges")
                          (("3" (decompose-equality -1)
                            (("3" (inst -1 "dbl[T](x!1,y!1)")
                              (("1" (iff)
                                (("1" (bddsimp)
                                  (("1" (expand "edge?")
                                    (("1" (assert) nil nil)) nil)
                                   ("2" (expand "edge?")
                                    (("2" (assert) nil nil)) nil)
                                   ("3" (inst?) (("3" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (expand "edge?")
            (("4" (assert)
              (("4" (hide -2 -4 2 3)
                (("4" (skosimp*)
                  (("4" (bddsimp)
                    (("1" (assert) nil nil) ("2" (assert) nil nil)
                     ("3" (install-rewrites "doubletons[T]")
                      (("3" (assert)
                        (("3" (hide -3)
                          (("3" (case "dbl[T](x!1, y!1)=dbl[T](y!1, x!1)")
                            (("1" (replace -1 -2 lr) (("1" (propax) nil nil))
                              nil)
                             ("2" (expand "dbl")
                              (("2" (assert)
                                (("2" (grind)
                                  (("2" (apply-extensionality 1 :hide? t)
                                    (("2" (iff) (("2" (bddsimp) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (hide -2 -4 2 3)
            (("5" (skosimp*)
              (("5" (expand "strong_transitive?")
                (("5" (inst -4 "x!1" "y!1" "z!1")
                  (("1" (assert)
                    (("1" (bddsimp)
                      (("1" (assert) nil nil)
                       ("2" (expand "edge?")
                        (("2" (bddsimp)
                          (("1" (replace -1 -3 rl) (("1" (propax) nil nil))
                            nil)
                           ("2" (replace -1 -3 rl) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (replace -2 -1 lr) (("3" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (bddsimp)
                    (("1" (assert) nil nil)
                     ("2" (replace -1 -2 rl) (("2" (propax) nil nil)) nil)
                     ("3" (replace -2 -1 lr) (("3" (propax) nil nil)) nil)
                     ("4" (reveal -1)
                      (("4" (hide -1)
                        (("4" (expand "edge?")
                          (("4" (lemma "graphs[T].edges_vert_in")
                            (("4"
                              (inst -1 "H!1" "dbl[T](y!1, z!1)" "y!1" "z!1")
                              (("4" (bddsimp) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (bddsimp)
                    (("1" (assert) nil nil)
                     ("2" (replace -1 -2 rl) (("2" (propax) nil nil)) nil)
                     ("3" (replace -2 -1 lr) (("3" (propax) nil nil)) nil)
                     ("4" (lemma "graphs[T].edges_vert_in")
                      (("4" (inst -1 "H!1" "dbl[T](y!1, z!1)" "y!1" "z!1")
                        (("1" (assert) nil nil)
                         ("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (lemma "graphs[T].edges_vert_in")
                    (("4" (inst -1 "H!1" "dbl[T](x!1, y!1)" "x!1" "y!1")
                      (("1" (assert) nil nil)
                       ("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (assert)
            (("6" (hide -2 -3 -4 2 3)
              (("6" (grind)
                (("6" (lemma "doubletons[T].dbl_comm")
                  (("6" (inst?)
                    (("6" (replace -1 -4 lr) (("6" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (hide -3 -4 2 3)
            (("7" (skosimp*)
              (("7" (expand "strong_transitive?")
                (("7" (inst -4 "x!1" "y!1" "z!1")
                  (("7" (assert)
                    (("7" (bddsimp)
                      (("1" (assert) nil nil)
                       ("2" (replace -1 -2 rl) (("2" (propax) nil nil)) nil)
                       ("3" (replace -2 -1 lr) (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil)
    (los_graphic formula-decl nil los_graph nil)
    (completion const-decl "graph[T]" complem nil)
    (nil application-judgement "finite_set[T]" graph_conn_defs nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dbl_eq formula-decl nil doubletons structures)
    (y!1 skolem-const-decl "T" complem nil)
    (x!2 skolem-const-decl "T" complem nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (all_edges_finite formula-decl nil complem nil)
    (x!2 skolem-const-decl "T" complem nil)
    (y!1 skolem-const-decl "T" complem nil)
    (is_finite const-decl "bool" finite_sets nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (x!1 skolem-const-decl "(vert(G!1))" complem nil)
    (y!1 skolem-const-decl "(vert(G!1))" complem nil)
    (union const-decl "graph[T]" graph_ops nil)
    (strong_transitive? const-decl "bool" complem nil)
    (H!1 skolem-const-decl "graph[T]" complem nil)
    (x!1 skolem-const-decl "(vert(G!1))" complem nil)
    (y!1 skolem-const-decl "(vert(G!1))" complem nil)
    (z!1 skolem-const-decl "(vert(G!1))" complem nil)
    (edges_vert_in formula-decl nil graphs nil)
    (dbl_comm formula-decl nil doubletons structures)
    (edge? const-decl "bool" graphs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil))
   shostak)
  (trans_complem-9 "Right proof" 3349629179
   ("" (skosimp*)
    (("" (use "los_graphic")
      ((""
        (inst -1
         "lambda (r:T,s:T): vert(G!1)(r) AND vert(G!1)(s) implies r=s or edge?(G!1)(r,s) "
         "lambda (r:T,s:T): vert(H!1)(r) AND vert(H!1)(s) implies r=s or edge?(H!1)(r,s) ")
        (("" (bddsimp)
          (("1" (hide -3 -4 -5 2)
            (("1" (apply-extensionality 1 :hide? t)
              (("1" (apply-extensionality 1 :hide? t)
                (("1" (expand "edge?")
                  (("1" (iff)
                    (("1" (bddsimp)
                      (("1" (typepred "x!1")
                        (("1" (skosimp*)
                          (("1" (expand "completion")
                            (("1" (expand "all_edges")
                              (("1" (inst 2 "x!2" "y!1")
                                (("1" (bddsimp)
                                  (("1" (hide -3 -4)
                                    (("1" (typepred "G!1")
                                      (("1"
                                        (inst -1 "x!1")
                                        (("1"
                                          (bddsimp)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -3 -4)
                                    (("2" (typepred "G!1")
                                      (("2"
                                        (inst -1 "x!1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "x!1")
                        (("2" (skosimp*)
                          (("2" (inst -3 "x!2" "y!1")
                            (("2" (bddsimp)
                              (("1" (replace -1 -4 rl)
                                (("1" (propax) nil nil)) nil)
                               ("2" (expand "completion")
                                (("2" (expand "all_edges")
                                  (("2" (skosimp*)
                                    (("2" (lemma "doubletons[T].dbl_eq")
                                      (("2"
                                        (inst -1 "x!3" "x!2" "y!1" "y!2")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (expand "completion")
                                (("3" (expand "all_edges")
                                  (("3" (skosimp*)
                                    (("3" (lemma "doubletons[T].dbl_eq")
                                      (("3"
                                        (inst -1 "x!3" "x!2" "y!1" "y!2")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil)
           ("2" (hide -3 -4 -5 1)
            (("2" (expand "completion")
              (("2" (apply-extensionality 1 :hide? t)
                (("2" (apply-extensionality 1 :hide? t)
                  (("2" (replace -2 1 lr)
                    (("2" (hide -2)
                      (("2" (typepred "x!1")
                        (("2" (typepred "H!1")
                          (("2" (skosimp*)
                            (("2" (inst -3 "x!2" "y!1")
                              (("2" (bddsimp)
                                (("1" (expand "all_edges")
                                  (("1" (inst 2 "x!2" "y!1")
                                    (("1" (bddsimp)
                                      (("1"
                                        (inst -1 "x!1")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (inst -1 "x!1")
                                        (("2" (grind) nil nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst -1 "x!1")
                                  (("2" (assert)
                                    (("2" (inst -1 "y!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1 1 lr)
                                          (("2"
                                            (expand "dbl")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (inst -1 "x!1")
                                  (("3" (bddsimp)
                                    (("3" (inst -2 "x!2")
                                      (("3"
                                        (hide 2)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4" (expand "edge?")
                                  (("4" (bddsimp)
                                    (("4" (replace -2 -5 rl)
                                      (("4" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("5" (hide -1)
                                  (("5" (expand "all_edges")
                                    (("5" (skosimp*)
                                      (("5"
                                        (lemma "doubletons[T].dbl_eq")
                                        (("5"
                                          (inst -1 "x!3" "x!2" "y!1" "y!2")
                                          (("5"
                                            (bddsimp)
                                            (("1"
                                              (replace -2 -6 rl)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (replace -2 -5 rl)
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (replace -1 1 rl)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("6" (expand "all_edges")
                                  (("6" (skosimp*)
                                    (("6" (hide -1)
                                      (("6"
                                        (lemma "doubletons[T].dbl_eq")
                                        (("6"
                                          (inst -1 "x!3" "x!2" "y!1" "y!2")
                                          (("6"
                                            (bddsimp)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (lemma "doubletons[T].dbl_eq")
                                              (("2"
                                                (inst
                                                 -1
                                                 "x!3"
                                                 "x!2"
                                                 "y!1"
                                                 "y!2")
                                                (("2"
                                                  (bddsimp)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (replace -1 1 rl)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide -2 -3 2 3)
            (("3" (skosimp*)
              (("3" (grind)
                (("3" (hide -4)
                  (("3" (expand "union")
                    (("3" (expand "member")
                      (("3" (expand "all_edges")
                        (("3" (decompose-equality -4)
                          (("3" (inst -1 "dbl[T](x!1, y!1)")
                            (("3" (iff)
                              (("3" (bddsimp)
                                (("3" (inst 3 "x!1" "y!1")
                                  (("3" (bddsimp) (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide -2 -4 2 3)
            (("4" (skosimp*)
              (("4" (bddsimp)
                (("1" (assert) nil nil)
                 ("2" (expand "edge?")
                  (("2" (assert)
                    (("2" (install-rewrites "doubletons[T]")
                      (("2" (hide -5)
                        (("2" (assert)
                          (("2" (case "dbl[T](x!1, y!1)=dbl[T](y!1, x!1)")
                            (("1" (replace -1 -4 lr) (("1" (propax) nil nil))
                              nil)
                             ("2" (lemma "doubletons[T].dbl_comm")
                              (("2" (inst -1 "x!1" "y!1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (hide -2 -4 2 3)
            (("5" (skosimp*)
              (("5" (expand "strong_transitive?")
                (("5" (inst -6 "x!1" "y!1" "z!1") (("5" (bddsimp) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (assert)
            (("6" (hide -2 -3 -4 2 3)
              (("6" (grind)
                (("6" (lemma "doubletons[T].dbl_comm")
                  (("6" (inst?)
                    (("6" (replace -1 -2 lr) (("6" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (hide -3 -4 2 3)
            (("7" (skosimp*)
              (("7" (expand "strong_transitive?")
                (("7" (inst -6 "x!1" "y!1" "z!1") (("7" (bddsimp) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (los_graphic formula-decl nil los_graph nil)
    (dbl_eq formula-decl nil doubletons structures)
    (union const-decl "graph[T]" graph_ops nil)
    (edges_vert_in formula-decl nil graphs nil)
    (dbl_comm formula-decl nil doubletons structures)
    (edge? const-decl "bool" graphs nil))
   shostak)
  (trans_complem-8 "fancy" 3349624682
   ("" (skosimp*)
    (("" (use "los_graphic")
      ((""
        (inst -1
         "lambda (r:T,s:T): vert(G!1)(r) AND vert(G!1)(s) implies r=s or edge?(G!1)(r,s) "
         "lambda (r:T,s:T): vert(H!1)(r) AND vert(H!1)(s) implies r=s or edge?(H!1)(r,s) ")
        (("" (bddsimp)
          (("1" (hide -3 -4 -5 2)
            (("1" (apply-extensionality 1 :hide? t)
              (("1" (apply-extensionality 1 :hide? t)
                (("1" (expand "edge?")
                  (("1" (iff)
                    (("1" (bddsimp)
                      (("1" (typepred "x!1")
                        (("1" (skosimp*)
                          (("1" (expand "completion")
                            (("1" (expand "all_edges")
                              (("1" (inst 2 "x!2" "y!1")
                                (("1" (bddsimp)
                                  (("1" (hide -3 -4)
                                    (("1" (typepred "G!1")
                                      (("1"
                                        (inst -1 "x!1")
                                        (("1"
                                          (bddsimp)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -3 -4)
                                    (("2" (typepred "G!1")
                                      (("2"
                                        (inst -1 "x!1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "x!1")
                        (("2" (skosimp*)
                          (("2" (inst -3 "x!2" "y!1")
                            (("2" (bddsimp)
                              (("1" (replace -1 -4 rl)
                                (("1" (propax) nil nil)) nil)
                               ("2" (expand "completion")
                                (("2" (expand "all_edges")
                                  (("2" (skosimp*)
                                    (("2" (lemma "doubletons[T].dbl_eq")
                                      (("2"
                                        (inst -1 "x!3" "x!2" "y!1" "y!2")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (expand "completion")
                                (("3" (expand "all_edges")
                                  (("3" (skosimp*)
                                    (("3" (lemma "doubletons[T].dbl_eq")
                                      (("3"
                                        (inst -1 "x!3" "x!2" "y!1" "y!2")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil)
           ("2" (hide -3 -4 -5 1)
            (("2" (expand "completion")
              (("2" (apply-extensionality 1 :hide? t)
                (("2" (apply-extensionality 1 :hide? t)
                  (("2" (replace -2 1 lr)
                    (("2" (hide -2)
                      (("2" (typepred "x!1")
                        (("2" (typepred "H!1")
                          (("2" (skosimp*)
                            (("2" (inst -3 "x!2" "y!1")
                              (("2" (bddsimp)
                                (("1" (expand "all_edges")
                                  (("1" (inst 2 "x!2" "y!1")
                                    (("1" (bddsimp)
                                      (("1"
                                        (inst -1 "x!1")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (inst -1 "x!1")
                                        (("2" (grind) nil nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst -1 "x!1")
                                  (("2" (assert)
                                    (("2" (inst -1 "y!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1 1 lr)
                                          (("2"
                                            (expand "dbl")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (inst -1 "x!1")
                                  (("3" (bddsimp)
                                    (("3" (inst -2 "x!2")
                                      (("3"
                                        (hide 2)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4" (expand "edge?")
                                  (("4" (bddsimp)
                                    (("4" (replace -2 -5 rl)
                                      (("4" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("5" (hide -1)
                                  (("5" (expand "all_edges")
                                    (("5" (skosimp*)
                                      (("5"
                                        (lemma "doubletons[T].dbl_eq")
                                        (("5"
                                          (inst -1 "x!3" "x!2" "y!1" "y!2")
                                          (("5"
                                            (bddsimp)
                                            (("1"
                                              (replace -2 -6 rl)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (replace -2 -5 rl)
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (replace -1 1 rl)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("6" (expand "all_edges")
                                  (("6" (skosimp*)
                                    (("6" (hide -1)
                                      (("6"
                                        (lemma "doubletons[T].dbl_eq")
                                        (("6"
                                          (inst -1 "x!3" "x!2" "y!1" "y!2")
                                          (("6"
                                            (bddsimp)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (lemma "doubletons[T].dbl_eq")
                                              (("2"
                                                (inst
                                                 -1
                                                 "x!3"
                                                 "x!2"
                                                 "y!1"
                                                 "y!2")
                                                (("2"
                                                  (bddsimp)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (replace -1 1 rl)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide -2 -3 2 3)
            (("3" (skosimp*)
              (("3" (grind)
                (("3" (hide -4)
                  (("3" (expand "union")
                    (("3" (expand "member")
                      (("3" (expand "all_edges")
                        (("3" (decompose-equality -4)
                          (("3" (inst -1 "dbl[T](x!1, y!1)")
                            (("3" (iff)
                              (("3" (bddsimp)
                                (("3" (inst 3 "x!1" "y!1")
                                  (("3" (bddsimp) (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide -2 -4 2 3)
            (("4" (skosimp*)
              (("4" (bddsimp)
                (("1" (assert) nil nil)
                 ("2" (expand "edge?")
                  (("2" (assert)
                    (("2" (install-rewrites "doubletons[T]")
                      (("2" (hide -5)
                        (("2" (assert)
                          (("2" (case "dbl[T](x!1, y!1)=dbl[T](y!1, x!1)")
                            (("1" (replace -1 -4 lr) (("1" (propax) nil nil))
                              nil)
                             ("2" (lemma "doubletons[T].dbl_comm")
                              (("2" (inst -1 "x!1" "y!1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (hide -2 -4 2 3)
            (("5" (skosimp*)
              (("5" (expand "strong_transitive?")
                (("5" (inst -6 "x!1" "y!1" "z!1")
                  (("5" (bddsimp)
                    (("1" (assert) nil nil)
                     ("2" (replace -2 -4 rl) (("2" (propax) nil nil)) nil)
                     ("3" (replace -4 -2 lr) (("3" (propax) nil nil)) nil)
                     ("4" (grind) (("4" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (postpone) nil nil) ("7" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((dbl_eq formula-decl nil doubletons structures)
    (union const-decl "graph[T]" graph_ops nil)
    (dbl_comm formula-decl nil doubletons structures)
    (edge? const-decl "bool" graphs nil) (graph type-eq-decl nil graphs nil)
    (pregraph type-eq-decl nil graphs nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures))
   shostak)
  (trans_complem-7 "new vert" 3349615434
   ("" (skosimp*)
    (("" (use "los_graphic")
      ((""
        (inst -1
         "lambda (r:(vert(G!1)),s:(vert(G!1))): r=s or edge?(G!1)(r,s) "
         "lambda (r:(vert(H!1)),s:(vert(H!1))): r=s or edge?(H!1)(r,s) ")
        (("" (bddsimp)
          (("1" (hide -3 -4 -5 2)
            (("1" (apply-extensionality 1 :hide? t)
              (("1" (apply-extensionality 1 :hide? t)
                (("1" (expand "edge?")
                  (("1" (iff)
                    (("1" (bddsimp)
                      (("1" (typepred "x!1")
                        (("1" (skosimp*)
                          (("1" (expand "completion")
                            (("1" (expand "all_edges")
                              (("1" (inst 2 "x!2" "y!1")
                                (("1" (bddsimp)
                                  (("1" (hide -3 -4)
                                    (("1" (typepred "G!1")
                                      (("1"
                                        (inst -1 "x!1")
                                        (("1"
                                          (bddsimp)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -3 -4)
                                    (("2" (typepred "G!1")
                                      (("2"
                                        (inst -1 "x!1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "x!1")
                        (("2" (skosimp*)
                          (("2" (inst -3 "x!2" "y!1")
                            (("2" (expand "extend")
                              (("2" (lemma "graphs[T].edges_vert_in")
                                (("2"
                                  (inst -1 "completion(G!1)" "x!1" "x!2"
                                   "y!1")
                                  (("2" (bddsimp)
                                    (("2" (replace -1 -8 rl)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "completion") (("2" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (hide -3 -4 -5 1)
            (("2" (expand "completion")
              (("2" (apply-extensionality 1 :hide? t)
                (("2" (apply-extensionality 1 :hide? t)
                  (("2" (replace -2 1 lr)
                    (("2" (hide -2)
                      (("2" (typepred "x!1")
                        (("2" (typepred "H!1")
                          (("2" (skosimp*)
                            (("2" (inst -3 "x!2" "y!1")
                              (("2" (bddsimp)
                                (("1" (expand "all_edges")
                                  (("1" (inst 2 "x!2" "y!1")
                                    (("1" (bddsimp)
                                      (("1"
                                        (inst -1 "x!1")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (inst -1 "x!1")
                                        (("2" (grind) nil nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst -1 "x!1")
                                  (("2" (assert)
                                    (("2" (expand "extend")
                                      (("2"
                                        (hide -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide -2 -3 2 3)
            (("3" (skosimp*)
              (("3" (grind)
                (("1" (hide -2) (("1" (postpone) nil nil)) nil)
                 ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                nil))
              nil))
            nil)
           ("4" (postpone) nil nil) ("5" (postpone) nil nil)
           ("6" (postpone) nil nil) ("7" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (t_close_TCC1 0
  (t_close_TCC1-1 nil 3349204238
   ("" (skosimp*)
    (("" (inst 1 "completion(G!1)")
      (("" (lemma "completion_is_transitive")
        (("" (inst -1 "G!1")
          (("" (bddsimp)
            (("1" (hide -1)
              (("1" (ground)
                (("1" (expand "super")
                  (("1" (assert)
                    (("1" (expand "completion")
                      (("1" (expand "subgraph?")
                        (("1" (assert)
                          (("1" (bddsimp)
                            (("1" (expand "subset?")
                              (("1" (skosimp*)
                                (("1" (expand "member")
                                  (("1" (expand "all_edges")
                                    (("1" (typepred "x!1")
                                      (("1"
                                        (tcc)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (lemma "graphs[T].edges_vert_in")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (inst?)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "graphs[T].edges_vert_in")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "subset?")
                              (("2" (skosimp*) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (completion const-decl "graph[T]" complem nil)
    (super const-decl "bool" complem nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (edges_vert_in formula-decl nil graphs nil)
    (nil application-judgement "finite_set[T]" graph_conn_defs nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (completion_is_transitive formula-decl nil complem nil))
   nil
   (t_close assuming
    "ints@abstract_min[graph[T], graph_ops[complem.T].num_edges, (LAMBDA (H: graphs[complem.T].graph): booleans.AND(vert(H) = vert(complem.G), booleans.AND(complem.super(complem.G)(H), complem.strong_transitive?(H))))].abstract_min"
    "T_ne: ASSUMPTION EXISTS (t: abstract_min.T): abstract_min.P(t)")))
 (t_close_1 0
  (t_close_1-1 nil 3349693972
   ("" (skosimp*)
    (("" (expand "t_close")
      ((""
        (lemma "abstract_min[graph[T], num_edges[T],
                LAMBDA (H: graph[T]):vert(H)=vert(G!1) and super(G!1)(H) AND strong_transitive?(H)].min_in")
        (("" (replace -2 -1 rl) (("" (beta -1) (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((t_close const-decl "graph[T]" complem nil)
    (min_in formula-decl nil abstract_min ints)
    (T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (num_edges const-decl "nat" graph_ops nil)
    (super const-decl "bool" complem nil)
    (strong_transitive? const-decl "bool" complem nil))
   shostak))
 (t_close_2 0
  (t_close_2-2 "verts" 3349699280
   ("" (skosimp*)
    ((""
      (lemma "abstract_min[graph[T], num_edges[T],
                LAMBDA (H: graph[T]):vert(H)=vert(G!1) and super(G!1)(H) AND strong_transitive?(H)].min_is_min")
      (("" (expand "t_close")
        (("" (inst -1 "K!1")
          (("" (bddsimp) (("" (replace -5 -4 rl) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strong_transitive? const-decl "bool" complem nil)
    (super const-decl "bool" complem nil)
    (num_edges const-decl "nat" graph_ops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil)
    (min_is_min formula-decl nil abstract_min ints)
    (t_close const-decl "graph[T]" complem nil))
   shostak)
  (t_close_2-1 nil 3349694405
   ("" (skosimp*)
    ((""
      (lemma "abstract_min[graph[T], num_edges[T],
            LAMBDA (H: graph[T]): super(G!1)(H) AND strong_transitive?(H)].min_is_min")
      (("" (expand "t_close")
        (("" (inst -1 "K!1")
          (("" (bddsimp) (("" (replace -4 -3 rl) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_edges const-decl "nat" graph_ops nil)
    (graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures))
   shostak))
 (t_close_3 0
  (t_close_3-1 nil 3349699400
   ("" (skosimp*)
    (("" (expand "subgraph?")
      (("" (bddsimp)
        (("1" (expand "subset?")
          (("1" (expand "member")
            (("1" (skosimp*)
              (("1" (lemma "t_close_1")
                (("1" (inst -1 "G!1" "t_close(G!1)")
                  (("1" (bddsimp)
                    (("1" (expand "super")
                      (("1" (typepred "completion(G!1)")
                        (("1" (inst -1 "x!1")
                          (("1" (bddsimp)
                            (("1" (hide -3)
                              (("1" (typepred "t_close(G!1)")
                                (("1" (inst -1 "x!1")
                                  (("1" (bddsimp)
                                    (("1" (typepred "x!1")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (copy -3)
                                          (("1"
                                            (inst -1 "x!2")
                                            (("1"
                                              (inst -4 "y!1")
                                              (("1"
                                                (case "x!1(x!2) and x!1(y!1)")
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (replace -7 * lr)
                                                    (("1"
                                                      (hide -1 -2 -5 -7 -8)
                                                      (("1" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -3 -4 -5 -6 3)
                                                  (("2"
                                                    (install-rewrites
                                                     "doubletons[T]")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (expand "member")
            (("2" (skosimp*)
              (("2" (lemma "t_close_1")
                (("2" (inst -1 "G!1" "t_close(G!1)")
                  (("2" (bddsimp)
                    (("2" (replace -1 -4 lr)
                      (("2" (hide -1 -2 -3) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subgraph? const-decl "bool" subgraphs nil)
    (subset? const-decl "bool" sets nil) (T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (t_close const-decl "graph[T]" complem nil)
    (super const-decl "bool" complem nil)
    (dbl_in formula-decl nil doubletons structures)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (nil application-judgement "finite_set[T]" graph_conn_defs nil)
    (completion const-decl "graph[T]" complem nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (t_close_1 formula-decl nil complem nil)
    (member const-decl "bool" sets nil))
   shostak))
 (trans_fill 0
  (trans_fill-2 "lost" 3349710864
   ("" (skosimp*)
    (("" (lemma "t_close_1")
      (("" (copy -1)
        (("" (inst -1 "G!1" "t_close(G!1)")
          (("" (inst -2 "H!1" "t_close(H!1)")
            (("" (bddsimp)
              (("" (hide -2 -5)
                (("" (apply-extensionality 1 :hide? t)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (iff 1)
                      (("1" (bddsimp)
                        (("1" (typepred "x!1")
                          (("1" (skosimp*)
                            (("1" (expand "union" -2)
                              (("1" (expand "union" -2)
                                (("1" (expand "member")
                                  (("1" (typepred "t_close(G!1)")
                                    (("1" (inst -1 "dbl[T](x!2, y!1)")
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (copy -1)
                                          (("1"
                                            (inst -1 "x!2")
                                            (("1"
                                              (inst -2 "y!1")
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (replace -5 * lr)
                                                  (("1"
                                                    (hide -4 -5 -6 -7 -8 -10)
                                                    (("1"
                                                      (install-rewrites
                                                       "doubletons[T]")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (bddsimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (copy -1)
                                                  (("2"
                                                    (replace -5 * lr)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (install-rewrites
                                                         "doubletons[T]")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (install-rewrites
                                                   "doubletons[T]")
                                                  (("3" (assert) nil nil))
                                                  nil)
                                                 ("4"
                                                  (install-rewrites
                                                   "doubletons[T]")
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (copy -1)
                                          (("2"
                                            (inst -1 "x!2")
                                            (("2"
                                              (inst -2 "y!1")
                                              (("2"
                                                (install-rewrites
                                                 "doubletons[T]")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst?)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (replace -1 -2 lr)
                                          (("3" (propax) nil nil))
                                          nil)
                                         ("4"
                                          (replace -1 -2 lr)
                                          (("4"
                                            (typepred "t_close(H!1)")
                                            (("4"
                                              (inst -1 "x!1")
                                              (("4"
                                                (replace -2 -1 lr)
                                                (("4"
                                                  (bddsimp)
                                                  (("4"
                                                    (copy -2)
                                                    (("4"
                                                      (inst -1 "x!2")
                                                      (("4"
                                                        (inst -3 "y!1")
                                                        (("4"
                                                          (install-rewrites
                                                           "doubletons[T]")
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (inst?)
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -3 -5)
                          (("2" (expand "completion")
                            (("2" (expand "union")
                              (("2" (bddsimp)
                                (("2" (hide -5)
                                  (("2" (decompose-equality -5)
                                    (("2" (inst -1 "x!1")
                                      (("2"
                                        (iff)
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (lemma "t_close_3")
                                            (("2"
                                              (lemma "t_close_1")
                                              (("2"
                                                (lemma "t_close_1")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "G!1"
                                                   "t_close(G!1)")
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "H!1"
                                                     "t_close(H!1)")
                                                    (("2"
                                                      (hide -3)
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand "super")
                                                          (("2"
                                                            (expand
                                                             "subgraph?")
                                                            (("2"
                                                              (bddsimp)
                                                              (("2"
                                                                (hide -2 -6)
                                                                (("2"
                                                                  (hide -3 -6)
                                                                  (("2"
                                                                    (expand
                                                                     "union")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (expand
                                                                         "subset?")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (inst
                                                                             -2
                                                                             "x!1")
                                                                            (("2"
                                                                              (inst
                                                                               -4
                                                                               "x!1")
                                                                              (("2"
                                                                                (bddsimp)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2 -4) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((t_close_1 formula-decl nil complem nil)
    (T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (t_close const-decl "graph[T]" complem nil)
    (completion const-decl "graph[T]" complem nil)
    (union const-decl "graph[T]" graph_ops nil)
    (super const-decl "bool" complem nil) (subset? const-decl "bool" sets nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (t_close_3 formula-decl nil complem nil)
    (is_finite const-decl "bool" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (nil application-judgement "finite_set[T]" graph_conn_defs nil)
    (x!2 skolem-const-decl "T" complem nil)
    (y!1 skolem-const-decl "T" complem nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (edge? const-decl "bool" graphs nil)
    (strong_transitive? const-decl "bool" complem nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (union const-decl "set" sets nil))
   shostak)
  (trans_fill-1 nil 3349694597
   ("" (skosimp*)
    (("" (lemma "t_close_1")
      (("" (copy -1)
        (("" (inst -1 "G!1" "t_close(G!1)")
          (("" (inst -2 "H!1" "t_close(H!1)")
            (("" (bddsimp)
              (("" (hide -2 -4)
                (("" (expand "super")
                  (("" (apply-extensionality 1 :hide? t)
                    (("1" (apply-extensionality 1 :hide? t)
                      (("1" (iff 1)
                        (("1" (bddsimp)
                          (("1" (typepred "x!1")
                            (("1" (skosimp*)
                              (("1" (replace -1 -2 lr)
                                (("1" (expand "union" -2)
                                  (("1" (expand "union" -2)
                                    (("1" (expand "member")
                                      (("1"
                                        (typepred "t_close(G!1)")
                                        (("1"
                                          (inst -1 "dbl[T](x!2, y!1)")
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (copy -2)
                                              (("1"
                                                (inst -1 "x!2")
                                                (("1"
                                                  (inst -3 "y!1")
                                                  (("1"
                                                    (hide -2 -5 -6 -8)
                                                    (("1"
                                                      (install-rewrites
                                                       "doubletons[T]")
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (complem_fill 0
  (complem_fill-1 nil 3349777572
   ("" (skosimp*)
    (("" (lemma "trans_complem")
      (("" (lemma "trans_fill")
        (("" (inst -1 "G!1" "H!1")
          (("" (inst -2 "t_close(G!1)" "t_close(H!1)")
            (("" (lemma "t_close_1")
              (("" (lemma "t_close_1")
                (("" (inst -1 "G!1" "t_close(G!1)")
                  (("" (inst -2 "H!1" "t_close(H!1)")
                    (("" (assert)
                      (("" (bddsimp)
                        (("1" (hide-all-but (-8 1))
                          (("1" (install-rewrites "complem")
                            (("1" (lemma "t_close_3")
                              (("1" (inst -1 "G!1")
                                (("1" (reveal -2 -3)
                                  (("1" (expand "super")
                                    (("1" (hide -3)
                                      (("1"
                                        (expand "completion")
                                        (("1"
                                          (replace -1 -3 lr)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-4 -5 -8 -9 2))
                          (("2" (expand "super")
                            (("2" (expand "completion")
                              (("2" (reveal -1)
                                (("2" (replace -1 -4 lr)
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but (-1 -7 -8 1))
                          (("3" (expand "completion")
                            (("3" (replace -1 1 lr) (("3" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trans_complem formula-decl nil complem nil)
    (T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (t_close_1 formula-decl nil complem nil)
    (t_close_3 formula-decl nil complem nil)
    (completion const-decl "graph[T]" complem nil)
    (super const-decl "bool" complem nil)
    (t_close const-decl "graph[T]" complem nil)
    (trans_fill formula-decl nil complem nil))
   shostak))
 (subgraph_conn 0
  (subgraph_conn-1 nil 3349797681
   ("" (skosimp*)
    (("" (lemma "graph_connected[T].conn_eq_path")
      (("" (copy -1)
        (("" (inst -1 "H!1")
          (("" (iff)
            (("" (bddsimp)
              (("" (hide -1)
                (("" (inst -2 "G!1")
                  (("" (bddsimp)
                    (("" (hide 1)
                      (("" (expand "path_connected?")
                        (("" (bddsimp)
                          (("1" (hide -1)
                            (("1" (expand "empty?")
                              (("1" (replace -3 -1 rl)
                                (("1" (propax) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (inst -1 "x!1" "y!1")
                              (("1" (skosimp*)
                                (("1" (inst 2 "w!1")
                                  (("1" (assert) nil nil)
                                   ("2" (expand "walk?")
                                    (("2" (typepred "w!1")
                                      (("2"
                                        (expand "walk?")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (bddsimp)
                                            (("1"
                                              (expand "subgraph?")
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (expand "edge?")
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (inst
                                                             -8
                                                             "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))")
                                                            (("1"
                                                              (inst -3 "n!1")
                                                              (("1"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst -3 "n!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "verts_in?")
                                              (("2"
                                                (replace -7 -2 lr)
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (typepred "y!1")
                                (("2" (replace -3 -1 rl)
                                  (("2" (propax) nil nil)) nil))
                                nil)
                               ("3" (typepred "x!1")
                                (("3" (replace -3 -1 rl)
                                  (("3" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil complem nil)
    (conn_eq_path formula-decl nil graph_connected nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil) (empty? const-decl "bool" graphs nil)
    (x!1 skolem-const-decl "(vert(G!1))" complem nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (H!1 skolem-const-decl "graph[T]" complem nil)
    (y!1 skolem-const-decl "(vert(G!1))" complem nil)
    (w!1 skolem-const-decl "Walk[T](H!1)" complem nil)
    (Walk type-eq-decl nil walks nil) (walk? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (verts_in? const-decl "bool" walks nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edge? const-decl "bool" graphs nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (path_connected? const-decl "bool" graph_conn_defs nil))
   shostak))
 (complete_conn 0
  (complete_conn-1 nil 3350731049
   ("" (skosimp*)
    (("" (lemma "graph_path_conn[T].path_implies_conn")
      (("" (inst?)
        (("" (bddsimp)
          (("" (hide 2)
            (("" (expand "path_connected?")
              (("" (bddsimp)
                (("1" (expand "empty?")
                  (("1" (expand "completion") (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (case "NOT x!1=y!1")
                    (("1" (inst 2 "gen_seq2(completion(G!1),x!1,y!1)")
                      (("1" (install-rewrites "walks[T]")
                        (("1" (assert) nil nil)) nil)
                       ("2" (expand "walk?")
                        (("2" (expand "finseq_appl")
                          (("2" (bddsimp)
                            (("1" (skosimp*)
                              (("1" (expand "gen_seq2")
                                (("1" (typepred "n!1")
                                  (("1" (case "n!1=0")
                                    (("1" (lift-if 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "completion")
                                          (("1"
                                            (expand "all_edges")
                                            (("1"
                                              (expand "edge?")
                                              (("1"
                                                (inst 1 "x!1" "y!1")
                                                (("1"
                                                  (typepred "x!1")
                                                  (("1"
                                                    (typepred "y!1")
                                                    (("1"
                                                      (expand "completion")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind :defs nil) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst 1 "gen_seq1(completion(G!1),x!1)")
                      (("1" (expand "gen_seq1") (("1" (propax) nil nil)) nil)
                       ("2" (expand "walk?")
                        (("2" (expand "finseq_appl")
                          (("2" (bddsimp)
                            (("1" (expand "gen_seq1") (("1" (propax) nil nil))
                              nil)
                             ("2" (expand "verts_in?")
                              (("2" (expand "gen_seq1")
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil complem nil)
    (path_implies_conn formula-decl nil graph_path_conn nil)
    (path_connected? const-decl "bool" graph_conn_defs nil)
    (gen_seq1 const-decl "Seq(G)" walks nil)
    (y!1 skolem-const-decl "(vert(completion(G!1)))" complem nil)
    (x!1 skolem-const-decl "(vert(completion(G!1)))" complem nil)
    (gen_seq2 const-decl "Seq(G)" walks nil) (Seq type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (walk? const-decl "bool" walks nil) (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Walk type-eq-decl nil walks nil) (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (edge? const-decl "bool" graphs nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" graphs nil)
    (completion const-decl "graph[T]" complem nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (short_path_TCC1 0
  (short_path_TCC1-1 nil 3349884634 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil complem nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil))
   nil
   (short_path subtype "(number_fields.-)(length(complem.p), 3)"
    "below[p`length]")))
 (short_path_TCC2 0
  (short_path_TCC2-1 nil 3349884634 ("" (subtype-tcc) nil nil)
   ((verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil))
   nil
   (short_path subtype "(number_fields.-)(length(complem.p), 1)"
    "below[p`length]")))
 (short_path 0
  (short_path-1 nil 3349885083
   ("" (skosimp*)
    (("" (expand "path_from?")
      (("" (bddsimp)
        (("" (expand "from?")
          (("" (bddsimp)
            (("" (inst 1 "add1(trunc1(trunc1(p!1)),y!1)")
              (("1" (bddsimp)
                (("1" (hide -1 -5)
                  (("1" (install-rewrites "walks") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (replace -3 1 rl)
                  (("2" (hide -1 -5)
                    (("2" (install-rewrites "walks") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -2 1 rl)
                  (("3" (replace -3 1 rl)
                    (("3" (hide -2 -5)
                      (("3" (install-rewrites "walks")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "path?")
                  (("4" (expand "finseq_appl")
                    (("4" (bddsimp)
                      (("1" (expand "add1")
                        (("1" (expand "trunc1")
                          (("1" (install-rewrites "walks")
                            (("1" (assert)
                              (("1" (skosimp*)
                                (("1" (hide -1 -2 -7 1)
                                  (("1" (inst?)
                                    (("1" (bddsimp)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if -4)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lift-if -5)
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (typepred "j!1")
                                                    (("1"
                                                      (case
                                                       "length(add1(trunc1(trunc1(p!1)),y!1))=length(p!1)-1")
                                                      (("1"
                                                        (replace -1 -2 lr)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -4 -7 rl)
                                                            (("1"
                                                              (reveal -1)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "i!1"
                                                                 "length(p!1)-1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "i!1")
                                              (("2"
                                                (case
                                                 "length(add1(trunc1(trunc1(p!1)),y!1))=length(p!1)-1")
                                                (("1"
                                                  (replace -1 * lr)
                                                  (("1"
                                                    (lift-if -6)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (case
                                                         "j!1=length(p!1)-2")
                                                        (("1"
                                                          (case
                                                           "i!1=length(p!1)-2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred "j!1")
                                                          (("2"
                                                            (reveal -1)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               -2
                                                               lr)
                                                              (("2"
                                                                (hide -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (reveal
                                                                     -2)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "length(p!1)-1"
                                                                       "j!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 -5 2 3 4)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "j!1")
                                      (("2"
                                        (case
                                         "length(add1(trunc1(trunc1(p!1)),y!1))=length(p!1)-1")
                                        (("1"
                                          (replace -1 * lr)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide -1 -2 -5 2 3)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (case
                                       "length(add1(trunc1(trunc1(p!1)),y!1))=length(p!1)-1")
                                      (("1"
                                        (typepred "i!1")
                                        (("1"
                                          (replace -2 * lr)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 -4 2 3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "walk?")
                        (("2" (expand "finseq_appl")
                          (("2" (bddsimp)
                            (("1" (skosimp*)
                              (("1"
                                (case "length(add1(trunc1(trunc1(p!1)),y!1))=length(p!1)-1")
                                (("1" (replace -1 * lr)
                                  (("1" (assert)
                                    (("1" (expand "add1")
                                      (("1"
                                        (expand "trunc1")
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (expand* "^" min empty_seq)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -3 "n!1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but (-4 -5 -6 1))
                                  (("2" (install-rewrites "walks")
                                    (("2" (assert)
                                      (("2"
                                        (expand* "^" min empty_seq)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2 -3 -7)
                              (("2" (install-rewrites "walks")
                                (("2" (assert)
                                  (("2" (skosimp*)
                                    (("2" (grind)
                                      (("2"
                                        (replace -3 2 rl)
                                        (("2"
                                          (reveal -1)
                                          (("2"
                                            (inst -1 "length(p!1)-1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -5)
                (("2" (install-rewrites "walks")
                  (("2" (assert)
                    (("2" (expand* "^" min empty_seq) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((path_from? const-decl "bool" paths nil)
    (from? const-decl "bool" walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (p!1 skolem-const-decl "prewalk[T]" complem nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil complem nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trunc1 const-decl "prewalk" walks nil)
    (Longprewalk type-eq-decl nil walks nil)
    (add1 const-decl "prewalk" walks nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (j!1 skolem-const-decl "below(length(add1(trunc1(trunc1(p!1)), y!1)))"
     complem nil)
    (i!1 skolem-const-decl "below(length(add1(trunc1(trunc1(p!1)), y!1)))"
     complem nil)
    (below type-eq-decl nil naturalnumbers nil)
    (y!1 skolem-const-decl "T" complem nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (trans_walk 0
  (trans_walk-2 "same_strong" 3350499264
   ("" (skosimp*)
    (("" (lemma "path_ops[T].walk_to_path_from")
      (("" (lemma "walk_inductions[T].graph_induction_walk")
        (("" (inst -2 "G!1" "x!1" "y!1" "w!1")
          (("" (bddsimp)
            (("" (skosimp*)
              ((""
                (inst -1
                 "lambda (p):( path_from?(G!1,p,x!1,y!1)implies edge?(G!1)(x!1,y!1))")
                (("" (bddsimp)
                  (("1" (inst -1 "p!1") (("1" (prop) nil nil)) nil)
                   ("2" (skosimp*)
                    (("2" (lemma "short_path")
                      (("2" (inst -1 "G!1" "w!2" "x!1" "y!1")
                        (("2" (case "length(w!2)>2")
                          (("1" (bddsimp)
                            (("1" (skosimp*)
                              (("1" (inst -5 "p1!1") (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide -3 -4 -5 2)
                              (("2" (expand "path_from?")
                                (("2" (bddsimp)
                                  (("2" (expand "path?")
                                    (("2" (bddsimp)
                                      (("2"
                                        (expand "walk?")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (bddsimp)
                                            (("2"
                                              (copy -3)
                                              (("2"
                                                (inst -1 "length(w!2)-3")
                                                (("1"
                                                  (inst -4 "length(w!2)-2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -6)
                                                      (("1"
                                                        (expand
                                                         "strong_transitive?")
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "seq(w!2)(length(w!2) - 3)"
                                                           "seq(w!2)(length(w!2) - 2)"
                                                           "seq(w!2)(length(w!2) - 1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "length(w!2)-3"
                                                               "length(w!2)-1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "verts_in?")
                                                            (("2"
                                                              (copy -3)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "length(w!2)-3")
                                                                (("2"
                                                                  (inst
                                                                   -4
                                                                   "length(w!2)-1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide -1 -4 -5 2)
                                                            (("3"
                                                              (install-rewrites
                                                               "walks[T]")
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (inst
                                                                   -2
                                                                   "length(w!2)-2")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide -1 -4 -5 2)
                                                            (("4"
                                                              (install-rewrites
                                                               "walks[T]")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (inst
                                                                   -2
                                                                   "length(w!2)-3")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 -4 -5)
                            (("2" (typepred "w!2")
                              (("2" (case "length(w!2)=2")
                                (("1" (expand "path_from?")
                                  (("1" (bddsimp)
                                    (("1" (expand "path?")
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (hide -4)
                                          (("1"
                                            (expand "walk?")
                                            (("1"
                                              (expand "finseq_appl")
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (install-rewrites "walks")
                                                  (("1"
                                                    (hide -6)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (inst -4 "0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (case "length(w!2)=1")
                                    (("1" (expand "path_from?")
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand "path?")
                                          (("1"
                                            (expand "from?")
                                            (("1"
                                              (bddsimp)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil complem nil)
    (walk_to_path_from formula-decl nil path_ops nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (short_path formula-decl nil complem nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (verts_in? const-decl "bool" walks nil)
    (strong_transitive? const-decl "bool" complem nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (w!2 skolem-const-decl "prewalk[T]" complem nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (walk? const-decl "bool" walks nil) (path? const-decl "bool" paths nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil)
    (from? const-decl "bool" walks nil) (edge? const-decl "bool" graphs nil)
    (path_from? const-decl "bool" paths nil)
    (pred type-eq-decl nil defined_types nil)
    (graph_induction_walk formula-decl nil walk_inductions nil))
   shostak)
  (trans_walk-1 nil 3349902111
   ("" (skosimp*)
    (("" (lemma "path_ops[T].walk_to_path_from")
      (("" (lemma "walk_inductions[T].graph_induction_walk")
        (("" (inst -2 "G!1" "x!1" "y!1" "w!1")
          (("" (bddsimp)
            (("" (skosimp*)
              ((""
                (inst -1
                 "lambda (p):( path_from?(G!1,p,x!1,y!1)implies edge?(G!1)(x!1,y!1))")
                (("" (bddsimp)
                  (("1" (inst -1 "p!1") (("1" (prop) nil nil)) nil)
                   ("2" (skosimp*)
                    (("2" (lemma "short_path")
                      (("2" (inst -1 "G!1" "w!2" "x!1" "y!1")
                        (("2" (case "length(w!2)>2")
                          (("1" (bddsimp)
                            (("1" (skosimp*)
                              (("1" (inst -5 "p1!1") (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide -3 -4 -5 2)
                              (("2" (expand "path_from?")
                                (("2" (bddsimp)
                                  (("2" (expand "path?")
                                    (("2" (bddsimp)
                                      (("2"
                                        (expand "walk?")
                                        (("2"
                                          (bddsimp)
                                          (("2"
                                            (copy -3)
                                            (("1"
                                              (inst -1 "length(w!2)-3")
                                              (("1"
                                                (inst -4 "length(w!2)-2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -6)
                                                    (("1"
                                                      (expand
                                                       "strong_transitive?")
                                                      (("1"
                                                        (inst
                                                         -6
                                                         "seq(w!2)(length(w!2) - 3)"
                                                         "seq(w!2)(length(w!2) - 2)"
                                                         "seq(w!2)(length(w!2) - 1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "length(w!2)-3"
                                                             "length(w!2)-1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "verts_in?")
                                                                (("1"
                                                                  (copy -3)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "length(w!2)-3")
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "length(w!2)-1")
                                                                      (("1"
                                                                        (bddsimp)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (skosimp*)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp*)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 -4 -5)
                            (("2" (typepred "w!2")
                              (("2" (case "length(w!2)=2")
                                (("1" (expand "path_from?")
                                  (("1" (bddsimp)
                                    (("1" (expand "path?")
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (hide -4)
                                          (("1"
                                            (expand "walk?")
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (install-rewrites "walks")
                                                (("1"
                                                  (hide -6)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (inst -4 "0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (case "length(w!2)=1")
                                  (("1" (expand "path_from?")
                                    (("1" (bddsimp)
                                      (("1"
                                        (expand "path?")
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (expand "from?")
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (replace -1 -6 lr)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_to_path_from formula-decl nil path_ops nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (prewalk type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (walk? const-decl "bool" walks nil) (path? const-decl "bool" paths nil)
    (from? const-decl "bool" walks nil) (edge? const-decl "bool" graphs nil)
    (path_from? const-decl "bool" paths nil)
    (graph_induction_walk formula-decl nil walk_inductions nil))
   shostak))
 (trans_connected 0
  (trans_connected-1 nil 3349976812
   ("" (skosimp*)
    (("" (lemma "graph_connected[T].conn_eq_path")
      (("" (inst?)
        (("" (iff)
          (("" (bddsimp)
            (("" (apply-extensionality 1 :hide? t)
              (("1" (apply-extensionality 1 :hide? t)
                (("1" (typepred "x!1")
                  (("1" (skosimp*)
                    (("1" (iff)
                      (("1" (bddsimp)
                        (("1" (hide -3 -4 -5)
                          (("1" (lemma "completion_is_subgraph")
                            (("1" (inst?)
                              (("1" (expand "subgraph?")
                                (("1" (bddsimp)
                                  (("1" (expand "subset?")
                                    (("1" (expand "member")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (install-rewrites "complem")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -3)
                          (("2" (expand "path_connected?")
                            (("2" (bddsimp)
                              (("2" (inst -3 "x!2" "y!1")
                                (("1" (skosimp*)
                                  (("1" (lemma "trans_walk")
                                    (("1" (inst -1 "G!1" "w!1" "x!2" "y!1")
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (expand "edge?")
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (replace -4 -3 rl)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 -3 3)
                                          (("2"
                                            (typepred "w!1")
                                            (("2"
                                              (install-rewrites "walks")
                                              (("2"
                                                (assert)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "completion")
                                  (("2" (expand "all_edges")
                                    (("2" (skosimp*)
                                      (("2"
                                        (lemma "doubletons[T].dbl_eq")
                                        (("2"
                                          (inst -1 "x!3" "x!2" "y!1" "y!2")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (expand "completion")
                                  (("3" (expand "all_edges")
                                    (("3" (skosimp*)
                                      (("3"
                                        (lemma "doubletons[T].dbl_eq")
                                        (("3"
                                          (inst -1 "x!3" "x!2" "y!1" "y!2")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "completion") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil complem nil)
    (conn_eq_path formula-decl nil graph_connected nil)
    (completion const-decl "graph[T]" complem nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dbl_eq formula-decl nil doubletons structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (walk? const-decl "bool" walks nil) (Walk type-eq-decl nil walks nil)
    (empty? const-decl "bool" graphs nil) (empty? const-decl "bool" sets nil)
    (walk_from? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (verts_in? const-decl "bool" walks nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (edge? const-decl "bool" graphs nil)
    (trans_walk formula-decl nil complem nil)
    (y!1 skolem-const-decl "T" complem nil)
    (x!2 skolem-const-decl "T" complem nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (path_connected? const-decl "bool" graph_conn_defs nil)
    (member const-decl "bool" sets nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil)
    (subset? const-decl "bool" sets nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (completion_is_subgraph formula-decl nil complem nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (disjoint_trans 2
  (disjoint_trans-3 "same y1 problem" 3350293931
   ("" (skosimp*)
    (("" (expand "strong_transitive?")
      (("" (skosimp*)
        (("" (expand "union")
          (("" (expand "edge?")
            (("" (bddsimp)
              (("1" (expand "union")
                (("1" (expand "member")
                  (("1" (bddsimp)
                    (("1" (typepred "H!1")
                      (("1" (typepred "K!1")
                        (("1" (inst -1 "dbl[T](y!1, z!1)")
                          (("1" (inst -2 "dbl[T](x!1, y!1)")
                            (("1" (bddsimp)
                              (("1" (inst -1 "y!1")
                                (("1" (inst -3 "y!1")
                                  (("1" (assert)
                                    (("1" (expand "dbl")
                                      (("1"
                                        (hide -5 -6)
                                        (("1"
                                          (install-rewrites "finite_sets[T]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -4 "y!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (typepred "H!1")
                                (("2" (typepred "K!1")
                                  (("2" (inst -1 "dbl[T](x!1, y!1)")
                                    (("2" (inst -2 "dbl[T](y!1, z!1)")
                                      (("2"
                                        (inst -6 "x!1" "y!1" "z!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (hide -2 -3)
                        (("2" (typepred "H!1")
                          (("2" (typepred "K!1")
                            (("2" (inst -1 "dbl[T](x!1, y!1)")
                              (("2" (inst -2 "dbl[T](x!1, y!1)")
                                (("2" (bddsimp)
                                  (("1" (inst -1 "y!1")
                                    (("1" (inst -3 "y!1")
                                      (("1"
                                        (install-rewrites "doubletons")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -4 "y!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (typepred "K!1")
                                    (("2" (inst -1 "dbl[T](y!1,z!1)")
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (inst -2 "y!1")
                                          (("2"
                                            (inst -4 "y!1")
                                            (("2"
                                              (install-rewrites "doubletons")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst -5 "y!1")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "H!1")
                      (("3" (inst -1 "dbl[T](y!1, z!1)")
                        (("3" (hide -3 -4)
                          (("3" (bddsimp)
                            (("3" (inst -2 "z!1")
                              (("3" (install-rewrites "doubletons")
                                (("3" (assert)
                                  (("3" (inst -3 "z!1")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (assert)
                      (("4" (hide -2 -3)
                        (("4" (typepred "H!1")
                          (("4" (typepred "K!1")
                            (("4" (inst -1 "dbl[T](y!1, z!1)")
                              (("4" (inst -2 "dbl[T](x!1,y!1)")
                                (("4" (bddsimp)
                                  (("4" (inst -2 "y!1")
                                    (("4" (inst -4 "y!1")
                                      (("4"
                                        (bddsimp)
                                        (("1"
                                          (install-rewrites "doubletons")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -5 "y!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (install-rewrites "doubletons")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (install-rewrites "doubletons")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (install-rewrites "doubletons")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide -2 -3)
                      (("5" (typepred "H!1")
                        (("5" (typepred "K!1")
                          (("5" (inst -1 "dbl[T](x!1, y!1)")
                            (("5" (inst -2 "dbl[T](y!1, z!1)")
                              (("5" (bddsimp)
                                (("5" (inst -2 "y!1")
                                  (("5" (inst -4 "y!1")
                                    (("5" (bddsimp)
                                      (("1"
                                        (install-rewrites "doubletons[T]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -5 "y!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (install-rewrites "doubletons[T]")
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (install-rewrites "doubletons[T]")
                                        (("3" (assert) nil nil))
                                        nil)
                                       ("4"
                                        (install-rewrites "doubletons[T]")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (hide -2)
                      (("6" (inst -2 "x!1" "y!1" "z!1")
                        (("6" (assert)
                          (("6" (typepred "K!1")
                            (("6" (typepred "K!1")
                              (("6" (inst -1 "dbl[T](x!1, y!1)")
                                (("6" (inst -2 "dbl[T]( y!1,z!1)")
                                  (("6" (bddsimp)
                                    (("1" (inst -4 "z!1")
                                      (("1"
                                        (install-rewrites "doubletons[T]")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (inst -2 "x!1")
                                      (("2"
                                        (install-rewrites "doubletons[T]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("7" (hide -2 -3)
                      (("7" (typepred "K!1")
                        (("7" (typepred "H!1")
                          (("7" (inst -1 "dbl[T]( y!1,z!1)")
                            (("7" (inst -2 "dbl[T](x!1, y!1)")
                              (("7" (bddsimp)
                                (("7" (inst -2 "y!1")
                                  (("7" (inst -4 "y!1")
                                    (("7" (assert)
                                      (("7"
                                        (bddsimp)
                                        (("1"
                                          (install-rewrites "doubletons[T]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -5 "y!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (install-rewrites "doubletons[T]")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (install-rewrites "doubletons[T]")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (install-rewrites "doubletons[T]")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("8" (hide -2)
                      (("8" (inst -2 "x!1" "y!1" "z!1")
                        (("8" (bddsimp)
                          (("8" (typepred "K!1")
                            (("8" (inst -1 "dbl[T](x!1, y!1)")
                              (("8" (bddsimp)
                                (("8" (inst -2 "x!1")
                                  (("8" (install-rewrites "doubletons[T]")
                                    (("8" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("9" (hide -3)
                      (("9" (inst -2 "x!1" "y!1" "z!1")
                        (("9" (bddsimp)
                          (("9" (lemma "graphs[T].edges_vert_in")
                            (("9"
                              (inst -1 "H!1" "dbl[T](x!1, y!1)" "x!1" "y!1")
                              (("9" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("10" (hide -2 -3)
                      (("10" (typepred "K!1")
                        (("10" (typepred "H!1")
                          (("10" (inst -1 "dbl[T](x!1, y!1)")
                            (("10" (inst -2 "dbl[T]( y!1,z!1)")
                              (("10" (bddsimp)
                                (("10" (inst -2 "y!1")
                                  (("10" (inst -4 "y!1")
                                    (("10" (install-rewrites "doubletons[T]")
                                      (("10"
                                        (assert)
                                        (("10"
                                          (inst -5 "y!1")
                                          (("10" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("11" (hide -3)
                      (("11" (inst -2 "x!1" "y!1" "z!1")
                        (("11" (bddsimp)
                          (("1" (typepred "H!1")
                            (("1" (inst -1 "dbl[T]( y!1,z!1)")
                              (("1" (bddsimp)
                                (("1" (inst -2 "z!1")
                                  (("1" (install-rewrites "doubletons[T]")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "H!1")
                            (("2" (inst -1 "dbl[T](x!1, y!1)")
                              (("2" (bddsimp)
                                (("2" (inst -2 "x!1")
                                  (("2" (install-rewrites "doubletons[T]")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("12" (hide -2 -3)
                      (("12" (typepred "H!1")
                        (("12" (typepred "K!1")
                          (("12" (inst -2 "dbl[T](x!1, y!1)")
                            (("12" (inst -1 "dbl[T]( y!1,z!1)")
                              (("12" (bddsimp)
                                (("12" (inst -2 "y!1")
                                  (("12" (inst -4 "y!1")
                                    (("12" (bddsimp)
                                      (("1"
                                        (install-rewrites "doubletons[T]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -5 "y!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (install-rewrites "doubletons[T]")
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (install-rewrites "doubletons[T]")
                                        (("3" (assert) nil nil))
                                        nil)
                                       ("4"
                                        (install-rewrites "doubletons[T]")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("13" (hide -2 -3)
                      (("13" (typepred "H!1")
                        (("13" (typepred "K!1")
                          (("13" (inst -2 "dbl[T]( y!1,z!1)")
                            (("13" (inst -1 "dbl[T](x!1, y!1)")
                              (("13" (bddsimp)
                                (("13" (inst -2 "y!1")
                                  (("13" (inst -4 "y!1")
                                    (("13" (install-rewrites "doubletons[T]")
                                      (("13"
                                        (assert)
                                        (("13"
                                          (inst -5 "y!1")
                                          (("13" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("14" (hide -2)
                      (("14" (inst -2 "x!1" "y!1" "z!1")
                        (("14" (bddsimp)
                          (("14" (typepred "K!1")
                            (("14" (inst -1 "dbl[T]( y!1,z!1)")
                              (("14" (bddsimp)
                                (("14" (inst -2 "z!1")
                                  (("14" (install-rewrites "doubletons[T]")
                                    (("14" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("15" (hide -2 -3)
                      (("15" (typepred "K!1")
                        (("15" (typepred "H!1")
                          (("15" (inst -1 "dbl[T]( y!1,z!1)")
                            (("15" (inst -2 "dbl[T](x!1, y!1)")
                              (("15" (bddsimp)
                                (("15" (inst -2 "y!1")
                                  (("15" (inst -4 "y!1")
                                    (("15" (install-rewrites "doubletons[T]")
                                      (("15"
                                        (assert)
                                        (("15"
                                          (inst -5 "y!1")
                                          (("15" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("16" (hide -2)
                      (("16" (inst -2 "x!1" "y!1" "z!1")
                        (("16" (bddsimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil)
               ("3" (hide -2 -3)
                (("3" (expand "empty?")
                  (("3" (expand "union")
                    (("3" (expand "member")
                      (("3" (copy -1)
                        (("3" (copy -1)
                          (("3" (inst -1 "x!1")
                            (("3" (inst -1 "y!1")
                              (("3" (inst -1 "z!1")
                                (("3" (expand "intersection")
                                  (("3" (expand "member")
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (assert) nil nil)
               ("5" (hide -2 -3) (("5" (grind) nil nil)) nil)
               ("6" (assert) nil nil)
               ("7" (hide -2 -3) (("7" (grind) nil nil)) nil)
               ("8" (assert) nil nil)
               ("9" (hide -2 -3) (("9" (postpone) nil nil)) nil)
               ("10" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (disjoint_trans-2 "dubious" 3350249249
   ("" (skosimp*)
    (("" (expand "strong_transitive?")
      (("" (skosimp*)
        (("" (expand "union")
          (("" (expand "edge?")
            (("" (bddsimp)
              (("1" (expand "union")
                (("1" (expand "member")
                  (("1" (bddsimp)
                    (("1" (typepred "H!1")
                      (("1" (typepred "K!1")
                        (("1" (inst -1 "dbl[T](y!1, z!1)")
                          (("1" (inst -2 "dbl[T](x!1, y!1)")
                            (("1" (bddsimp)
                              (("1" (inst -1 "y!1")
                                (("1" (inst -3 "y!1")
                                  (("1" (assert)
                                    (("1" (expand "dbl")
                                      (("1"
                                        (hide -5 -6)
                                        (("1"
                                          (install-rewrites "finite_sets[T]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -4 "y!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (typepred "H!1")
                                (("2" (typepred "K!1")
                                  (("2" (inst -1 "dbl[T](x!1, y!1)")
                                    (("2" (inst -2 "dbl[T](y!1, z!1)")
                                      (("2"
                                        (inst -6 "x!1" "y!1" "z!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (hide -2 -3)
                        (("2" (typepred "H!1")
                          (("2" (typepred "K!1")
                            (("2" (inst -1 "dbl[T](x!1, y!1)")
                              (("2" (inst -2 "dbl[T](x!1, y!1)")
                                (("2" (bddsimp)
                                  (("1" (inst -1 "y!1")
                                    (("1" (inst -3 "y!1")
                                      (("1"
                                        (install-rewrites "doubletons")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -4 "y!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (typepred "K!1")
                                    (("2" (inst -1 "dbl[T](y!1,z!1)")
                                      (("2"
                                        (bddsimp)
                                        (("2"
                                          (inst -2 "y!1")
                                          (("2"
                                            (inst -4 "y!1")
                                            (("2"
                                              (install-rewrites "doubletons")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst -5 "y!1")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "H!1")
                      (("3" (inst -1 "dbl[T](y!1, z!1)")
                        (("3" (hide -3 -4)
                          (("3" (bddsimp)
                            (("3" (inst -2 "z!1")
                              (("3" (install-rewrites "doubletons")
                                (("3" (assert)
                                  (("3" (inst -3 "z!1")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (assert)
                      (("4" (grind) (("4" (postpone) nil nil)) nil)) nil)
                     ("5" (postpone) nil nil) ("6" (postpone) nil nil)
                     ("7" (postpone) nil nil) ("8" (postpone) nil nil)
                     ("9" (postpone) nil nil) ("10" (postpone) nil nil)
                     ("11" (postpone) nil nil) ("12" (postpone) nil nil)
                     ("13" (postpone) nil nil) ("14" (postpone) nil nil)
                     ("15" (postpone) nil nil) ("16" (postpone) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil)
               ("4" (postpone) nil nil) ("5" (postpone) nil nil)
               ("6" (postpone) nil nil) ("7" (postpone) nil nil)
               ("8" (postpone) nil nil) ("9" (postpone) nil nil)
               ("10" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (disjoint_trans-1 nil 3350231947
   ("" (skosimp*)
    (("" (expand "transitive?")
      (("" (skosimp*)
        (("" (expand "union")
          (("" (expand "edge?")
            (("" (bddsimp)
              (("1" (expand "union")
                (("1" (expand "member")
                  (("1" (bddsimp)
                    (("1" (inst -2 "x!1" "y!1" "z!1")
                      (("1" (bddsimp) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (typepred "H!1")
                      (("2" (typepred "K!1")
                        (("2" (inst -1 "dbl[T](y!1, z!1)")
                          (("2" (inst -2 "dbl[T](x!1, y!1)")
                            (("2" (bddsimp)
                              (("2" (inst -2 "y!1")
                                (("2" (inst -4 "y!1")
                                  (("2" (assert)
                                    (("2" (expand "dbl")
                                      (("2"
                                        (hide -1 -3 -6 -7)
                                        (("2"
                                          (install-rewrites "finite_sets[T]")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -3 "y!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "H!1")
                      (("3" (typepred "K!1")
                        (("3" (inst -1 "dbl[T](x!1, y!1)")
                          (("3" (inst -2 "dbl[T](y!1, z!1)")
                            (("3" (bddsimp)
                              (("3" (inst -2 "y!1")
                                (("3" (inst -4 "y!1")
                                  (("3" (hide -6 -7)
                                    (("3" (install-rewrites "finite_sets[T]")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst -5 "y!1")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide -1 -2)
                      (("4" (inst -1 "x!1" "y!1" "z!1")
                        (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitive? const-decl "bool" complem nil)
    (union const-decl "graph[T]" graph_ops nil)
    (member const-decl "bool" sets nil) (graph type-eq-decl nil graphs nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (T formal-type-decl nil complem nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (edge? const-decl "bool" graphs nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil))
   shostak))
 (disjoint_trans_strong 0
  (disjoint_trans_strong-1 nil 3350500811
   ("" (skosimp*)
    (("" (lemma "disjoint_trans")
      (("" (lemma "strong_implies")
        (("" (lemma "imply_strong")
          (("" (inst -3 "H!1" "K!1")
            (("" (copy -2)
              (("" (inst -1 "H!1")
                (("" (inst -3 "K!1")
                  (("" (bddsimp)
                    (("" (inst -3 "union(H!1,K!1)") (("" (prop) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((disjoint_trans formula-decl nil complem nil)
    (imply_strong formula-decl nil complem nil)
    (union const-decl "graph[T]" graph_ops nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil)
    (strong_implies formula-decl nil complem nil))
   shostak))
 (subgraph_trans 1
  (subgraph_trans-2 "strong" 3350295727
   ("" (skosimp*)
    (("" (expand "strong_transitive?")
      (("" (skosimp*)
        (("" (expand "subgraph" (-3 -4))
          (("" (expand "edge?")
            (("" (bddsimp)
              (("1" (inst -2 "x!1" "y!1" "z!1")
                (("1" (bddsimp)
                  (("1" (expand "subgraph")
                    (("1" (bddsimp) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (assert)
                    (("2" (typepred "G!1")
                      (("2" (inst -1 "dbl[T](y!1,z!1)")
                        (("2" (bddsimp)
                          (("2" (inst -2 "z!1")
                            (("2" (install-rewrites "doubletons[T]")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "G!1")
                    (("3" (inst -1 "dbl[T](x!1,y!1)")
                      (("3" (bddsimp)
                        (("3" (inst -2 "x!1")
                          (("3" (install-rewrites "doubletons[T]")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil) ("3" (grind) nil nil)
               ("4" (assert) nil nil)
               ("5" (hide -2)
                (("5" (install-rewrites "subgraphs") (("5" (assert) nil nil))
                  nil))
                nil)
               ("6" (assert) nil nil)
               ("7" (install-rewrites "subgraphs") (("7" (assert) nil nil))
                nil)
               ("8" (assert) nil nil) ("9" (grind) nil nil)
               ("10" (assert) nil nil) ("11" (assert) nil nil)
               ("12" (assert) nil nil)
               ("13" (hide -2)
                (("13" (install-rewrites "subgraphs")
                  (("13" (assert) nil nil)) nil))
                nil)
               ("14" (assert) nil nil)
               ("15" (assert)
                (("15" (hide -2)
                  (("15" (install-rewrites "subgraphs")
                    (("15" (assert) nil nil)) nil))
                  nil))
                nil)
               ("16" (assert) nil nil)
               ("17" (hide -2)
                (("17" (install-rewrites "subgraphs")
                  (("17" (assert)
                    (("17" (grind) (("17" (postpone) nil nil)) nil)) nil))
                  nil))
                nil)
               ("18" (postpone) nil nil) ("19" (postpone) nil nil)
               ("20" (postpone) nil nil) ("21" (postpone) nil nil)
               ("22" (postpone) nil nil) ("23" (postpone) nil nil)
               ("24" (postpone) nil nil) ("25" (postpone) nil nil)
               ("26" (postpone) nil nil) ("27" (postpone) nil nil)
               ("28" (postpone) nil nil) ("29" (postpone) nil nil)
               ("30" (postpone) nil nil) ("31" (postpone) nil nil)
               ("32" (postpone) nil nil) ("33" (postpone) nil nil)
               ("34" (postpone) nil nil) ("35" (postpone) nil nil)
               ("36" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (subgraph_trans-1 nil 3350244968
   ("" (skosimp*)
    (("" (expand "transitive?")
      (("" (skosimp*)
        (("" (expand "subgraph" (-3 -4))
          (("" (expand "edge?")
            (("" (bddsimp)
              (("1" (inst -2 "x!1" "y!1" "z!1")
                (("1" (bddsimp)
                  (("1" (expand "subgraph")
                    (("1" (bddsimp) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitive? const-decl "bool" complem nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (dbl const-decl "set[T]" doubletons structures)
    (/= const-decl "boolean" notequal nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (T formal-type-decl nil complem nil) (edge? const-decl "bool" graphs nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil))
   shostak))
 (subgraph_trans_strong 0
  (subgraph_trans_strong-1 nil 3350500089
   ("" (skosimp*)
    (("" (lemma "subgraph_trans")
      (("" (lemma "strong_implies")
        (("" (lemma "imply_strong")
          (("" (inst -2 "G!1")
            (("" (inst -3 "G!1" "V!1")
              (("" (bddsimp)
                (("" (inst -1 "subgraph(G!1,V!1)") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subgraph_trans formula-decl nil complem nil)
    (imply_strong formula-decl nil complem nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (Subgraph type-eq-decl nil subgraphs nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil)
    (strong_implies formula-decl nil complem nil))
   shostak))
 (t_close_4 0
  (t_close_4-2 "line-up" 3392741940
   ("" (skosimp*)
    (("" (lemma "t_close_1")
      (("" (inst -1 "G!1" "t_close(G!1)")
        (("" (bddsimp)
          (("" (lemma "t_close_2")
            (("" (inst -1 "G!1" "t_close(G!1)" "K!1")
              (("" (bddsimp)
                (("1" (hide -1 -4 -5)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (expand "num_edges")
                      (("1" (expand "subgraph?")
                        (("1" (bddsimp)
                          (("1"
                            (case "card(edges(K!1))<= card(edges(t_close(G!1)))")
                            (("1"
                              (case "card(edges(K!1))= card(edges(t_close(G!1)))")
                              (("1"
                                (lemma
                                 "finite_sets[doubleton[T]].same_card_subset")
                                (("1"
                                  (inst -1 "edges(K!1)" "edges(t_close(G!1))")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2"
                              (lemma "finite_sets[doubleton[T]].card_subset")
                              (("2"
                                (inst -1 "edges(K!1)" "edges(t_close(G!1))")
                                (("2" (prop) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (expand "subgraph?")
                        (("2" (bddsimp)
                          (("2" (hide -3 -5)
                            (("2"
                              (lemma "sets_lemmas[T].subset_antisymmetric")
                              (("2" (replace -2 -3 rl)
                                (("2"
                                  (inst -1 "vert(K!1)" "vert(t_close(G!1))")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (hide -2 -3)
                    (("2" (hide 2)
                      (("2" (grind :defs nil)
                        (("2" (expand "subgraph?")
                          (("2" (bddsimp)
                            (("2" (hide -3 -5)
                              (("2" (replace -1 -3 lr)
                                (("2" (hide -1)
                                  (("2" (apply-extensionality 1 :hide? t)
                                    (("2" (iff)
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (inst -1 "x!1")
                                            (("2"
                                              (inst -2 "x!1")
                                              (("2" (bddsimp) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but (-5 1))
                  (("3" (expand "super") (("3" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((t_close_1 formula-decl nil complem nil)
    (super const-decl "bool" complem nil) (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (num_edges const-decl "nat" graph_ops nil)
    (card_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (t_close_2 formula-decl nil complem nil)
    (t_close const-decl "graph[T]" complem nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil))
   shostak)
  (t_close_4-1 nil 3350729040
   ("" (skosimp*)
    (("" (lemma "t_close_1")
      (("" (inst -1 "G!1" "t_close(G!1)")
        (("" (bddsimp)
          (("" (lemma "t_close_2")
            (("" (inst -1 "G!1" "t_close(G!1)" "K!1")
              (("" (bddsimp)
                (("1" (hide -1 -4 -5)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (expand "num_edges")
                      (("1" (expand "subgraph?")
                        (("1" (bddsimp)
                          (("1"
                            (case "card(edges(K!1))<= card(edges(t_close(G!1)))")
                            (("1"
                              (case "card(edges(K!1))= card(edges(t_close(G!1)))")
                              (("1"
                                (lemma
                                 "finite_sets[doubleton[T]].same_card_subset")
                                (("1"
                                  (inst -1 "edges(K!1)" "edges(t_close(G!1))")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2"
                              (lemma "finite_sets[doubleton[T]].card_subset")
                              (("2"
                                (inst -1 "edges(K!1)" "edges(t_close(G!1))")
                                (("2" (prop) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (expand "subgraph?")
                        (("2" (bddsimp)
                          (("2" (hide -3 -5)
                            (("2"
                              (lemma "sets_lemmas[T].subset_antisymmetric")
                              (("2" (replace -2 -3 rl)
                                (("2"
                                  (inst -1 "vert(K!1)" "vert(t_close(G!1))")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (hide -2 -3)
                    (("2" (hide 2)
                      (("2" (grind :defs nil)
                        (("2" (expand "subgraph?")
                          (("2" (bddsimp)
                            (("2" (hide -3 -5)
                              (("2" (replace -1 -3 lr)
                                (("2" (hide -1)
                                  (("2" (grind)
                                    (("2" (apply-extensionality 1 :hide? t)
                                      (("2"
                                        (iff)
                                        (("2"
                                          (inst -1 "x!1")
                                          (("2"
                                            (inst -2 "x!1")
                                            (("2" (bddsimp) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but (-5 1))
                  (("3" (install-rewrites "complem") (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_edges const-decl "nat" graph_ops nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures))
   shostak))
 (closure_connect 0
  (closure_connect-6 "" 3790105408
   ("" (skosimp*)
    (("" (bddsimp)
      (("1" (lemma "subgraph_conn")
        (("1" (inst -1 "t_close(G!1)" "G!1")
          (("1" (lemma "t_close_1")
            (("1" (inst -1 "G!1" "t_close(G!1)")
              (("1" (bddsimp)
                (("1" (replace -1 1 lr) (("1" (propax) nil nil)) nil)
                 ("2" (expand "super") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "graph_connected[T].piece_eq_conn")
        (("2" (lemma "graph_connected[T].piece_eq_conn")
          (("2" (inst -1 "G!1")
            (("2" (inst -2 "t_close(G!1)")
              (("2" (iff)
                (("2" (bddsimp)
                  (("2" (hide -2 2)
                    (("2" (expand "piece_connected?" 1)
                      (("2" (bddsimp)
                        (("1" (lemma "t_close_1")
                          (("1" (inst?)
                            (("1" (inst -1 "t_close(G!1)")
                              (("1" (bddsimp)
                                (("1" (expand "piece_connected?")
                                  (("1" (bddsimp)
                                    (("1" (expand "empty?")
                                      (("1"
                                        (replace -1 -4 rl)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "piece_connected?")
                            (("2" (bddsimp)
                              (("2"
                                (inst -3 "subgraph(t_close(G!1),vert(H1!1))"
                                 "subgraph(t_close(G!1),vert(H2!1))")
                                (("2" (bddsimp)
                                  (("1" (hide -1 -2 2 3)
                                    (("1" (lemma "t_close_1")
                                      (("1"
                                        (expand "empty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst -3 "x!1")
                                                (("1"
                                                  (expand "subgraph")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G!1"
                                                       "t_close(G!1)")
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (replace -1 1 lr)
                                                          (("1"
                                                            (hide -1 -2 -3)
                                                            (("1"
                                                              (reveal -6)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "union")
                                                                    (("1"
                                                                      (expand
                                                                       "union")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2 1 3)
                                    (("2" (expand "empty?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst -3 "x!1")
                                              (("2"
                                                (lemma "t_close_1")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "G!1"
                                                   "t_close(G!1)")
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (expand "subgraph")
                                                      (("2"
                                                        (replace -1 1 lr)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (hide -1 -2 -3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 lr)
                                                                (("2"
                                                                  (hide -1)
                                                                  (("2"
                                                                    (expand
                                                                     "union")
                                                                    (("2"
                                                                      (expand
                                                                       "union")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (expand "subgraph")
                                    (("3" (lemma "t_close_1")
                                      (("3"
                                        (inst -1 "G!1" "t_close(G!1)")
                                        (("3"
                                          (bddsimp)
                                          (("3"
                                            (hide -2 -3 3)
                                            (("3"
                                              (replace -1 3 lr)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (hide -1 -2)
                                                  (("3"
                                                    (expand "intersection")
                                                    (("3"
                                                      (expand "member")
                                                      (("3"
                                                        (expand "empty?")
                                                        (("3"
                                                          (expand "member")
                                                          (("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (inst -1 "x!1")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (lemma "t_close_1")
                                    (("4" (inst -1 "G!1" "t_close(G!1)")
                                      (("4"
                                        (bddsimp)
                                        (("4"
                                          (lemma "subgraph_trans_strong")
                                          (("4"
                                            (lemma "subgraph_trans_strong")
                                            (("4"
                                              (inst
                                               -1
                                               "t_close(G!1)"
                                               "vert(H1!1)")
                                              (("4"
                                                (inst
                                                 -2
                                                 "t_close(G!1)"
                                                 "vert(H2!1)")
                                                (("4"
                                                  (replace -3 * lr)
                                                  (("4"
                                                    (bddsimp)
                                                    (("1"
                                                      (lemma
                                                       "disjoint_trans_strong")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "subgraph(t_close(G!1), vert(H1!1))"
                                                         "subgraph(t_close(G!1), vert(H2!1))")
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (hide -1 -2)
                                                            (("1"
                                                              (lemma
                                                               "t_close_2")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "G!1"
                                                                 "t_close(G!1)"
                                                                 "union(subgraph(t_close(G!1), vert(H1!1)),
                                           subgraph(t_close(G!1), vert(H2!1)))")
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     4
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (expand
                                                                       "num_edges")
                                                                      (("1"
                                                                        (case
                                                                         "subgraph?[T](union(subgraph(t_close(G!1), vert(H1!1)), subgraph(t_close(G!1), vert(H2!1))),t_close(G!1))")
                                                                        (("1"
                                                                          (expand
                                                                           "subgraph?")
                                                                          (("1"
                                                                            (bddsimp)
                                                                            (("1"
                                                                              (lemma
                                                                               "finite_sets[doubleton[T]].card_subset")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "edges
                                  (union(subgraph(t_close(G!1), vert(H1!1)),
                                         subgraph(t_close(G!1), vert(H2!1))))"
                                                                                 "edges(t_close(G!1))")
                                                                                (("1"
                                                                                  (bddsimp)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "finite_sets[doubleton[T]].same_card_subset")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "edges
                                  (union(subgraph(t_close(G!1), vert(H1!1)),
                                         subgraph(t_close(G!1), vert(H2!1))))"
                                                                                         "edges(t_close(G!1))")
                                                                                        (("1"
                                                                                          (bddsimp)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -3
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "subgraph?")
                                                                            (("2"
                                                                              (bddsimp)
                                                                              (("1"
                                                                                (expand
                                                                                 "super")
                                                                                (("1"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "union")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subgraph")
                                                                                              (("1"
                                                                                                (bddsimp)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "subset?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -4)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "union")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subgraph")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "union")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (bddsimp)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         "super")
                                                                        (("2"
                                                                          (expand
                                                                           "union")
                                                                          (("2"
                                                                            (apply-extensionality
                                                                             1
                                                                             :hide?
                                                                             t)
                                                                            (("2"
                                                                              (iff)
                                                                              (("2"
                                                                                (bddsimp)
                                                                                (("1"
                                                                                  (expand
                                                                                   "union")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       -1
                                                                                       lr)
                                                                                      (("1"
                                                                                        (copy
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -5
                                                                                           -1
                                                                                           lr)
                                                                                          (("1"
                                                                                            (beta
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -5)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "subgraph")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   1
                                                                                                   lr)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subgraph")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "subgraph")
                                                                                          (("2"
                                                                                            (prop)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -4
                                                                     5)
                                                                    (("2"
                                                                      (expand
                                                                       "union")
                                                                      (("2"
                                                                        (decompose-equality
                                                                         -2)
                                                                        (("2"
                                                                          (expand
                                                                           "subgraph")
                                                                          (("2"
                                                                            (replace
                                                                             -3
                                                                             1
                                                                             lr)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -3)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   lr)
                                                                                  (("2"
                                                                                    (apply-extensionality
                                                                                     1
                                                                                     :hide?
                                                                                     t)
                                                                                    (("2"
                                                                                      (iff
                                                                                       1)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     5)
                                                                    (("3"
                                                                      (expand
                                                                       "super")
                                                                      (("3"
                                                                        (expand
                                                                         "subgraph?")
                                                                        (("3"
                                                                          (bddsimp)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "subset?")
                                                                              (("1"
                                                                                (expand
                                                                                 "member")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (bddsimp)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subgraph")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "union")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (bddsimp)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -4
                                                                                                   -1
                                                                                                   lr)
                                                                                                  (("1"
                                                                                                    (beta
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "H1!1")
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "H2!1")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (bddsimp)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "x!3")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "x!3")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "x!2")
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -3
                                                                             -4)
                                                                            (("2"
                                                                              (expand
                                                                               "subset?")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "subgraph")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "union")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("2"
                                                                                            (bddsimp)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "union")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "union")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("1"
                                                                                                      (copy
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -3
                                                                                                         lr)
                                                                                                        (("1"
                                                                                                          (beta
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -2
                                                                                               1
                                                                                               lr)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -1
                                                             -2
                                                             -3
                                                             -5
                                                             5)
                                                            (("2"
                                                              (expand
                                                               "empty?")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     -4
                                                                     "x!1")
                                                                    (("2"
                                                                      (expand
                                                                       "intersection")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (expand
                                                                           "subgraph")
                                                                          (("2"
                                                                            (bddsimp)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-5 -6 1 2 3))
                                                      (("2"
                                                        (expand "union")
                                                        (("2"
                                                          (expand "union")
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "subset?")
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   lr)
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (skosimp*)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (-5 -6 1 2 3))
                                                      (("3"
                                                        (expand "subset?")
                                                        (("3"
                                                          (expand "empty?" -2)
                                                          (("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (expand
                                                               "member")
                                                              (("3"
                                                                (expand
                                                                 "union")
                                                                (("3"
                                                                  (replace
                                                                   -2
                                                                   1
                                                                   lr)
                                                                  (("3"
                                                                    (beta 1)
                                                                    (("3"
                                                                      (expand
                                                                       "union")
                                                                      (("3"
                                                                        (expand
                                                                         "member")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide -1 -2 -3 5 6)
                                                      (("4"
                                                        (expand "subset?")
                                                        (("4"
                                                          (expand "member")
                                                          (("4"
                                                            (skosimp*)
                                                            (("4"
                                                              (expand "union")
                                                              (("4"
                                                                (replace
                                                                 -3
                                                                 1
                                                                 lr)
                                                                (("4"
                                                                  (beta 1)
                                                                  (("4"
                                                                    (expand
                                                                     "union")
                                                                    (("4"
                                                                      (expand
                                                                       "member")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (closure_connect-5 "did not accept graph_ops" 3392903804
   ("" (skosimp*)
    (("" (bddsimp)
      (("1" (lemma "subgraph_conn")
        (("1" (inst -1 "t_close(G!1)" "G!1")
          (("1" (lemma "t_close_1")
            (("1" (inst -1 "G!1" "t_close(G!1)")
              (("1" (bddsimp)
                (("1" (replace -1 1 lr) (("1" (propax) nil nil)) nil)
                 ("2" (expand "super") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "graph_connected[T].piece_eq_conn")
        (("2" (lemma "graph_connected[T].piece_eq_conn")
          (("2" (inst -1 "G!1")
            (("2" (inst -2 "t_close(G!1)")
              (("2" (iff)
                (("2" (bddsimp)
                  (("2" (hide -2 2)
                    (("2" (expand "piece_connected?" 1)
                      (("2" (bddsimp)
                        (("1" (lemma "t_close_1")
                          (("1" (inst?)
                            (("1" (inst -1 "t_close(G!1)")
                              (("1" (bddsimp)
                                (("1" (expand "piece_connected?")
                                  (("1" (bddsimp)
                                    (("1" (expand "empty?")
                                      (("1"
                                        (replace -1 -4 rl)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "piece_connected?")
                            (("2" (bddsimp)
                              (("2"
                                (inst -3 "subgraph(t_close(G!1),vert(H1!1))"
                                 "subgraph(t_close(G!1),vert(H2!1))")
                                (("2" (bddsimp)
                                  (("1" (hide -1 -2 2 3)
                                    (("1" (lemma "t_close_1")
                                      (("1"
                                        (expand "empty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst -3 "x!1")
                                                (("1"
                                                  (expand "subgraph")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G!1"
                                                       "t_close(G!1)")
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (replace -1 1 lr)
                                                          (("1"
                                                            (hide -1 -2 -3)
                                                            (("1"
                                                              (reveal -6)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   lr)
                                                                  (("1"
                                                                    (expand
                                                                     "union")
                                                                    (("1"
                                                                      (expand
                                                                       "union")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2 1 3)
                                    (("2" (expand "empty?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst -3 "x!1")
                                              (("2"
                                                (lemma "t_close_1")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "G!1"
                                                   "t_close(G!1)")
                                                  (("2"
                                                    (bddsimp)
                                                    (("2"
                                                      (expand "subgraph")
                                                      (("2"
                                                        (replace -1 1 lr)
                                                        (("2"
                                                          (bddsimp)
                                                          (("2"
                                                            (hide -1 -2 -3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 lr)
                                                                (("2"
                                                                  (hide -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "union")
                                                                      (("2"
                                                                        (expand
                                                                         "union")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (expand "subgraph")
                                    (("3" (lemma "t_close_1")
                                      (("3"
                                        (inst -1 "G!1" "t_close(G!1)")
                                        (("3"
                                          (bddsimp)
                                          (("3"
                                            (hide -2 -3 3)
                                            (("3"
                                              (replace -1 3 lr)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (hide -1 -2)
                                                  (("3"
                                                    (expand "intersection")
                                                    (("3"
                                                      (expand "member")
                                                      (("3"
                                                        (expand "empty?")
                                                        (("3"
                                                          (expand "member")
                                                          (("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (inst -1 "x!1")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (lemma "t_close_1")
                                    (("4" (inst -1 "G!1" "t_close(G!1)")
                                      (("4"
                                        (bddsimp)
                                        (("4"
                                          (lemma "subgraph_trans_strong")
                                          (("4"
                                            (lemma "subgraph_trans_strong")
                                            (("4"
                                              (inst
                                               -1
                                               "t_close(G!1)"
                                               "vert(H1!1)")
                                              (("4"
                                                (inst
                                                 -2
                                                 "t_close(G!1)"
                                                 "vert(H2!1)")
                                                (("4"
                                                  (replace -3 * lr)
                                                  (("4"
                                                    (bddsimp)
                                                    (("1"
                                                      (lemma
                                                       "disjoint_trans_strong")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "subgraph(t_close(G!1), vert(H1!1))"
                                                         "subgraph(t_close(G!1), vert(H2!1))")
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (hide -1 -2)
                                                            (("1"
                                                              (lemma
                                                               "t_close_2")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "G!1"
                                                                 "t_close(G!1)"
                                                                 "union(subgraph(t_close(G!1), vert(H1!1)),
                                           subgraph(t_close(G!1), vert(H2!1)))")
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     4
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (expand
                                                                       "num_edges")
                                                                      (("1"
                                                                        (case
                                                                         "subgraph?[T](union(subgraph(t_close(G!1), vert(H1!1)), subgraph(t_close(G!1), vert(H2!1))),t_close(G!1))")
                                                                        (("1"
                                                                          (expand
                                                                           "subgraph?")
                                                                          (("1"
                                                                            (bddsimp)
                                                                            (("1"
                                                                              (lemma
                                                                               "finite_sets[doubleton[T]].card_subset")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "edges
                                  (union(subgraph(t_close(G!1), vert(H1!1)),
                                         subgraph(t_close(G!1), vert(H2!1))))"
                                                                                 "edges(t_close(G!1))")
                                                                                (("1"
                                                                                  (bddsimp)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "finite_sets[doubleton[T]].same_card_subset")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "edges
                                  (union(subgraph(t_close(G!1), vert(H1!1)),
                                         subgraph(t_close(G!1), vert(H2!1))))"
                                                                                         "edges(t_close(G!1))")
                                                                                        (("1"
                                                                                          (bddsimp)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -3
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "subgraph?")
                                                                            (("2"
                                                                              (bddsimp)
                                                                              (("1"
                                                                                (expand
                                                                                 "super")
                                                                                (("1"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "union")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subgraph")
                                                                                              (("1"
                                                                                                (bddsimp)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "subset?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -4)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "union")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subgraph")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "union")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (bddsimp)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         "super")
                                                                        (("2"
                                                                          (expand
                                                                           "union")
                                                                          (("2"
                                                                            (apply-extensionality
                                                                             1
                                                                             :hide?
                                                                             t)
                                                                            (("2"
                                                                              (iff)
                                                                              (("2"
                                                                                (bddsimp)
                                                                                (("1"
                                                                                  (expand
                                                                                   "union")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       -1
                                                                                       lr)
                                                                                      (("1"
                                                                                        (copy
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -5
                                                                                           -1
                                                                                           lr)
                                                                                          (("1"
                                                                                            (beta
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -5)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "subgraph")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   1
                                                                                                   lr)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subgraph")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "subgraph")
                                                                                          (("2"
                                                                                            (prop)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -4
                                                                     5)
                                                                    (("2"
                                                                      (expand
                                                                       "union")
                                                                      (("2"
                                                                        (decompose-equality
                                                                         -2)
                                                                        (("2"
                                                                          (expand
                                                                           "subgraph")
                                                                          (("2"
                                                                            (replace
                                                                             -3
                                                                             1
                                                                             lr)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -3)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   lr)
                                                                                  (("2"
                                                                                    (apply-extensionality
                                                                                     1
                                                                                     :hide?
                                                                                     t)
                                                                                    (("2"
                                                                                      (iff
                                                                                       1)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     5)
                                                                    (("3"
                                                                      (expand
                                                                       "super")
                                                                      (("3"
                                                                        (expand
                                                                         "subgraph?")
                                                                        (("3"
                                                                          (bddsimp)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "subset?")
                                                                              (("1"
                                                                                (expand
                                                                                 "member")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (bddsimp)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subgraph")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "union")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (bddsimp)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -4
                                                                                                   -1
                                                                                                   lr)
                                                                                                  (("1"
                                                                                                    (beta
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "H1!1")
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "H2!1")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (bddsimp)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "x!3")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "x!3")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "x!2")
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -3
                                                                             -4)
                                                                            (("2"
                                                                              (expand
                                                                               "subset?")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "subgraph")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "union")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("2"
                                                                                            (bddsimp)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "union")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "union")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("1"
                                                                                                      (copy
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -3
                                                                                                         lr)
                                                                                                        (("1"
                                                                                                          (beta
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -2
                                                                                               1
                                                                                               lr)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -1
                                                             -2
                                                             -3
                                                             -5
                                                             5)
                                                            (("2"
                                                              (expand
                                                               "empty?")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     -4
                                                                     "x!1")
                                                                    (("2"
                                                                      (expand
                                                                       "intersection")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (expand
                                                                           "subgraph")
                                                                          (("2"
                                                                            (bddsimp)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-5 -6 1 2 3))
                                                      (("2"
                                                        (expand "union")
                                                        (("2"
                                                          (expand "union")
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "subset?")
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   lr)
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (skosimp*)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (-5 -6 1 2 3))
                                                      (("3"
                                                        (expand "subset?")
                                                        (("3"
                                                          (expand "empty?" -2)
                                                          (("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (expand
                                                               "member")
                                                              (("3"
                                                                (expand
                                                                 "union")
                                                                (("3"
                                                                  (replace
                                                                   -2
                                                                   1
                                                                   lr)
                                                                  (("3"
                                                                    (beta 1)
                                                                    (("3"
                                                                      (expand
                                                                       "union")
                                                                      (("3"
                                                                        (expand
                                                                         "member")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide -1 -2 -3 5 6)
                                                      (("4"
                                                        (expand "subset?")
                                                        (("4"
                                                          (expand "member")
                                                          (("4"
                                                            (skosimp*)
                                                            (("4"
                                                              (expand "union")
                                                              (("4"
                                                                (replace
                                                                 -3
                                                                 1
                                                                 lr)
                                                                (("4"
                                                                  (beta 1)
                                                                  (("4"
                                                                    (expand
                                                                     "union")
                                                                    (("4"
                                                                      (expand
                                                                       "member")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (t_close const-decl "graph[T]" complem nil)
    (super const-decl "bool" complem nil)
    (t_close_1 formula-decl nil complem nil)
    (subgraph_conn formula-decl nil complem nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (piece_connected? const-decl "bool" graph_conn_defs nil)
    (union const-decl "set" sets nil)
    (union const-decl "graph[T]" graph_ops nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (subgraph_trans_strong formula-decl nil complem nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint_trans_strong formula-decl nil complem nil)
    (t_close_2 formula-decl nil complem nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (num_edges const-decl "nat" graph_ops nil)
    (subset? const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (Subgraph type-eq-decl nil subgraphs nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (empty? const-decl "bool" sets nil) (empty? const-decl "bool" graphs nil)
    (piece_eq_conn formula-decl nil graph_connected nil))
   shostak)
  (closure_connect-4 "finally" 3350640147
   ("" (skosimp*)
    (("" (bddsimp)
      (("1" (lemma "subgraph_conn")
        (("1" (inst -1 "t_close(G!1)" "G!1")
          (("1" (install-rewrites "complem")
            (("1" (lemma "t_close_1")
              (("1" (inst -1 "G!1" "t_close(G!1)")
                (("1" (bddsimp)
                  (("1" (replace -1 1 lr) (("1" (propax) nil nil)) nil)
                   ("2" (expand "super") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "graph_connected[T].piece_eq_conn")
        (("2" (lemma "graph_connected[T].piece_eq_conn")
          (("2" (inst -1 "G!1")
            (("2" (inst -2 "t_close(G!1)")
              (("2" (iff)
                (("2" (bddsimp)
                  (("2" (hide -2 2)
                    (("2" (expand "piece_connected?" 1)
                      (("2" (bddsimp)
                        (("1" (lemma "t_close_1")
                          (("1" (inst?)
                            (("1" (inst -1 "t_close(G!1)")
                              (("1" (bddsimp)
                                (("1" (expand "piece_connected?")
                                  (("1" (bddsimp)
                                    (("1" (expand "empty?")
                                      (("1"
                                        (replace -1 -4 rl)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "piece_connected?")
                            (("2" (bddsimp)
                              (("2"
                                (inst -3 "subgraph(t_close(G!1),vert(H1!1))"
                                 "subgraph(t_close(G!1),vert(H2!1))")
                                (("2" (bddsimp)
                                  (("1" (hide -1 -2 2 3)
                                    (("1" (lemma "t_close_1")
                                      (("1"
                                        (expand "empty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst -3 "x!1")
                                                (("1"
                                                  (expand "subgraph")
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G!1"
                                                       "t_close(G!1)")
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (replace -1 1 lr)
                                                          (("1"
                                                            (hide -1 -2 -3)
                                                            (("1"
                                                              (reveal -6)
                                                              (("1"
                                                                (install-rewrites
                                                                 "graph_ops[T]")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     lr)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (beta
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2 1 3)
                                    (("2" (expand "empty?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst -3 "x!1")
                                              (("2"
                                                (install-rewrites
                                                 "graph_ops[T]")
                                                (("2"
                                                  (lemma "t_close_1")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "G!1"
                                                     "t_close(G!1)")
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (expand "subgraph")
                                                        (("2"
                                                          (replace -1 1 lr)
                                                          (("2"
                                                            (bddsimp)
                                                            (("2"
                                                              (hide -1 -2 -3)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   lr)
                                                                  (("2"
                                                                    (beta 1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (expand "subgraph")
                                    (("3" (lemma "t_close_1")
                                      (("3"
                                        (inst -1 "G!1" "t_close(G!1)")
                                        (("3"
                                          (bddsimp)
                                          (("3"
                                            (hide -2 -3 3)
                                            (("3"
                                              (replace -1 3 lr)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (hide -1 -2)
                                                  (("3"
                                                    (expand "intersection")
                                                    (("3"
                                                      (expand "member")
                                                      (("3"
                                                        (expand "empty?")
                                                        (("3"
                                                          (expand "member")
                                                          (("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (inst -1 "x!1")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (lemma "t_close_1")
                                    (("4" (inst -1 "G!1" "t_close(G!1)")
                                      (("4"
                                        (bddsimp)
                                        (("4"
                                          (lemma "subgraph_trans_strong")
                                          (("4"
                                            (lemma "subgraph_trans_strong")
                                            (("4"
                                              (inst
                                               -1
                                               "t_close(G!1)"
                                               "vert(H1!1)")
                                              (("4"
                                                (inst
                                                 -2
                                                 "t_close(G!1)"
                                                 "vert(H2!1)")
                                                (("4"
                                                  (replace -3 * lr)
                                                  (("4"
                                                    (bddsimp)
                                                    (("1"
                                                      (lemma
                                                       "disjoint_trans_strong")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "subgraph(t_close(G!1), vert(H1!1))"
                                                         "subgraph(t_close(G!1), vert(H2!1))")
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (hide -1 -2)
                                                            (("1"
                                                              (lemma
                                                               "t_close_2")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "G!1"
                                                                 "t_close(G!1)"
                                                                 "union(subgraph(t_close(G!1), vert(H1!1)),
                               subgraph(t_close(G!1), vert(H2!1)))")
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     4
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (expand
                                                                       "num_edges")
                                                                      (("1"
                                                                        (case
                                                                         "subgraph?[T](union(subgraph(t_close(G!1), vert(H1!1)), subgraph(t_close(G!1), vert(H2!1))),t_close(G!1))")
                                                                        (("1"
                                                                          (expand
                                                                           "subgraph?")
                                                                          (("1"
                                                                            (bddsimp)
                                                                            (("1"
                                                                              (lemma
                                                                               "finite_sets[doubleton[T]].card_subset")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "edges
                (union(subgraph(t_close(G!1), vert(H1!1)),
                       subgraph(t_close(G!1), vert(H2!1))))"
                                                                                 "edges(t_close(G!1))")
                                                                                (("1"
                                                                                  (bddsimp)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "finite_sets[doubleton[T]].same_card_subset")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "edges
                (union(subgraph(t_close(G!1), vert(H1!1)),
                       subgraph(t_close(G!1), vert(H2!1))))"
                                                                                         "edges(t_close(G!1))")
                                                                                        (("1"
                                                                                          (bddsimp)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -3
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "subgraph?")
                                                                            (("2"
                                                                              (bddsimp)
                                                                              (("1"
                                                                                (expand
                                                                                 "super")
                                                                                (("1"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "union")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subgraph")
                                                                                              (("1"
                                                                                                (bddsimp)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "subset?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -4)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "union")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subgraph")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "union")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (bddsimp)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         "super")
                                                                        (("2"
                                                                          (expand
                                                                           "union")
                                                                          (("2"
                                                                            (apply-extensionality
                                                                             1
                                                                             :hide?
                                                                             t)
                                                                            (("2"
                                                                              (iff)
                                                                              (("2"
                                                                                (bddsimp)
                                                                                (("1"
                                                                                  (install-rewrites
                                                                                   "graph_ops[T]")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         -1
                                                                                         lr)
                                                                                        (("1"
                                                                                          (copy
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -5
                                                                                             -1
                                                                                             lr)
                                                                                            (("1"
                                                                                              (beta
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "subgraph")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -3
                                                                                                     1
                                                                                                     lr)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -2
                                                                                   -3
                                                                                   -4)
                                                                                  (("2"
                                                                                    (install-rewrites
                                                                                     "graph_ops[T]")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -4
                                                                     5)
                                                                    (("2"
                                                                      (install-rewrites
                                                                       "graph_ops[T]")
                                                                      (("2"
                                                                        (expand
                                                                         "subgraph")
                                                                        (("2"
                                                                          (expand
                                                                           "union")
                                                                          (("2"
                                                                            (expand
                                                                             "union")
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 *
                                                                                 lr)
                                                                                (("2"
                                                                                  (hide
                                                                                   4)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (apply-extensionality
                                                                                       1
                                                                                       :hide?
                                                                                       t)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -2
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (iff)
                                                                                          (("2"
                                                                                            (bddsimp)
                                                                                            (("2"
                                                                                              (copy
                                                                                               -1)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -3
                                                                                                 -2
                                                                                                 lr)
                                                                                                (("2"
                                                                                                  (beta
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     5)
                                                                    (("3"
                                                                      (expand
                                                                       "super")
                                                                      (("3"
                                                                        (expand
                                                                         "subgraph?")
                                                                        (("3"
                                                                          (bddsimp)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "subset?")
                                                                              (("1"
                                                                                (expand
                                                                                 "member")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (bddsimp)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subgraph")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "union")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (bddsimp)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -4
                                                                                                   -1
                                                                                                   lr)
                                                                                                  (("1"
                                                                                                    (beta
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "H1!1")
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "H2!1")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (bddsimp)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "x!3")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "x!3")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "x!2")
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -3
                                                                             -4)
                                                                            (("2"
                                                                              (expand
                                                                               "subset?")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "subgraph")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "union")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("2"
                                                                                            (bddsimp)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "union")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "union")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("1"
                                                                                                      (copy
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -3
                                                                                                         lr)
                                                                                                        (("1"
                                                                                                          (beta
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -2
                                                                                               1
                                                                                               lr)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -1
                                                             -2
                                                             -3
                                                             -5
                                                             5)
                                                            (("2"
                                                              (expand
                                                               "empty?")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     -4
                                                                     "x!1")
                                                                    (("2"
                                                                      (expand
                                                                       "intersection")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (expand
                                                                           "subgraph")
                                                                          (("2"
                                                                            (bddsimp)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-5 -6 1 2 3))
                                                      (("2"
                                                        (install-rewrites
                                                         "graph_ops[T]")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               1
                                                               lr)
                                                              (("2"
                                                                (beta 1)
                                                                (("2"
                                                                  (expand
                                                                   "union")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (-5 -6 1 2 3))
                                                      (("3"
                                                        (expand "subset?")
                                                        (("3"
                                                          (expand "empty?" -2)
                                                          (("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (expand
                                                               "member")
                                                              (("3"
                                                                (expand
                                                                 "union")
                                                                (("3"
                                                                  (replace
                                                                   -2
                                                                   1
                                                                   lr)
                                                                  (("3"
                                                                    (beta 1)
                                                                    (("3"
                                                                      (expand
                                                                       "union")
                                                                      (("3"
                                                                        (expand
                                                                         "member")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide -1 -2 -3 5 6)
                                                      (("4"
                                                        (expand "subset?")
                                                        (("4"
                                                          (expand "member")
                                                          (("4"
                                                            (skosimp*)
                                                            (("4"
                                                              (expand "union")
                                                              (("4"
                                                                (replace
                                                                 -3
                                                                 1
                                                                 lr)
                                                                (("4"
                                                                  (beta 1)
                                                                  (("4"
                                                                    (expand
                                                                     "union")
                                                                    (("4"
                                                                      (expand
                                                                       "member")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (piece_connected? const-decl "bool" graph_conn_defs nil)
    (union const-decl "graph[T]" graph_ops nil)
    (num_edges const-decl "nat" graph_ops nil)
    (subgraph const-decl "Subgraph(G)" subgraphs nil)
    (Subgraph type-eq-decl nil subgraphs nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (empty? const-decl "bool" graphs nil)
    (piece_eq_conn formula-decl nil graph_connected nil))
   shostak)
  (closure_connect-3 "after_strong" 3350582270
   ("" (skosimp*)
    (("" (bddsimp)
      (("1" (lemma "subgraph_conn")
        (("1" (inst -1 "t_close(G!1)" "G!1")
          (("1" (install-rewrites "complem")
            (("1" (lemma "t_close_1")
              (("1" (inst -1 "G!1" "t_close(G!1)")
                (("1" (bddsimp)
                  (("1" (replace -1 1 lr) (("1" (propax) nil nil)) nil)
                   ("2" (expand "super") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "graph_connected[T].piece_eq_conn")
        (("2" (lemma "graph_connected[T].piece_eq_conn")
          (("2" (inst -1 "G!1")
            (("2" (inst -2 "t_close(G!1)")
              (("2" (iff)
                (("2" (bddsimp)
                  (("2" (hide -2 2)
                    (("2" (expand "piece_connected?" 1)
                      (("2" (bddsimp)
                        (("1" (lemma "t_close_1")
                          (("1" (inst?)
                            (("1" (inst -1 "t_close(G!1)")
                              (("1" (bddsimp)
                                (("1" (expand "piece_connected?")
                                  (("1" (bddsimp)
                                    (("1" (expand "empty?")
                                      (("1"
                                        (replace -1 -4 rl)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "piece_connected?")
                            (("2" (bddsimp)
                              (("2" (inst -3 "H1!1" "H2!1")
                                (("2" (bddsimp)
                                  (("2" (lemma "disjoint_trans_strong")
                                    (("2" (inst -1 "H1!1" "H2!1")
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (apply-extensionality 4 :hide? t)
                                          (("1"
                                            (apply-extensionality 1 :hide? t)
                                            (("1"
                                              (iff)
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (lemma "t_close_1")
                                                  (("1"
                                                    (lemma "t_close_2")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "G!1"
                                                       "t_close(G!1)")
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand "super")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "G!1"
                                                             "t_close(G!1)"
                                                             "union(H1!1,H2!1)")
                                                            (("1"
                                                              (install-rewrites
                                                               "subgraphs[T]")
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (lemma
                                                                   "graph_ops[T].del_edge_num")
                                                                  (("1"
                                                                    (expand
                                                                     "subgraph?")
                                                                    (("1"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (hide
                                                                         -2
                                                                         -4
                                                                         -7
                                                                         -9)
                                                                        (("1"
                                                                          (lemma
                                                                           "finite_sets[doubleton[T]].card_subset")
                                                                          (("1"
                                                                            (lemma
                                                                             "finite_sets[doubleton[T]].same_card_subset")
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "edges(G!1)"
                                                                               "edges(t_close(G!1))")
                                                                              (("1"
                                                                                (bddsimp)
                                                                                (("1"
                                                                                  (hide
                                                                                   -4)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "num_edges")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -7
                                                                                       -3
                                                                                       lr)
                                                                                      (("1"
                                                                                        (stop-rewrite)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "card(edges(t_close(G!1)))=card(edges(union(H1!1,H2!1)))")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "edges(union(H1!1, H2!1))"
                                                                                               "edges(t_close(G!1))")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -8
                                                                                                 -3
                                                                                                 lr)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -7
                                                                                               *
                                                                                               rl)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-6
                                                                    -7
                                                                    1
                                                                    2))
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   (-6 -7 1))
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "finite_sets[doubleton[T]].card_subset")
                                                  (("2"
                                                    (lemma
                                                     "finite_sets[doubleton[T]].same_card_subset")
                                                    (("2"
                                                      (lemma "t_close_2")
                                                      (("2"
                                                        (lemma "t_close_1")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "G!1"
                                                           "t_close(G!1)")
                                                          (("2"
                                                            (inst
                                                             -2
                                                             "G!1"
                                                             "t_close(G!1)"
                                                             "union(H1!1,H2!1)")
                                                            (("2"
                                                              (expand "super")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (inst
                                                                     -6
                                                                     "edges(G!1)"
                                                                     "edges(t_close(G!1))")
                                                                    (("1"
                                                                      (expand
                                                                       "subgraph?")
                                                                      (("1"
                                                                        (bddsimp)
                                                                        (("1"
                                                                          (expand
                                                                           "num_edges")
                                                                          (("1"
                                                                            (replace
                                                                             -11
                                                                             -5
                                                                             rl)
                                                                            (("1"
                                                                              (case
                                                                               " card(edges(t_close(G!1))) = card(edges(G!1))")
                                                                              (("1"
                                                                                (inst
                                                                                 -7
                                                                                 "edges(G!1)"
                                                                                 "edges(t_close(G!1))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-7
                                                                      -9
                                                                      1))
                                                                    (("2"
                                                                      (install-rewrites
                                                                       "graphs[T]")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "t_close_1")
                                            (("2"
                                              (inst -1 "G!1" "t_close(G!1)")
                                              (("2"
                                                (bddsimp)
                                                (("2"
                                                  (replace -6 1 rl)
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil)
                                         ("3" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (closure_connect-2 "try" 3350247585
   ("" (skosimp*)
    (("" (bddsimp)
      (("1" (lemma "subgraph_conn")
        (("1" (inst -1 "t_close(G!1)" "G!1")
          (("1" (install-rewrites "complem")
            (("1" (lemma "t_close_1")
              (("1" (inst -1 "G!1" "t_close(G!1)")
                (("1" (bddsimp)
                  (("1" (replace -1 1 lr) (("1" (propax) nil nil)) nil)
                   ("2" (expand "super") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "graph_connected[T].piece_eq_conn")
        (("2" (lemma "graph_connected[T].piece_eq_conn")
          (("2" (inst -1 "G!1")
            (("2" (inst -2 "t_close(G!1)")
              (("2" (iff)
                (("2" (bddsimp)
                  (("2" (hide -2 2)
                    (("2" (expand "piece_connected?" 1)
                      (("2" (bddsimp)
                        (("1" (lemma "t_close_1")
                          (("1" (inst?)
                            (("1" (inst -1 "t_close(G!1)")
                              (("1" (bddsimp)
                                (("1" (expand "piece_connected?")
                                  (("1" (bddsimp)
                                    (("1" (expand "empty?")
                                      (("1"
                                        (replace -1 -4 rl)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "piece_connected?")
                            (("2" (bddsimp)
                              (("2" (inst -3 "H1!1" "H2!1")
                                (("2" (bddsimp)
                                  (("2" (lemma "disjoint_trans")
                                    (("2" (inst -1 "H1!1" "H2!1")
                                      (("2"
                                        (bddsimp)
                                        (("1"
                                          (apply-extensionality 4 :hide? t)
                                          (("1"
                                            (apply-extensionality 1 :hide? t)
                                            (("1"
                                              (iff)
                                              (("1"
                                                (bddsimp)
                                                (("1" (postpone) nil nil)
                                                 ("2" (postpone) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil)
                                         ("2" (postpone) nil nil)
                                         ("3" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (closure_connect-1 nil 3350245294
   ("" (skosimp*)
    (("" (bddsimp)
      (("1" (lemma "subgraph_conn")
        (("1" (inst -1 "t_close(G!1)" "G!1")
          (("1" (install-rewrites "complem")
            (("1" (lemma "t_close_1")
              (("1" (inst -1 "G!1" "t_close(G!1)")
                (("1" (bddsimp)
                  (("1" (replace -1 1 lr) (("1" (propax) nil nil)) nil)
                   ("2" (expand "super") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "graph_connected[T].piece_eq_conn")
        (("2" (lemma "graph_connected[T].piece_eq_conn")
          (("2" (inst -1 "G!1")
            (("2" (inst -2 "t_close(G!1)")
              (("2" (iff)
                (("2" (bddsimp)
                  (("2" (hide -2 2)
                    (("2" (expand "piece_connected?" 1)
                      (("2" (bddsimp)
                        (("1" (lemma "t_close_1")
                          (("1" (inst?)
                            (("1" (inst -1 "t_close(G!1)")
                              (("1" (bddsimp)
                                (("1" (reveal -3) (("1" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (connected_complem 0
  (connected_complem-2 "redo" 3350743580
   ("" (skosimp*)
    (("" (lemma "trans_complem")
      (("" (inst -1 "t_close(G!1)" "t_close(complement(G!1))")
        (("" (bddsimp)
          (("1" (lemma "complete_conn")
            (("1" (inst -1 "t_close(G!1)")
              (("1" (bddsimp)
                (("1" (hide -2 2 3)
                  (("1" (lemma "t_close_1")
                    (("1" (inst -1 "G!1" "t_close(G!1)")
                      (("1" (bddsimp)
                        (("1" (expand "empty?")
                          (("1" (replace -1 -4 lr) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2 -1 rl)
                  (("2" (lemma "closure_connect")
                    (("2" (inst -1 "G!1") (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "complete_conn")
            (("2" (inst -1 "t_close(G!1)")
              (("2" (bddsimp)
                (("1" (lemma "t_close_1")
                  (("1" (inst -1 "G!1" "t_close(G!1)")
                    (("1" (bddsimp)
                      (("1" (expand "empty?")
                        (("1" (replace -1 -4 lr) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2 -1 rl)
                  (("2" (lemma "closure_connect")
                    (("2" (inst -1 "complement(G!1)") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 3 4)
            (("3" (lemma "t_close_1")
              (("3" (inst -1 "G!1" "t_close(G!1)")
                (("3" (bddsimp)
                  (("3" (expand "completion")
                    (("3" (replace -1 1 lr)
                      (("3" (expand "union")
                        (("3" (bddsimp)
                          (("1" (expand "union")
                            (("1" (expand "member")
                              (("1" (lemma "t_close_1")
                                (("1"
                                  (inst -1 "complement(G!1)"
                                   "t_close(complement(G!1))")
                                  (("1" (bddsimp)
                                    (("1" (expand "super")
                                      (("1"
                                        (expand "subgraph?")
                                        (("1"
                                          (bddsimp)
                                          (("1"
                                            (hide -1 -2 -4 -6 -8)
                                            (("1"
                                              (case
                                               "union(edges(G!1),edges(complement(G!1)))=all_edges(vert(G!1))")
                                              (("1"
                                                (name "tc" "t_close")
                                                (("1"
                                                  (replace -1 * lr)
                                                  (("1"
                                                    (apply-extensionality
                                                     1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (iff)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (typepred "x!1")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (expand
                                                               "all_edges")
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 "x!2"
                                                                 "y!1")
                                                                (("1"
                                                                  (bddsimp)
                                                                  (("1"
                                                                    (typepred
                                                                     "tc(G!1)")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x!1")
                                                                      (("1"
                                                                        (bddsimp)
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "y!1")
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             -2
                                                                             lr)
                                                                            (("1"
                                                                              (expand
                                                                               "dbl")
                                                                              (("1"
                                                                                (replace
                                                                                 -7
                                                                                 -2
                                                                                 lr)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "tc(G!1)")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x!1")
                                                                      (("2"
                                                                        (bddsimp)
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "x!2")
                                                                          (("2"
                                                                            (hide
                                                                             -5
                                                                             -6)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -2
                                                                                 1
                                                                                 lr)
                                                                                (("2"
                                                                                  (expand
                                                                                   "dbl")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "tc(complement(G!1))")
                                                          (("2"
                                                            (inst -1 "x!1")
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (typepred
                                                                 "x!1")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (copy -2)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x!2")
                                                                      (("2"
                                                                        (inst
                                                                         -3
                                                                         "y!1")
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           *
                                                                           lr)
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide
                                                                               -6
                                                                               -7
                                                                               -9)
                                                                              (("1"
                                                                                (lemma
                                                                                 "t_close_1")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "complement(G!1)"
                                                                                   "t_close(complement(G!1))")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "tc")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         (-4
                                                                                          -5)
                                                                                         lr)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -3
                                                                                           -8
                                                                                           -9)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "complement"
                                                                                             (-1
                                                                                              -2))
                                                                                            (("1"
                                                                                              (expand
                                                                                               "all_edges")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 2
                                                                                                 "x!2"
                                                                                                 "y!1")
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "dbl")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "dbl")
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (expand
                                                                               "dbl")
                                                                              (("4"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma "t_close_1")
                                                          (("3"
                                                            (lemma
                                                             "t_close_1")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "G!1"
                                                               "t_close(G!1)")
                                                              (("3"
                                                                (inst
                                                                 -2
                                                                 "complement(G!1)"
                                                                 "t_close(complement(G!1))")
                                                                (("3"
                                                                  (bddsimp)
                                                                  (("3"
                                                                    (hide
                                                                     -3
                                                                     -6)
                                                                    (("3"
                                                                      (replace
                                                                       -6
                                                                       *
                                                                       lr)
                                                                      (("3"
                                                                        (expand
                                                                         "super")
                                                                        (("3"
                                                                          (expand
                                                                           "subgraph?")
                                                                          (("3"
                                                                            (bddsimp)
                                                                            (("3"
                                                                              (expand
                                                                               "subset?")
                                                                              (("3"
                                                                                (expand
                                                                                 "member")
                                                                                (("3"
                                                                                  (inst
                                                                                   -8
                                                                                   "x!1")
                                                                                  (("3"
                                                                                    (inst
                                                                                     -9
                                                                                     "x!1")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "union")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("3"
                                                                                          (decompose-equality
                                                                                           -7)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!1")
                                                                                            (("3"
                                                                                              (iff
                                                                                               -1)
                                                                                              (("3"
                                                                                                (prop)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 -3 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "union")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (expand "complement")
                                                        (("2"
                                                          (expand
                                                           "difference")
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (expand
                                                               "all_edges")
                                                              (("2"
                                                                (apply-extensionality
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (iff 1)
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (typepred
                                                                       "x!1")
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (typepred
                                                                           "G!1")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "x!1")
                                                                            (("2"
                                                                              (prop)
                                                                              (("2"
                                                                                (copy
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x!2")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "y!1")
                                                                                    (("2"
                                                                                      (inst
                                                                                       2
                                                                                       "x!2"
                                                                                       "y!1")
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             2
                                                                                             lr)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "dbl")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -2
                                                                                           2
                                                                                           lr)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "dbl")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (replace
                                                                                           -1
                                                                                           2
                                                                                           lr)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "dbl")
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (replace
                                                                                           -1
                                                                                           2
                                                                                           lr)
                                                                                          (("4"
                                                                                            (expand
                                                                                             "dbl")
                                                                                            (("4"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "t_close_1")
                            (("2"
                              (inst -1 "complement(G!1)"
                               "t_close(complement(G!1))")
                              (("2" (bddsimp)
                                (("2" (replace -4 1 lr)
                                  (("2" (replace -1 1 lr)
                                    (("2" (hide-all-but (1 2))
                                      (("2"
                                        (expand "union")
                                        (("2"
                                          (apply-extensionality 1 :hide? t)
                                          (("2"
                                            (iff)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "member")
                                                (("1" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (expand "complement")
                                                (("2"
                                                  (expand "member")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "member")
                                                (("3" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (lemma "t_close_1")
            (("4" (inst -1 "complement(G!1)" "t_close(complement(G!1))")
              (("4" (bddsimp) nil nil)) nil))
            nil)
           ("5" (lemma "t_close_1")
            (("5" (inst -1 "G!1" "t_close(G!1)") (("5" (bddsimp) nil nil))
              nil))
            nil)
           ("6" (lemma "t_close_1")
            (("6" (inst -1 "complement(G!1)" "t_close(complement(G!1))")
              (("6" (assert)
                (("6" (bddsimp)
                  (("6" (hide -2 -3)
                    (("6" (lemma "t_close_1")
                      (("6" (inst -1 "G!1" "t_close(G!1)")
                        (("6" (bddsimp)
                          (("6" (case " vert(complement(G!1))=vert(G!1)")
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but (1 3))
                              (("2" (assert)
                                (("2" (expand "complement")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trans_complem formula-decl nil complem nil)
    (closure_connect formula-decl nil complem nil)
    (empty? const-decl "bool" graphs nil)
    (t_close_1 formula-decl nil complem nil)
    (complete_conn formula-decl nil complem nil)
    (member const-decl "bool" sets nil) (super const-decl "bool" complem nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (subset? const-decl "bool" sets nil)
    (tc skolem-const-decl "[graph[T] -> graph[T]]" complem nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (difference const-decl "set" sets nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (union const-decl "set" sets nil)
    (union const-decl "graph[T]" graph_ops nil)
    (completion const-decl "graph[T]" complem nil)
    (complement const-decl "graph[T]" complem nil)
    (t_close const-decl "graph[T]" complem nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil))
   shostak)
  (connected_complem-1 nil 3350735783
   ("" (skosimp*)
    (("" (lemma "trans_complem")
      (("" (inst -1 "t_close(G!1)" "t_close(complement(G!1))")
        (("" (bddsimp)
          (("1" (lemma "complete_conn")
            (("1" (inst -1 "t_close(G!1)")
              (("1" (bddsimp)
                (("1" (hide -2 2 3)
                  (("1" (lemma "t_close_1")
                    (("1" (inst -1 "G!1" "t_close(G!1)")
                      (("1" (bddsimp)
                        (("1" (expand "empty?")
                          (("1" (replace -1 -4 lr) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2 -1 rl)
                  (("2" (lemma "closure_connect")
                    (("2" (inst -1 "G!1") (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "complete_conn")
            (("2" (inst -1 "t_close(G!1)")
              (("2" (bddsimp)
                (("1" (lemma "t_close_1")
                  (("1" (inst -1 "G!1" "t_close(G!1)")
                    (("1" (bddsimp)
                      (("1" (expand "empty?")
                        (("1" (replace - `1 rl) (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2 -1 rl)
                  (("2" (lemma "closure_connect")
                    (("2" (inst -1 "complement(G!1)") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 3 4)
            (("3" (install-rewrites "complem")
              (("3" (lemma "t_close_1")
                (("3" (inst -1 "G!1" "t_close(G!1)")
                  (("3" (bddsimp)
                    (("3" (expand "completion")
                      (("3" (replace -1 1 lr)
                        (("3" (expand "union")
                          (("3" (bddsimp)
                            (("1" (expand "union")
                              (("1" (expand "member")
                                (("1" (lemma "t_close_1")
                                  (("1"
                                    (inst -1 "complement(G!1)"
                                     "t_close(complement(G!1))")
                                    (("1" (bddsimp)
                                      (("1"
                                        (expand "super")
                                        (("1"
                                          (expand "subgraph?")
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (hide -1 -2 -4 -6 -8)
                                              (("1"
                                                (case
                                                 "union(edges(G!1),edges(complement(G!1)))=all_edges(vert(G!1))")
                                                (("1"
                                                  (expand "union")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "all_edges")
                                                      (("1"
                                                        (extensionality
                                                         "doubleton[T]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "({x: doubleton[T] |
          edges(t_close(G!1))(x) OR edges(t_close(complement(G!1)))(x)})"
                                                           " ({d: doubleton[T] |
           EXISTS (x, y: T):
             x /= y AND d = dbl[T](x, y) AND vert(G!1)(x) AND vert(G!1)(y)})")
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (postpone) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (postpone) nil nil) ("5" (postpone) nil nil)
           ("6" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (p_close_TCC1 0
  (p_close_TCC1-1 nil 3350988831
   ("" (skosimp*)
    (("" (lemma "all_edges_finite")
      (("" (inst -1 "vert(G!1)")
        (("" (lemma "finite_sets[doubleton[T]].finite_subset")
          ((""
            (inst -1 "all_edges(vert(G!1))" "{e: doubleton[T] |
              FORALL (x, y: T):
                x /= y AND e(x) AND e(y) IMPLIES
                 (EXISTS (p: prewalk[T]): walk_from?[T](G!1, p, x, y))}")
            (("" (bddsimp)
              (("" (hide 2)
                (("" (expand "all_edges")
                  (("" (expand "subset?")
                    (("" (expand "member")
                      (("" (skosimp*)
                        (("" (typepred "x!1")
                          (("" (skosimp*)
                            (("" (inst -2 "x!2" "y!1")
                              (("" (replace -1 -2 lr)
                                (("" (expand "dbl")
                                  (("" (bddsimp)
                                    (("1" (inst 2 "x!2" "y!1")
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (install-rewrites "walks[T]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -4 "length(p!1)-1")
                                                    (("1"
                                                      (replace -3 -4 lr)
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -3)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "walk_from?")
                                              (("2"
                                                (expand "walk?")
                                                (("2"
                                                  (bddsimp)
                                                  (("2"
                                                    (expand "verts_in?")
                                                    (("2"
                                                      (inst -4 "0")
                                                      (("2"
                                                        (replace -2 -4 lr)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((all_edges_finite formula-decl nil complem nil)
    (finite_subset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subset? const-decl "bool" sets nil)
    (walk_from? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (all_edges const-decl "set[doubleton[T]]" complem nil)
    (G!1 skolem-const-decl "graph[T]" complem nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil))
   nil
   (p_close subtype
    "{e: doubletons[complem.T].doubleton | FORALL (x, y: complem.T): booleans.IMPLIES(booleans.AND(x /= y, booleans.AND(e(x), e(y))), EXISTS (p: walks[complem.T].prewalk): walks[complem.T].walk_from?(complem.G, p, x, y))}"
    "finite_set[doubleton[T]]")))
 (p_close_TCC2 0
  (p_close_TCC2-1 nil 3350988831
   ("" (skosimp*)
    (("" (typepred "e!1")
      (("" (skosimp*)
        (("" (inst -2 "x!2" "y!1")
          (("" (bddsimp)
            (("1" (skosimp*)
              (("1" (expand "walk_from?")
                (("1" (bddsimp)
                  (("1" (replace -1 -5 lr)
                    (("1" (expand "dbl")
                      (("1" (expand "walk?")
                        (("1" (bddsimp)
                          (("1" (hide -5)
                            (("1" (expand "verts_in?")
                              (("1" (inst -4 "0")
                                (("1" (replace -2 -4 lr)
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -5)
                            (("2" (expand "verts_in?")
                              (("2" (inst -4 "length(p!1)-1")
                                (("2" (replace -3 -4 lr)
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -1 2 lr)
              (("2" (expand "dbl") (("2" (propax) nil nil)) nil)) nil)
             ("3" (replace -1 2 lr)
              (("3" (assert)
                (("3" (expand "dbl") (("3" (propax) nil nil)) nil)) nil))
              nil)
             ("4" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil) (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil complem nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil)
    (verts_in? const-decl "bool" walks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil))
   nil
   (p_close subtype
    "(# vert := vert(complem.G), edges := {e: doubletons[complem.T].doubleton | FORALL (x, y: complem.T): booleans.IMPLIES(booleans.AND(x /= y, booleans.AND(e(x), e(y))), EXISTS (p: walks[complem.T].prewalk): walks[complem.T].walk_from?(complem.G, p, x, y))} #)"
    "graph[T]")))
 (p_subgraph_t 0
  (p_subgraph_t-1 nil 3350988831
   ("" (skosimp*)
    (("" (expand "subgraph?")
      (("" (bddsimp)
        (("1" (expand "subset?")
          (("1" (expand "member")
            (("1" (skosimp*)
              (("1" (lemma "t_close_1")
                (("1" (inst -1 "G!1" "t_close(G!1)")
                  (("1" (bddsimp)
                    (("1" (expand "p_close")
                      (("1" (lemma "trans_walk")
                        (("1" (inst -1 "t_close(G!1)" "_" "_" "_")
                          (("1" (typepred "x!1")
                            (("1" (skosimp*)
                              (("1" (inst -6 "x!2" "y!1")
                                (("1" (bddsimp)
                                  (("1" (skosimp*)
                                    (("1" (inst -2 "p!1" "x!2" "y!1")
                                      (("1"
                                        (expand "super")
                                        (("1"
                                          (expand "subgraph?")
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (expand "edge?")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide -2 3)
                                              (("2"
                                                (hide -3)
                                                (("2"
                                                  (expand "subset?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (expand "walk_from?")
                                                      (("2"
                                                        (bddsimp)
                                                        (("2"
                                                          (expand "walk?")
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (bddsimp)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (expand
                                                                   "edge?")
                                                                  (("1"
                                                                    (inst
                                                                     -8
                                                                     "n!1")
                                                                    (("1"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))")
                                                                        (("1"
                                                                          (prop)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "verts_in?")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (hide
                                                                     -5
                                                                     -7)
                                                                    (("2"
                                                                      (inst
                                                                       -5
                                                                       "i!1")
                                                                      (("2"
                                                                        (replace
                                                                         -4
                                                                         -5
                                                                         rl)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (-1 1 2))
                                    (("2" (replace -1 2 lr)
                                      (("2"
                                        (expand "dbl")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (hide-all-but (-1 1 2))
                                    (("3" (replace -1 2 lr)
                                      (("3"
                                        (expand "dbl")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (expand "member")
            (("2" (skosimp*)
              (("2" (expand "p_close")
                (("2" (lemma "t_close_1")
                  (("2" (inst -1 "G!1" "t_close(G!1)")
                    (("2" (bddsimp)
                      (("2" (replace -1 -4 rl) (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subgraph? const-decl "bool" subgraphs nil)
    (subset? const-decl "bool" sets nil) (T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (t_close const-decl "graph[T]" complem nil)
    (p_close const-decl "graph[T]" complem nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (walk_from? const-decl "bool" walks nil)
    (walk? const-decl "bool" walks nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil)
    (edge? const-decl "bool" graphs nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (super const-decl "bool" complem nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (trans_walk formula-decl nil complem nil)
    (t_close_1 formula-decl nil complem nil)
    (member const-decl "bool" sets nil))
   shostak))
 (p_transitive 0
  (p_transitive-1 nil 3350995166
   ("" (skosimp*)
    (("" (expand "strong_transitive?")
      (("" (skosimp*)
        (("" (expand "edge?")
          (("" (bddsimp)
            (("1" (expand "p_close")
              (("1" (skosimp*)
                (("1" (hide -1 -2)
                  (("1" (install-rewrites "doubletons[T]")
                    (("1" (hide 5)
                      (("1" (assert)
                        (("1" (reveal *)
                          (("1" (bddsimp)
                            (("1" (replace -3 * lr)
                              (("1" (replace -4 * lr) (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (replace -3 * lr)
                              (("2" (replace -4 * lr)
                                (("2" (hide -3 -4)
                                  (("2" (inst -1 "x!1" "y!1")
                                    (("2" (inst -2 "y!1" "z!1")
                                      (("2"
                                        (lemma "walks[T].walk_merge")
                                        (("2"
                                          (bddsimp)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (lemma "walks[T].walk?_reverse")
                                              (("1"
                                                (inst
                                                 -1
                                                 "G!1"
                                                 "y!1"
                                                 "z!1"
                                                 "p!2")
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "G!1"
                                                       "w!1"
                                                       "p!1"
                                                       "x!1"
                                                       "z!1"
                                                       "y!1")
                                                      (("1" (prop) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 -2 1)
                                            (("2" (assert) nil nil))
                                            nil)
                                           ("3"
                                            (hide -1 -2 1)
                                            (("3" (assert) nil nil))
                                            nil)
                                           ("4" (assert) nil nil)
                                           ("5"
                                            (hide -1 -2 1)
                                            (("5"
                                              (expand "dbl")
                                              (("5" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("6"
                                            (hide -1 1)
                                            (("6"
                                              (expand "dbl")
                                              (("6" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("7"
                                            (hide -1 1)
                                            (("7"
                                              (expand "dbl")
                                              (("7" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("8" (assert) nil nil)
                                           ("9"
                                            (hide -1 1)
                                            (("9"
                                              (expand "dbl")
                                              (("9" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("10"
                                            (hide -1 1)
                                            (("10"
                                              (expand "dbl")
                                              (("10" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("11"
                                            (hide -1 1)
                                            (("11"
                                              (expand "dbl")
                                              (("11" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("12" (assert) nil nil)
                                           ("13" (assert) nil nil)
                                           ("14" (assert) nil nil)
                                           ("15" (assert) nil nil)
                                           ("16" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (replace -4 * lr)
                              (("3" (replace -3 * lr)
                                (("3" (inst -1 "x!1" "y!1")
                                  (("3" (inst -2 "y!1" "z!1")
                                    (("3" (hide -3 -4)
                                      (("3"
                                        (bddsimp)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (lemma "walks[T].walk?_reverse")
                                            (("1"
                                              (lemma "walks[T].walk_merge")
                                              (("1"
                                                (inst
                                                 -2
                                                 "G!1"
                                                 "y!1"
                                                 "z!1"
                                                 "p!2")
                                                (("1"
                                                  (bddsimp)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G!1"
                                                       "p!1"
                                                       "w!1"
                                                       "z!1"
                                                       "x!1"
                                                       "y!1")
                                                      (("1"
                                                        (bddsimp)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 1)
                                          (("2"
                                            (expand "dbl")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "dbl")
                                          (("3" (propax) nil nil))
                                          nil)
                                         ("4" (assert) nil nil)
                                         ("5"
                                          (expand "dbl")
                                          (("5" (propax) nil nil))
                                          nil)
                                         ("6"
                                          (expand "dbl")
                                          (("6" (propax) nil nil))
                                          nil)
                                         ("7"
                                          (expand "dbl")
                                          (("7" (propax) nil nil))
                                          nil)
                                         ("8"
                                          (expand "dbl")
                                          (("8" (propax) nil nil))
                                          nil)
                                         ("9"
                                          (expand "dbl")
                                          (("9" (propax) nil nil))
                                          nil)
                                         ("10"
                                          (expand "dbl")
                                          (("10" (propax) nil nil))
                                          nil)
                                         ("11"
                                          (expand "dbl")
                                          (("11" (propax) nil nil))
                                          nil)
                                         ("12" (assert) nil nil)
                                         ("13" (assert) nil nil)
                                         ("14" (assert) nil nil)
                                         ("15" (assert) nil nil)
                                         ("16" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (replace -3 * lr)
                              (("4" (replace -4 * lr) (("4" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strong_transitive? const-decl "bool" complem nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil)
    (edge? const-decl "bool" graphs nil)
    (p_close const-decl "graph[T]" complem nil)
    (walk?_reverse formula-decl nil walks nil)
    (Walk type-eq-decl nil walks nil) (walk? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (walk_merge formula-decl nil walks nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil)
    (dbl const-decl "set[T]" doubletons structures))
   shostak))
 (p_close_1 0
  (p_close_1-1 nil 3351004823
   ("" (skosimp*)
    (("" (bddsimp)
      (("1" (expand "super")
        (("1" (expand "subgraph?")
          (("1" (bddsimp)
            (("1" (expand "subset?")
              (("1" (expand "member")
                (("1" (skosimp*)
                  (("1" (replace -1 * lr)
                    (("1" (hide -1)
                      (("1" (expand "p_close")
                        (("1" (skosimp*)
                          (("1" (lemma "walks[T].edge_to_walk")
                            (("1" (inst -1 "G!1" "x!2" "y!1")
                              (("1" (expand "edg")
                                (("1" (bddsimp)
                                  (("1" (inst 2 "gen_seq2(G!1, x!2, y!1)")
                                    (("1" (expand "walk_from?")
                                      (("1"
                                        (bddsimp)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (install-rewrites "walks[T]")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1)
                                          (("2"
                                            (install-rewrites "walks[T]")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 3)
                                    (("2" (install-rewrites "graphs[T]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "graphs[T].edge_has_2_verts")
                                          (("2"
                                            (inst -1 "x!1" "x!2" "y!1")
                                            (("2"
                                              (bddsimp)
                                              (("1"
                                                (replace -3 -4 lr)
                                                (("1"
                                                  (lemma
                                                   "graphs[T].edge?_comm")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "G!1"
                                                     "x!2"
                                                     "y!1")
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (expand "edge?")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "edge?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -1 * lr)
              (("2" (hide -1)
                (("2" (expand "subset?")
                  (("2" (expand "member")
                    (("2" (expand "p_close") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (replace -1 * lr)
        (("2" (hide -1)
          (("2" (expand "p_close") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((subgraph? const-decl "bool" subgraphs nil)
    (subset? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil)
    (walk_from? const-decl "bool" walks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (gen_seq2 const-decl "Seq(G)" walks nil) (Seq type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (edge_has_2_verts formula-decl nil graphs nil)
    (edge?_comm formula-decl nil graphs nil)
    (edge? const-decl "bool" graphs nil)
    (edg const-decl "doubleton[T]" graphs nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil)
    (T formal-type-decl nil complem nil)
    (edge_to_walk formula-decl nil walks nil)
    (p_close const-decl "graph[T]" complem nil)
    (member const-decl "bool" sets nil) (super const-decl "bool" complem nil))
   shostak))
 (p_close_trans 0
  (p_close_trans-1 nil 3351004673
   ("" (skosimp*)
    (("" (lemma "t_close_4")
      (("" (inst -1 "G!1" "p_close(G!1)")
        (("" (lemma "p_subgraph_t")
          (("" (inst -1 "G!1")
            (("" (lemma "p_transitive")
              (("" (inst?)
                (("" (lemma "p_close_1")
                  (("" (inst -1 "G!1" "p_close(G!1)")
                    (("" (expand "super")
                      (("" (bddsimp) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((t_close_4 formula-decl nil complem nil)
    (p_subgraph_t formula-decl nil complem nil)
    (p_transitive formula-decl nil complem nil)
    (p_close_1 formula-decl nil complem nil)
    (super const-decl "bool" complem nil)
    (p_close const-decl "graph[T]" complem nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil complem nil))
   shostak))
 (t_subgraph 0
  (t_subgraph-2 "some change" 3392724986
   ("" (skosimp*)
    (("" (lemma "p_close_trans")
      (("" (copy -1)
        (("" (inst -1 "G!1")
          (("" (inst -2 "H!1")
            (("" (replace -1 1 lr)
              (("" (replace -2 1 lr)
                (("" (hide -1 -2)
                  (("" (lemma "p_close_1")
                    (("" (lemma "p_close_1")
                      (("" (inst -1 "G!1" "p_close(G!1)")
                        (("" (inst -2 "H!1" "p_close(H!1)")
                          (("" (bddsimp)
                            (("" (expand "super")
                              (("" (expand "subgraph?")
                                (("" (bddsimp)
                                  (("1" (expand "subset?" 1)
                                    (("1" (expand "member")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "p_close" (-9 1))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst -9 "x!2" "y!1")
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst 2 "p!1")
                                                    (("1"
                                                      (hide -1 -2 -3 -4 -5 -6)
                                                      (("1"
                                                        (expand "walk_from?")
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (expand "walk?")
                                                            (("1"
                                                              (expand
                                                               "finseq_appl")
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     -8
                                                                     "n!1")
                                                                    (("1"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         "edge?")
                                                                        (("1"
                                                                          (bddsimp)
                                                                          (("1"
                                                                            (expand
                                                                             "subset?")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))")
                                                                                (("1"
                                                                                  (bddsimp)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide -2 -8)
                                                                  (("2"
                                                                    (expand
                                                                     "verts_in?")
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -6
                                                                         "i!1")
                                                                        (("2"
                                                                          (expand
                                                                           "subset?")
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "seq(p!1)(i!1)")
                                                                              (("2"
                                                                                (prop)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (replace -1 1 lr)
                                    (("2" (replace -4 1 lr)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_close_trans formula-decl nil complem nil)
    (T formal-type-decl nil complem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (graph type-eq-decl nil graphs nil) (super const-decl "bool" complem nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (verts_in? const-decl "bool" walks nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (edge? const-decl "bool" graphs nil)
    (nil application-judgement "finite_set[T]" graph_conn_piece nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (subset? const-decl "bool" sets nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (p_close const-decl "graph[T]" complem nil)
    (p_close_1 formula-decl nil complem nil))
   shostak)
  (t_subgraph-1 nil 3351015839
   ("" (skosimp*)
    (("" (lemma "p_close_trans")
      (("" (copy -1)
        (("" (inst -1 "G!1")
          (("" (inst -2 "H!1")
            (("" (replace -1 1 lr)
              (("" (replace -2 1 lr)
                (("" (hide -1 -2)
                  (("" (lemma "p_close_1")
                    (("" (lemma "p_close_1")
                      (("" (inst -1 "G!1" "p_close(G!1)")
                        (("" (inst -2 "H!1" "p_close(H!1)")
                          (("" (bddsimp)
                            (("" (expand "super")
                              (("" (expand "subgraph?")
                                (("" (bddsimp)
                                  (("1" (expand "subset?" 1)
                                    (("1" (expand "member")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "p_close" (-9 1))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst -9 "x!2" "y!1")
                                              (("1"
                                                (bddsimp)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst 2 "p!1")
                                                    (("1"
                                                      (hide -1 -2 -3 -4 -5 -6)
                                                      (("1"
                                                        (install-rewrites
                                                         "walks[T]")
                                                        (("1"
                                                          (expand
                                                           "walk_from?")
                                                          (("1"
                                                            (bddsimp)
                                                            (("1"
                                                              (expand "walk?")
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     -8
                                                                     "n!1")
                                                                    (("1"
                                                                      (bddsimp)
                                                                      (("1"
                                                                        (expand
                                                                         "edge?")
                                                                        (("1"
                                                                          (bddsimp)
                                                                          (("1"
                                                                            (expand
                                                                             "subset?")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))")
                                                                                (("1"
                                                                                  (bddsimp)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide -2 -8)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -6
                                                                         "i!1")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "seq(p!1)(i!1)")
                                                                          (("2"
                                                                            (bddsimp)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (replace -1 1 lr)
                                    (("2" (replace -4 1 lr)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge? const-decl "bool" graphs nil)
    (verts_in? const-decl "bool" walks nil)
    (walk? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil)
    (subgraph? const-decl "bool" subgraphs nil)
    (graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures))
   shostak)))


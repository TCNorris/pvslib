(min_walks
 (min_walk_from_TCC1 0
  (min_walk_from_TCC1-2 "" 3790105238
   ("" (skosimp*) (("" (typepred "Gw!1") (("" (propax) nil nil)) nil)) nil)
   nil shostak
   (min_walk_from assuming
    "ints@abstract_min[walks[min_walks.T].Seq(min_walks.Gw), (LAMBDA (w: walks[min_walks.T].Seq(min_walks.Gw)): length(w)), (LAMBDA (w: walks[min_walks.T].Seq(min_walks.Gw)): walks[min_walks.T].walk_from?(min_walks.Gw, w, min_walks.x, min_walks.y))].abstract_min"
    "T_ne: ASSUMPTION EXISTS (t: abstract_min.T): abstract_min.P(t)"))
  (min_walk_from_TCC1-1 nil 3507100597
   ("" (skosimp*) (("" (typepred "Gw!1") (("" (propax) nil)))) nil)
   ((gr_walk type-eq-decl nil min_walks nil)
    (walk_from? const-decl "bool" walks nil) (Seq type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil min_walks nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (min_walk_from assuming
    "ints@abstract_min[walks[min_walks.T].Seq(min_walks.Gw), (LAMBDA (w: walks[min_walks.T].Seq(min_walks.Gw)): length(w)), (LAMBDA (w: walks[min_walks.T].Seq(min_walks.Gw)): walks[min_walks.T].walk_from?(min_walks.Gw, w, min_walks.x, min_walks.y))].abstract_min"
    "T_ne: ASSUMPTION EXISTS (t: abstract_min.T): abstract_min.P(t)")))
 (min_walk_def 0
  (min_walk_def-2 "" 3790105239
   ("" (skosimp*)
    (("" (typepred "min_walk_from(x!1, y!1,Gw!1)")
      (("" (prop)
        (("1"
          (lemma "min_in[Seq(Gw!1), (LAMBDA (w: Seq(Gw!1)): length(w)),
                (LAMBDA (w: Seq(Gw!1)):
                   walk_from?(Gw!1, w, x!1, y!1))]")
          (("1" (hide -2 -3 -4)
            (("1" (beta)
              (("1" (expand "min_walk_from") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2"
          (lemma "min_is_min[Seq(Gw!1), (LAMBDA (w: Seq(Gw!1)): length(w)),
                (LAMBDA (w: Seq(Gw!1)):
                   walk_from?(Gw!1, w, x!1, y!1))]")
          (("2" (hide -3 -4)
            (("2" (expand "is_min")
              (("2" (assert)
                (("2" (skosimp*)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (expand "min_walk_from") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (min_walk_def-1 nil 3507100597
   ("" (skosimp*)
    (("" (typepred "min_walk_from(x!1, y!1,Gw!1)")
      (("" (prop)
        (("1"
          (lemma "min_in[Seq(Gw!1), (LAMBDA (w: Seq(Gw!1)): length(w)),
                (LAMBDA (w: Seq(Gw!1)):
                   walk_from?(Gw!1, w, x!1, y!1))]")
          (("1" (hide -2 -3 -4)
            (("1" (beta)
              (("1" (expand "min_walk_from") (("1" (propax) nil)))))))
           ("2" (hide -1 -2 -3 2)
            (("2" (typepred "Gw!1") (("2" (propax) nil)))))))
         ("2"
          (lemma "min_is_min[Seq(Gw!1), (LAMBDA (w: Seq(Gw!1)): length(w)),
                (LAMBDA (w: Seq(Gw!1)):
                   walk_from?(Gw!1, w, x!1, y!1))]")
          (("1" (hide -3 -4)
            (("1" (expand "is_min")
              (("1" (assert)
                (("1" (skosimp*)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (expand "min_walk_from")
                        (("1" (propax) nil)))))))))))))))
           ("2" (hide -1 -2 -3 2)
            (("2" (typepred "Gw!1") (("2" (propax) nil))))))))))))
    nil)
   ((min_walk_from const-decl "Walk(Gw)" min_walks nil)
    (Walk type-eq-decl nil walks nil) (walk? const-decl "bool" walks nil)
    (gr_walk type-eq-decl nil min_walks nil)
    (walk_from? const-decl "bool" walks nil) (Seq type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil min_walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (min_is_min formula-decl nil abstract_min ints)
    (is_min const-decl "bool" min_walks nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min_in formula-decl nil abstract_min ints))
   nil))
 (min_walk_in 0
  (min_walk_in-2 "" 3790105239
   ("" (skosimp*)
    (("" (lemma "min_walk_def") (("" (inst?) (("" (flatten) nil nil)) nil))
      nil))
    nil)
   nil shostak)
  (min_walk_in-1 nil 3507100597
   ("" (skosimp*)
    (("" (lemma "min_walk_def")
      (("" (inst?) (("" (flatten) (("" (propax) nil))))))))
    nil)
   ((min_walk_def formula-decl nil min_walks nil)
    (gr_walk type-eq-decl nil min_walks nil)
    (walk_from? const-decl "bool" walks nil) (Seq type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil min_walks nil))
   nil))
 (min_walk_is_min 0
  (min_walk_is_min-2 "" 3790105239
   ("" (skosimp*)
    (("" (lemma "min_walk_def")
      (("" (inst?)
        (("" (flatten)
          (("" (hide -1)
            (("" (expand "is_min")
              (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (min_walk_is_min-1 nil 3507100597
   ("" (skosimp*)
    (("" (lemma "min_walk_def")
      (("" (inst?)
        (("" (flatten)
          (("" (hide -1)
            (("" (expand "is_min")
              (("" (flatten) (("" (inst?) (("" (assert) nil))))))))))))))))
    nil)
   ((min_walk_def formula-decl nil min_walks nil)
    (is_min const-decl "bool" min_walks nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gr_walk type-eq-decl nil min_walks nil)
    (walk_from? const-decl "bool" walks nil) (Seq type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil min_walks nil))
   nil)))


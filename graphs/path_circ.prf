(path_circ
 (path_reduc 0
  (path_reduc-1 nil 3253636829
   ("" (skosimp*)
    (("" (typepred "p!1")
      (("" (install-rewrites "paths") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((Path type-eq-decl nil paths nil) (path? const-decl "bool" paths nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (reducible? const-decl "bool" circuits nil)
    (reduced? const-decl "bool" circuits nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil))
 (trunc_long 0
  (trunc_long-1 nil 3253636829
   ("" (expand "trunc1") (("" (skosimp*) (("" (grind) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (O const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (trunc1 const-decl "prewalk" walks nil))
   nil))
 (trunc_walk 0
  (trunc_walk-1 nil 3253636829
   ("" (skosimp*)
    (("" (expand "trunc1")
      (("" (expand "walk?")
        (("" (flatten)
          (("" (prop)
            (("1" (grind) nil nil)
             ("2" (skosimp*)
              (("2" (expand "finseq_appl")
                (("2" (inst - "n!1")
                  (("2" (expand* "^" min empty_seq) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trunc1 const-decl "prewalk" walks nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (edge? const-decl "bool" graphs nil)
    (/= const-decl "boolean" notequal nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (verts_in? const-decl "bool" walks nil)
    (T formal-type-decl nil path_circ nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (walk? const-decl "bool" walks nil))
   nil))
 (walks_concat_red_TCC1 0
  (walks_concat_red_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (T formal-type-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil
   (walks_concat_red subtype "path_circ.u"
    "walks[path_circ.T].Seq(path_circ.G)")))
 (walks_concat_red_TCC2 0
  (walks_concat_red_TCC2-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (reducible? const-decl "bool" circuits nil)
    (reduced? const-decl "bool" circuits nil)
    (verts_in? const-decl "bool" walks nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil
   (walks_concat_red subtype "path_circ.w"
    "walks[path_circ.T].Seq(path_circ.G)")))
 (walks_concat_red_TCC3 0
  (walks_concat_red_TCC3-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (reducible? const-decl "bool" circuits nil)
    (reduced? const-decl "bool" circuits nil)
    (verts_in? const-decl "bool" walks nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil
   (walks_concat_red subtype "(number_fields.-)(length(path_circ.u), 1)"
    "below[length(u)]")))
 (walks_concat_red_TCC4 0
  (walks_concat_red_TCC4-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (reducible? const-decl "bool" circuits nil)
    (reduced? const-decl "bool" circuits nil)
    (verts_in? const-decl "bool" walks nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil (walks_concat_red subtype "0" "below[length(w)]")))
 (walks_concat_red_TCC5 0
  (walks_concat_red_TCC5-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (reducible? const-decl "bool" circuits nil)
    (reduced? const-decl "bool" circuits nil)
    (verts_in? const-decl "bool" walks nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil
   (walks_concat_red subtype "(number_fields.-)(length(path_circ.u), 2)"
    "below[length(u)]")))
 (walks_concat_red_TCC6 0
  (walks_concat_red_TCC6-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (reducible? const-decl "bool" circuits nil)
    (reduced? const-decl "bool" circuits nil)
    (verts_in? const-decl "bool" walks nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil (walks_concat_red subtype "1" "below[length(w)]")))
 (walks_concat_red_TCC7 0
  (walks_concat_red_TCC7-2 "" 3790105151
   ("" (lemma "trunc_long")
    (("" (lemma "verts_in?_concat")
      (("" (lemma "trunc_walk")
        (("" (skosimp*)
          (("" (inst -3 "u!1" "w!1")
            (("" (inst -2 "G!1" "trunc1(u!1)" "w!1")
              (("1" (inst -1 "G!1" "u!1") (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (walks_concat_red subtype
    "finite_sequences[path_circ.T].o(walks[path_circ.T].trunc1(path_circ.u), path_circ.w)"
    "walks[path_circ.T].Seq(path_circ.G)"))
  (walks_concat_red_TCC7-1 nil 3253636829
   ("" (lemma "trunc_long")
    (("" (lemma "verts_in?_concat")
      (("" (lemma "trunc_walk")
        (("" (skosimp*)
          (("" (inst -3 "u!1" "w!1")
            (("" (inst -2 "G!1" "trunc1(u!1)" "w!1")
              (("1" (inst -1 "G!1" "u!1") (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil path_circ nil)
    (verts_in?_concat formula-decl nil walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (>= const-decl "bool" reals nil)
    (u!1 skolem-const-decl "prewalk[T]" path_circ nil)
    (trunc1 const-decl "prewalk" walks nil)
    (Longprewalk type-eq-decl nil walks nil)
    (G!1 skolem-const-decl "graph[T]" path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (Seq type-eq-decl nil walks nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (reduced? const-decl "bool" circuits nil)
    (reducible? const-decl "bool" circuits nil)
    (O const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (walk? const-decl "bool" walks nil) (edge? const-decl "bool" graphs nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (trunc_walk formula-decl nil path_circ nil)
    (trunc_long formula-decl nil path_circ nil))
   nil
   (walks_concat_red subtype
    "finite_sequences[path_circ.T].o(walks[path_circ.T].trunc1(path_circ.u), path_circ.w)"
    "walks[path_circ.T].Seq(path_circ.G)")))
 (walks_concat_red 0
  (walks_concat_red-1 nil 3253636829
   ("" (expand "trunc1")
    (("" (skosimp*)
      (("" (expand "reduced?" 2)
        (("" (expand "reducible?" -)
          (("" (skolem! -8)
            (("" (case "k!1 < length(u!1)-1")
              (("1" (hide -3)
                (("1" (expand "reduced?" -5)
                  (("1" (expand "reducible?" 1)
                    (("1" (inst 1 "k!1")
                      (("1" (assert)
                        (("1" (expand "finseq_appl") (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1)
                (("2" (case "k!1 >length(u!1) -1")
                  (("1" (expand "reduced?" -6)
                    (("1" (expand "reducible?" 2)
                      (("1" (inst 2 "k!1 - length(u!1) +1")
                        (("1" (assert)
                          (("1" (expand "finseq_appl") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (assert)
                      (("2" (expand "finseq_appl") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reducible? const-decl "bool" circuits nil)
    (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (k!1 skolem-const-decl "posnat" path_circ nil)
    (u!1 skolem-const-decl "prewalk[T]" path_circ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (reduced? const-decl "bool" circuits nil)
    (trunc1 const-decl "prewalk" walks nil))
   nil))
 (index_rev_TCC1 0
  (index_rev_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((T formal-type-decl nil path_circ nil)
    (rev const-decl "finseq[T]" doubletons structures))
   nil (index_rev subtype "0" "below[length(rev[T](q))]")))
 (index_rev_TCC2 0
  (index_rev_TCC2-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((T formal-type-decl nil path_circ nil)
    (rev const-decl "finseq[T]" doubletons structures))
   nil
   (index_rev subtype "(number_fields.-)(length(path_circ.q), 1)"
    "below[length(q)]")))
 (index_rev_TCC3 0
  (index_rev_TCC3-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil path_circ nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil))
   nil (index_rev subtype "1" "below[length(rev[T](q))]")))
 (index_rev_TCC4 0
  (index_rev_TCC4-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil path_circ nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil))
   nil
   (index_rev subtype "(number_fields.-)(length(path_circ.q), 2)"
    "below[length(q)]")))
 (index_rev 0
  (index_rev-1 nil 3253636829
   ("" (install-rewrites ("paths"))
    (("" (skosimp*) (("" (assert) nil nil)) nil)) nil)
   ((T formal-type-decl nil path_circ nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (rev_rev 0
  (rev_rev-1 nil 3253636829
   ("" (skosimp*)
    (("" (expand "rev")
      (("" (apply-extensionality) (("" (apply-extensionality 1) nil nil))
        nil))
      nil))
    nil)
   ((rev const-decl "finseq[T]" doubletons structures)
    (below type-eq-decl nil naturalnumbers nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (ind_rev_rev_TCC1 0
  (ind_rev_rev_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((T formal-type-decl nil path_circ nil)
    (rev const-decl "finseq[T]" doubletons structures))
   nil
   (ind_rev_rev subtype "(number_fields.-)(length(path_circ.q), 1)"
    "below[length(rev[T](q))]")))
 (ind_rev_rev_TCC2 0
  (ind_rev_rev_TCC2-1 nil 3253636829 ("" (subtype-tcc) nil nil) nil nil
   (ind_rev_rev subtype "0" "below[length(q)]")))
 (ind_rev_rev_TCC3 0
  (ind_rev_rev_TCC3-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil path_circ nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil))
   nil
   (ind_rev_rev subtype "(number_fields.-)(length(path_circ.q), 2)"
    "below[length(rev[T](q))]")))
 (ind_rev_rev_TCC4 0
  (ind_rev_rev_TCC4-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil path_circ nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil))
   nil (ind_rev_rev subtype "1" "below[length(q)]")))
 (ind_rev_rev 0
  (ind_rev_rev-1 nil 3253636829
   ("" (skosimp*)
    (("" (install-rewrites ("paths")) (("" (assert) nil nil)) nil)) nil)
   ((T formal-type-decl nil path_circ nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (second_in_cat_TCC1 0
  (second_in_cat_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil path_circ nil)
    (from? const-decl "bool" walks nil))
   nil (second_in_cat subtype "1" "below[length(p)]")))
 (second_in_cat_TCC2 0
  (second_in_cat_TCC2-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil path_circ nil) (from? const-decl "bool" walks nil)
    (trunc1 const-decl "prewalk" walks nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (O const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (second_in_cat subtype "1"
    "below[length((o[T](trunc1[T](p), rev[T](q))))]")))
 (second_in_cat_TCC3 0
  (second_in_cat_TCC3-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil path_circ nil)
    (from? const-decl "bool" walks nil))
   nil (second_in_cat subtype "path_circ.p" "Longprewalk[T]")))
 (second_in_cat 0
  (second_in_cat-1 nil 3253636829
   ("" (expand "trunc1") (("" (skosimp*) (("" (grind) nil nil)) nil)) nil)
   ((O const-decl "finseq" finite_sequences nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (from? const-decl "bool" walks nil) (T formal-type-decl nil path_circ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trunc1 const-decl "prewalk" walks nil))
   nil))
 (sec_from_last_TCC1 0
  (sec_from_last_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil path_circ nil)
    (from? const-decl "bool" walks nil))
   nil (sec_from_last subtype "1" "below[length(q)]")))
 (sec_from_last_TCC2 0
  (sec_from_last_TCC2-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil path_circ nil) (from? const-decl "bool" walks nil)
    (trunc1 const-decl "prewalk" walks nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (O const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (sec_from_last subtype
    "(number_fields.-)(length(finite_sequences[path_circ.T].o(walks[path_circ.T].trunc1(path_circ.p), doubletons[path_circ.T].rev(path_circ.q))), 2)"
    "below[length((o[T](trunc1[T](p), rev[T](q))))]")))
 (sec_from_last 0
  (sec_from_last-1 nil 3253636829
   ("" (expand "trunc1") (("" (skosimp*) (("" (grind) nil nil)) nil)) nil)
   ((O const-decl "finseq" finite_sequences nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (from? const-decl "bool" walks nil) (T formal-type-decl nil path_circ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trunc1 const-decl "prewalk" walks nil))
   nil))
 (prewalk_same 0
  (prewalk_same-2 "" 3790105156
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (extensionality "prewalk")
        (("" (inst -1 "p!1" "q!1")
          (("" (assert)
            (("" (grind)
              (("" (extensionality "[below[length(p!1)]-> T]")
                (("" (inst -1 "p!1`seq" "q!1`seq") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (prewalk_same-1 nil 3253636829
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (extensionality "prewalk")
        (("" (inst -1 "p!1" "q!1")
          (("" (assert)
            (("" (grind)
              (("" (extensionality "[below[length(p!1)]-> T]")
                (("" (inst -1 "p!1`seq" "q!1`seq")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (skosimp*) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((from? const-decl "bool" walks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (compose_long_TCC1 0
  (compose_long_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil path_circ nil) (from? const-decl "bool" walks nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (compose_long subtype "(number_fields.-)(length(path_circ.p), 2)"
    "below[length(p)]")))
 (compose_long_TCC2 0
  (compose_long_TCC2-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil path_circ nil) (from? const-decl "bool" walks nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (compose_long subtype "(number_fields.-)(length(path_circ.q), 2)"
    "below[length(q)]")))
 (compose_long 0
  (compose_long-1 nil 3253636829 ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (trunc1 const-decl "prewalk" walks nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (from? const-decl "bool" walks nil)
    (T formal-type-decl nil path_circ nil))
   nil))
 (red_compos_TCC1 0
  (red_compos_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil
   (red_compos subtype "(number_fields.-)(length(path_circ.p), 2)"
    "below[length(p)]")))
 (red_compos_TCC2 0
  (red_compos_TCC2-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil
   (red_compos subtype "(number_fields.-)(length(path_circ.q), 2)"
    "below[length(q)]")))
 (red_compos_TCC3 0
  (red_compos_TCC3-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil (red_compos subtype "path_circ.p" "Longprewalk[T]")))
 (red_compos_TCC4 0
  (red_compos_TCC4-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (G!1 skolem-const-decl "graph[T]" path_circ nil)
    (T formal-type-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (trunc1 const-decl "prewalk" walks nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (O const-decl "finseq" finite_sequences nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (red_compos subtype
    "finite_sequences[path_circ.T].o(walks[path_circ.T].trunc1(path_circ.p), doubletons[path_circ.T].rev(path_circ.q))"
    "walks[path_circ.T].Seq(path_circ.G)")))
 (red_compos 0
  (red_compos-1 nil 3253636829
   ("" (skosimp*)
    (("" (lemma "path_reduc")
      (("" (lemma "path?_rev")
        (("" (lemma "walks_concat_red")
          (("" (lemma "index_rev")
            (("" (inst -1 "q!1")
              (("" (inst -3 "G!1" "q!1")
                (("" (inst-cp -4 "G!1" "p!1")
                  (("1" (inst -2 "G!1" "p!1" "rev(q!1)")
                    (("1" (lemma "path_from_l")
                      (("1" (inst-cp -1 "G!1" "p!1" "s!1" "t!1")
                        (("1" (inst-cp -1 "G!1" "q!1" "s!1" "t!1")
                          (("1" (hide -1)
                            (("1" (hide -6)
                              (("1" (reveal -1)
                                (("1" (inst -1 "G!1" "rev(q!1)")
                                  (("1" (expand "path_from?")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "from?")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) (("2" (grind) nil nil)) nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((path_reduc formula-decl nil path_circ nil)
    (walks_concat_red formula-decl nil path_circ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (path? const-decl "bool" paths nil)
    (G!1 skolem-const-decl "graph[T]" path_circ nil)
    (p!1 skolem-const-decl "prewalk[T]" path_circ nil)
    (Path type-eq-decl nil paths nil) (path_from_l formula-decl nil paths nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (trunc1 const-decl "prewalk" walks nil)
    (O const-decl "finseq" finite_sequences nil)
    (reducible? const-decl "bool" circuits nil)
    (reduced? const-decl "bool" circuits nil)
    (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (q!1 skolem-const-decl "prewalk[T]" path_circ nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (index_rev formula-decl nil path_circ nil)
    (path?_rev formula-decl nil paths nil)
    (T formal-type-decl nil path_circ nil))
   nil))
 (cycl_red_compos_TCC1 0
  (cycl_red_compos_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil (cycl_red_compos subtype "1" "below[length(p)]")))
 (cycl_red_compos_TCC2 0
  (cycl_red_compos_TCC2-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil (cycl_red_compos subtype "1" "below[length(q)]")))
 (cycl_red_compos 0
  (cycl_red_compos-1 nil 3253636829
   ("" (lemma "red_compos")
    (("" (skosimp 1)
      (("" (expand "cyclically_reduced?" 4)
        (("" (lemma "index_rev")
          (("" (inst -2 "G!1" "p!1" "q!1" "s!1" "t!1")
            (("" (inst -1 "q!1")
              (("" (lemma "compose_long")
                (("" (inst -1 "p!1" "q!1" "s!1" "t!1")
                  (("" (lemma "second_in_cat")
                    (("" (lemma "sec_from_last")
                      (("" (inst -1 "p!1" "q!1" "s!1" "t!1")
                        (("" (inst -2 "p!1" "q!1" "s!1" "t!1")
                          (("" (assert)
                            (("" (expand "finseq_appl")
                              (("" (expand "path_from?" -7)
                                (("" (assert)
                                  (("" (prop)
                                    (("1" (assert) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil)
                                     ("4" (grind) nil nil)
                                     ("5" (grind) nil nil)
                                     ("6" (grind) nil nil)
                                     ("7" (grind) nil nil)
                                     ("8" (grind) nil nil)
                                     ("9" (grind) nil nil)
                                     ("10" (grind) nil nil)
                                     ("11" (grind) nil nil)
                                     ("12" (grind) nil nil)
                                     ("13" (grind) nil nil)
                                     ("14" (grind) nil nil)
                                     ("15" (grind) nil nil)
                                     ("16" (grind) nil nil)
                                     ("17" (grind) nil nil)
                                     ("18" (grind) nil nil)
                                     ("19" (grind) nil nil)
                                     ("20" (grind) nil nil)
                                     ("21" (grind) nil nil)
                                     ("22" (grind) nil nil)
                                     ("23" (grind) nil nil)
                                     ("24" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((index_rev formula-decl nil path_circ nil)
    (sec_from_last formula-decl nil path_circ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (trunc1 const-decl "prewalk" walks nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (O const-decl "finseq" finite_sequences nil)
    (reducible? const-decl "bool" circuits nil)
    (reduced? const-decl "bool" circuits nil)
    (verts_in? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (path_from? const-decl "bool" paths nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (second_in_cat formula-decl nil path_circ nil)
    (compose_long formula-decl nil path_circ nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil path_circ nil)
    (cyclically_reduced? const-decl "bool" circuits nil)
    (red_compos formula-decl nil path_circ nil))
   nil))
 (walkers_TCC1 0
  (walkers_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil) nil nil
   (walkers subtype "0" "below[length(p)]")))
 (walkers_TCC2 0
  (walkers_TCC2-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil))
   nil
   (walkers subtype "(number_fields.-)(length(path_circ.p), 1)"
    "below[length(p)]")))
 (walkers_TCC3 0
  (walkers_TCC3-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil))
   nil
   (walkers subtype "(number_fields.-)(length(path_circ.q), 1)"
    "below[length(q)]")))
 (walkers 0
  (walkers-1 nil 3253636829 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (from? const-decl "bool" walks nil))
   nil))
 (path_one_TCC1 0
  (path_one_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (T formal-type-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil
   (path_one subtype "path_circ.p" "walks[path_circ.T].Seq(path_circ.G)")))
 (path_one 0
  (path_one-1 nil 3253636829
   ("" (skolem-typepred)
    (("" (expand "circuit?")
      (("" (flatten)
        (("" (split)
          (("1" (expand "path_from?")
            (("1" (expand "cyclically_reduced?")
              (("1" (expand "finseq_appl")
                (("1" (lemma "path_reduc")
                  (("1" (inst -1 "G!1" "p!1")
                    (("1" (assert)
                      (("1" (expand "path?")
                        (("1" (expand "finseq_appl")
                          (("1" (flatten)
                            (("1" (inst -6 "1" "length(p!1)-2")
                              (("1" (assert)
                                (("1" (bddsimp)
                                  (("1" (expand "walk?")
                                    (("1" (expand "finseq_appl")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -7 "1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "edge?" -7)
                                              (("1"
                                                (expand "from?" -9)
                                                (("1"
                                                  (hide -2 -3 -6)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -4)
                                                      (("1"
                                                        (expand "reduced?" -1)
                                                        (("1"
                                                          (expand
                                                           "reducible?"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (inst 1 "1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -1 -3 -6)
                                    (("2" (expand "from?" -4)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((circuit? const-decl "bool" circuits nil)
    (cyclically_reduced? const-decl "bool" circuits nil)
    (path_reduc formula-decl nil path_circ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (edge? const-decl "bool" graphs nil)
    (reducible? const-decl "bool" circuits nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (reduced? const-decl "bool" circuits nil)
    (from? const-decl "bool" walks nil) (walk? const-decl "bool" walks nil)
    (Path type-eq-decl nil paths nil)
    (p!1 skolem-const-decl "prewalk[T]" path_circ nil)
    (G!1 skolem-const-decl "graph[T]" path_circ nil)
    (path? const-decl "bool" paths nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (path_from? const-decl "bool" paths nil)
    (verts_in? const-decl "bool" walks nil)
    (pre_circuit? const-decl "bool" walks nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (prewalk type-eq-decl nil walks nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (graph type-eq-decl nil graphs nil) (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil path_circ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (rev_eq 0
  (rev_eq-1 nil 3253636829
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t)
      (("1" (expand "rev") (("1" (propax) nil nil)) nil)
       ("2" (lemma "rev_rev")
        (("2" (inst-cp -1 "p!1")
          (("2" (inst -1 "q!1") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil path_circ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rev_rev formula-decl nil path_circ nil))
   nil))
 (front_back_TCC1 0
  (front_back_TCC1-1 nil 3253636829
   ("" (skosimp*)
    (("" (expand "from?") (("" (flatten) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((from? const-decl "bool" walks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (front_back subtype "0" "below[length(q)]")))
 (front_back 0
  (front_back-1 nil 3253636829
   ("" (skosimp*)
    (("" (install-rewrites ("walks"))
      (("" (assert)
        (("" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil path_circ nil) (from? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (walk_from_l 0
  (walk_from_l-1 nil 3253636829 ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (from? const-decl "bool" walks nil)
    (T formal-type-decl nil path_circ nil))
   nil))
 (plus_up_TCC1 0
  (plus_up_TCC1-1 nil 3253636829
   ("" (skosimp*)
    (("" (lemma "walk_from_l")
      (("" (inst -1 "q!1" "s!1" "t!1")
        (("" (bddsimp) (("" (prop) nil nil)) nil)) nil))
      nil))
    nil)
   ((walk_from_l formula-decl nil path_circ nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil (plus_up subtype "path_circ.q" "Longprewalk[T]")))
 (plus_up 0
  (plus_up-1 nil 3253636829
   ("" (skosimp*)
    (("" (apply-extensionality 2 :hide? t)
      (("1" (hide-all-but (-3 1)) (("1" (grind) nil nil)) nil)
       ("2" (lemma "l_trunc1")
        (("2" (inst-cp -1 "p!1")
          (("2" (inst - "q!1")
            (("2" (lemma "front_back")
              (("2" (expand "finseq_appl")
                (("2" (inst -1 "p!1" "q!1" "s!1" "t!1")
                  (("2" (lemma "walk_from_l")
                    (("2" (expand "trunc1" *)
                      (("2" (inst-cp -1 "p!1" "s!1" "t!1")
                        (("2" (inst -1 "q!1" "s!1" "t!1")
                          (("2" (assert)
                            (("2" (apply-extensionality 1 :hide? t)
                              (("2" (flatten)
                                (("2" (typepred "x!1")
                                  (("2" (expand* "^" min)
                                    (("2"
                                      (case-replace
                                       "(LAMBDA (x: below[min(length(p!1) - 1, p!1`length)]): p!1`seq(x))(x!1) = (LAMBDA (x: below[min(length(q!1) - 1, q!1`length)]): q!1`seq(x))(x!1)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replace -10)
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (typepred "x!2")
                                            (("3"
                                              (expand "min")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide-all-but (-2 1))
                                        (("4"
                                          (expand "min")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (expand "min")
                                        (("5" (assert) nil nil))
                                        nil)
                                       ("6"
                                        (hide-all-but (-1 1))
                                        (("6"
                                          (skosimp)
                                          (("6" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("7"
                                        (hide-all-but (-3 1))
                                        (("7"
                                          (expand "min")
                                          (("7" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("8"
                                        (hide-all-but (-1 -5 1 2))
                                        (("8"
                                          (case-replace
                                           "x!1 = length(p!1) - 1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide (-2 3))
                                            (("2"
                                              (expand "min")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil path_circ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (trunc1 const-decl "prewalk" walks nil)
    (front_back formula-decl nil path_circ nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (walk_from_l formula-decl nil path_circ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (l_trunc1 formula-decl nil walks nil))
   nil))
 (two_walks_TCC1 0
  (two_walks_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (from? const-decl "bool" walks nil)
    (trunc1 const-decl "prewalk" walks nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (O const-decl "finseq" finite_sequences nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (two_walks subtype
    "finite_sequences[path_circ.T].o(walks[path_circ.T].trunc1(path_circ.p), doubletons[path_circ.T].rev(path_circ.q))"
    "prewalk[T]")))
 (two_walks 0
  (two_walks-1 nil 3253636829
   ("" (skosimp*)
    (("" (lemma "walk_concat")
      (("" (lemma "walk_from_l")
        (("" (inst -1 "p!1" "s!1" "t!1")
          (("" (inst -2 "G!1" "s!1" "s!1" "t!1" "p!1" "q!1")
            (("" (expand "pre_circuit?" +)
              (("" (expand "walk_from?" -)
                (("" (assert)
                  (("" (expand "from?")
                    (("" (expand "trunc1")
                      (("" (expand "finseq_appl")
                        (("" (assert)
                          (("" (bddsimp) (("" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil path_circ nil)
    (walk_concat formula-decl nil walks nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (pre_circuit? const-decl "bool" walks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trunc1 const-decl "prewalk" walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (from? const-decl "bool" walks nil)
    (walk_from? const-decl "bool" walks nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (walk_from_l formula-decl nil path_circ nil))
   nil))
 (back_short 0
  (back_short-1 nil 3253636829
   ("" (skosimp*)
    (("" (inst 3 "p!1^(0,length(p!1)-2)" "q!1^(0,length(q!1)-2)")
      (("1" (lemma "plus_up")
        (("1" (inst -1 "p!1" "q!1" "s!1" "t!1")
          (("1" (lemma "path?_trunc1")
            (("1" (inst-cp -1 "G!1" "p!1")
              (("1" (inst -1 "G!1" "q!1")
                (("1" (lemma "walk_from_l")
                  (("1" (inst-cp -1 "p!1" "s!1" "t!1")
                    (("1" (inst -1 "q!1" "s!1" "t!1")
                      (("1" (expand "path_from?")
                        (("1" (expand "trunc1")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1" (assert)
                                (("1" (expand "from?" -6)
                                  (("1" (expand "from?" -8)
                                    (("1" (expand "finseq_appl")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (bddsimp)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3" (grind) nil nil)
                                             ("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (grind) nil nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (p!1 skolem-const-decl "prewalk[T]" path_circ nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (q!1 skolem-const-decl "prewalk[T]" path_circ nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (walk_from_l formula-decl nil path_circ nil)
    (trunc1 const-decl "prewalk" walks nil)
    (from? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (path? const-decl "bool" paths nil) (walk? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (verts_in? const-decl "bool" walks nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (path_from? const-decl "bool" paths nil)
    (path?_trunc1 formula-decl nil paths nil)
    (plus_up formula-decl nil path_circ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (from_rev_TCC1 0
  (from_rev_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((T formal-type-decl nil path_circ nil) (from? const-decl "bool" walks nil)
    (rev const-decl "finseq[T]" doubletons structures))
   nil
   (from_rev subtype "doubletons[path_circ.T].rev(path_circ.p)"
    "prewalk[T]")))
 (from_rev 0
  (from_rev-1 nil 3253636829 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (T formal-type-decl nil path_circ nil) (from? const-decl "bool" walks nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (front_short_TCC1 0
  (front_short_TCC1-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil (front_short subtype "1" "below[length(p)]")))
 (front_short_TCC2 0
  (front_short_TCC2-1 nil 3253636829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-type-decl nil path_circ nil)
    (verts_in? const-decl "bool" walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" graphs nil) (walk? const-decl "bool" walks nil)
    (path? const-decl "bool" paths nil) (from? const-decl "bool" walks nil)
    (path_from? const-decl "bool" paths nil)
    (nil application-judgement "finite_set[T]" path_circ nil))
   nil (front_short subtype "1" "below[length(q)]")))
 (front_short 0
  (front_short-1 nil 3253636829
   ("" (skosimp*)
    ((""
      (inst 3 "(rev(p!1))^(0,length(p!1)-2)" "(rev(q!1))^(0,length(q!1)-2)")
      (("1" (lemma "plus_up")
        (("1" (inst -1 "rev(p!1)" "rev(q!1)" "t!1" "s!1")
          (("1" (lemma "path?_trunc1")
            (("1" (inst-cp -1 "G!1" "rev(p!1)")
              (("1" (inst -1 "G!1" "rev(q!1)")
                (("1" (lemma "walk_from_l")
                  (("1" (inst-cp -1 "p!1" "s!1" "t!1")
                    (("1" (inst -1 "q!1" "s!1" "t!1")
                      (("1" (expand "path_from?")
                        (("1" (expand "trunc1")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1" (assert)
                                (("1" (lemma "ind_rev_rev")
                                  (("1" (inst-cp -1 "p!1")
                                    (("1" (inst -1 "q!1")
                                      (("1"
                                        (lemma "index_rev")
                                        (("1"
                                          (inst-cp -1 "p!1")
                                          (("1"
                                            (inst -1 "q!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "from?" -17)
                                                  (("1"
                                                    (expand "from?" -19)
                                                    (("1"
                                                      (lemma "path?_rev")
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "G!1"
                                                         "p!1")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "G!1"
                                                           "q!1")
                                                          (("1"
                                                            (lemma "rev_eq")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p!1"
                                                               "q!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "from_rev")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -1
                                                                       "p!1"
                                                                       "s!1"
                                                                       "t!1")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "q!1"
                                                                         "s!1"
                                                                         "t!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "finseq_appl")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3
                                                                                 -4)
                                                                                (("1"
                                                                                  (hide
                                                                                   -15
                                                                                   -17)
                                                                                  (("1"
                                                                                    (bddsimp)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("5"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("6"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) (("2" (grind) nil nil)) nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil))
          nil))
        nil)
       ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (grind) nil nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (p!1 skolem-const-decl "prewalk[T]" path_circ nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil path_circ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (^ const-decl "finseq" finite_sequences nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (q!1 skolem-const-decl "prewalk[T]" path_circ nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (walk_from_l formula-decl nil path_circ nil)
    (trunc1 const-decl "prewalk" walks nil)
    (ind_rev_rev formula-decl nil path_circ nil)
    (from? const-decl "bool" walks nil) (path?_rev formula-decl nil paths nil)
    (from_rev formula-decl nil path_circ nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (path? const-decl "bool" paths nil) (walk? const-decl "bool" walks nil)
    (edge? const-decl "bool" graphs nil)
    (verts_in? const-decl "bool" walks nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (rev_eq formula-decl nil path_circ nil)
    (index_rev formula-decl nil path_circ nil)
    (path_from? const-decl "bool" paths nil)
    (path?_trunc1 formula-decl nil paths nil)
    (plus_up formula-decl nil path_circ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (add1_rev_TCC1 0
  (add1_rev_TCC1-1 nil 3330871439 ("" (subtype-tcc) nil nil) nil nil
   (add1_rev subtype "(number_fields.-)(length(path_circ.w), 1)"
    "below[w`length]")))
 (add1_rev_TCC2 0
  (add1_rev_TCC2-1 nil 3330871439 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil path_circ nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil) (Seq type-eq-decl nil walks nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil (add1_rev subtype "path_circ.w" "Longprewalk[T]")))
 (add1_rev_TCC3 0
  (add1_rev_TCC3-1 nil 3330871439 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil path_circ nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dbl const-decl "set[T]" doubletons structures)
    (doubleton type-eq-decl nil doubletons structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pregraph type-eq-decl nil graphs nil) (graph type-eq-decl nil graphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil) (Seq type-eq-decl nil walks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "finite_set[T]" path_circ nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (G!1 skolem-const-decl "graph[T]" path_circ nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (add1_rev subtype
    "seq(path_circ.w)((number_fields.-)(length(path_circ.w), 1))"
    "(vert(path_circ.G))")))
 (add1_rev 0
  (add1_rev-1 nil 3330871463
   ("" (skosimp*)
    (("" (install-rewrites "walks[T]")
      (("" (assert)
        (("" (grind)
          (("" (apply-extensionality 2 :hide? t)
            (("1" (install-rewrites "walks[T]")
              (("1" (lift-if 1)
                (("1" (case "x!2<length(w!1)")
                  (("1" (prop)
                    (("1" (case "x!2<length(w!1)-1")
                      (("1" (assert) nil nil)
                       ("2" (lift-if 2) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (G!1 skolem-const-decl "graph[T]" path_circ nil)
    (w!1 skolem-const-decl "Seq[T](G!1)" path_circ nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Seq type-eq-decl nil walks nil) (verts_in? const-decl "bool" walks nil)
    (graph type-eq-decl nil graphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pregraph type-eq-decl nil graphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (doubleton type-eq-decl nil doubletons structures)
    (dbl const-decl "set[T]" doubletons structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil path_circ nil)
    (add1 const-decl "prewalk" walks nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (trunc1 const-decl "prewalk" walks nil)
    (gen_seq2 const-decl "Seq(G)" walks nil)
    (rev const-decl "finseq[T]" doubletons structures)
    (O const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil)))


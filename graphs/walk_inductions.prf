(walk_inductions
 (walk_prep 0
  (walk_prep-1 nil 3507100593
   ("" (skosimp*)
    (("" (split)
      (("1" (flatten) (("1" (skosimp*) (("1" (inst?) nil nil)) nil)) nil)
       ("2" (flatten)
        (("2" (skosimp*) (("2" (inst?) (("2" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil walk_inductions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil))
   nil))
 (graph_induction_walk 0
  (graph_induction_walk-1 nil 3507100593
   ("" (skosimp)
    (("" (lemma "walk_prep")
      (("" (inst -1 "P!1")
        (("" (flatten)
          (("" (hide -1)
            (("" (split -1)
              (("1" (propax) nil nil)
               ("2" (hide 2)
                (("2" (induct "n" 1 "NAT_induction")
                  (("2" (skosimp*)
                    (("2" (inst -3 "w!1")
                      (("2" (split -3)
                        (("1" (propax) nil nil)
                         ("2" (skosimp*)
                          (("2" (inst -2 "length(ww!1)")
                            (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_prep formula-decl nil walk_inductions nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (prewalk type-eq-decl nil walks nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil walk_inductions nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil)))


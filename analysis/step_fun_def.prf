(step_fun_def
 (IMP_integral_def_TCC1 0
  (IMP_integral_def_TCC1-1 nil 3282481164
   ("" (lemma "connected_domain") (("" (propax) nil nil)) nil)
   ((connected_domain formula-decl nil step_fun_def nil)) shostak
   (IMP_integral_def assuming "integral_def[T].integral_def"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (IMP_integral_def_TCC2 0
  (IMP_integral_def_TCC2-1 nil 3282481164
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil step_fun_def nil)) shostak
   (IMP_integral_def assuming "integral_def[T].integral_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (step_fun?_lem 0
  (step_fun?_lem-2 nil 3292077257
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "step_function?")
        (("1" (expand "step_function_on?")
          (("1" (expand "step_fun?")
            (("1" (skosimp*)
              (("1" (inst + "P!1")
                (("1" (skosimp*)
                  (("1" (inst - "ii!1")
                    (("1" (skosimp*)
                      (("1" (inst-cp - "x!1")
                        (("1" (inst - "y!1") (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "step_fun?")
        (("2" (expand "step_function?")
          (("2" (expand "step_function_on?")
            (("2" (skosimp*)
              (("2" (inst + "P!1")
                (("2" (skosimp*)
                  (("2" (inst - "ii!1")
                    (("2"
                      (inst + "f!1((P!1`seq(1 + ii!1) + P!1`seq(ii!1)) / 2)")
                      (("1" (skosimp*)
                        (("1"
                          (inst -1 "x!1"
                           "(P!1`seq(1 + ii!1) + P!1`seq(ii!1)) / 2")
                          nil nil))
                        nil)
                       ("2" (lemma "connected_domain")
                        (("2" (expand "connected?")
                          (("2" (inst?)
                            (("2" (inst - "P!1`seq(ii!1)" "P!1`seq(ii!1+1)")
                              (("2" (assert)
                                (("2" (hide 2)
                                  (("2" (typepred "P!1")
                                    (("2" (inst - "ii!1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (ii!1 skolem-const-decl "below(length(P!1) - 1)" step_fun_def nil)
    (P!1 skolem-const-decl "partition[T](a!1, b!1)" step_fun_def nil)
    (b!1 skolem-const-decl "T" step_fun_def nil)
    (a!1 skolem-const-decl "T" step_fun_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (connected? const-decl "bool" deriv_domain_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (connected_domain formula-decl nil step_fun_def nil)
    (step_function? const-decl "bool" step_fun_def nil)
    (step_fun? const-decl "bool" step_fun_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" step_fun_def nil)
    (T formal-subtype-decl nil step_fun_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def nil)
    (open_interval type-eq-decl nil intervals_real reals)
    (step_function_on? const-decl "bool" step_fun_def nil))
   nil)
  (step_fun?_lem-1 nil 3280141014
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "step_function?")
        (("1" (expand "step_fun?")
          (("1" (skosimp*)
            (("1" (inst + "P!1")
              (("1" (skosimp*)
                (("1" (inst - "ii!1")
                  (("1" (skosimp*)
                    (("1" (inst-cp - "x!1")
                      (("1" (inst - "y!1") (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "step_fun?")
        (("2" (expand "step_function?")
          (("2" (skosimp*)
            (("2" (inst + "P!1")
              (("2" (skosimp*)
                (("2" (inst - "ii!1")
                  (("2"
                    (inst + "f!1((P!1`seq(1 + ii!1) + P!1`seq(ii!1)) / 2)")
                    (("1" (skosimp*)
                      (("1"
                        (inst -1 "x!1"
                         "(P!1`seq(1 + ii!1) + P!1`seq(ii!1)) / 2")
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (lemma "connected_domain")
                              (("1" (inst?)
                                (("1"
                                  (inst - "P!1`seq(ii!1)" "P!1`seq(ii!1+1)")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "connected_domain")
                      (("2" (inst?)
                        (("2" (inst - "P!1`seq(ii!1)" "P!1`seq(ii!1+1)")
                          (("2" (assert)
                            (("2" (hide 2)
                              (("2" (typepred "P!1")
                                (("2" (inst - "ii!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partition type-eq-decl nil integral_def nil)) shostak)))


(derivative_props
 (IMP_derivatives_alt_TCC1 0
  (IMP_derivatives_alt_TCC1-1 nil 3796313759
   ("" (lemma "connected_deriv_domain[T]")
    (("" (lemma connected_domain)
      (("" (lemma not_one_element) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((connected_domain formula-decl nil derivative_props nil)
    (not_one_element formula-decl nil derivative_props nil)
    (connected_deriv_domain formula-decl nil deriv_domain_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil))
   nil
   (IMP_derivatives_alt assuming "derivatives_alt[T].derivatives_alt"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (IMP_derivatives_alt_TCC2 0
  (IMP_derivatives_alt_TCC2-1 nil 3796313759
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil derivative_props nil)) nil
   (IMP_derivatives_alt assuming "derivatives_alt[T].derivatives_alt"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (deriv_domain 0
  (deriv_domain-1 nil 3472398507
   ("" (lemma "connected_deriv_domain[T]")
    (("" (lemma connected_domain)
      (("" (lemma not_one_element) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((connected_domain formula-decl nil derivative_props nil)
    (not_one_element formula-decl nil derivative_props nil)
    (connected_deriv_domain formula-decl nil deriv_domain_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil))
   shostak))
 (deriv_maximum 0
  (deriv_maximum-1 nil 3297598424
   ("" (skosimp*)
    (("" (auto-rewrite "deriv_TCC[T]")
      (("" (expand "deriv")
        (("" (expand "derivable?")
          (("" (assert)
            (("" (rewrite "lim_fun_def[(A[T](c!1))]")
              (("" (expand "convergent?")
                (("" (skolem!)
                  (("" (case "l!1 <= 0 AND 0 <= l!1")
                    (("1" (ground) nil nil)
                     ("2" (delete 2)
                      (("2" (expand "convergence")
                        (("2" (split)
                          (("1"
                            (name "E"
                                  "{ x : real| 0 < x AND x < b!1 - c!1}")
                            (("1" (case "adh[(A[T](c!1))](E)(0)")
                              (("1"
                                (assert)
                                (("1"
                                  (use
                                   "convergence_upper_bound[(A[T](c!1))]"
                                   ("f" "NQ(f!1, c!1)" "E" "E"))
                                  (("1"
                                    (ground)
                                    (("1"
                                      (use
                                       "subset_convergence2[(A[T](c!1))]"
                                       ("E1" "E" "E2" "fullset[real]"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "subset_fullset")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -2 + rl)
                                      (("2"
                                        (delete -1 -2 -3 -4 -5 2)
                                        (("2"
                                          (grind :if-match nil)
                                          (("2"
                                            (inst? -4)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "div_mult_pos_le1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 + rl)
                                (("2"
                                  (delete -1 -2 -4 -5 2)
                                  (("2"
                                    (grind
                                     :exclude
                                     "abs"
                                     :if-match
                                     nil)
                                    (("2"
                                      (inst
                                       1
                                       "min(e!1/2, (b!1-c!1)/2)")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (grind)
                                        (("1"
                                          (lemma "connected_domain")
                                          (("1"
                                            (expand "connected?")
                                            (("1"
                                              (inst - "c!1" "b!1" "_")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "connected_domain")
                                          (("2"
                                            (expand "connected?")
                                            (("2"
                                              (inst - "c!1" "b!1" "_")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (name "E"
                                  "{ x : real | a!1 - c!1 < x AND x < 0}")
                            (("2" (case "adh[(A[T](c!1))](E)(0)")
                              (("1"
                                (assert)
                                (("1"
                                  (use
                                   "convergence_lower_bound[(A[T](c!1))]"
                                   ("f" "NQ(f!1, c!1)" "E" "E"))
                                  (("1"
                                    (ground)
                                    (("1"
                                      (use
                                       "subset_convergence2[(A[T](c!1))]"
                                       ("E1" "E" "E2" "fullset[real]"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "subset_fullset")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -2 + rl)
                                      (("2"
                                        (delete -1 -2 -3 -4 -5 2)
                                        (("2"
                                          (grind :if-match nil)
                                          (("2"
                                            (inst? -4)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "div_mult_neg_le2")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 + rl)
                                (("2"
                                  (delete -1 -3 -4 -5 2)
                                  (("2"
                                    (grind
                                     :exclude
                                     "abs"
                                     :if-match
                                     nil)
                                    (("2"
                                      (inst
                                       1
                                       "max(-e!1/2, (a!1 - c!1)/2)")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (grind)
                                        (("1"
                                          (lemma "connected_domain")
                                          (("1"
                                            (expand "connected?")
                                            (("1"
                                              (inst - "a!1" "c!1" "_")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "connected_domain")
                                          (("2"
                                            (expand "connected?")
                                            (("2"
                                              (inst - "a!1" "c!1" "_")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" derivatives_def nil)
    (lim_fun_def formula-decl nil lim_of_functions nil)
    (NQ const-decl "real" derivatives_def nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (convergence_upper_bound formula-decl nil convergence_functions
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (subset_convergence2 formula-decl nil convergence_functions nil)
    (subset_fullset formula-decl nil sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (e!1 skolem-const-decl "posreal" derivative_props nil)
    (b!1 skolem-const-decl "T" derivative_props nil)
    (c!1 skolem-const-decl "T" derivative_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (connected_domain formula-decl nil derivative_props nil)
    (connected? const-decl "bool" deriv_domain_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence_lower_bound formula-decl nil convergence_functions
     nil)
    (div_mult_neg_le2 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (e!1 skolem-const-decl "posreal" derivative_props nil)
    (a!1 skolem-const-decl "T" derivative_props nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv const-decl "real" derivatives_def nil))
   nil))
 (deriv_minimum 0
  (deriv_minimum-1 nil 3297598424
   ("" (skosimp)
    (("" (use "deriv_maximum" ("f" "-f!1"))
      (("" (auto-rewrite "neg_derivable[T]" "deriv_neg[T]")
        (("" (assert)
          (("" (delete -1 -2 -3 2)
            (("" (grind :if-match nil)
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_maximum formula-decl nil derivative_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neg_derivable formula-decl nil derivatives_def nil)
    (deriv_neg formula-decl nil derivatives_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil))
 (mean_value_aux_TCC1 0
  (mean_value_aux_TCC1-2 "" 3755981743
   ("" (skosimp*)
    (("" (expand "derivable?")
      (("" (expand "derivable?") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((derivable? const-decl "bool" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak
   (mean_value_aux subtype "derivative_props.c"
    "{x | derivatives_def[T].derivable?(derivative_props.f, x)}"))
  (mean_value_aux_TCC1-1 nil 3297598424
   ("" (skosimp*)
    (("" (expand "derivable?" -3) (("" (inst?) nil nil)) nil)) nil)
   ((derivable? const-decl "bool" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil))
   nil
   (mean_value_aux subtype "derivative_props.c"
    "{x | derivatives_def[T].derivable?(derivative_props.f, x)}")))
 (mean_value_aux 0
  (mean_value_aux-2 "" 3790090059
   ("" (skosimp)
    ((""
      (case "FORALL (x : T) : a!1 <= x AND x <= b!1 IMPLIES f!1(x) = f!1(a!1)")
      (("1" (case "T_pred((a!1 + b!1)/2)")
        (("1" (inst 1 "(a!1 + b!1)/2")
          (("1" (assert)
            (("1"
              (use "deriv_constant2"
                   ("a" "a!1" "b" "b!1" "c" "(a!1 + b!1)/2"))
              (("1" (ground)
                (("1" (skosimp)
                  (("1" (inst-cp -4 "(a!1+b!1)/2")
                    (("1" (inst -4 "x!1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "connected_domain")
          (("2" (expand "connected?")
            (("2" (inst - "a!1" "b!1" "_")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (forward-chain "derivable_cont_fun[T]")
          (("2" (case "f!1(x!1) < f!1(a!1)")
            (("1" (use "min_in_interval[T]" ("a" "a!1" "b" "b!1"))
              (("1" (assert)
                (("1" (skosimp)
                  (("1" (expand "derivable?")
                    (("1" (inst -8 "c!1")
                      (("1"
                        (use "deriv_minimum"
                             ("a" "a!1" "b" "b!1" "c" "c!1"))
                        (("1" (inst-cp -4 "x!1")
                          (("1" (assert)
                            (("1" (inst 2 "c!1")
                              (("1"
                                (ground)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "connected_domain")
                (("2" (expand "connected?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (use "max_in_interval[T]" ("a" "a!1" "b" "b!1"))
              (("1" (assert)
                (("1" (skosimp)
                  (("1" (inst-cp -3 "x!1")
                    (("1" (assert)
                      (("1" (expand "derivable?")
                        (("1" (inst -8 "c!1")
                          (("1"
                            (use "deriv_maximum"
                                 ("a" "a!1" "b" "b!1" "c" "c!1"))
                            (("1" (inst 3 "c!1")
                              (("1"
                                (ground)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "connected_domain")
                (("2" (expand "connected?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (connected_domain formula-decl nil derivative_props nil)
    (connected? const-decl "bool" deriv_domain_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (a!1 skolem-const-decl "T" derivative_props nil)
    (b!1 skolem-const-decl "T" derivative_props nil)
    (deriv_constant2 formula-decl nil derivatives_alt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (derivable_cont_fun formula-decl nil derivatives nil)
    (max_in_interval formula-decl nil continuous_functions_props nil)
    (deriv_maximum formula-decl nil derivative_props nil)
    (min_in_interval formula-decl nil continuous_functions_props nil)
    (f!1 skolem-const-decl "[T -> real]" derivative_props nil)
    (continuous? const-decl "bool" continuous_functions nil)
    (deriv_minimum formula-decl nil derivative_props nil)
    (derivable? const-decl "bool" derivatives nil)
    (< const-decl "bool" reals nil))
   shostak)
  (mean_value_aux-1 nil 3297598424
   ("" (skosimp)
    ((""
      (case "FORALL (x : T) : a!1 <= x AND x <= b!1 IMPLIES f!1(x) = f!1(a!1)")
      (("1" (case "T_pred((a!1 + b!1)/2)")
        (("1" (inst 1 "(a!1 + b!1)/2")
          (("1" (assert)
            (("1"
              (use "deriv_constant2"
                   ("a" "a!1" "b" "b!1" "c" "(a!1 + b!1)/2"))
              (("1" (ground)
                (("1" (skosimp)
                  (("1" (inst-cp -4 "(a!1+b!1)/2")
                    (("1" (inst -4 "x!1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (lemma "connected_domain")
          (("2" (expand "connected?")
            (("2" (inst - "a!1" "b!1" "_")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (forward-chain "derivable_cont_fun[T]")
          (("2" (case "f!1(x!1) < f!1(a!1)")
            (("1" (use "min_in_interval[T]" ("a" "a!1" "b" "b!1"))
              (("1" (assert)
                (("1" (skosimp)
                  (("1" (expand "derivable?")
                    (("1" (inst -8 "c!1")
                      (("1"
                        (use "deriv_minimum"
                             ("a" "a!1" "b" "b!1" "c" "c!1"))
                        (("1" (inst-cp -4 "x!1")
                          (("1" (assert)
                            (("1" (inst 2 "c!1")
                              (("1"
                                (ground)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "connected_domain")
                (("2" (expand "connected?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (use "max_in_interval[T]" ("a" "a!1" "b" "b!1"))
              (("1" (assert)
                (("1" (skosimp)
                  (("1" (inst-cp -3 "x!1")
                    (("1" (assert)
                      (("1" (expand "derivable?")
                        (("1" (inst -8 "c!1")
                          (("1"
                            (use "deriv_maximum"
                                 ("a" "a!1" "b" "b!1" "c" "c!1"))
                            (("1" (inst 3 "c!1")
                              (("1"
                                (ground)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "connected_domain")
                (("2" (expand "connected?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((connected? const-decl "bool" deriv_domain_def nil)
    (deriv_constant2 formula-decl nil derivatives_alt nil)
    (derivable_cont_fun formula-decl nil derivatives nil)
    (max_in_interval formula-decl nil continuous_functions_props nil)
    (min_in_interval formula-decl nil continuous_functions_props nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (mean_value_TCC1 0
  (mean_value_TCC1-1 nil 3297598424
   ("" (skosimp*)
    (("" (expand "derivable?" -) (("" (inst?) nil nil)) nil)) nil)
   ((derivable? const-decl "bool" derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil))
   nil
   (mean_value subtype "derivative_props.c"
    "{x | derivatives_def[T].derivable?(derivative_props.f, x)}")))
 (mean_value 0
  (mean_value-2 nil 3445340249
   ("" (skosimp)
    (("" (name-replace "C" "b!1 - a!1" :hide? nil)
      (("" (name-replace "B" "f!1(b!1) - f!1(a!1)" :hide? nil)
        (("" (assert)
          ((""
            (auto-rewrite-theory "derivatives[T]" :exclude
                                 ("derivable?" "deriv") :always? t)
            ((""
              (auto-rewrite-theory "derivatives_def[T]" :exclude
                                   ("derivable?" "deriv") :always? t)
              ((""
                (use "mean_value_aux"
                     ("f"
                      "f!1 - (B/C) * (I[T] - const_fun(a!1::real))"))
                (("" (ground)
                  (("1" (skosimp)
                    (("1" (inst?)
                      (("1" (expand "derivable?")
                        (("1" (inst -6 "c!1")
                          (("1" (assert)
                            (("1" (rewrite "deriv_diff[T]")
                              (("1"
                                (case-replace "deriv(f!1, c!1)= B/C")
                                (("1" (rewrite "div_cancel2") nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete -3 2)
                    (("2" (grind)
                      (("2" (case "(B/C) * (b!1 - a!1) = B")
                        (("1" (assert) nil nil)
                         ("2" (replace -2 1)
                          (("2" (rewrite "div_cancel2") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_fun_continuous name-judgement "continuous_fun"
     continuous_functions nil)
    (derivable_id name-judgement "deriv_fun" derivatives nil)
    (diff_derivable_fun formula-decl nil derivatives nil)
    (scal_derivable formula-decl nil derivatives_def nil)
    (diff_derivable formula-decl nil derivatives_def nil)
    (const_derivable formula-decl nil derivatives_def nil)
    (identity_derivable formula-decl nil derivatives_def nil)
    (deriv_diff formula-decl nil derivatives_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (deriv_identity formula-decl nil derivatives_def nil)
    (deriv_const formula-decl nil derivatives_def nil)
    (deriv_scal formula-decl nil derivatives_def nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (I const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (mean_value_aux formula-decl nil derivative_props nil)
    (derivable_scal application-judgement "deriv_fun" derivatives nil)
    (derivable_diff application-judgement "deriv_fun" derivatives nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops nil)
    (derivable_const application-judgement "deriv_fun" derivatives
     nil))
   nil)
  (mean_value-1 nil 3297598424
   ("" (skosimp)
    (("" (name-replace "C" "b!1 - a!1" :hide? nil)
      (("" (name-replace "B" "f!1(b!1) - f!1(a!1)" :hide? nil)
        (("" (assert)
          ((""
            (auto-rewrite-theory "derivatives[T]" :exclude
                                 ("derivable" "deriv") :always? t)
            ((""
              (auto-rewrite-theory "derivatives_def[T]" :exclude
                                   ("derivable" "deriv") :always? t)
              ((""
                (use "mean_value_aux"
                     ("f"
                      "f!1 - (B/C) * (I[T] - const_fun(a!1::real))"))
                (("" (ground)
                  (("1" (skosimp)
                    (("1" (inst?)
                      (("1" (expand "derivable?")
                        (("1" (inst -6 "c!1")
                          (("1" (assert)
                            (("1" (rewrite "deriv_diff[T]")
                              (("1"
                                (case-replace "deriv(f!1, c!1)= B/C")
                                (("1" (rewrite "div_cancel2") nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete -3 2)
                    (("2" (grind)
                      (("2" (case "(B/C) * (b!1 - a!1) = B")
                        (("1" (assert) nil nil)
                         ("2" (replace -2 1)
                          (("2" (rewrite "div_cancel2") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_derivable_fun formula-decl nil derivatives nil)
    (scal_derivable formula-decl nil derivatives_def nil)
    (diff_derivable formula-decl nil derivatives_def nil)
    (const_derivable formula-decl nil derivatives_def nil)
    (identity_derivable formula-decl nil derivatives_def nil)
    (deriv_diff formula-decl nil derivatives_def nil)
    (deriv_identity formula-decl nil derivatives_def nil)
    (deriv_const formula-decl nil derivatives_def nil)
    (deriv_scal formula-decl nil derivatives_def nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable_id name-judgement "deriv_fun" derivatives nil)
    (id_fun_continuous name-judgement "continuous_fun"
     continuous_functions nil)
    (derivable_const application-judgement "deriv_fun" derivatives nil)
    (const_fun_continuous application-judgement "continuous_fun"
     continuous_functions nil)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops nil)
    (derivable_diff application-judgement "deriv_fun" derivatives nil)
    (diff_fun_continuous application-judgement "continuous_fun"
     continuous_functions nil)
    (derivable_scal application-judgement "deriv_fun" derivatives nil)
    (scal_fun_continuous application-judgement "continuous_fun"
     continuous_functions nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals))
   nil))
 (mean_value_abs_TCC1 0
  (mean_value_abs_TCC1-1 nil 3299345045
   ("" (skosimp*)
    (("" (expand "derivable?" -1) (("" (inst?) nil nil)) nil)) nil)
   ((derivable? const-decl "bool" derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil))
   shostak
   (mean_value_abs subtype "derivative_props.c"
    "{x | derivatives_def[T].derivable?(derivative_props.f, x)}")))
 (mean_value_abs 0
  (mean_value_abs-2 "" 3790090061
   ("" (skosimp*)
    (("" (lemma "mean_value")
      (("" (case "a!1 < b!1")
        (("1" (inst?)
          (("1" (assert)
            (("1" (skosimp*)
              (("1" (inst + "c!1")
                (("1" (expand "min")
                  (("1" (expand "max")
                    (("1" (assert)
                      (("1" (factor -4)
                        (("1" (case "(b!1 - a!1) = abs(b!1 - a!1)")
                          (("1" (replace -1 -)
                            (("1" (assert)
                              (("1"
                                (replace -5 + rl)
                                (("1"
                                  (rewrite "abs_mult")
                                  (("1" (rewrite "abs_abs") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst - "b!1" "a!1" "f!1")
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (inst + "c!1")
                (("2" (expand "min")
                  (("2" (expand "max")
                    (("2" (factor -3)
                      (("2" (case "(a!1 - b!1) = abs(a!1 - b!1)")
                        (("1" (replace -1 -)
                          (("1" (lemma "abs_neg")
                            (("1" (inst - "(f!1(b!1) - f!1(a!1))")
                              (("1"
                                (replace -1 + rl)
                                (("1"
                                  (replace -5 + rl)
                                  (("1"
                                    (rewrite "abs_mult")
                                    (("1"
                                      (rewrite "abs_abs")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "abs_neg")
                                          (("1"
                                            (inst - "(b!1-a!1)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mean_value formula-decl nil derivative_props nil)
    (abs_neg formula-decl nil abs_lems reals)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (abs_abs formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (deriv const-decl "real" derivatives_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)
  (mean_value_abs-1 nil 3299344268
   ("" (skosimp*)
    (("" (lemma "mean_value")
      (("" (case "a!1 < b!1")
        (("1" (inst?)
          (("1" (assert)
            (("1" (skosimp*)
              (("1" (inst + "c!1")
                (("1" (expand "min")
                  (("1" (expand "max")
                    (("1" (assert)
                      (("1" (factor -4)
                        (("1" (case "(b!1 - a!1) = abs(b!1 - a!1)")
                          (("1" (replace -1 -)
                            (("1" (assert)
                              (("1"
                                (replace -5 + rl)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "abs_mult")
                                    (("1" (rewrite "abs_abs") nil nil)
                                     ("2"
                                      (expand "derivable?" -6)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (expand "derivable?")
                          (("2" (inst?)
                            (("2" (expand "derivable?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst - "b!1" "a!1" "f!1")
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (inst + "c!1")
                (("2" (expand "min")
                  (("2" (expand "max")
                    (("2" (factor -3)
                      (("1" (case "(a!1 - b!1) = abs(a!1 - b!1)")
                        (("1" (replace -1 -)
                          (("1" (lemma "abs_neg")
                            (("1" (inst - "(f!1(b!1) - f!1(a!1))")
                              (("1"
                                (replace -1 + rl)
                                (("1"
                                  (replace -5 + rl)
                                  (("1"
                                    (rewrite "abs_mult")
                                    (("1"
                                      (rewrite "abs_abs")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "abs_neg")
                                          (("1"
                                            (inst - "(b!1-a!1)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "derivable?" -6)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (expand "derivable?" -4)
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_neg formula-decl nil abs_lems reals)
    (derivable? const-decl "bool" derivatives_def nil)
    (deriv const-decl "real" derivatives_def nil))
   shostak))
 (nonneg_derivative_TCC1 0
  (nonneg_derivative_TCC1-1 nil 3297598424
   ("" (skolem-typepred)
    (("" (expand "derivable?" -) (("" (inst?) nil nil)) nil)) nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (nonneg_derivative subtype "derivative_props.x"
    "{x | derivatives_def[T].derivable?(derivative_props.g, x)}")))
 (nonneg_derivative 0
  (nonneg_derivative-2 "" 3790090061
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (expand "increasing?")
        (("" (prop)
          (("1" (skosimp*)
            (("1" (expand "deriv")
              (("1" (use "lim_ge1[(A[T](x!1))]")
                (("1" (ground)
                  (("1" (expand "derivable?")
                    (("1" (inst? -2) nil nil)) nil)
                   ("2" (delete -2 2)
                    (("2" (grind :if-match nil)
                      (("2" (rewrite "pos_div_ge")
                        (("2" (ground)
                          (("1" (inst -2 "x!1 + x!2" "x!1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (inst -2 "x!1" "x!1+x!2")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (use "mean_value" ("a" "x!1" "b" "y!1"))
              (("2" (ground)
                (("2" (skosimp)
                  (("2" (inst?)
                    (("2"
                      (lemma "pos_times_ge"
                       ("x" "deriv(g!1, c!1)" "y" "y!1 - x!1"))
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "real" derivatives_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pos_div_ge formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NQ const-decl "real" derivatives_def nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (lim_ge1 formula-decl nil lim_of_functions nil)
    (mean_value formula-decl nil derivative_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (nonneg_derivative-1 nil 3297598424
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (expand "increasing?")
        (("" (prop)
          (("1" (skosimp*)
            (("1" (expand "deriv")
              (("1" (use "lim_ge1[(A[T](x!1))]")
                (("1" (ground)
                  (("1" (expand "derivable?")
                    (("1" (inst? -2) nil nil)) nil)
                   ("2" (delete -2 2)
                    (("2" (grind :if-match nil)
                      (("2" (rewrite "pos_div_ge")
                        (("2" (ground)
                          (("1" (inst -2 "x!1 + x!2" "x!1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (inst -2 "x!1" "x!1+x!2")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (use "mean_value" ("a" "x!1" "b" "y!1"))
              (("2" (ground)
                (("2" (skosimp)
                  (("2" (inst?)
                    (("2"
                      (lemma "pos_times_ge"
                       ("x" "deriv(g!1, c!1)" "y" "y!1 - x!1"))
                      (("1" (assert) nil nil) ("2" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (NQ const-decl "real" derivatives_def nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (lim_ge1 formula-decl nil lim_of_functions nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (nonpos_derivative 0
  (nonpos_derivative-2 "" 3790090062
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (expand "decreasing?")
        (("" (prop)
          (("1" (skosimp*)
            (("1" (expand "deriv")
              (("1" (use "lim_le1[(A[T](x!1))]")
                (("1" (ground)
                  (("1" (expand "derivable?")
                    (("1" (inst? -2) nil nil)) nil)
                   ("2" (delete -2 2)
                    (("2" (grind :if-match nil)
                      (("2" (rewrite "neg_div_le")
                        (("2" (ground)
                          (("1" (inst -2 "x!1 + x!2" "x!1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (inst -2 "x!1" "x!1+x!2")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (use "mean_value" ("a" "x!1" "b" "y!1"))
              (("2" (ground)
                (("2" (skosimp)
                  (("2" (inst?)
                    (("2"
                      (lemma "neg_times_le"
                       ("x" "deriv(g!1, c!1)" "y" "y!1 - x!1"))
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "real" derivatives_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (neg_div_le formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NQ const-decl "real" derivatives_def nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (lim_le1 formula-decl nil lim_of_functions nil)
    (mean_value formula-decl nil derivative_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (decreasing? const-decl "bool" real_fun_preds reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (nonpos_derivative-1 nil 3297598424
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (expand "decreasing?")
        (("" (prop)
          (("1" (skosimp*)
            (("1" (expand "deriv")
              (("1" (use "lim_le1[(A[T](x!1))]")
                (("1" (ground)
                  (("1" (expand "derivable?")
                    (("1" (inst? -2) nil nil)) nil)
                   ("2" (delete -2 2)
                    (("2" (grind :if-match nil)
                      (("2" (rewrite "neg_div_le")
                        (("2" (ground)
                          (("1" (inst -2 "x!1 + x!2" "x!1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (inst -2 "x!1" "x!1+x!2")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (use "mean_value" ("a" "x!1" "b" "y!1"))
              (("2" (ground)
                (("2" (skosimp)
                  (("2" (inst?)
                    (("2"
                      (lemma "neg_times_le"
                       ("x" "deriv(g!1, c!1)" "y" "y!1 - x!1"))
                      (("1" (assert) nil nil) ("2" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (NQ const-decl "real" derivatives_def nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (lim_le1 formula-decl nil lim_of_functions nil)
    (decreasing? const-decl "bool" real_fun_preds reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (positive_derivative 0
  (positive_derivative-2 "" 3790090062
   ("" (expand "strict_increasing?")
    (("" (skosimp* :preds? t)
      (("" (use "mean_value" ("b" "y!1"))
        (("" (assert)
          (("" (skosimp)
            (("" (inst?)
              ((""
                (lemma "pos_times_gt"
                 ("x" "deriv(g!1, c!1)" "y" "y!1 - x!1"))
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mean_value formula-decl nil derivative_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals))
   shostak)
  (positive_derivative-1 nil 3297598424
   ("" (expand "strict_increasing?")
    (("" (skosimp* :preds? t)
      (("" (use "mean_value" ("b" "y!1"))
        (("" (assert)
          (("" (skosimp)
            (("" (inst?)
              ((""
                (lemma "pos_times_gt"
                 ("x" "deriv(g!1, c!1)" "y" "y!1 - x!1"))
                (("1" (assert) nil nil)
                 ("2" (expand "derivable?" -) (("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals))
   nil))
 (negative_derivative 0
  (negative_derivative-2 "" 3790090063
   ("" (expand "strict_decreasing?")
    (("" (skosimp* :preds? t)
      (("" (use "mean_value" ("a" "x!1"))
        (("" (assert)
          (("" (skosimp)
            (("" (inst?)
              ((""
                (lemma "neg_times_lt"
                 ("x" "deriv(g!1, c!1)" "y" "y!1 - x!1"))
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (neg_times_lt formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mean_value formula-decl nil derivative_props nil)
    (strict_decreasing? const-decl "bool" real_fun_preds reals))
   shostak)
  (negative_derivative-1 nil 3297598424
   ("" (expand "strict_decreasing?")
    (("" (skosimp* :preds? t)
      (("" (use "mean_value" ("a" "x!1"))
        (("" (assert)
          (("" (skosimp)
            (("" (inst?)
              ((""
                (lemma "neg_times_lt"
                 ("x" "deriv(g!1, c!1)" "y" "y!1 - x!1"))
                (("1" (assert) nil nil)
                 ("2" (expand "derivable?" -) (("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (strict_decreasing? const-decl "bool" real_fun_preds reals))
   nil))
 (null_derivative 0
  (null_derivative-1 nil 3297598424
   ("" (skolem!)
    (("" (prop)
      (("1" (skolem!)
        (("1" (auto-rewrite "const_derivable_fun[T]" "deriv_const[T]")
          (("1" (case-replace "g!1 = const_fun(g!1(x!1))")
            (("1" (assert) nil nil)
             ("2" (delete 2)
              (("2" (apply-extensionality :hide? t)
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "FORALL (x, y : T) : x < y IMPLIES g!1(x) = g!1(y)")
        (("1" (delete -2)
          (("1" (expand "constant?")
            (("1" (skosimp)
              (("1" (inst-cp - "x!1" "y!1")
                (("1" (inst - "y!1" "x!1") (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (use "mean_value" ("b" "y!1"))
            (("2" (assert)
              (("2" (skosimp)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((constant? const-decl "bool" real_fun_preds reals)
    (deriv_const formula-decl nil derivatives_def nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops nil)
    (derivable_const application-judgement "deriv_fun" derivatives nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mean_value formula-decl nil derivative_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil))
   nil))
 (minimum_derivative 0
  (minimum_derivative-3 "" 3790090063
   ("" (skosimp*)
    (("" (typepred "g!1")
      (("" (lemma "mean_value")
        (("" (lemma "trich_lt" ("x" "x!1" "y" "y1!1"))
          (("" (split -1)
            (("1" (inst -2 "x!1" "y1!1" "g!1")
              (("1" (assert)
                (("1" (skosimp* -2)
                  (("1" (expand "deriv" -8)
                    (("1" (inst - "c!1")
                      (("1" (assert)
                        (("1"
                          (lemma "both_sides_times_pos_gt1"
                           ("pz" "c!1-x!1" "x" "deriv(g!1,c!1)" "y"
                            "0"))
                          (("1" (replace -1 -9)
                            (("1"
                              (lemma "posreal_times_posreal_is_posreal"
                               ("px" "deriv(g!1,c!1)" "py" "y1!1-x!1"))
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (inst -2 "y1!1" "x!1" "g!1")
              (("3" (assert)
                (("3" (skosimp*)
                  (("3" (expand "deriv" -7)
                    (("3" (inst - "c!1")
                      (("3" (assert)
                        (("3"
                          (lemma "both_sides_times_neg_gt1"
                           ("nz" "c!1-x!1" "x" "deriv(g!1,c!1)" "y"
                            "0"))
                          (("3"
                            (lemma "negreal_times_negreal_is_posreal"
                             ("nx" "deriv(g!1,c!1)" "ny" "y1!1-x!1"))
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (expand "deriv" 1)
                                (("2"
                                  (expand "deriv" -1)
                                  (("2"
                                    (expand ">" -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trich_lt formula-decl nil real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (both_sides_times_neg_gt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mean_value formula-decl nil derivative_props nil))
   shostak)
  (minimum_derivative-2 nil 3306078765
   ("" (skosimp*)
    (("" (typepred "g!1")
      (("" (lemma "mean_value")
        (("" (lemma "trich_lt" ("x" "x!1" "y" "y1!1"))
          (("" (split -1)
            (("1" (inst -2 "x!1" "y1!1" "g!1")
              (("1" (assert)
                (("1" (skosimp* -2)
                  (("1" (expand "deriv" -8)
                    (("1" (inst - "c!1")
                      (("1" (assert)
                        (("1"
                          (lemma "both_sides_times_pos_gt1"
                           ("pz" "c!1-x!1" "x" "deriv(g!1,c!1)" "y"
                            "0"))
                          (("1" (replace -1 -9)
                            (("1"
                              (lemma "posreal_times_posreal_is_posreal"
                               ("px" "deriv(g!1,c!1)" "py" "y1!1-x!1"))
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (expand "derivable?" -6)
                            (("2" (inst - "c!1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (inst -2 "y1!1" "x!1" "g!1")
              (("3" (assert)
                (("3" (skosimp*)
                  (("3" (expand "deriv" -7)
                    (("3" (inst - "c!1")
                      (("3" (assert)
                        (("3"
                          (lemma "both_sides_times_neg_gt1"
                           ("nz" "c!1-x!1" "x" "deriv(g!1,c!1)" "y"
                            "0"))
                          (("1"
                            (lemma "negreal_times_negreal_is_posreal"
                             ("nx" "deriv(g!1,c!1)" "ny" "y1!1-x!1"))
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (expand "deriv" 1)
                                (("2"
                                  (expand "deriv" -1)
                                  (("2"
                                    (expand ">" -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "derivable?" -5)
                            (("2" (inst - "c!1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (deriv const-decl "[T -> real]" derivatives nil))
   nil)
  (minimum_derivative-1 nil 3297611200
   ("" (skosimp*)
    (("" (typepred "g!1")
      (("" (lemma "mean_value[T]")
        (("" (lemma "trich_lt" ("x" "x!1" "y" "y1!1"))
          (("" (split -1)
            (("1" (inst -2 "x!1" "y1!1" "g!1")
              (("1" (assert)
                (("1" (skosimp* -2)
                  (("1" (expand "deriv" -8)
                    (("1" (inst - "c!1")
                      (("1" (assert)
                        (("1"
                          (lemma "both_sides_times_pos_gt1"
                           ("pz" "c!1-x!1" "x" "deriv(g!1,c!1)" "y"
                            "0"))
                          (("1" (replace -1 -9)
                            (("1"
                              (lemma "posreal_times_posreal_is_posreal"
                               ("px" "deriv(g!1,c!1)" "py" "y1!1-x!1"))
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (expand "derivable?" -6)
                            (("2" (inst - "c!1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (inst -2 "y1!1" "x!1" "g!1")
              (("3" (assert)
                (("3" (skosimp*)
                  (("3" (expand "deriv" -7)
                    (("3" (inst - "c!1")
                      (("3" (assert)
                        (("3"
                          (lemma "both_sides_times_neg_gt1"
                           ("nz" "c!1-x!1" "x" "deriv(g!1,c!1)" "y"
                            "0"))
                          (("1"
                            (lemma "negreal_times_negreal_is_posreal"
                             ("nx" "deriv(g!1,c!1)" "ny" "y1!1-x!1"))
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (expand "deriv" 1)
                                (("2"
                                  (expand "deriv" -1)
                                  (("2"
                                    (expand ">" -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "derivable?" -5)
                            (("2" (inst - "c!1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil))
   nil))
 (maximum_derivative 0
  (maximum_derivative-2 nil 3303059356
   ("" (skosimp*)
    (("" (lemma "neg_derivable_fun" ("f" "g!1"))
      (("" (typepred "g!1")
        (("" (lemma "deriv_neg_fun" ("ff" "g!1"))
          ((""
            (lemma "minimum_derivative"
             ("x" "x!1" "y1" "y1!1" "g" "-g!1"))
            (("" (replace -2 -1)
              (("" (split -1)
                (("1" (expand "-" -1) (("1" (assert) nil nil)) nil)
                 ("2" (expand "-" 1) (("2" (assert) nil nil)) nil)
                 ("3" (assert) nil nil)
                 ("4" (skosimp*)
                  (("4" (assert)
                    (("4" (expand "-" 2)
                      (("4" (assert)
                        (("4" (inst?) (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (neg_derivable_fun formula-decl nil derivatives nil)
    (deriv_neg_fun formula-decl nil derivatives nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (minimum_derivative formula-decl nil derivative_props nil)
    (derivable_neg application-judgement "deriv_fun" derivatives nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil)
  (maximum_derivative-1 nil 3297611227
   ("" (skosimp*)
    (("" (lemma "neg_derivable_fun" ("f" "g!1"))
      (("" (typepred "g!1")
        (("" (lemma "deriv_neg_fun" ("ff" "g!1"))
          ((""
            (lemma "minimum_derivative"
             ("x" "x!1" "y" "y!1" "g" "-g!1"))
            (("" (replace -2 -1)
              (("" (split -1)
                (("1" (expand "-" -1) (("1" (assert) nil nil)) nil)
                 ("2" (expand "-" 1) (("2" (assert) nil nil)) nil)
                 ("3" (assert) nil nil)
                 ("4" (skosimp*)
                  (("4" (inst -5 "y!2")
                    (("4" (assert)
                      (("4" (expand "-" 2) (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (neg_derivable_fun formula-decl nil derivatives nil)
    (deriv_neg_fun formula-decl nil derivatives nil))
   nil))
 (strict_minimum_derivative 0
  (strict_minimum_derivative-2 nil 3297611289
   ("" (skosimp*)
    (("" (lemma "minimum_derivative" ("x" "x!1" "g" "g!1" "y1" "y!1"))
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil)
         ("3" (assert) nil nil)
         ("4" (skosimp*)
          (("4" (lemma "trich_lt" ("x" "y!2" "y" "x!1"))
            (("4" (split -1)
              (("1" (expand "strict_increasing?")
                (("1" (inst - "y!2" "x!1")
                  (("1" (assert)
                    (("1"
                      (lemma "negreal_times_negreal_is_posreal"
                       ("nx" "deriv(g!1)(y!2)" "ny" "y!2-x!1"))
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil)
               ("3" (expand "strict_increasing?")
                (("3" (inst - "x!1" "y!2")
                  (("3" (assert)
                    (("3"
                      (lemma "posreal_times_posreal_is_posreal"
                       ("px" "deriv(g!1)(y!2)" "py" "y!2-x!1"))
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minimum_derivative formula-decl nil derivative_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (trich_lt formula-decl nil real_props nil))
   nil)
  (strict_minimum_derivative-1 nil 3297611254
   ("" (skosimp*)
    (("" (lemma "neg_derivable_fun" ("f" "g!1"))
      (("" (typepred "g!1")
        (("" (lemma "deriv_neg_fun" ("ff" "g!1"))
          ((""
            (lemma "minimum_derivative"
             ("x" "x!1" "y" "y!1" "g" "-g!1"))
            (("" (replace -2 -1)
              (("" (split -1)
                (("1" (expand "-" -1) (("1" (assert) nil)))
                 ("2" (expand "-" 1) (("2" (assert) nil)))
                 ("3" (assert) nil)
                 ("4" (skosimp*)
                  (("4" (inst -5 "y!2")
                    (("4" (assert)
                      (("4" (expand "-" 2)
                        (("4" (assert) nil))))))))))))))))))))))
    nil)
   nil nil))
 (strict_maximum_derivative 0
  (strict_maximum_derivative-1 nil 3297611310
   ("" (skosimp*)
    (("" (lemma "maximum_derivative" ("x" "x!1" "y1" "y!1" "g" "g!1"))
      (("" (expand "strict_decreasing?")
        (("" (assert)
          (("" (skosimp*)
            (("" (lemma "trich_lt" ("x" "y!2" "y" "x!1"))
              (("" (split -1)
                (("1" (inst - "y!2" "x!1")
                  (("1" (assert)
                    (("1" (replace -3)
                      (("1"
                        (lemma "posreal_times_posreal_is_posreal"
                         ("px" "deriv(g!1)(y!2)" "py" "x!1-y!2"))
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil)
                 ("3" (inst - "x!1" "y!2")
                  (("3" (assert)
                    (("3"
                      (lemma "negreal_times_negreal_is_posreal"
                       ("nx" "deriv(g!1)(y!2)" "ny" "x!1-y!2"))
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maximum_derivative formula-decl nil derivative_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trich_lt formula-decl nil real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (strict_decreasing? const-decl "bool" real_fun_preds reals))
   nil))
 (deriv_zero_const_fun 0
  (deriv_zero_const_fun-1 nil 3707730326
   ("" (skosimp*)
    (("" (lemma "mean_value")
      (("" (inst - "a!1" "b!1" "f!1")
        (("" (assert)
          (("" (skosimp*)
            (("" (inst + "f!1(c!1)")
              (("" (apply-extensionality 1 :hide? t)
                (("" (expand "const_fun")
                  (("" (inst-cp -6 "c!1")
                    (("" (expand "deriv" -7)
                      (("" (replace -7)
                        (("" (assert)
                          (("" (lemma "mean_value")
                            (("" (case "c!1 < x!1")
                              (("1"
                                (inst - "c!1" "x!1" "f!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst-cp - "c!2")
                                      (("1"
                                        (expand "deriv" -10)
                                        (("1"
                                          (expand "deriv" -11)
                                          (("1"
                                            (replace -11)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst - "x!1" "c!1" "f!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst-cp - "c!2")
                                      (("2"
                                        (expand "deriv" -10)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mean_value formula-decl nil derivative_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops nil)
    (derivable_const application-judgement "deriv_fun" derivatives nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (continuous_fun nonempty-type-eq-decl nil continuous_functions nil)
    (continuous? const-decl "bool" continuous_functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (derivs_equal 0
  (derivs_equal-1 nil 3707730357
   ("" (skosimp*)
    (("" (lemma deriv_zero_const_fun)
      (("" (inst - "a!1" "b!1" "f!1-g!1")
        (("" (assert)
          (("" (split -1)
            (("1" (skosimp*)
              (("1" (inst + "c!1")
                (("1" (expand "const_fun")
                  (("1" (expand "-")
                    (("1" (assert)
                      (("1" (apply-extensionality 1 :hide? t)
                        (("1" (decompose-equality -1)
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (expand "+ ")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "f!1")
                (("2" (typepred "g!1")
                  (("2" (lemma "derivable_diff[T]")
                    (("2" (inst?)
                      (("2" (skosimp*)
                        (("2" (inst?)
                          (("2" (expand "-")
                            (("2" (lemma "deriv_diff_fun[T]")
                              (("2"
                                (inst - "f!1" "g!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "-")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (hide -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_zero_const_fun formula-decl nil derivative_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_diff_fun formula-decl nil derivatives nil)
    (derivable_diff judgement-tcc nil derivatives nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (continuous_fun nonempty-type-eq-decl nil continuous_functions nil)
    (continuous? const-decl "bool" continuous_functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_diff application-judgement "deriv_fun" derivatives nil))
   nil))
 (derivs_funs_equal 0
  (derivs_funs_equal-1 nil 3707730375
   ("" (skeep*)
    (("" (lemma "derivs_equal")
      (("" (insteep)
        (("" (assert)
          (("" (replace -3)
            (("" (skosimp*)
              (("" (decompose-equality 1)
                (("" (decompose-equality -1)
                  (("" (inst-cp - "x!1")
                    (("" (inst - "dd")
                      (("" (expand "+")
                        (("" (expand "const_fun")
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivs_equal formula-decl nil derivative_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (derivable_sum application-judgement "deriv_fun" derivatives nil)
    (derivable_const application-judgement "deriv_fun" derivatives nil)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (monotonic_antideriv 0
  (monotonic_antideriv-3 nil 3471619761
   ("" (skolem 1 ("a" "b" "ff" "gg"))
    (("" (flatten)
      (("" (case "a=b")
        (("1" (replace -1) (("1" (assert) nil nil)) nil)
         ("2" (lemma "nonneg_derivative[T]")
          (("2" (name "fg" "LAMBDA(c:T):ff(c)-gg(c)")
            (("2" (case "derivable?(fg)")
              (("1" (inst -3 "fg")
                (("1" (flatten)
                  (("1" (hide -3)
                    (("1" (split -3)
                      (("1" (hide -4)
                        (("1" (replace -3 :dir rl :hide? t)
                          (("1" (expand "increasing?")
                            (("1" (inst -1 "a" "b")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -2 :dir rl :hide? t)
                        (("2" (skolem 1 "x")
                          (("2" (inst -2 "x")
                            (("2" (lemma "deriv_diff[T]")
                              (("2"
                                (inst -1 "ff" "gg" "x")
                                (("2"
                                  (split -1)
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "deriv" -3)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "ff")
                                    (("2"
                                      (expand "derivable?" -1)
                                      (("2" (inst -1 "x") nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (typepred "gg")
                                    (("3"
                                      (expand "derivable?" -1)
                                      (("3" (inst -1 "x") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1 :dir rl :hide? t)
                (("2" (lemma "derivable_diff[T]")
                  (("2" (inst -1 "ff" "gg")
                    (("2" (expand "-") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_derivative formula-decl nil derivative_props nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (deriv_diff formula-decl nil derivatives_def nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fg skolem-const-decl "[T -> real]" derivative_props nil)
    (derivable_diff judgement-tcc nil derivatives nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil))
   nil)
  (monotonic_antideriv-2 nil 3471267429
   (";;; Proof monotonic_antideriv-1 for formula derivatives_more.monotonic_antideriv"
    (skolem 1 ("a" "b" "ff" "gg"))
    ((";;; Proof monotonic_antideriv-1 for formula derivatives_more.monotonic_antideriv"
      (flatten)
      ((";;; Proof monotonic_antideriv-1 for formula derivatives_more.monotonic_antideriv"
        (case "a=b")
        (("1" (replace -1) (("1" (assert) nil)))
         ("2" (lemma "nonneg_derivative[T]")
          (("1" (name "fg" "LAMBDA(c:T):ff(c)-gg(c)")
            (("1" (case "derivable?(fg)")
              (("1" (inst -3 "fg")
                (("1" (flatten)
                  (("1" (hide -3)
                    (("1" (split -3)
                      (("1" (hide -4)
                        (("1" (replace -3 :dir rl :hide? t)
                          (("1" (expand "increasing?")
                            (("1" (inst -1 "a" "b")
                              (("1" (assert) nil)))))))))
                       ("2" (replace -2 :dir rl :hide? t)
                        (("2" (skolem 1 "x")
                          (("2" (inst -2 "x")
                            (("2" (lemma "deriv_diff[T]")
                              (("2"
                                (inst -1 "ff" "gg" "x")
                                (("2"
                                  (split -1)
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "deriv" -3)
                                        (("1" (assert) nil)))))))
                                   ("2"
                                    (typepred "ff")
                                    (("2"
                                      (expand "derivable?" -1)
                                      (("2" (inst -1 "x") nil)))))
                                   ("3"
                                    (typepred "gg")
                                    (("3"
                                      (expand "derivable?" -1)
                                      (("3"
                                        (inst -1 "x")
                                        nil)))))))))))))))))))))))))
               ("2" (replace -1 :dir rl :hide? t)
                (("2" (lemma "derivable_diff")
                  (("2" (inst -1 "ff" "gg")
                    (("2" (expand "-") (("2" (propax) nil)))))))))))))
           ("2" (lemma "not_one_element") (("2" (propax) nil)))
           ("3" (lemma "deriv_domain") (("3" (propax) nil))))))))))
    ";;; developed with shostak decision procedures")
   ((increasing? const-decl "bool" real_fun_preds reals)
    (deriv_diff formula-decl nil derivatives_def nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (derivable_diff judgement-tcc nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil))
   nil)
  (monotonic_antideriv-1 nil 3471267395
   ("" (skolem 1 ("a" "b" "ff" "gg"))
    (("" (flatten)
      (("" (case "a=b")
        (("1" (replace -1) (("1" (assert) nil nil)) nil)
         ("2" (lemma "nonneg_derivative[T]")
          (("1" (name "fg" "LAMBDA(c:T):ff(c)-gg(c)")
            (("1" (case "derivable?(fg)")
              (("1" (inst -3 "fg")
                (("1" (flatten)
                  (("1" (hide -3)
                    (("1" (split -3)
                      (("1" (hide -4)
                        (("1" (replace -3 :dir rl :hide? t)
                          (("1" (expand "increasing?")
                            (("1" (inst -1 "a" "b")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -2 :dir rl :hide? t)
                        (("2" (skolem 1 "x")
                          (("2" (inst -2 "x")
                            (("2" (lemma "deriv_diff[T]")
                              (("2"
                                (inst -1 "ff" "gg" "x")
                                (("2"
                                  (split -1)
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "deriv" -3)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "ff")
                                    (("2"
                                      (expand "derivable?" -1)
                                      (("2" (inst -1 "x") nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (typepred "gg")
                                    (("3"
                                      (expand "derivable?" -1)
                                      (("3" (inst -1 "x") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1 :dir rl :hide? t)
                (("2" (lemma "derivable_diff")
                  (("2" (inst -1 "ff" "gg")
                    (("2" (expand "-") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
           ("3" (lemma "connected_domain") (("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (monotonic_antideriv_gt 0
  (monotonic_antideriv_gt-1 nil 3707730254
   ("" (skolem 1 ("a" "b" "ff" "gg"))
    (("" (flatten)
      (("" (case "a=b")
        (("1" (replace -1) (("1" (assert) nil nil)) nil)
         ("2" (lemma "positive_derivative[T]")
          (("2" (name "fg" "LAMBDA(c:T):ff(c)-gg(c)")
            (("2" (case "derivable?(fg)")
              (("1" (inst -3 "fg")
                (("1" (split -3)
                  (("1" (hide -4)
                    (("1" (replace -3 :dir rl :hide? t)
                      (("1" (expand "strict_increasing?")
                        (("1" (inst -1 "a" "b")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (replace -2 :dir rl :hide? t)
                      (("2" (skolem 1 "x")
                        (("2" (inst -2 "x")
                          (("2" (lemma "deriv_diff[T]")
                            (("2" (inst -1 "ff" "gg" "x")
                              (("2"
                                (split -1)
                                (("1"
                                  (expand "-")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "deriv" -3)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "ff")
                                  (("2"
                                    (expand "derivable?" -1)
                                    (("2" (inst -1 "x") nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "gg")
                                  (("3"
                                    (expand "derivable?" -1)
                                    (("3" (inst -1 "x") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1 :dir rl :hide? t)
                (("2" (lemma "derivable_diff[T]")
                  (("2" (inst -1 "ff" "gg")
                    (("2" (expand "-") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positive_derivative formula-decl nil derivative_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_diff formula-decl nil derivatives_def nil)
    (fg skolem-const-decl "[T -> real]" derivative_props nil)
    (derivable_diff judgement-tcc nil derivatives nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil))
   nil))
 (derivative_alt_TCC1 0
  (derivative_alt_TCC1-1 nil 3471267395 ("" (subtype-tcc) nil nil) nil
   nil
   (derivative_alt subtype
    "((number_fields.-)(derivative_props.y, derivative_props.x))"
    "nznum")))
 (derivative_alt 0
  (derivative_alt-1 nil 3471267395
   ("" (skosimp*)
    (("" (expand "convergence")
      (("" (expand "fullset")
        (("" (expand "NQ")
          (("" (prop)
            (("1" (expand "convergence")
              (("1" (flatten)
                (("1" (prop)
                  (("1" (hide -2)
                    (("1" (expand "adh")
                      (("1" (skosimp*)
                        (("1" (inst -1 "e!1")
                          (("1" (skosimp*)
                            (("1" (typepred "x!2")
                              (("1"
                                (expand "A")
                                (("1"
                                  (inst + "x!1+x!2")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (inst - "epsilon!1")
                      (("2" (skosimp*)
                        (("2" (inst + "delta!1")
                          (("2" (skosimp*)
                            (("2" (inst -3 "x!2-x!1")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "A")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "convergence")
              (("2" (prop)
                (("1" (expand "adh")
                  (("1" (skosimp*)
                    (("1" (hide -2)
                      (("1" (inst -1 "e!1")
                        (("1" (skosimp*)
                          (("1" (typepred "x!2")
                            (("1" (typepred "x!1")
                              (("1"
                                (inst + "x!2-x!1")
                                (("1"
                                  (expand "A")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst - "epsilon!1")
                    (("2" (skosimp*)
                      (("2" (inst + "delta!1")
                        (("2" (skosimp*)
                          (("2" (inst -3 "x!1+x!2")
                            (("1" (assert) nil nil)
                             ("2" (hide -1 2)
                              (("2"
                                (typepred "x!1")
                                (("2"
                                  (typepred "x!2")
                                  (("2"
                                    (expand "A")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (NQ const-decl "real" derivatives_def nil)
    (x!2 skolem-const-decl "(A[T](x!1))" derivative_props nil)
    (x!2 skolem-const-decl "{yy: T | yy /= x!1}" derivative_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "T" derivative_props nil)
    (x!2 skolem-const-decl "(A[T](x!1))" derivative_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (x!2 skolem-const-decl "{yy: T | yy /= x!1}" derivative_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fullset const-decl "set" sets nil))
   nil))
 (derivative_fun_alt 0
  (derivative_fun_alt-3 "" 3790090067
   ("" (skosimp*)
    (("" (lemma "derivative_alt")
      (("" (lemma "derivative_equivalence1[T]")
        (("" (split +)
          (("1" (flatten)
            (("1" (skosimp*)
              (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                  (("1" (assert)
                    (("1" (hide 1)
                      (("1" (assert)
                        (("1" (expand "derivable?" -1)
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (replace -2 * rl)
                                (("1"
                                  (expand "deriv" 1 2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (case "derivable?(ff!1)")
              (("1" (assert)
                (("1" (apply-extensionality 1 :hide? t)
                  (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                    (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (expand "deriv" 1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "derivable?" 1)
                  (("2" (skosimp*)
                    (("2" (inst - "gg!1(x!1)" "ff!1" "x!1")
                      (("2" (assert)
                        (("2" (inst - "gg!1(x!1)" "ff!1" "x!1")
                          (("2" (assert)
                            (("2" (hide 1 2) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivative_alt formula-decl nil derivative_props nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivative_equivalence1 formula-decl nil derivatives_alt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil))
   shostak)
  (derivative_fun_alt-2 nil 3471602639
   ("" (skosimp*)
    (("" (lemma "derivative_alt")
      (("" (lemma "derivative_equivalence1[T]")
        (("1" (split +)
          (("1" (flatten)
            (("1" (skosimp*)
              (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                  (("1" (assert)
                    (("1" (hide 1)
                      (("1" (assert)
                        (("1" (expand "derivable?" -1)
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (replace -2 * rl)
                                (("1"
                                  (expand "deriv" 1 2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (case "derivable?(ff!1)")
              (("1" (assert)
                (("1" (apply-extensionality 1 :hide? t)
                  (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                    (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (expand "deriv" 1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "derivable?" 1)
                  (("2" (skosimp*)
                    (("2" (inst - "gg!1(x!1)" "ff!1" "x!1")
                      (("2" (assert)
                        (("2" (inst - "gg!1(x!1)" "ff!1" "x!1")
                          (("2" (assert)
                            (("2" (hide 1 2) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (hide -1)
              (("2" (lemma "not_one_element") (("2" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide -1 2)
          (("3" (skosimp*)
            (("3" (lemma "deriv_domain") (("3" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivative_equivalence1 formula-decl nil derivatives_alt nil))
   nil)
  (derivative_fun_alt-1 nil 3471267395
   ("" (skosimp*)
    (("" (lemma "derivative_alt")
      (("" (lemma "derivative_equivalence1[T]")
        (("1" (split +)
          (("1" (flatten)
            (("1" (skosimp*)
              (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                  (("1" (assert)
                    (("1" (hide 1)
                      (("1" (assert)
                        (("1" (expand "derivable?" -1)
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (replace -2 * rl)
                                (("1"
                                  (expand "deriv" 1 2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (case "derivable?(ff!1)")
              (("1" (assert)
                (("1" (apply-extensionality 1 :hide? t)
                  (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                    (("1" (inst - "gg!1(x!1)" "ff!1" "x!1")
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (expand "deriv" 1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "derivable?" 1)
                  (("2" (skosimp*)
                    (("2" (inst - "gg!1(x!1)" "ff!1" "x!1")
                      (("2" (assert)
                        (("2" (inst - "gg!1(x!1)" "ff!1" "x!1")
                          (("2" (assert)
                            (("2" (hide 1 2) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (hide -1)
              (("2" (lemma "not_one_element") (("2" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide -1 2)
          (("3" (skosimp*)
            (("3" (lemma "connected_domain")
              (("3" (inst?)
                (("3" (inst - "y!1") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (epsi_lt_le 0
  (epsi_lt_le-1 nil 3471267395
   ("" (skosimp*)
    (("" (prop)
      (("1" (skosimp*)
        (("1" (inst -1 "epsilon!1") (("1" (assert) nil nil)) nil)) nil)
       ("2" (skosimp*)
        (("2" (case "x!1 = epsilon!1")
          (("1" (replace -1)
            (("1" (hide -1)
              (("1" (inst -1 "epsilon!1/2") (("1" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "epsilon!1") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (derivs_funs_neq 0
  (derivs_funs_neq-1 nil 3795097556
   ("" (skeep)
    (("" (lemma "derivs_equal")
      (("" (inst -1 "a" "b" "f" "g")
        (("" (assert)
          (("" (skeep)
            (("" (skeep)
              (("" (assert)
                (("" (split -1)
                  (("1" (skeep)
                    (("1" (case "c=0")
                      (("1" (expand "const_fun" -2)
                        (("1" (decompose-equality -2)
                          (("1" (inst -1 "dd")
                            (("1" (assert)
                              (("1"
                                (expand "+" -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "const_fun" -1)
                        (("2" (decompose-equality -1)
                          (("2" (inst -1 "x")
                            (("2" (assert)
                              (("2"
                                (expand "+" -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivs_equal formula-decl nil derivative_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (derivs_funs_leq 0
  (derivs_funs_leq-1 nil 3795097692
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "d")
        (("" (skeep)
          (("" (case "0<= g(x)-f(x)")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (case "NOT 0<= g(d) - f(d)")
                (("1" (assert) nil nil)
                 ("2" (hide -3)
                  (("2" (lemma "nonneg_derivative")
                    (("2" (inst -1 "g-f")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (hide -1)
                            (("2" (split -1)
                              (("1"
                                (expand "increasing?" -1)
                                (("1"
                                  (inst -1 "d" "x")
                                  (("1"
                                    (inst -4 "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "-" -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst -5 "x!1")
                                  (("2"
                                    (lemma "deriv_diff_fun[T]")
                                    (("2"
                                      (inst -1 "g" "f")
                                      (("2"
                                        (decompose-equality -1)
                                        (("2"
                                          (inst -1 "x!1")
                                          (("2"
                                            (expand "deriv" -1 1)
                                            (("2"
                                              (replace -1 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "-" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_diff application-judgement "deriv_fun" derivatives nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (increasing? const-decl "bool" real_fun_preds reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_diff_fun formula-decl nil derivatives nil)
    (nonneg_derivative formula-decl nil derivative_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil))
   shostak))
 (derivs_funs_lt 0
  (derivs_funs_lt-1 nil 3795099761
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "d")
        (("" (lemma "nonneg_derivative")
          (("" (inst -1 "g-f")
            (("" (flatten)
              (("" (hide -1)
                (("" (split -1)
                  (("1" (skeep)
                    (("1" (case "g(x)-f(x)>0")
                      (("1" (assert) nil nil)
                       ("2" (case "NOT g(d)-f(d)>0")
                        (("1" (assert) nil nil)
                         ("2" (expand "increasing?" -2)
                          (("2" (assert)
                            (("2" (inst -2 "d" "x")
                              (("2"
                                (inst -5 "x")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "-")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst -5 "x")
                      (("2" (lemma "deriv_diff_fun[T]")
                        (("2" (inst -1 "g" "f")
                          (("2" (decompose-equality -1)
                            (("2" (inst -1 "x")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "deriv" -1 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "-" -1 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_derivative formula-decl nil derivative_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_diff_fun formula-decl nil derivatives nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (derivable_diff application-judgement "deriv_fun" derivatives nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (<= const-decl "bool" reals nil))
   shostak))
 (derivs_funs_geq 0
  (derivs_funs_geq-1 nil 3795100030
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (lemma " nonneg_derivative")
          (("" (inst -1 "f-g")
            (("" (flatten)
              (("" (hide -1)
                (("" (split -1)
                  (("1" (expand "-")
                    (("1" (expand "increasing?" -1)
                      (("1" (assert)
                        (("1" (typepred "d")
                          (("1" (inst -3 "x")
                            (("1" (inst -4 "d" "x")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst -2 "x!1")
                      (("2" (lemma "deriv_diff_fun[T]")
                        (("2" (inst -1 "f" "g")
                          (("2" (decompose-equality -1)
                            (("2" (inst -1 "x!1")
                              (("2"
                                (expand "-" -1 2)
                                (("2"
                                  (expand "deriv" -1 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_derivative formula-decl nil derivative_props nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_diff_fun formula-decl nil derivatives nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_diff application-judgement "deriv_fun" derivatives nil))
   shostak))
 (derivs_funs_gt 0
  (derivs_funs_gt-1 nil 3795100251
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "d")
        (("" (skeep)
          (("" (lemma "nonneg_derivative")
            (("" (inst -1 "f-g")
              (("" (flatten)
                (("" (split -2)
                  (("1" (hide -2)
                    (("1" (expand "increasing?" -1)
                      (("1" (inst -4 "x")
                        (("1" (inst -1 "d" "x")
                          (("1" (assert)
                            (("1" (expand "-") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst -6 "x!1")
                      (("2" (lemma "deriv_diff_fun[T]")
                        (("2" (inst -1 "f" "g")
                          (("2" (decompose-equality -1)
                            (("2" (inst -1 "x!1")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "deriv" -1 1)
                                  (("2"
                                    (expand "-" -1 2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_diff application-judgement "deriv_fun" derivatives nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (increasing? const-decl "bool" real_fun_preds reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_diff_fun formula-decl nil derivatives nil)
    (nonneg_derivative formula-decl nil derivative_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (T formal-subtype-decl nil derivative_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (<= const-decl "bool" reals nil))
   shostak))
 (deriv_neg_neg 0
  (deriv_neg_neg-1 nil 3796222391
   ("" (skeep)
    (("" (assert)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (typepred "d!1")
              (("" (typepred "d")
                (("" (case "NOT d=d!1")
                  (("1" (assert)
                    (("1" (inst -4 "d")
                      (("1" (inst -2 "d!1")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "member")
                              (("1"
                                (expand "extend")
                                (("1"
                                  (expand "fullset")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "f(d)>0")
                    (("1" (hide -3 -4 -5 -6)
                      (("1" (lemma "derivs_funs_geq")
                        (("1" (inst -1 "a" "b" "_" "_")
                          (("1"
                            (inst -1 "LAMBDA(x:T): -eps* (x-d) + f(d)"
                             "f")
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1"
                                  (inst -1 "d")
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (typepred "x")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (case
                                           "NOT f(d) + (f(d) / eps + d) * (-eps ) - -eps  * d = 0 ")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (case
                                             "NOT x*(-eps) < (f(d) / eps + d) *(-eps)")
                                            (("1"
                                              (name
                                               "r"
                                               "(f(d) / eps + d)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (lemma
                                                   "both_sides_times_neg_lt1")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "-eps"
                                                     "x"
                                                     "r")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "d")
                                    (("2"
                                      (skeep 1)
                                      (("2"
                                        (inst -2 "xx")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 1)
                                            (("2"
                                              (expand "extend" 1)
                                              (("2"
                                                (expand "fullset" 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (case
                                     "deriv(LAMBDA (x: T): f(d) + x * (-eps ) - -eps  * d)(x_1) >= -eps")
                                    (("1"
                                      (inst -5 "x_1")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma "derivable_sum[T]")
                                        (("2"
                                          (lemma "deriv_sum[T]")
                                          (("2"
                                            (typepred "f")
                                            (("2"
                                              (case
                                               "derivable?[T](LAMBDA(x:T): x * (-eps ))")
                                              (("1"
                                                (inst
                                                 -3
                                                 "(LAMBDA (x: T): f(d))"
                                                 "LAMBDA (x: T): x * (-eps) - -eps  * d"
                                                 "x_1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -3)
                                                    (("1"
                                                      (expand "+" -1)
                                                      (("1"
                                                        (expand
                                                         "deriv"
                                                         1
                                                         1)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             "deriv_diff[T]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "LAMBDA (x: T): x * (-eps)"
                                                               "(LAMBDA (x: T):  -eps * d)"
                                                               "x_1")
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "-"
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_const[T]")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "f(d)"
                                                                           "x_1")
                                                                          (("1"
                                                                            (expand
                                                                             "const_fun"
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "deriv_const[T]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "-eps  * d"
                                                                                   "x_1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "const_fun"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "deriv_scal[T]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "(-eps)"
                                                                                           "LAMBDA(x:T): x"
                                                                                           "x_1")
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "*"
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "deriv_id_fun[T]")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "deriv"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "x_1")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         "identity_derivable[T]")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x1!1")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "I"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "identity_derivable[T]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x_1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "I")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "scal_derivable[T]")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "(-eps)"
                                                                     "LAMBDA (x: T): x"
                                                                     "x_1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "*"
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "identity_derivable[T]")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "x_1")
                                                                              (("2"
                                                                                (expand
                                                                                 "I"
                                                                                 -1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (lemma
                                                                   "derivable_const[T]")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "-eps  * d")
                                                                    (("3"
                                                                      (expand
                                                                       "const_fun"
                                                                       -1)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (expand
                                                                           "derivable?"
                                                                           -1)
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "x_1")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "derivable_const[T]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "f(d)")
                                                        (("2"
                                                          (expand
                                                           "derivable?"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "const_fun"
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x_1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (lemma
                                                       "derivable_const[T]")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "-eps*d")
                                                        (("3"
                                                          (lemma
                                                           "identity_derivable[T]")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "x_1")
                                                            (("3"
                                                              (expand
                                                               "I")
                                                              (("3"
                                                                (lemma
                                                                 "derivable_scal[T]")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "(-eps)"
                                                                   "LAMBDA(x: T): x")
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "diff_derivable[T]")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "LAMBDA (x: T): x * (-eps)"
                                                                         "LAMBDA (x: T): -eps  * d"
                                                                         "x_1")
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "-"
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "derivable?"
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "x_1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (expand
                                                                             "const_fun"
                                                                             -3)
                                                                            (("3"
                                                                              (expand
                                                                               "derivable?"
                                                                               -3)
                                                                              (("3"
                                                                                (inst
                                                                                 -3
                                                                                 "x_1")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "derivable?"
                                                                       1)
                                                                      (("2"
                                                                        (lemma
                                                                         "identity_derivable[T]")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "x_1")
                                                                          (("2"
                                                                            (expand
                                                                             "I")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (lemma
                                                                                 "identity_derivable[T]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x_1!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "I")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "derivable_scal[T]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   " (-eps)"
                                                   "LAMBDA (x: T): x")
                                                  (("1"
                                                    (expand "*" -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "identity_derivable[T]")
                                                    (("2"
                                                      (expand
                                                       "derivable?"
                                                       1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x_1!1")
                                                          (("2"
                                                            (expand
                                                             "I")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (lemma "derivable_sum[T]")
                                        (("3"
                                          (lemma "deriv_sum[T]")
                                          (("3"
                                            (typepred "f")
                                            (("3"
                                              (lemma
                                               "derivable_sum[T]")
                                              (("3"
                                                (hide -3)
                                                (("3"
                                                  (hide -3)
                                                  (("3"
                                                    (case
                                                     "derivable?[T](LAMBDA(x:T): x * (-eps))")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "(LAMBDA (x: T): f(d))"
                                                       "LAMBDA (x: T): x * (-eps) - -eps  * d")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "+"
                                                           -2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "derivable_diff[T]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "LAMBDA (x: T): x * (-eps)"
                                                           "(LAMBDA (x: T):  -eps  * d)")
                                                          (("1"
                                                            (expand
                                                             "-"
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "derivable?"
                                                             1)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (lemma
                                                                 "derivable_const[T]")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "-eps  * d")
                                                                  (("2"
                                                                    (expand
                                                                     "const_fun"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "derivable?"
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x_1!1")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        (("3"
                                                          (lemma
                                                           "derivable_const[T]")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "f(d)")
                                                            (("3"
                                                              (expand
                                                               "const_fun"
                                                               -1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "derivable_scal[T]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "(-eps)"
                                                         "LAMBDA(x:T): x")
                                                        (("1"
                                                          (expand
                                                           "*"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "identity_derivable_fun[T]")
                                                          (("2"
                                                            (expand
                                                             "I")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "derivable_sum[T]")
                              (("2"
                                (case
                                 "derivable?[T](LAMBDA(x:T): x * (-eps))")
                                (("1"
                                  (inst
                                   -2
                                   "(LAMBDA (x: T): f(d))"
                                   "LAMBDA (x: T): x * (-eps) - -eps  * d")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "+" -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "derivable_diff[T]")
                                    (("2"
                                      (inst
                                       -1
                                       "LAMBDA (x: T): x * (-eps)"
                                       "(LAMBDA (x: T):  -eps  * d)")
                                      (("1"
                                        (expand "-" -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "derivable?" 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (lemma
                                             "derivable_const[T]")
                                            (("2"
                                              (inst -1 "-eps  * d")
                                              (("2"
                                                (expand "const_fun" -1)
                                                (("2"
                                                  (expand
                                                   "derivable?"
                                                   -1)
                                                  (("2"
                                                    (inst -1 "x_1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (lemma "derivable_const[T]")
                                      (("3"
                                        (inst -1 "f(d)")
                                        (("3"
                                          (expand "const_fun" -1)
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "derivable_scal[T]")
                                  (("2"
                                    (inst -1 "(-eps)" "LAMBDA(x:T): x")
                                    (("1"
                                      (expand "*" -1 1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "identity_derivable_fun[T]")
                                      (("2"
                                        (expand "I")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "negative_derivative")
                      (("2" (inst -1 "f")
                        (("2" (split -1)
                          (("1" (expand "strict_decreasing?" -1)
                            (("1" (inst-cp -1 "d" "1+d")
                              (("1"
                                (assert)
                                (("1"
                                  (case "NOT f(d) <= 0")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "d")
                                      (("2"
                                        (inst -2 "1+d")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (expand "extend")
                                                (("2"
                                                  (typepred "d")
                                                  (("2"
                                                    (inst -2 "1+d")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "extend")
                                                            (("2"
                                                              (typepred
                                                               "eps")
                                                              (("2"
                                                                (case
                                                                 "NOT -eps <0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6
                                                                   -7
                                                                   -8
                                                                   -9
                                                                   -10)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "eps")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "x")
                                                                          (("2"
                                                                            (case
                                                                             "f(d) = 0")
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "d"
                                                                               "x")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "NOT f(d)<0")
                                                                              (("1"
                                                                                (inst
                                                                                 -10
                                                                                 "x")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -11
                                                                                   "x")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "fullset"
                                                                                         -)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -7
                                                                                             "d"
                                                                                             "x")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -5 "1+d")
                                (("2"
                                  (inst -3 "1+d")
                                  (("2"
                                    (expand "member" -3)
                                    (("2"
                                      (expand "extend" -3)
                                      (("2"
                                        (expand "fullset" -3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst -7 "x!1")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "deriv" -7)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-subtype-decl nil derivative_props nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (negative_derivative formula-decl nil derivative_props nil)
    (strict_decreasing? const-decl "bool" real_fun_preds reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (identity_derivable_fun formula-decl nil derivatives nil)
    (derivable_diff judgement-tcc nil derivatives nil)
    (deriv_sum formula-decl nil derivatives_def nil)
    (derivable_sum application-judgement "deriv_fun" derivatives nil)
    (diff_derivable formula-decl nil derivatives_def nil)
    (derivable_const application-judgement "deriv_fun" derivatives nil)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops nil)
    (derivable_scal judgement-tcc nil derivatives nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (derivable_const judgement-tcc nil derivatives nil)
    (scal_derivable formula-decl nil derivatives_def nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (deriv_id_fun formula-decl nil derivatives nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (identity_derivable formula-decl nil derivatives_def nil)
    (deriv_scal formula-decl nil derivatives_def nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (deriv_const formula-decl nil derivatives_def nil)
    (deriv_diff formula-decl nil derivatives_def nil)
    (derivable_sum judgement-tcc nil derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (f skolem-const-decl "deriv_fun[T]" derivative_props nil)
    (d skolem-const-decl "{dd: T |
   FORALL (xx: real):
     dd <= xx IFF
      member[real](xx, extend[real, T, bool, FALSE](fullset[T]))}"
       derivative_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (eps skolem-const-decl "posreal" derivative_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivs_funs_geq formula-decl nil derivative_props nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (> const-decl "bool" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (neg_spot_TCC1 0
  (neg_spot_TCC1-1 nil 3796313527
   ("" (skeep)
    (("" (lemma "deriv_neg_neg")
      (("" (inst -1 "d" "d+1" "f" "eps")
        (("1" (assert)
          (("1" (split -1)
            (("1" (inst -1 "d") nil nil)
             ("2" (inst 1 "d")
              (("2" (typepred "f") (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (typepred "d")
          (("2" (inst -2 "1+d")
            (("2" (expand "member" -2)
              (("2" (expand "extend" -2)
                (("2" (expand "fullset" -2) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_neg_neg formula-decl nil derivative_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivative_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-subtype-decl nil derivative_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (member const-decl "bool" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil)
    (d skolem-const-decl "{dd: T |
   FORALL (xx: real):
     dd <= xx IFF
      member[real](xx, extend[real, T, bool, FALSE](fullset[T]))}"
       derivative_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (neg_spot subtype
    "((number_fields.+)(derivative_props.d, number_fields./(derivative_props.f(derivative_props.d), derivative_props.eps)))"
    "{r: reals.real | FORALL (x: {xx: derivative_props.T | reals.>(xx, r)}): reals.<(derivative_props.f(x), 0)}"))))


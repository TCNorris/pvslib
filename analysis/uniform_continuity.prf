(uniform_continuity
 (ds_eq_0 0
  (ds_eq_0-1 nil 3459781815
   ("" (skeep)
    (("" (lemma "fullset_S_metric_space") (("" (grind) nil nil)) nil)) nil)
   ((fullset_S_metric_space formula-decl nil uniform_continuity nil)
    (metric_space? const-decl "bool" metric_spaces_def nil)
    (space_triangle? const-decl "bool" metric_spaces_def nil)
    (space_symmetric? const-decl "bool" metric_spaces_def nil)
    (space_zero? const-decl "bool" metric_spaces_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (fullset const-decl "set" sets nil))
   shostak))
 (ds_sym 0
  (ds_sym-1 nil 3459781852
   ("" (skeep)
    (("" (lemma "fullset_S_metric_space") (("" (grind) nil nil)) nil)) nil)
   ((fullset_S_metric_space formula-decl nil uniform_continuity nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (space_zero? const-decl "bool" metric_spaces_def nil)
    (space_symmetric? const-decl "bool" metric_spaces_def nil)
    (space_triangle? const-decl "bool" metric_spaces_def nil)
    (metric_space? const-decl "bool" metric_spaces_def nil)
    (fullset const-decl "set" sets nil))
   nil))
 (ds_triangle 0
  (ds_triangle-1 nil 3459781863
   ("" (skeep)
    (("" (lemma "fullset_S_metric_space") (("" (grind) nil nil)) nil)) nil)
   ((fullset_S_metric_space formula-decl nil uniform_continuity nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (space_zero? const-decl "bool" metric_spaces_def nil)
    (space_symmetric? const-decl "bool" metric_spaces_def nil)
    (space_triangle? const-decl "bool" metric_spaces_def nil)
    (metric_space? const-decl "bool" metric_spaces_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (fullset const-decl "set" sets nil))
   nil))
 (dt_eq_0 0
  (dt_eq_0-1 nil 3459781878
   ("" (skeep)
    (("" (lemma "fullset_T_metric_space") (("" (grind) nil nil)) nil)) nil)
   ((fullset_T_metric_space formula-decl nil uniform_continuity nil)
    (metric_space? const-decl "bool" metric_spaces_def nil)
    (space_triangle? const-decl "bool" metric_spaces_def nil)
    (space_symmetric? const-decl "bool" metric_spaces_def nil)
    (space_zero? const-decl "bool" metric_spaces_def nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil))
   nil))
 (dt_sym 0
  (dt_sym-1 nil 3459781915
   ("" (skeep)
    (("" (lemma "fullset_T_metric_space") (("" (grind) nil nil)) nil)) nil)
   ((fullset_T_metric_space formula-decl nil uniform_continuity nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (space_zero? const-decl "bool" metric_spaces_def nil)
    (space_symmetric? const-decl "bool" metric_spaces_def nil)
    (space_triangle? const-decl "bool" metric_spaces_def nil)
    (metric_space? const-decl "bool" metric_spaces_def nil)
    (fullset const-decl "set" sets nil))
   nil))
 (dt_triangle 0
  (dt_triangle-1 nil 3459781926
   ("" (skeep)
    (("" (lemma "fullset_T_metric_space") (("" (grind) nil nil)) nil)) nil)
   ((fullset_T_metric_space formula-decl nil uniform_continuity nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (space_zero? const-decl "bool" metric_spaces_def nil)
    (space_symmetric? const-decl "bool" metric_spaces_def nil)
    (space_triangle? const-decl "bool" metric_spaces_def nil)
    (metric_space? const-decl "bool" metric_spaces_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (fullset const-decl "set" sets nil))
   nil))
 (IMP_continuity_ms_TCC1 0
  (IMP_continuity_ms_TCC1-1 nil 3459685573
   ("" (rewrite "fullset_S_metric_space") nil nil)
   ((fullset_S_metric_space formula-decl nil uniform_continuity nil)) nil
   (IMP_continuity_ms assuming
    "continuity_ms[uniform_continuity.S, uniform_continuity.ds, uniform_continuity.T, uniform_continuity.dt].continuity_ms"
    "fullset_metric_space1: ASSUMPTION metric_spaces_def[continuity_ms.T1, continuity_ms.d1].metric_space?(sets[continuity_ms.T1].fullset)")))
 (IMP_continuity_ms_TCC2 0
  (IMP_continuity_ms_TCC2-1 nil 3459685573
   ("" (rewrite "fullset_T_metric_space") nil nil)
   ((fullset_T_metric_space formula-decl nil uniform_continuity nil)) nil
   (IMP_continuity_ms assuming
    "continuity_ms[uniform_continuity.S, uniform_continuity.ds, uniform_continuity.T, uniform_continuity.dt].continuity_ms"
    "fullset_metric_space2: ASSUMPTION metric_spaces_def[continuity_ms.T2, continuity_ms.d2].metric_space?(sets[continuity_ms.T2].fullset)")))
 (unif_cont_implies_cont 0
  (unif_cont_implies_cont-1 nil 3460390924
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (expand "uniformly_continuous?")
        (("" (skosimp*)
          (("" (expand "continuous_at?")
            (("" (skosimp*)
              (("" (inst - "epsilon!1")
                (("" (skosimp*)
                  (("" (inst + "delta!1")
                    (("" (skosimp*)
                      (("" (expand "member")
                        (("" (expand "ball") (("" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuity_ms_def nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (set type-eq-decl nil sets nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil)
    (uniformly_continuous? const-decl "bool" uniform_continuity nil))
   shostak))
 (Hset_def 0
  (Hset_def-3 "" 3790090173
   ("" (skosimp*)
    (("" (expand "Hset")
      (("" (expand "continuous?")
        (("" (inst - "x!1")
          (("" (expand "continuous_at?")
            (("" (inst - "epsilon!1")
              (("" (skosimp*)
                (("" (assert)
                  (("" (inst + "(x!1,delta!1/2)")
                    (("" (split +)
                      (("1" (skosimp*)
                        (("1" (inst?)
                          (("1" (expand "intersection")
                            (("1" (assert)
                              (("1" (flatten)
                                (("1" (assert)
                                  (("1" (expand "ball")
                                    (("1" (assert)
                                      (("1" (rewrite "dt_sym") nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "intersection")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "ball")
                        (("2" (lemma "ds_eq_0")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Hset const-decl "set[[S, posreal]]" uniform_continuity nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (member const-decl "bool" sets nil)
    (ds_eq_0 formula-decl nil uniform_continuity nil)
    (A!1 skolem-const-decl "set[S]" uniform_continuity nil)
    (x!2 skolem-const-decl "S" uniform_continuity nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dt_sym formula-decl nil uniform_continuity nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (intersection const-decl "set" sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil)
    (continuous? const-decl "bool" continuity_ms_def nil))
   shostak)
  (Hset_def-2 nil 3460196535
   ("" (skosimp*)
    (("" (expand "Hset")
      (("" (expand "continuous?")
        (("" (expand "restrict")
          (("" (inst - "x!1")
            (("" (expand "continuous_at?")
              (("" (inst - "epsilon!1")
                (("" (skosimp*)
                  (("" (assert)
                    (("" (inst + "(x!1,delta!1/2)")
                      (("" (split +)
                        (("1" (skosimp*)
                          (("1" (inst?)
                            (("1" (expand "intersection")
                              (("1" (assert)
                                (("1" (flatten)
                                  (("1" (assert)
                                    (("1" (expand "ball")
                                      (("1"
                                        (assert)
                                        (("1" (rewrite "dt_sym") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "intersection")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (expand "ball")
                          (("2" (lemma "ds_eq_0")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ball const-decl "set[T]" metric_spaces nil)) nil)
  (Hset_def-1 nil 3460108603
   ("" (skosimp*)
    (("" (expand "Hset")
      (("" (expand "continuous?")
        (("" (expand "restrict")
          (("" (inst - "x!1")
            (("" (expand "continuous_at?")
              (("" (inst - "epsilon!1")
                (("" (skosimp*)
                  (("" (assert)
                    (("" (inst + "(x!1,delta!1)")
                      (("" (split +)
                        (("1" (skosimp*)
                          (("1" (inst?)
                            (("1" (expand "intersection")
                              (("1" (assert)
                                (("1" (flatten)
                                  (("1" (assert)
                                    (("1" (expand "ball")
                                      (("1"
                                        (assert)
                                        (("1" (rewrite "dt_sym") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "intersection")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (expand "ball")
                          (("2" (lemma "ds_eq_0")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ball const-decl "set[T]" metric_spaces nil)) shostak))
 (ball_cover_lem 0
  (ball_cover_lem-1 nil 3459690736
   ("" (skosimp*)
    (("" (expand "ball_cover")
      (("" (expand "open_cover?")
        (("" (split +)
          (("1" (expand "subset?")
            (("1" (skosimp*)
              (("1" (assert)
                (("1" (expand "Union")
                  (("1" (lemma "Hset_def")
                    (("1" (inst?)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (inst - "x!1")
                            (("1" (skosimp*)
                              (("1" (inst + "ball[S, ds](p!1)")
                                (("1" (expand "ball_covering")
                                  (("1" (inst + "(p!1`1, p!1`2)")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (expand "ball_covering")
              (("2" (skosimp*)
                (("2" (replace -1)
                  (("2" (hide -)
                    (("2" (lemma "ball_open[S,ds]") (("2" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ball_cover const-decl "set[set[S]]" uniform_continuity nil)
    (ball_open formula-decl nil metric_spaces nil)
    (subset? const-decl "bool" sets nil)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (Hset_def formula-decl nil uniform_continuity nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (Hset const-decl "set[[S, posreal]]" uniform_continuity nil)
    (ball_covering const-decl "set[set[T]]" compactness nil)
    (ds formal-const-decl "[S, S -> nnreal]" uniform_continuity nil)
    (nnreal type-eq-decl nil real_types nil)
    (p!1 skolem-const-decl "[a: (A!1), r: posreal]" uniform_continuity nil)
    (f!1 skolem-const-decl "[S -> T]" uniform_continuity nil)
    (epsilon!1 skolem-const-decl "posreal" uniform_continuity nil)
    (A!1 skolem-const-decl "set[S]" uniform_continuity nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (Union const-decl "set" sets nil)
    (open_cover? const-decl "bool" compactness nil))
   shostak))
 (compact_ball_all 0
  (compact_ball_all-2 "" 3790090173
   ("" (skosimp*)
    (("" (typepred "a!1")
      (("" (expand "continuous?")
        (("" (inst - "a!1")
          (("" (expand "continuous_at?")
            (("" (inst?)
              (("" (skosimp*)
                (("" (assert)
                  (("" (expand "ball")
                    (("" (expand "intersection")
                      (("" (assert)
                        (("" (inst + "delta!1")
                          (("" (skosimp*)
                            (("" (inst - "x!1")
                              (("" (assert) (("" (rewrite "dt_sym") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (A!1 skolem-const-decl "set[S]" uniform_continuity nil)
    (x!1 skolem-const-decl "S" uniform_continuity nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (dt_sym formula-decl nil uniform_continuity nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil)
    (continuous? const-decl "bool" continuity_ms_def nil))
   shostak)
  (compact_ball_all-1 nil 3459694390
   ("" (skosimp*)
    (("" (expand "restrict")
      (("" (typepred "a!1")
        (("" (expand "continuous?")
          (("" (inst - "a!1")
            (("" (expand "continuous_at?")
              (("" (inst?)
                (("" (skosimp*)
                  (("" (assert)
                    (("" (expand "ball")
                      (("" (expand "intersection")
                        (("" (assert)
                          (("" (inst + "delta!1")
                            (("" (skosimp*)
                              (("" (inst - "x!1")
                                (("" (assert)
                                  (("" (rewrite "dt_sym") nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ball const-decl "set[T]" metric_spaces nil)) shostak))
 (rset_prep 0
  (rset_prep-3 nil 3460197959
   ("" (skosimp*)
    (("" (name "H" "Hset(A!1, epsilon!1, f!1)")
      (("" (replace -1)
        (("" (expand "ball_covering")
          (("" (expand "open_cover?")
            (("" (split +)
              (("1" (expand "subset?")
                (("1" (skosimp*)
                  (("1" (assert)
                    (("1" (expand "Union")
                      (("1" (expand "continuous?")
                        (("1" (inst - "x!1")
                          (("1" (expand "continuous_at?")
                            (("1" (inst - "epsilon!1/2")
                              (("1" (skosimp*)
                                (("1" (assert)
                                  (("1" (expand "Hset")
                                    (("1"
                                      (inst + "ball[S, ds](x!1, delta!1/2)")
                                      (("1"
                                        (expand "ball")
                                        (("1"
                                          (lemma "ds_eq_0")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst + "(x!1, delta!1/2)")
                                        (("2"
                                          (replace -2 + :dir rl)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst -4 "x!2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "intersection")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand "ball")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "dt_sym")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "intersection")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (lemma "ball_open[S,ds]")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Hset const-decl "set[[S, posreal]]" uniform_continuity nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (ball_covering const-decl "set[set[T]]" compactness nil)
    (ball_open formula-decl nil metric_spaces nil)
    (subset? const-decl "bool" sets nil)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (continuous? const-decl "bool" continuity_ms_def nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil)
    (H skolem-const-decl "set[[S, posreal]]" uniform_continuity nil)
    (nnreal type-eq-decl nil real_types nil)
    (ds formal-const-decl "[S, S -> nnreal]" uniform_continuity nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (x!1 skolem-const-decl "S" uniform_continuity nil)
    (delta!1 skolem-const-decl "posreal" uniform_continuity nil)
    (ds_eq_0 formula-decl nil uniform_continuity nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (A!1 skolem-const-decl "set[S]" uniform_continuity nil)
    (x!2 skolem-const-decl "S" uniform_continuity nil)
    (intersection const-decl "set" sets nil)
    (dt_sym formula-decl nil uniform_continuity nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (Union const-decl "set" sets nil)
    (open_cover? const-decl "bool" compactness nil))
   nil)
  (rset_prep-2 nil 3460197883
   (";;; Proof rset_prep-1 for formula unif_cont.rset_prep" (skosimp*)
    ((";;; Proof rset_prep-1 for formula unif_cont.rset_prep"
      (name "H" "Hset(A!1, epsilon!1, f!1)")
      ((";;; Proof rset_prep-1 for formula unif_cont.rset_prep" (replace -1)
        ((";;; Proof rset_prep-1 for formula unif_cont.rset_prep"
          (expand "ball_covering")
          ((";;; Proof rset_prep-1 for formula unif_cont.rset_prep"
            (expand "open_cover?")
            ((";;; Proof rset_prep-1 for formula unif_cont.rset_prep"
              (split +)
              (("1" (expand "subset?")
                (("1" (skosimp*)
                  (("1" (assert)
                    (("1" (expand "Union")
                      (("1" (expand "continuous?")
                        (("1" (inst - "x!1")
                          (("1" (expand "continuous_at?")
                            (("1" (inst - "epsilon!1/2")
                              (("1" (skosimp*)
                                (("1" (assert)
                                  (("1" (expand "restrict")
                                    (("1" (expand "Hset")
                                      (("1"
                                        (inst + "ball[S, ds](x!1, delta!1/2)")
                                        (("1"
                                          (expand "ball")
                                          (("1"
                                            (lemma "ds_eq_0")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil)))))))
                                         ("2"
                                          (inst + "(x!1, delta!1)")
                                          (("2"
                                            (replace -2 + :dir rl)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst -4 "x!2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "intersection")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand "ball")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (postpone)
                                                                nil)))))))))))))
                                                   ("2"
                                                    (postpone)
                                                    nil)))))))))))))))))))))))))))))))))))))
               ("2" (skosimp*)
                (("2" (lemma "ball_open")
                  (("2" (inst?) (("2" (assert) nil))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil)
  (rset_prep-1 nil 3460196706
   ("" (skosimp*)
    (("" (name "H" "Hset(A!1, epsilon!1, f!1)")
      (("" (replace -1)
        (("" (expand "ball_covering")
          (("" (expand "open_cover?")
            (("" (split +)
              (("1" (expand "subset?")
                (("1" (skosimp*)
                  (("1" (assert)
                    (("1" (expand "Union")
                      (("1" (expand "continuous?")
                        (("1" (inst - "x!1")
                          (("1" (expand "continuous_at?")
                            (("1" (inst - "epsilon!1/2")
                              (("1" (skosimp*)
                                (("1" (assert)
                                  (("1" (expand "restrict")
                                    (("1" (expand "Hset")
                                      (("1"
                                        (inst + "ball[S, ds](x!1, delta!1)")
                                        (("1"
                                          (expand "ball")
                                          (("1"
                                            (lemma "ds_eq_0")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst + "(x!1, delta!1)")
                                          (("2"
                                            (replace -2 + :dir rl)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst -4 "x!2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "intersection")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand "ball")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (postpone) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (lemma "ball_open")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rset_TCC1 0
  (rset_TCC1-2 "" 3790090174
   ("" (skosimp*) (("" (rewrite "rset_prep") nil nil)) nil)
   ((rset_prep formula-decl nil uniform_continuity nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (ds formal-const-decl "[S, S -> nnreal]" uniform_continuity nil)
    (compact? const-decl "bool" compactness nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (dt formal-const-decl "[T, T -> nnreal]" uniform_continuity nil)
    (continuous? const-decl "bool" continuity_ms_def nil)
    (continuous_funs type-eq-decl nil uniform_continuity nil))
   shostak
   (rset subtype
    "uniform_continuity.Hset(uniform_continuity.A, uniform_continuity.epsilon, uniform_continuity.f)"
    "compactness[uniform_continuity.S, uniform_continuity.ds].Htype(uniform_continuity.A)"))
  (rset_TCC1-1 nil 3460130465
   ("" (skosimp*) (("" (rewrite "rset_prep") (("" (postpone) nil nil)) nil))
    nil)
   ((compact? const-decl "bool" compactness nil)) nil
   (rset subtype
    "uniform_continuity.Hset(uniform_continuity.A, uniform_continuity.epsilon, uniform_continuity.f)"
    "compactness[uniform_continuity.S, uniform_continuity.ds].Htype(uniform_continuity.A)")))
 (rset_lem_TCC1 0
  (rset_lem_TCC1-1 nil 3460127743
   ("" (skosimp*) (("" (rewrite "rset_prep") nil nil)) nil)
   ((rset_prep formula-decl nil uniform_continuity nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil))
   nil
   (rset_lem subtype
    "uniform_continuity.Hset(uniform_continuity.A, uniform_continuity.epsilon, uniform_continuity.f)"
    "compactness[uniform_continuity.S, uniform_continuity.ds].Htype(uniform_continuity.A)")))
 (rset_lem 0
  (rset_lem-1 nil 3460127746
   ("" (skosimp*)
    (("" (assert) (("" (expand "rset") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((rset const-decl "set[posreal]" uniform_continuity nil)) shostak))
 (rset_finite 0
  (rset_finite-1 nil 3460198192
   ("" (skosimp*)
    (("" (expand "rset")
      (("" (lemma "is_finite_exists_N")
        (("" (inst?)
          (("1" (hide 2)
            (("1" (skosimp*)
              (("1" (lemma "rset_prep")
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (skosimp*) nil nil)) nil)
           ("3" (hide 2)
            (("3" (lemma "rset_prep")
              (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rset const-decl "set[posreal]" uniform_continuity nil)
    (rset_prep formula-decl nil uniform_continuity nil)
    (epsilon!1 skolem-const-decl "posreal" uniform_continuity nil)
    (f!1 skolem-const-decl "[S -> T]" uniform_continuity nil)
    (Hset const-decl "set[[S, posreal]]" uniform_continuity nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (idxCover const-decl "{pair: [N: nat, seq: [below[N] -> (H)]] |
   open_cover?(ball_covering({h: [T, posreal] |
                                H(h) AND
                                 (EXISTS (n: below[pair`1]):
                                    h = pair`2(n))}),
               S)}" compactness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (Htype type-eq-decl nil compactness nil)
    (ball_covering const-decl "set[set[T]]" compactness nil)
    (open_cover? const-decl "bool" compactness nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (set type-eq-decl nil sets nil) (nnreal type-eq-decl nil real_types nil)
    (ds formal-const-decl "[S, S -> nnreal]" uniform_continuity nil)
    (compact? const-decl "bool" compactness nil)
    (A!1 skolem-const-decl "set[S]" uniform_continuity nil)
    (is_finite_exists_N formula-decl nil finite_sets_aux nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   shostak))
 (rset_not_empty 0
  (rset_not_empty-1 nil 3460198699
   ("" (skosimp*)
    (("" (expand "empty?")
      (("" (skosimp*)
        (("" (assert)
          (("" (lemma "idxCover_def[S,ds]")
            (("" (inst?)
              (("" (expand "rset")
                (("" (inst - "Hset(A!1, epsilon!1, f!1)")
                  (("" (assert)
                    (("" (expand "ball_cover")
                      (("" (assert)
                        (("" (skosimp*)
                          ((""
                            (inst -7
                             "idxCover(A!1, Hset(A!1, epsilon!1, f!1))`2(n!1)`2")
                            (("" (inst + "n!1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (Hset const-decl "set[[S, posreal]]" uniform_continuity nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (ball_cover const-decl "set[set[S]]" uniform_continuity nil)
    (idxCover const-decl "{pair: [N: nat, seq: [below[N] -> (H)]] |
   open_cover?(ball_covering({h: [T, posreal] |
                                H(h) AND
                                 (EXISTS (n: below[pair`1]):
                                    h = pair`2(n))}),
               S)}" compactness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Htype type-eq-decl nil compactness nil)
    (ball_covering const-decl "set[set[T]]" compactness nil)
    (open_cover? const-decl "bool" compactness nil)
    (compact? const-decl "bool" compactness nil)
    (rset const-decl "set[posreal]" uniform_continuity nil)
    (idxCover_def formula-decl nil compactness nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (ds formal-const-decl "[S, S -> nnreal]" uniform_continuity nil))
   shostak))
 (Heine 0
  (Heine-7 nil 3460196563
   ("" (skosimp*)
    (("" (expand "uniformly_continuous?")
      (("" (skosimp*)
        (("" (lemma "ball_cover_lem")
          (("" (inst?)
            (("" (inst - "epsilon!1/2")
              (("" (assert)
                (("" (case "empty?(A!1)")
                  (("1" (propax) nil nil)
                   ("2" (hide 1)
                    (("2" (inst + "min(rset(A!1, epsilon!1 / 2, f!1))")
                      (("1" (skosimp*)
                        (("1" (lemma "idxCover_def[S,ds]")
                          (("1"
                            (inst - "Hset(A!1, epsilon!1 / 2, f!1)" "A!1"
                             "x!1")
                            (("1" (assert)
                              (("1" (split -1)
                                (("1" (skosimp*)
                                  (("1"
                                    (name "seq"
                                          "idxCover(A!1, Hset(A!1, epsilon!1 / 2, f!1))")
                                    (("1" (replace -1)
                                      (("1"
                                        (name
                                         "H"
                                         "Hset(A!1, epsilon!1 / 2, f!1)")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "ball_covering")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (hide -4)
                                                (("1"
                                                  (name "ak" "seq`2(n!1)`1")
                                                  (("1"
                                                    (name "rk" "seq`2(n!1)`2")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (case
                                                           "dt(f!1(x!1), f!1(ak)) < epsilon!1/2")
                                                          (("1"
                                                            (case
                                                             "dt(f!1(ak), f!1(p!1)) < epsilon!1 / 2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "dt_triangle")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "f!1(x!1)"
                                                                   "f!1(ak)"
                                                                   "f!1(p!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (case
                                                                 "ball(ak,2*rk)(p!1)")
                                                                (("1"
                                                                  (typepred
                                                                   "seq`2(n!1)")
                                                                  (("1"
                                                                    (expand
                                                                     "Hset")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -6)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "p!1")
                                                                          (("1"
                                                                            (expand
                                                                             "intersection")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "dt_sym")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (expand
                                                                     "ball")
                                                                    (("2"
                                                                      (lemma
                                                                       "ds_triangle")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "ak"
                                                                         "x!1"
                                                                         "p!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "min(rset(A!1, epsilon!1 / 2, f!1)) <= rk")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -1
                                                                               2)
                                                                              (("2"
                                                                                (typepred
                                                                                 "min(rset(A!1, epsilon!1 / 2, f!1))")
                                                                                (("2"
                                                                                  (inst
                                                                                   -4
                                                                                   "rk")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -9
                                                                                         -10
                                                                                         -11
                                                                                         -12
                                                                                         -13)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "rset"
                                                                                           1)
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "n!1")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "idxCover_def[S,ds]")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "ak")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (typepred
                                                               "seq`2(n!1)")
                                                              (("2"
                                                                (expand
                                                                 "Hset")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (replace
                                                                       -4)
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "x!1")
                                                                        (("2"
                                                                          (expand
                                                                           "intersection")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "ball")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "ball_cover")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "rset_finite")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (lemma "rset_not_empty")
                              (("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((uniformly_continuous? const-decl "bool" uniform_continuity nil)
    (ball_cover_lem formula-decl nil uniform_continuity nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (f!1 skolem-const-decl "[S -> T]" uniform_continuity nil)
    (epsilon!1 skolem-const-decl "posreal" uniform_continuity nil)
    (A!1 skolem-const-decl "set[S]" uniform_continuity nil)
    (rset const-decl "set[posreal]" uniform_continuity nil)
    (continuous_funs type-eq-decl nil uniform_continuity nil)
    (continuous? const-decl "bool" continuity_ms_def nil)
    (dt formal-const-decl "[T, T -> nnreal]" uniform_continuity nil)
    (compact? const-decl "bool" compactness nil)
    (ds formal-const-decl "[S, S -> nnreal]" uniform_continuity nil)
    (nnreal type-eq-decl nil real_types nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (idxCover_def formula-decl nil compactness nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (open_cover? const-decl "bool" compactness nil)
    (ball_covering const-decl "set[set[T]]" compactness nil)
    (Htype type-eq-decl nil compactness nil) (< const-decl "bool" reals nil)
    (idxCover const-decl "{pair: [N: nat, seq: [below[N] -> (H)]] |
   open_cover?(ball_covering({h: [T, posreal] |
                                H(h) AND
                                 (EXISTS (n: below[pair`1]):
                                    h = pair`2(n))}),
               S)}" compactness nil)
    (dt_triangle formula-decl nil uniform_continuity nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ds_triangle formula-decl nil uniform_continuity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil)
    (dt_sym formula-decl nil uniform_continuity nil)
    (intersection const-decl "set" sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (ball_cover const-decl "set[set[S]]" uniform_continuity nil)
    (Hset const-decl "set[[S, posreal]]" uniform_continuity nil)
    (rset_not_empty formula-decl nil uniform_continuity nil)
    (rset_finite formula-decl nil uniform_continuity nil)
    (empty? const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil))
   nil)
  (Heine-6 nil 3459855076
   ("" (skosimp*)
    (("" (expand "uniformly_continuous?")
      (("" (skosimp*)
        (("" (lemma "ball_cover_lem")
          (("" (inst?)
            (("" (inst - "epsilon!1/2")
              (("" (assert)
                (("" (expand "compact?")
                  (("" (inst?)
                    (("" (assert)
                      (("" (skosimp*)
                        (("" (case "empty?(A!1)")
                          (("1" (expand "empty?")
                            (("1" (expand "member")
                              (("1" (inst + "1")
                                (("1" (skosimp*)
                                  (("1" (assert)
                                    (("1" (typepred "x!1")
                                      (("1" (inst?) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst +
                             "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1))")
                            (("1" (hide 1)
                              (("1" (skosimp*)
                                (("1" (lemma "prep2")
                                  (("1" (inst?)
                                    (("1" (assert)
                                      (("1"
                                        (inst - "x!1")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (lemma "dt_triangle")
                                            (("1"
                                              (inst
                                               -
                                               "f!1(x!1)"
                                               "f!1(a!1)"
                                               "f!1(p!1)")
                                              (("1"
                                                (case-replace
                                                 "dt(f!1(x!1), f!1(a!1)) < epsilon!1/2")
                                                (("1"
                                                  (case-replace
                                                   "dt(f!1(a!1), f!1(p!1)) < epsilon!1/2")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (hide -2 2)
                                                    (("2"
                                                      (expand "continuous?")
                                                      (("2"
                                                        (inst - "p!1")
                                                        (("2"
                                                          (typepred "p!1")
                                                          (("2"
                                                            (case
                                                             "ball(a!1,r!1)(p!1)")
                                                            (("1"
                                                              (expand "rset")
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "p!1")
                                                                (("1"
                                                                  (expand
                                                                   "intersection")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "dt_sym"
                                                                       +)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "ball")
                                                                (("2"
                                                                  (lemma
                                                                   "ds_triangle")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "a!1"
                                                                     "x!1"
                                                                     "p!1")
                                                                    (("2"
                                                                      (case
                                                                       "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1)) <= r!1/2")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (lemma
                                                                           "get_rs_lem")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "{y: S | ds(a!1, y) < r!1 / 2}"
                                                                               "r!1/2"
                                                                               "a!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "ball")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1))")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "r!1/2")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 2)
                                                  (("2"
                                                    (expand "rset")
                                                    (("2"
                                                      (inst - "x!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "intersection")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide-all-but
                                                               (-2 2))
                                                              (("2"
                                                                (expand
                                                                 "ball")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (prop)
                              (("1" (lemma "get_rs_finite")
                                (("1" (inst?)
                                  (("1" (assert)
                                    (("1" (expand "finite_cover?")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (lemma "get_rs_not_empty")
                                (("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((compact? const-decl "bool" compactness nil)
    (finite_cover? const-decl "bool" compactness nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (is_finite const-decl "bool" finite_sets nil))
   nil)
  (Heine-5 nil 3459776904
   ("" (skosimp*)
    (("" (expand "uniformly_continuous?")
      (("" (skosimp*)
        (("" (lemma "ball_cover_lem")
          (("" (inst?)
            (("" (inst - "epsilon!1/2")
              (("" (assert)
                (("" (expand "compact?")
                  (("" (inst?)
                    (("" (assert)
                      (("" (skosimp*)
                        ((""
                          (inst +
                           "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1))")
                          (("1" (skosimp*)
                            (("1" (lemma "prep2")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (inst - "x!1")
                                    (("1" (skosimp*)
                                      (("1"
                                        (lemma "dt_triangle")
                                        (("1"
                                          (inst
                                           -
                                           "f!1(x!1)"
                                           "f!1(a!1)"
                                           "f!1(p!1)")
                                          (("1"
                                            (case-replace
                                             "dt(f!1(x!1), f!1(a!1)) < epsilon!1/2")
                                            (("1"
                                              (case-replace
                                               "dt(f!1(a!1), f!1(p!1)) < epsilon!1/2")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -2 2)
                                                (("2"
                                                  (expand "continuous?")
                                                  (("2"
                                                    (inst - "p!1")
                                                    (("2"
                                                      (typepred "p!1")
                                                      (("2"
                                                        (case
                                                         "ball(a!1,r!1)(p!1)")
                                                        (("1"
                                                          (expand "rset")
                                                          (("1"
                                                            (inst -6 "p!1")
                                                            (("1"
                                                              (expand
                                                               "intersection")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "dt_sym"
                                                                   +)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand "ball")
                                                            (("2"
                                                              (lemma
                                                               "ds_triangle")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "a!1"
                                                                 "x!1"
                                                                 "p!1")
                                                                (("2"
                                                                  (case
                                                                   "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1)) <= r!1/2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (lemma
                                                                       "get_rs_lem")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "{y: S | ds(a!1, y) < r!1 / 2}"
                                                                           "r!1/2"
                                                                           "a!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "ball")
                                                                              (("2"
                                                                                (typepred
                                                                                 "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1))")
                                                                                (("2"
                                                                                  (inst
                                                                                   -4
                                                                                   "r!1/2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (expand "rset")
                                                (("2"
                                                  (inst - "x!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "intersection")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           (-2 2))
                                                          (("2"
                                                            (expand "ball")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "get_rs_finite")
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (expand "finite_cover?")
                                  (("2" (flatten)
                                    (("2" (assert)
                                      (("2"
                                        (lemma "get_rs_not_empty")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((compact? const-decl "bool" compactness nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (ball const-decl "set[T]" metric_spaces nil)
    (finite_cover? const-decl "bool" compactness nil))
   nil)
  (Heine-4 nil 3459776667
   (";;; Proof Heine-3 for formula unif_cont.Heine" (skosimp*)
    ((";;; Proof Heine-3 for formula unif_cont.Heine"
      (expand "uniformly_continuous?")
      ((";;; Proof Heine-3 for formula unif_cont.Heine" (skosimp*)
        ((";;; Proof Heine-3 for formula unif_cont.Heine"
          (lemma "ball_cover_lem")
          ((";;; Proof Heine-3 for formula unif_cont.Heine" (inst?)
            ((";;; Proof Heine-3 for formula unif_cont.Heine"
              (inst - "epsilon!1/2")
              ((";;; Proof Heine-3 for formula unif_cont.Heine" (assert)
                ((";;; Proof Heine-3 for formula unif_cont.Heine"
                  (expand "compact?")
                  ((";;; Proof Heine-3 for formula unif_cont.Heine" (inst?)
                    ((";;; Proof Heine-3 for formula unif_cont.Heine" (assert)
                      ((";;; Proof Heine-3 for formula unif_cont.Heine"
                        (skosimp*)
                        ((";;; Proof Heine-3 for formula unif_cont.Heine"
                          (inst +
                           "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1))")
                          (("1" (skosimp*)
                            (("1" (lemma "prep3")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (inst - "x!1")
                                    (("1" (skosimp*)
                                      (("1"
                                        (lemma "dt_triangle")
                                        (("1"
                                          (inst
                                           -
                                           "f!1(x!1)"
                                           "f!1(a!1)"
                                           "f!1(p!1)")
                                          (("1"
                                            (case-replace
                                             "dt(f!1(x!1), f!1(a!1)) < epsilon!1/2")
                                            (("1"
                                              (case-replace
                                               "dt(f!1(a!1), f!1(p!1)) < epsilon!1/2")
                                              (("1" (assert) nil)
                                               ("2"
                                                (hide -2 2)
                                                (("2"
                                                  (expand "continuous?")
                                                  (("2"
                                                    (inst - "p!1")
                                                    (("2"
                                                      (typepred "p!1")
                                                      (("2"
                                                        (case
                                                         "ball(a!1,r!1)(p!1)")
                                                        (("1"
                                                          (expand "rset")
                                                          (("1"
                                                            (inst -6 "p!1")
                                                            (("1"
                                                              (expand
                                                               "intersection")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "dt_sym"
                                                                   -6)
                                                                  nil)))))))))
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand "ball")
                                                            (("2"
                                                              (lemma
                                                               "ds_triangle")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "a!1"
                                                                 "x!1"
                                                                 "p!1")
                                                                (("2"
                                                                  (case
                                                                   "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1)) <= r!1/2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (lemma
                                                                       "get_rs_lem")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "{y: S | ds(a!1, y) < r!1 / 2}"
                                                                           "r!1/2"
                                                                           "a!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "ball")
                                                                              (("2"
                                                                                (typepred
                                                                                 "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1))")
                                                                                (("2"
                                                                                  (inst
                                                                                   -4
                                                                                   "r!1/2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (expand "rset")
                                                (("2"
                                                  (inst - "x!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "intersection")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           (-2 2))
                                                          (("2"
                                                            (expand "ball")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))))))))
                           ("2" (lemma "get_rs_finite")
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (expand "finite_cover?")
                                  (("2" (flatten)
                                    (("2" (assert)
                                      (("2"
                                        (lemma "get_rs_not_empty")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            nil))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil)
  (Heine-3 nil 3459776388
   ("" (skosimp*)
    (("" (expand "uniformly_continuous?")
      (("" (skosimp*)
        (("" (lemma "ball_cover_lem")
          (("" (inst?)
            (("" (inst - "epsilon!1/2")
              (("" (assert)
                (("" (expand "compact?")
                  (("" (inst?)
                    (("" (assert)
                      (("" (skosimp*)
                        ((""
                          (inst +
                           "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1))")
                          (("1" (skosimp*)
                            (("1" (lemma "prep2")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (inst - "x!1")
                                    (("1" (skosimp*)
                                      (("1"
                                        (lemma "dt_triangle")
                                        (("1"
                                          (inst
                                           -
                                           "f!1(x!1)"
                                           "f!1(a!1)"
                                           "f!1(p!1)")
                                          (("1"
                                            (case-replace
                                             "dt(f!1(x!1), f!1(a!1)) < epsilon!1/2")
                                            (("1"
                                              (case-replace
                                               "dt(f!1(a!1), f!1(p!1)) < epsilon!1/2")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -2 2)
                                                (("2"
                                                  (expand "continuous?")
                                                  (("2"
                                                    (inst - "p!1")
                                                    (("2"
                                                      (typepred "p!1")
                                                      (("2"
                                                        (case
                                                         "ball(a!1,r!1)(p!1)")
                                                        (("1"
                                                          (expand "rset")
                                                          (("1"
                                                            (inst -6 "p!1")
                                                            (("1"
                                                              (expand
                                                               "intersection")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "dt_sym"
                                                                   -6)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand "ball")
                                                            (("2"
                                                              (lemma
                                                               "ds_triangle")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "a!1"
                                                                 "x!1"
                                                                 "p!1")
                                                                (("2"
                                                                  (case
                                                                   "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1)) <= r!1/2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (lemma
                                                                       "get_rs_lem")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "{y: S | ds(a!1, y) < r!1 / 2}"
                                                                           "r!1/2"
                                                                           "a!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "ball")
                                                                              (("2"
                                                                                (typepred
                                                                                 "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1))")
                                                                                (("2"
                                                                                  (inst
                                                                                   -4
                                                                                   "r!1/2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (expand "rset")
                                                (("2"
                                                  (inst - "x!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "intersection")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           (-2 2))
                                                          (("2"
                                                            (expand "ball")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "get_rs_finite")
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (expand "finite_cover?")
                                  (("2" (flatten)
                                    (("2" (assert)
                                      (("2"
                                        (lemma "get_rs_not_empty")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((compact? const-decl "bool" compactness nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (ball const-decl "set[T]" metric_spaces nil)
    (finite_cover? const-decl "bool" compactness nil))
   nil)
  (Heine-2 nil 3459776234
   (";;; Proof Heine_C-5 for formula unif_cont.Heine_C" (skosimp*)
    ((";;; Proof Heine_C-5 for formula unif_cont.Heine_C"
      (expand "uniformly_continuous?")
      ((";;; Proof Heine_C-5 for formula unif_cont.Heine_C" (skosimp*)
        ((";;; Proof Heine_C-5 for formula unif_cont.Heine_C"
          (lemma "ball_cover_lem")
          ((";;; Proof Heine_C-5 for formula unif_cont.Heine_C" (inst?)
            ((";;; Proof Heine_C-5 for formula unif_cont.Heine_C"
              (inst - "epsilon!1/2" "f!1")
              ((";;; Proof Heine_C-5 for formula unif_cont.Heine_C"
                (expand "compact?")
                ((";;; Proof Heine_C-5 for formula unif_cont.Heine_C" (inst?)
                  ((";;; Proof Heine_C-5 for formula unif_cont.Heine_C"
                    (assert)
                    ((";;; Proof Heine_C-5 for formula unif_cont.Heine_C"
                      (skosimp*)
                      ((";;; Proof Heine_C-5 for formula unif_cont.Heine_C"
                        (inst + "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1))")
                        (("1" (skosimp*)
                          (("1" (lemma "prep2")
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (inst - "x!1")
                                  (("1" (skosimp*)
                                    (("1" (lemma "dt_triangle")
                                      (("1"
                                        (inst
                                         -
                                         "f!1(x!1)"
                                         "f!1(a!1)"
                                         "f!1(p!1)")
                                        (("1"
                                          (case-replace
                                           "dt(f!1(x!1), f!1(a!1)) < epsilon!1/2")
                                          (("1"
                                            (case-replace
                                             "dt(f!1(a!1), f!1(p!1)) < epsilon!1/2")
                                            (("1" (assert) nil)
                                             ("2"
                                              (hide -2 2)
                                              (("2"
                                                (expand "continuous?")
                                                (("2"
                                                  (inst - "p!1")
                                                  (("2"
                                                    (typepred "p!1")
                                                    (("2"
                                                      (case
                                                       "ball(a!1,r!1)(p!1)")
                                                      (("1"
                                                        (expand "rset")
                                                        (("1"
                                                          (inst -6 "p!1")
                                                          (("1"
                                                            (expand
                                                             "intersection")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "dt_sym"
                                                                 -6)
                                                                nil)))))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand "ball")
                                                          (("2"
                                                            (lemma
                                                             "ds_triangle")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "a!1"
                                                               "x!1"
                                                               "p!1")
                                                              (("2"
                                                                (case
                                                                 "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1)) <= r!1/2")
                                                                (("1"
                                                                  (assert)
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (lemma
                                                                     "get_rs_lem")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "{y: S | ds(a!1, y) < r!1 / 2}"
                                                                         "r!1/2"
                                                                         "a!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "ball")
                                                                            (("2"
                                                                              (typepred
                                                                               "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1))")
                                                                              (("2"
                                                                                (inst
                                                                                 -4
                                                                                 "r!1/2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (expand "rset")
                                              (("2"
                                                (inst - "x!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "intersection")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide-all-but (-2 2))
                                                        (("2"
                                                          (expand "ball")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))))))))))))))))))))))
                         ("2" (lemma "get_rs_finite")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2" (expand "finite_cover?")
                                (("2" (flatten)
                                  (("2" (assert)
                                    (("2" (lemma "get_rs_not_empty")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          nil))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil)
  (Heine-1 nil 3459684784
   ("" (skosimp*)
    (("" (expand "uniformly_continuous?")
      (("" (skosimp*)
        (("" (lemma "ball_cover_lem")
          (("" (inst?)
            (("" (inst - "epsilon!1/2" "f!1")
              (("" (expand "compact?")
                (("" (inst?)
                  (("" (assert)
                    (("" (skosimp*)
                      (("" (lemma "prep1")
                        (("" (inst?)
                          (("" (expand "finite_cover?")
                            (("" (flatten)
                              (("" (lemma "get_rs_finite")
                                (("" (inst?)
                                  (("" (assert)
                                    ((""
                                      (inst
                                       +
                                       "min(get_rs(A!1, epsilon!1 / 2, f!1, YS!1))")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "open_cover?")
                                          (("1"
                                            (expand "subset?")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -3 "x!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "Union")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (typepred "a!1")
                                                        (("1"
                                                          (expand
                                                           "ball_cover"
                                                           -1)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (expand
                                                               "rset"
                                                               -1)
                                                              (("1"
                                                                (inst - "x!1")
                                                                (("1"
                                                                  (expand
                                                                   "intersection")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "dt_triangle")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "f!1(x!1)"
                                                                         "f!1(a!2)"
                                                                         "f!1(p!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "dt(f!1(a!2), f!1(p!1)) < epsilon!1/2")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "continuous?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -6
                                                                                     "p!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "continuous_at?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -6
                                                                                         "epsilon!1/2")
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -6
                                                                                             "a!2")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "ball")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "restrict")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "dt_sym"
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -3
                                                                                                           -4)
                                                                                                          (("2"
                                                                                                            (postpone)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "get_rs_not_empty")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (uniform_continuity_sequence 0
  (uniform_continuity_sequence-1 nil 3460211709
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "uniformly_continuous?")
        (("1" (skosimp*)
          (("1" (inst 2 "epsilon!1/2")
            (("1"
              (inst 2
               "(LAMBDA (n: posint): Let pointy = choose({point: [S,S] | A!1(point`1) AND A!1(point`2) AND ds(point`1, point`2) < 1 / n AND
              dt(f!1(point`1), f!1(point`2)) > epsilon!1 / 2}) in pointy)")
              (("1" (assert)
                (("1" (skosimp*)
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (lemma "epsilon_ax[[S,S]]")
                        (("1"
                          (inst - "{point: [S, S] |
                             A!1(point`1) AND
                              A!1(point`2) AND
                               ds(point`1, point`2) < 1 / n!1 AND
                                dt(f!1(point`1), f!1(point`2)) > epsilon!1 / 2}")
                          (("1" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst 3 "1/n!1")
                              (("2" (skosimp*)
                                (("2" (inst + "(x!1,p!1)")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "epsilon_ax[[S,S]]")
                        (("2"
                          (inst - "{point: [S, S] |
                             A!1(point`1) AND
                              A!1(point`2) AND
                               ds(point`1, point`2) < 1 / n!1 AND
                                dt(f!1(point`1), f!1(point`2)) > epsilon!1 / 2}")
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst 3 "1/n!1")
                              (("2" (skosimp*)
                                (("2" (inst + "(x!1,p!1)")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (lemma "epsilon_ax[[S,S]]")
                        (("3"
                          (inst - "{point: [S, S] |
                             A!1(point`1) AND
                              A!1(point`2) AND
                               ds(point`1, point`2) < 1 / n!1 AND
                                dt(f!1(point`1), f!1(point`2)) > epsilon!1 / 2}")
                          (("3" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst 3 "1/n!1")
                              (("2" (skosimp*)
                                (("2" (inst + "(x!1,p!1)")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (expand "member")
                      (("2" (inst + "1/n!1")
                        (("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (typepred "p!1")
                              (("2" (inst - "(x!1,p!1)")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "uniformly_continuous?")
        (("2" (skosimp*)
          (("2" (inst -2 "epsilon!1")
            (("2" (skosimp*)
              (("2" (lemma "archimedean")
                (("2" (inst - "delta!1")
                  (("2" (skosimp*)
                    (("2" (inst - "n!1")
                      (("2" (inst - "seq!1(n!1)`1" "seq!1(n!1)`2")
                        (("1" (prop)
                          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((archimedean formula-decl nil real_props nil)
    (seq!1 skolem-const-decl "[posint -> [S, S]]" uniform_continuity nil)
    (n!1 skolem-const-decl "posnat" uniform_continuity nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uniformly_continuous? const-decl "bool" uniform_continuity nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (epsilon!1 skolem-const-decl "posreal" uniform_continuity nil)
    (f!1 skolem-const-decl "[S -> T]" uniform_continuity nil)
    (dt formal-const-decl "[T, T -> nnreal]" uniform_continuity nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (ds formal-const-decl "[S, S -> nnreal]" uniform_continuity nil)
    (nnreal type-eq-decl nil real_types nil) (< const-decl "bool" reals nil)
    (A!1 skolem-const-decl "set[S]" uniform_continuity nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (choose const-decl "(p)" sets nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (continuous_image_of_compact 0
  (continuous_image_of_compact-1 nil 3465719514
   ("" (skeep)
    (("" (label "acomp" -1)
      (("" (label "cont" -2)
        (("" (label "compim" 1)
          (("" (expand "compact?")
            (("" (skeep)
              (("" (label "xsoc" -3)
                (("" (name "invfun" "(lambda (a: (XS)): inverse_image(f,a))")
                  (("" (label "inffunname" -1)
                    ((""
                      (name "SS"
                            "{ss: set[S] | EXISTS (a: (XS)): ss = invfun(a)}")
                      (("" (label "SSname" -1)
                        (("" (inst - "SS")
                          (("" (split)
                            (("1" (skosimp*)
                              (("1" (label "ysfc" -2)
                                (("1" (expand "finite_cover?" -2)
                                  (("1" (flatten)
                                    (("1" (label "ysfin" -2)
                                      (("1"
                                        (lemma "is_finite_surj[set[S]]")
                                        (("1"
                                          (inst - "YS!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (label "f1surj" -1)
                                                (("1"
                                                  (name
                                                   "aenum"
                                                   "lambda (i: below[N!1]): choose({r: set[T] | XS(r) AND
invfun(r) = f!1(i)})")
                                                  (("1"
                                                    (label "aenumname" -1)
                                                    (("1"
                                                      (name
                                                       "TT"
                                                       "{a: set[T] | EXISTS (i: below[N!1]): a = aenum(i)}")
                                                      (("1"
                                                        (label "TTname" -1)
                                                        (("1"
                                                          (inst + "TT")
                                                          (("1"
                                                            (expand
                                                             "finite_cover?")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 "subset?")
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (replace
                                                                       "TTname"
                                                                       -
                                                                       rl)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (replace
                                                                             "aenumname"
                                                                             -1
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "is_finite_surj[set[T]]")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "TT")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "N!1"
                                                                       "aenum")
                                                                      (("1"
                                                                        (expand
                                                                         "surjective?")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (typepred
                                                                             "y!1")
                                                                            (("1"
                                                                              (replace
                                                                               "TTname"
                                                                               -1
                                                                               rl)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "i!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (replace
                                                                           "TTname"
                                                                           1
                                                                           rl)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               +
                                                                               "x1!1")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "open_cover?")
                                                                (("3"
                                                                  (split)
                                                                  (("1"
                                                                    (expand
                                                                     "subset?")
                                                                    (("1"
                                                                      (expand
                                                                       "member")
                                                                      (("1"
                                                                        (expand
                                                                         "image")
                                                                        (("1"
                                                                          (expand
                                                                           "Union")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (label
                                                                               "x1fx2"
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 "ysfc"
                                                                                 "x!2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "a!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "surjective?"
                                                                                         "f1surj")
                                                                                        (("1"
                                                                                          (inst
                                                                                           "f1surj"
                                                                                           "a!1")
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (replace
                                                                                               "f1surj"
                                                                                               "ysfc"
                                                                                               rl)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "aenum(x!3)")
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "aenum(x!3)")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "invfun"
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "inverse_image")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           "ysfc"
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   "TTname"
                                                                                                   +
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "x!3")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (replace
                                                                       "TTname"
                                                                       -1
                                                                       rl)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (typepred
                                                                             "aenum(i!1)")
                                                                            (("2"
                                                                              (inst
                                                                               "xsoc"
                                                                               "C!1")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (expand "nonempty?")
                                                      (("2"
                                                        (expand "empty?")
                                                        (("2"
                                                          (expand "member")
                                                          (("2"
                                                            (expand
                                                             "subset?"
                                                             "acomp")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (inst
                                                                 "acomp"
                                                                 "f!1(i!1)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     "SSname"
                                                                     "acomp"
                                                                     rl)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "a!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (copy "xsoc")
                              (("2" (hide "xsoc")
                                (("2" (label "xsoc" -1)
                                  (("2" (expand "open_cover?")
                                    (("2" (flatten)
                                      (("2"
                                        (label "xsopen" -2)
                                        (("2"
                                          (split)
                                          (("1"
                                            (expand "subset?")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (expand "image")
                                                (("1"
                                                  (expand "Union")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "f(x!1)")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (typepred "a!1")
                                                            (("1"
                                                              (inst
                                                               +
                                                               "invfun(a!1)")
                                                              (("1"
                                                                (expand
                                                                 "invfun")
                                                                (("1"
                                                                  (expand
                                                                   "inverse_image")
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 "SSname"
                                                                 +
                                                                 rl)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "a!1")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst + "x!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (label "ssc" -1)
                                              (("2"
                                                (replace "SSname" "ssc" rl)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (replace
                                                       "inffunname"
                                                       "ssc"
                                                       rl)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "continuous_open_sets")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "fullset[S]"
                                                             "f")
                                                            (("2"
                                                              (expand
                                                               "continuous?"
                                                               "cont")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "a!1")
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (rewrite
                                                                       "intersection_full")
                                                                      (("1"
                                                                        (lemma
                                                                         "open_in_fullset[S,ds]")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "a!1")
                                                                      (("2"
                                                                        (inst
                                                                         "xsopen"
                                                                         "a!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inverse_image const-decl "set[D]" function_image nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (S formal-nonempty-type-decl nil uniform_continuity nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil uniform_continuity nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (open_cover? const-decl "bool" compactness nil)
    (Union const-decl "set" sets nil)
    (x!3 skolem-const-decl "below[N!1]" uniform_continuity nil)
    (image const-decl "set[R]" function_image nil)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas nil)
    (aenum skolem-const-decl
     "[i: below[N!1] -> ({r: set[T] | XS(r) AND invfun(r) = f!1(i)})]"
     uniform_continuity nil)
    (f!1 skolem-const-decl "[below[N!1] -> (YS!1)]" uniform_continuity nil)
    (YS!1 skolem-const-decl "set[set[S]]" uniform_continuity nil)
    (invfun skolem-const-decl "[(XS) -> set[S]]" uniform_continuity nil)
    (XS skolem-const-decl "set[set[T]]" uniform_continuity nil)
    (TT skolem-const-decl "[set[T] -> boolean]" uniform_continuity nil)
    (N!1 skolem-const-decl "nat" uniform_continuity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (surjective? const-decl "bool" functions nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_cover? const-decl "bool" compactness nil)
    (SS skolem-const-decl "[set[S] -> boolean]" uniform_continuity nil)
    (a!1 skolem-const-decl "(XS)" uniform_continuity nil)
    (x!1 skolem-const-decl "S" uniform_continuity nil)
    (A skolem-const-decl "set[S]" uniform_continuity nil)
    (dt formal-const-decl "[T, T -> nnreal]" uniform_continuity nil)
    (ds formal-const-decl "[S, S -> nnreal]" uniform_continuity nil)
    (nnreal type-eq-decl nil real_types nil)
    (continuous_open_sets formula-decl nil continuity_ms nil)
    (continuous? const-decl "bool" continuity_ms_def nil)
    (open_in_fullset formula-decl nil metric_spaces nil)
    (intersection_full formula-decl nil sets_lemmas nil)
    (fullset const-decl "set" sets nil)
    (compact? const-decl "bool" compactness nil))
   shostak)))


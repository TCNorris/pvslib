(restriction_cont_fun
 (sub_dom 0
  (sub_dom-2 "" 3790089962
   ("" (lemma "sub_domain") (("" (grind) nil nil)) nil)
   ((T2 formal-subtype-decl nil restriction_cont_fun nil)
    (T2_pred const-decl "[real -> boolean]" restriction_cont_fun nil)
    (T1 formal-subtype-decl nil restriction_cont_fun nil)
    (T1_pred const-decl "[real -> boolean]" restriction_cont_fun nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sub_domain formula-decl nil restriction_cont_fun nil))
   shostak)
  (sub_dom-1 nil 3473169490 ("" (lemma "sub_domain") (("" (grind) nil)) nil)
   nil nil))
 (restrict2_TCC1 0
  (restrict2_TCC1-2 "" 3790089962
   ("" (lemma "sub_dom") (("" (propax) nil nil)) nil)
   ((sub_dom formula-decl nil restriction_cont_fun nil)) shostak
   (restrict2 subtype "restriction_cont_fun.u" "T2"))
  (restrict2_TCC1-1 nil 3473169490
   ("" (lemma "sub_dom") (("" (propax) nil)) nil) nil nil
   (restrict2 subtype "restriction_cont_fun.u" "T2")))
 (restrict_cont_fun 0
  (restrict_cont_fun-1 nil 3473169490
   ("" (skosimp)
    (("" (auto-rewrite "sub_dom")
      (("" (expand "continuous?")
        (("" (skosimp*)
          (("" (expand "restrict2")
            (("" (inst?)
              (("" (assert)
                (("" (expand "continuous?")
                  (("" (skosimp*)
                    (("" (inst -1 "epsilon!1")
                      (("" (skolem!)
                        (("" (inst 1 "delta!1")
                          (("" (skosimp)
                            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_dom formula-decl nil restriction_cont_fun nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T2_pred const-decl "[real -> boolean]" restriction_cont_fun nil)
    (T2 formal-subtype-decl nil restriction_cont_fun nil)
    (T1_pred const-decl "[real -> boolean]" restriction_cont_fun nil)
    (T1 formal-subtype-decl nil restriction_cont_fun nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (restrict2 const-decl "[T1 -> real]" restriction_cont_fun nil)
    (continuous? const-decl "bool" continuous_functions nil))
   nil)))


(continuous_functions_more
 (convergence_fun_of 0
  (convergence_fun_of-1 nil 3302272501
   ("" (skosimp*)
    (("" (expand "convergence" 1)
      (("" (skosimp*)
        (("" (rewrite "continuity_def")
          (("" (expand "convergence" -2)
            (("" (expand "fullset")
              (("" (expand "convergence" -2)
                (("" (flatten)
                  (("" (inst -3 "epsilon!1")
                    (("" (skosimp*)
                      (("" (expand "convergence")
                        (("" (inst - "delta!1")
                          (("" (skosimp*)
                            (("" (inst + "n!1")
                              (("" (skosimp*)
                                (("" (inst -3 "cn!1(i!1)")
                                  (("" (inst?) (("" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_sequences nil)
    (continuity_def formula-decl nil continuous_functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" continuous_functions_more nil)
    (T formal-subtype-decl nil continuous_functions_more nil)
    (fullset const-decl "set" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequence type-eq-decl nil sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence const-decl "bool" convergence_functions nil)
    (convergence const-decl "bool" lim_of_functions nil))
   nil)))

